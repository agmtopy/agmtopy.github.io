<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>G1GC的算法与实现之实现篇笔记</title>
      <link href="2023/05/06/20.%E7%AC%94%E8%AE%B0/41.G1GC%E7%9A%84%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%AE%9E%E7%8E%B0%E7%AF%87%E7%AC%94%E8%AE%B0/"/>
      <url>2023/05/06/20.%E7%AC%94%E8%AE%B0/41.G1GC%E7%9A%84%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%AE%9E%E7%8E%B0%E7%AF%87%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>《深入Java虚拟机：JVM G1GC的算法与实现》-实现篇笔记</h1><p>在上一篇文章中我们记录了G1GC的算法包括<B>内存结构</B>、<B>标记位图</B>、<B>SATB本地队列</B>、<B>转移专用记忆集合</B>等关键组成部分,接下我们会对HotSpotVM的具体实现方法进行分析;</p><h2 id="HotSpot的代码结构"><a class="header-anchor" href="#HotSpot的代码结构"></a>HotSpot的代码结构</h2><p>HotSpot的源码位于src/hotspot下,如下所示</p><table><thead><tr><th>文件夹</th><th>说明</th></tr></thead><tbody><tr><td>cpu</td><td>依赖CPU的代码</td></tr><tr><td>os</td><td>依赖操作系统的代码</td></tr><tr><td>os_cpu</td><td>依赖操作系统和CPU的代码</td></tr><tr><td>share</td><td>通用代码</td></tr></tbody></table><p>在share下又划分为以下文件结构</p><table><thead><tr><th>文件夹</th><th>说明</th></tr></thead><tbody><tr><td>ci</td><td>C1编译器</td></tr><tr><td>classfile</td><td>Java类文件的定义</td></tr><tr><td>gc</td><td>GC部分</td></tr><tr><td>interpreter</td><td>Java解释器</td></tr><tr><td>oops</td><td>对象结构的定义</td></tr><tr><td>runtime</td><td>VM运行时所需库</td></tr></tbody></table><p>参考<a href="https://github.com/openjdk/jdk/tree/master/src/hotspot/share">openjdk</a></p><p>HotSpot内部的大部分代码都是继承与以下两个类中的一个:</p><ul><li>CheapObj类</li><li>AllStatic类</li></ul><p>下面对这两个类进行分析:</p><ul><li>CheapObj类</li></ul><blockquote><p>CheapObj类是一个由C的堆内存空间来管理的类,CheapObj类的子类实例都会被分配到C的堆内存上;</p></blockquote><ul><li>AllStatic类</li></ul><blockquote><p>AllStatic类是一个&quot;仅带有静态信息&quot;的特殊类,继承AllStatic的类不需要创建实例;</p></blockquote><p>由于HotSpotVM需要运行于各种操作系统之上.因此,开发者为HotSpotVM设计了一种巧妙的结构(接口),使得它能够通过统一的接口来处理各种操作系统的API;</p><ul><li>os.hpp</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">class os<span class="token operator">:</span> AllStatic <span class="token punctuation">&#123;</span>  friend class VMStructs<span class="token punctuation">;</span>  friend class JVMCIVMStructs<span class="token punctuation">;</span>  friend class MallocTracker<span class="token punctuation">;</span><span class="token comment">//省略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>os类中定义的成员函数在HotSpotVM中都有对应的各种操作系统实现:</p><ol><li>os/posix/vm/os_posix.cpp</li><li>os/linux/vm/os_linux.cpp</li><li>os/windows/vm/os_windows.cpp</li><li>os/solaris/vm/os_solaris.cpp<br>在构建OpenJDK时,hotspot会从以上文件中,选择与当前系统对应的文件进行编译和链接;</li></ol><p>当VM调用os.hpp时,对于操作系统下的实现类就会执行具体方法;</p><ul><li>os_windows.cpp</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#ifdef _DEBUG#include &lt;crtdbg.h&gt;#endif#include &lt;windows.h&gt;#include &lt;sys&#x2F;types.h&gt;#include &lt;sys&#x2F;stat.h&gt;#include &lt;sys&#x2F;timeb.h&gt;#include &lt;objidl.h&gt;#include &lt;shlobj.h&gt;&#x2F;&#x2F;省略....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>os_windows.cpp</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#ifdef _DEBUG#include &lt;crtdbg.h&gt;#endif&#x2F;&#x2F; put OS-includes here# include &lt;sys&#x2F;types.h&gt;# include &lt;sys&#x2F;mman.h&gt;# include &lt;sys&#x2F;stat.h&gt;# include &lt;sys&#x2F;select.h&gt;# include &lt;pthread.h&gt;# include &lt;signal.h&gt;# include &lt;endian.h&gt;# include &lt;errno.h&gt;# include &lt;dlfcn.h&gt;&#x2F;&#x2F;省略....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在不同的实现下引入了不同的<B>.h</B>文件;</p><h2 id="堆结构"><a class="header-anchor" href="#堆结构"></a>堆结构</h2><p>堆结构大体上可以划分为两个部分:</p><ol><li>程序员选择的GC算法所使用的内存空间</li><li>常驻内存空间</li></ol><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/VM%E5%A0%86%E5%88%92%E5%88%86.png?raw=true" alt="VM堆划分"></p><p>常驻内存空间通常是用于分配类型信息或方法信息等永久存在的对象,该空间几乎不会随着GC算法的变化而变化;</p><blockquote><p>在 JDK 8 及之后的版本中，永久代已经被移除，被一个称为元空间（Metaspace）的区域所取代。因此，可以说 JDK 8 及之后的版本中没有永久代这一概念。不过，元空间和永久代的作用类似，都是用于存放类信息等元数据的区域，只不过它们的实现方式和内存模型不同。 元空间和永久代最大的不同在于，元空间使用本地内存（native memory）存储元数据，而不是像永久代一样使用虚拟机内存（Java heap）来存储。这样的好处是可以避免永久代出现的内存溢出问题，因为元空间的大小可以根据需要动态调整，并且可以使用操作系统的内存分配器来管理内存。另外，元空间与永久代相比还有一些其他的不同点，例如元空间可以通过命令行参数来配置大小、元空间的垃圾回收机制与永久代不同等等。但是，从常驻内存空间的角度来说，可以认为元空间已经取代了永久代，成为了 Java 虚拟机中存放类信息等元数据的常驻内存区域。</p></blockquote><p>在JVM中是通过<B>Universe:initialize_heap</B>来实现创建堆内存的功能,如下所示,会根据<B>create_heap()</B>、<B>initialize()</B>方法选择不同的实现;</p><p>!(创建堆内存选择执行类)[<a href="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E5%88%9B%E5%BB%BA%E5%A0%86%E5%86%85%E5%AD%98%E9%80%89%E6%8B%A9%E6%89%A7%E8%A1%8C%E7%B1%BB.png?raw=true">https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/创建堆内存选择执行类.png?raw=true</a>]</p><p>下面详细看一下<B>G1CollectedHeap</B>,其中有三个重要的成员变量:</p><ol><li><B>_hrs</B>:通过数组维护所有的HeapRegion</li><li><B>_young_list</B>:新生代HeapRegion的链表</li><li><B>_free_region_list</B>:空闲HeapRegion的链表</li></ol><blockquote><p>管理各个区域是通过<B>HeapRegion</B>类来实现的,在G1CollectedHeap中为了快速找到每一个HeapRegion,因此用HeapRegionSeq（Heap Region Sequence）是用于表示堆区域（Heap Region）的序列或集合的地址,_hrs就是指向HeapRegionSeq的指针;</p></blockquote><p>!(G1GC堆的结构)[<a href="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC%E5%A0%86%E7%BB%93%E6%9E%84.png?raw=true">https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC堆结构.png?raw=true</a>]</p><h2 id="分配器"><a class="header-anchor" href="#分配器"></a>分配器</h2><h3 id="内存分配的流程"><a class="header-anchor" href="#内存分配的流程"></a>内存分配的流程</h3><p>Vm堆空间申请 -&gt; VM堆空间分配 -&gt; 对象的分配<br>下图展示这个过程</p><p>!(内存分配的流程)[<a href="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E6%B5%81%E7%A8%8B.png?raw=true">https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/内存分配的流程.png?raw=true</a>]</p><p>需要注意的是在Linux上,用于实现内存申请和分配的是<B>mmap()</B>,在Linux中没有申请内存空间的概念,调用mmap()后就会分配内存空间,不过并不是立即分配物理空间,在这这中间还有一层虚拟内存;只有在分配到的内存空间被访问时才会实际发生物理内存分配;</p><h3 id="对象分配的流程"><a class="header-anchor" href="#对象分配的流程"></a>对象分配的流程</h3><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E6%B5%81%E7%A8%8B.jpg?raw=true" alt="对象分配的流程"></p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入Java虚拟机：JVM G1GC的算法与实现》-算法篇笔记</title>
      <link href="2023/04/05/20.%E7%AC%94%E8%AE%B0/40.G1GC%E7%9A%84%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%AE%97%E6%B3%95%E7%AF%87%E7%AC%94%E8%AE%B0/"/>
      <url>2023/04/05/20.%E7%AC%94%E8%AE%B0/40.G1GC%E7%9A%84%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%AE%97%E6%B3%95%E7%AF%87%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>《深入Java虚拟机：JVM G1GC的算法与实现》-算法篇笔记</h1><p>这一篇文章主要是用于记录《深入Java虚拟机：JVM G1GC的算法与实现》一书中<B>算法篇</B>部分的笔记,主要分为引子、并发标记、转移、软实时性、分代G1GC模式;</p><h2 id="G1-GC是什么"><a class="header-anchor" href="#G1-GC是什么"></a>G1 GC是什么?</h2><p>在G1GC之前JVM中存在的垃圾收集器主要是<B>Parallel Scavenge</B>和<B>Parallel Old</B>,在jdk9将G1设置为默认处理器后,截至现在的jdk 20都是默认的垃圾收集器,目前G1GC就是JDK平台跨最多版本的默认垃圾收集器;</p><p>G1GC设计的出发点与之前的GC收集器有明显的不同,之前的不管是串行的Serial还是并发Paraller都是基于<B>吞吐量</B>和<B>缩短最大暂停时间</B>来进行设计的;<br>目前JVM的生态或者说面向的应用还是偏向于Web处理方面的,这一类应用的特点短、快,因此需要具有<B>软实时性</B>和<B>高吞吐量</B>的垃圾收集器;</p><blockquote><p>软实时性指的是处理时间可以超出最后期限,但是超出最后期限的频率很重要.只有超出的频率在用户能够容忍的范围之内,才能称之为&quot;软实时性&quot;<br>举一个栗子: 公司都允许每个考勤周期内迟到2或者3次,公司可以容忍这种情况发生,但是超过规定的次数之后就不能忍受了,这种行为就叫&quot;软实时性&quot;;与之相反的&quot;硬实时性&quot;,例如&quot;职务侵占&quot;公司就一次都不能忍受;</p></blockquote><p>咱们已经了解了为什么需要重头开始设计一个GC算法了,下面就看一下具体的内存结构和算法实现.</p><h3 id="G1GC的内存结构"><a class="header-anchor" href="#G1GC的内存结构"></a>G1GC的内存结构</h3><ul><li>内存布局</li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png?raw=true" alt="G1GC内存布局"></p><p>首先G1GC的内存布局最大的特点是抛弃了内存中对于老年代和年轻代的内存范围划分,而是采用区域(region),默认大小为1MB的形式进行划分.<br>对于region内存的大小用户可以随意设置,但是在内部会将用户设置的值向上调整为2的指数幂(2^n),1000kb-&gt;1024kb;</p><ul><li>对象引用</li></ul><p>这里的对象引用指的不是对象与对象之间的引用,而是在GC查找对象时持有的引用关系,一个典型的栗子就是老年代中引用年轻代存储关系的<B>记忆集</B>;</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC-%E8%B7%A8%E4%BB%A3%E5%BC%95%E7%94%A8.png?raw=true" alt="G1GC 跨代引用布局"></p><ul><li>Card Table</li></ul><blockquote><p>Card Tables and Concurrent Phases  If a garbage collector does not collect the entire heap (an incremental collection), the garbage collector needs to know where there are pointers from the uncollected part of the heap into the part of the heap that is being collected. This is typically for a generational garbage collector in which the uncollected part of the heap is usually the old generation, and the collected part of the heap is the young generation. The data structure for keeping this information (old generation pointers to young generation objects), is a remembered set. A card table is a particular type of remembered set. Java HotSpot VM uses an array of bytes as a card table. Each byte is referred to as a card. A card corresponds to a range of addresses in the heap. Dirtying a card means changing the value of the byte to a dirty value; a dirty value might contain a new pointer from the old generation to the young generation in the address range covered by the card. 如果垃圾收集器不收集整个堆而是进行增量收集，则垃圾收集器需要知道从堆的未收集部分到正在收集的堆部分的指针在哪里。 这通常适用于分代垃圾收集器，其中堆的未收集部分通常是老年代，堆中已收集的部分是新生代。 保存此信息的数据结构（指向年轻代对象的老年代指针）是一个记忆集(RS)。 Card Table是一种特殊类型的记忆集。 Java HotSpot VM 使用字节数组作为卡片表。 每个字节称为一张卡片。 一张卡片对应堆中的一个地址范围。 弄脏一张卡片意味着将字节的值更改为脏值； 一个脏值可能包含一个新的指针，在卡覆盖的地址范围内从老一代到年轻一代。</p></blockquote><p>Card Table是用于简化年轻代收集,类似与一个被老年代持有年轻代对象的索引,在年轻代进行垃圾收集时按图索骥就可以把这些被跨代引用的对象找出来,之后会详细的讲述一下执行过程;</p><h3 id="执行过程"><a class="header-anchor" href="#执行过程"></a>执行过程</h3><p>G1GC底层算法是<B>标记-压缩</B>算法,这样的话它的执行步骤可以划分为两个部分:</p><ol><li>并发标记阶段<br>并发标记阶段主要是在尽量不暂停mutator线程(即访问和修改Manage Object的线程,如所有Java Thread及其Attach到JVM的thread)的情况下标记出存活的对象,而且在标记过程中会记录下每个区域(region)内存活的对象数量;</li><li>转移压缩阶段<br>转移压缩阶段主要是将待回收区域内的存活对象复杂到其他空闲区域中,然后将空闲出来的区域标记为空闲状态,类似于GC算法,但是是以单位进行的;</li></ol><p>需要注意的是<B>并发标记</B>和<B>转移压缩</B>在处理顺序上是没有先后顺序的,并发标记的结果对于转移压缩阶段也不是必须的.</p><hr><p>上面简单的描述了一下G1GC的执行过程,下面我们来详细的看一下<B>并发标记阶段</B>做的事情</p><h2 id="并发标记阶段"><a class="header-anchor" href="#并发标记阶段"></a>并发标记阶段</h2><h3 id="标记位图"><a class="header-anchor" href="#标记位图"></a>标记位图</h3><p>首先解释&quot;并发标记&quot;是在标记什么?</p><blockquote><p>并发标记是在标记所有的存活对象和可以回收的对象,并发标记并不是直接在对象内存上添加标记,而是在<B>标记位图</B>上</p></blockquote><p>标记位图如图所示</p><p><img src="https://github.com/agmtopy/noteBook/blob/74172d16f52935f2a49645d6f14132e0b6d966f5/png/j-jvm/%E6%A0%87%E8%AE%B0%E4%BD%8D%E5%9B%BE.png?raw=true" alt="标记位图"></p><p>标记位图是对<B>region</B>中分配的对象进行一个类似于索引标记的数据结构,每个bit位对应一个对象,默认最小的对象为8字节,0代表活动对象;</p><p>每个region都有两个<B>标记位图</B>分别是nextBitMap和prevBitMap用于保存本次的位图和上一次的位图;</p><p>由于在并发标记阶段Mutator线程可以继续分配对象或者yuang GC,会破坏已经进行过标记的内存区域,因此需要用4个标记位来确定,分别是<B>bottom</B>、<B>TOP</B>、<B>prevTAMS</B>、<B>nextTAMS</B></p><p>bottom-TOP范围表示的开始标记前的某个区域的底部和顶部<br>TAMS(Top-at-Mark-Start,标记开始时的top)，prevTAMS和nextTAMS即上/下一次的标记的top</p><p>nextTAMS-TOP范围表示就就是标记过程中新产生的对象所占用的区域</p><h3 id="执行步骤"><a class="header-anchor" href="#执行步骤"></a>执行步骤</h3><p>并发标记过程包括以下5个步骤:</p><ol><li>初始标记阶段</li><li>并发标记阶段</li><li>最终标记阶段</li><li>存活对象计数阶段</li><li>收尾阶段</li></ol><h4 id="初始标记阶段"><a class="header-anchor" href="#初始标记阶段"></a>初始标记阶段</h4><ol><li>创建标记位图<blockquote><p>在初始化阶段,GC线程会首先创建Next MarkBitmap</p></blockquote></li><li>对GC Root可达对象进行扫描和标记,为了防止GC Root对象变化,<B>Mutator是暂停执行的</B>,这里需要注意的是初始标记阶段有且只会对GC Root的可达对象进行标记</li></ol><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC_%E5%88%9D%E5%A7%8B%E6%A0%87%E8%AE%B0%E9%98%B6%E6%AE%B5.png?raw=true" alt="初始标记阶段结果"></p><h4 id="并发标记阶段-v2"><a class="header-anchor" href="#并发标记阶段-v2"></a>并发标记阶段</h4><blockquote><p>并发标记阶段,GC线程会继续扫描在初始化阶段被标记过的对象,分析它们的引用关系,完成大部分存活对象的标记</p></blockquote><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC_%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E9%98%B6%E6%AE%B5.png?raw=true" alt="并发标记阶段结果"></p><p>在并发标记阶段GC线程和Mutator线程是并发执行的,那么是如何解决<B>标记遗漏</B>问题的楠?</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC_%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E9%98%B6%E6%AE%B5_%E6%A0%87%E8%AE%B0%E9%81%97%E6%BC%8F.png?raw=true" alt="标记遗漏"></p><p>首先说一下<B>标记遗漏</B>产生的原因,从上图中可以看到我们的GC线程已经标记到第二层对象,这个时候Mutator线程将Obj1-Obj3直接的引用关系去除,并且GCRoot-Obj3产生新的引用关系,由于Obj1标记完成后已经没有下属的任何引用那么就不会在标记Obj3,就发生了标记遗漏,可以看到发生标记遗漏的两个条件:</p><ul><li>新产生一条或多条从黑色对象(已标记对象)到白色对象(未标记对象)的新引用;</li><li>删除灰色对象(正在标记对象)到白色对象的引用关系;</li></ul><p>那么解决标记遗漏的问题就在于对这两个关系的破坏或者记录:</p><blockquote><p>在CMS中采用的是增量更新(Incremental Update)方案,破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次;</p></blockquote><blockquote><p>在G1GC中采用的是原始快照(Snapshot At The Beginning,SATB)方案,破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次;</p></blockquote><p>这里重新扫描的是灰色对象,然后是在快照中扫描,快照指的是GC在开始时对象之间的引用关系,这里会产生一个问题,将本来已经可以进行回收的对象标记为活动的,系统设计上应该是要保证没有漏掉的对象,防止不能回收掉这些内存.</p><p>G1GC采用的是<B>写屏障</B>技术来记录对象之间引用关系的变化,对于新分配的对象直接认为这部分对象是已经标记完成;</p><h4 id="最终标记阶段"><a class="header-anchor" href="#最终标记阶段"></a>最终标记阶段</h4><p>最终标记阶段是对<B>SATB本地队列</B>进行扫描,因为在并发标记介绍以后本地的SATB队列容量可能不满,不会刷新到全局SATB队列中,因此需要全局暂停来处理这些&quot;残留的SATB本地队列&quot;;</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E5%85%A8%E5%B1%80SATB%E7%BB%93%E6%9E%84.png?raw=true" alt="全局SATB与局部SATB之间的关系"></p><p>最终标记处理的就是上图中mutator1线程和mutator2线程对于的局部SATB队列;</p><h4 id="存活对象计数阶段"><a class="header-anchor" href="#存活对象计数阶段"></a>存活对象计数阶段</h4><p>通过上面三个标记步骤(初始、并发、最终)将本次GC需要进行内存收集的对象标记出来了,这个时候就需要扫描各个区域的<B>next标记位图</B>,统计各个区域内存活对象的字节数目;<br>这个计数步骤可以和mutator是并发执行的,但是不能和转移线程(Remembered set)线程并行执行,因为如果并行执行会破坏region内的计数正确性;</p><h4 id="收尾阶段"><a class="header-anchor" href="#收尾阶段"></a>收尾阶段</h4><p>在上面两个步骤(标记、计数)中我们已经得到GC所需的最重要的两个信息:</p><ol><li>标记完成后存活对象和死亡对象之间的区分(标记位图)</li><li>存活对象的内存占用(内存占用字节数量)</li></ol><p>有上面俩组数据之后,才能进行</p><ul><li>转移压缩</li></ul><p>转移压缩过程中涉及到一个比较重要的概念<B>转移效率</B>,指的是&quot;死亡对象的字节数 % 转移所需时间&quot;,换句话说,转移效率指的是<B>转移1个字节所需时间</B>;</p><p>这里的转移指的是是对于存活对象转移的耗时,因为在一个需要对象回收比较多的region区域内,只需要将少量的存活对象转移出去,这块region就可以进行回收了;</p><p>通过<B>历史转移效率</B>的数据,就可以尝试预测下次内存需要进行回收的时间;</p><h4 id="小结"><a class="header-anchor" href="#小结"></a>小结</h4><p>在标记阶段主要是通过两种数据结构<B>标记位图</B>、<B>SATB</B>来实现对region的标识和计数,流程上分为:</p><ol><li>初始标记阶段 -&gt; GCRoot出发</li><li>并发标记阶段 -&gt; 上一步中散发的引用的对象</li><li>最终标记阶段 -&gt; 标记局部SATB中的对象</li><li>计数/收尾阶段 -&gt; 计数统计和转移</li></ol><p>对局部SATB的操作使用的是前置写屏障技术来实现的;</p><p>下面详细用一节来介绍一下转移的具体过程;</p><h2 id="GC的转移功能"><a class="header-anchor" href="#GC的转移功能"></a>GC的转移功能</h2><h3 id="转移的先决条件"><a class="header-anchor" href="#转移的先决条件"></a>转移的先决条件</h3><p>首先说一下为什么需要转移,由于内存特性会出现碎片化,因此需要对内存进行整理,才能继续分配对象,整理这个步骤具体的操作就是通过转移来实现的;</p><p>转移功能是通过具体的<B>转移专用记忆集合</B>来快速索引对象的,记录的是区域与区域之间的对象间的引用关系;通过使用转移专用记忆集合,在转移时即使不扫描所有区域内的对象,也可以查询到待转移对象<br>所在区域被其他区域引用的情况,从而简化单个区域回收的转移处理步骤;</p><blockquote><p>G1GC是通过卡表(card table)来进行实现转移专用记忆集合的元素的;</p></blockquote><p>在上图&quot;G1GC 跨代引用布局&quot;图列中的<B>Remembered Set</B>就是<B>转移专用记忆集合</B>,记录的元素就是card table的元素地址,如下所示</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E8%BD%AC%E7%A7%BB%E4%B8%93%E7%94%A8%E8%AE%B0%E5%BF%86%E9%9B%86%E5%90%88%E7%9A%84%E6%9E%84%E9%80%A0.png?raw=true" alt="转移专用记忆集合"></p><blockquote><p>每个区域都有一个<B>转移专业记忆集合</B>,它是通过hash列表实现的,key为引用本区域的其他区域地址,value为一个数组,元素是引用区域对应的<B>卡表</B>中的元素;<br>通过RS和Card Table这样的数据结构,在进行跨代引用对象的转移时可以快速的根据数据来进行查找;</p></blockquote><p>RS的写入是由专用的<B>转移专用记忆集合维护线程</B>来进行维护的,可以和mutator线程并发执行;</p><h3 id="转移的执行步骤"><a class="header-anchor" href="#转移的执行步骤"></a>转移的执行步骤</h3><p>转移的执行步骤可以分为以下三个:</p><ol><li><p>选择回收集合<br>指的是根据上述标记阶段得到的信息来选择被转移的区域.被选中的区域被称为<B>回收集合</B>;</p></li><li><p>根转移<br>指的是将回收集合中的由GC Root对象直接引用的对象和被其他区域引用的对象转移到其他空间中;</p></li><li><p>转移<br>指的是以2步骤中转移的对象作为起点扫描其子孙对象,然后将这些对象转移到其他空间中;</p></li></ol><h4 id="选择回收集合"><a class="header-anchor" href="#选择回收集合"></a>选择回收集合</h4><p>这个步骤是G1GC算法的核心部分,在选择需要进行回收的集合时,是按照两个原则来进行选择:</p><ul><li><B>转移效率高</B>的区域优先</li><li>整体区域转移预测的暂停时间需要在用户的容忍范围之内</li></ul><p>在标记的最后一个步骤<B>收尾阶段</B>中我们介绍了什么是<B>转移效率</B>的概念,简单的理解就是存活的对象越少,这个region的转移效率就越高;<br>然后根据转移效率对所有region进行排序,就可以得到一个region数组;<br>每一个region都有一个预测的转移暂停时间,G1GC在选择本次的<B>回收集合</B>就是从region数据从上到下依次累积预测暂停时间,直到大于等于用户的容忍时间阀值,这个子集就是<br>本次需要进行回收的集合;</p><blockquote><p>G1GC中的G1是Garbage First的简称,翻译成中文指的是&quot;垃圾优先的垃圾回收&quot;算法,而<B>转移效率从高到低的顺序</B>就是垃圾优先的具体实现方法;</p></blockquote><h4 id="根转移步骤"><a class="header-anchor" href="#根转移步骤"></a>根转移步骤</h4><p><B>根转移</B>指的是将对象或者引用转移到其他区域,包括三类数据:</p><ol><li>由根直接引用的对象</li><li>并发标记处理中的对象</li><li>由其他区域对象直接引用的回收集合内的对象</li></ol><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC-%E5%AF%B9%E8%B1%A1%E8%BD%AC%E7%A7%BB.png?raw=true" alt="对象转移"></p><p>对象转移分为三类:</p><ol><li>对于引用到回收集合内的对象,将该对象添加到<B>转移队列</B>中,然后进行回收;</li><li>对于引用到回收集合外的对象,将更新其他对象的转移专用记忆集合;</li><li>对于其他对象引用到回收对象时,更新回收对象的转移专用记忆集合;</li></ol><h4 id="转移"><a class="header-anchor" href="#转移"></a>转移</h4><blockquote><p>在完成根转移之后,哪些被转移队列引用的对象将会<B>依次进行转移</B>.直到转移队列都被清空,转移就全部完成了;至此,回收集合内所有存活的对象都被成功转移到存活区域了;</p></blockquote><h4 id="小结-v2"><a class="header-anchor" href="#小结-v2"></a>小结</h4><p>在<B>转移阶段</B>是整个G1GC最核心的思想实现,一个是&quot;垃圾优先的垃圾回收&quot;算法的实现,一个是&quot;根对象转移算法&quot;的实现;</p><h2 id="软实时性"><a class="header-anchor" href="#软实时性"></a>软实时性</h2><p>G1GC是如何实现软实时性的?</p><p>在G1GC中用户可以设置以下三个值:</p><ol><li><p>可用内存的上限<br>通过Xmn/xmx来指定堆空间最小/最大值,避免内存被过度占用,Xmn不建议使用,这个值会破坏我们对于暂停时间上限的配置</p></li><li><p>G1GC暂停时间上限<br>使用-XX:MaxGCPauseMillis=200 为所需的最大暂停时间设置目标值,默认值为 200 毫秒.这里有一个前提是在一个GC单位时间内的暂停时间上限;</p></li><li><p>GC单位时间<br>对于GC单位时间的配置,没有找到相关资料,但是肯定是有这个概念的;避免通过频繁的GC来达到暂停时间少的目的;</p></li></ol><p>G1GC是根据<B>预测转移时间</B>和<B>预测可信度</B>这两个计算结果来实现软实时性的;</p><blockquote><p>在G1GC内部有一个<B>调度队列</B>,其中的元素是暂停处理的开始时间和结束时间的组合.G1GC使用这个队列来高效的调度GC的暂停任务.调度队列中保存了最近一次<br>暂停处理的开始时间和介绍时间.调度队列中的元素有上限,如果添加元素时超过上限,队列头部最早添加的元素就会被删除;</p></blockquote><p>如下展示一下<B>GC暂停处理的调度过程</B></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/G1GC-%E6%9A%82%E5%81%9C%E5%A4%84%E7%90%86%E7%9A%84%E8%B0%83%E5%BA%A6%E6%B5%81%E7%A8%8B.png?raw=true" alt="GC暂停处理的调度过程"></p><p>图中<B>1</B>表示的是在当前时间开始预测下一次发生GC的暂停时间为X,第2步表示如果此时开始GC,在一个GC的单位时间之内会超过设定的GC暂停时间的上限,因此不进行暂停;<br>在第3步中,如果将暂停时间延迟,在GC的单位时间内不会超过设定的GC暂停时间上限;<br>需要注意的是<B>调度程序会保证在任意截取的GC单位时间内,总的GC暂停时间都不会超过用户设置的GC暂停时间上限</B>,当然在某些特殊情况下也会超出设置的暂停时间上限,这就是G1GC所保证的&quot;乱实时性&quot;,这些特殊情况包括但是不限于&quot;GC的预测时间不准确&quot;和&quot;堆内存空间不足&quot;等;</p><h2 id="分代G1GC模式"><a class="header-anchor" href="#分代G1GC模式"></a>分代G1GC模式</h2><p>在上述的<B>并发标记阶段</B>、<B>转移阶段</B>都是介绍的G1GC的进行GC时的算法和实现,在G1GC的实现中是引入了<B>分代</B>的概念的,下面来介绍一下G1GC的分代;</p><h3 id="为什么要进行分代"><a class="header-anchor" href="#为什么要进行分代"></a>为什么要进行分代?</h3><blockquote><p>分代:通过给对象引入&quot;年龄&quot;的做法来标记对象的重要程度,从而提升GC的效率;</p></blockquote><h3 id="GC模式划分"><a class="header-anchor" href="#GC模式划分"></a>GC模式划分</h3><ul><li>纯G1GC模式</li><li>分代G1GC模式</li></ul><p>两者之间的不同点:</p><p>内存划分的不同:</p><ul><li>区域是分代的</li><li>回收集合的选择是分代的</li></ul><blockquote><p>在分代G1GC模式中,区域会被划分成<B>新生代区域</B>和<B>老年代区域</B>两类;和其他分代算法类似,分代G1GC的对象也保存了自身在各次转移中存活下来的次数.新生代区域存放新生代对象,老年代区域存放老年代对象;</p></blockquote><p>在G1GC中新生代区域GC被称为<B>完全新生代GC</B>,老年代区域GC被称为部分新生代GC,他们之间的区别在于回收集合的选择,完全新生代GC是将<B>所有的新生代区域</B>选入回收集合,部分新生代GC是将<B>所有的新生代区域以及一部分老年代区域</B>选入回收集合中;</p><p>回收方式的不同:</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E6%96%B0%E7%94%9F%E4%BB%A3GC%E7%9A%84%E8%BF%87%E7%A8%8B.jpg?raw=false" alt="新生代GC的过程"></p><p>从上图中可以看到部分新生代GC会将一部分老年代区域中的对象进行回收;</p><h3 id="新生代区域"><a class="header-anchor" href="#新生代区域"></a>新生代区域</h3><p>新生代区域会被划分成两类:</p><ul><li>创建区域</li><li>存活区域</li></ul><p>创建区域指的是用于存放刚刚生成一次都没有经历过转移的对象,存活区域用来保存至少转移过一次的对象;</p><p>在新生代区域中不会应用<B>转移转移写屏障</B>,因为新生代中的对象都是会被回收的,因此被引用方不会保存新生代的专用写屏障;</p><h2 id="算法篇的总结"><a class="header-anchor" href="#算法篇的总结"></a>算法篇的总结</h2><p><img src="https://raw.githubusercontent.com/agmtopy/noteBook/master/png/j-jvm/mutator%E5%92%8CGC%E7%9A%84%E6%89%A7%E8%A1%8C%E5%85%B3%E7%B3%BB.png" alt="mutator和GC的执行关系"></p><p>在大多数时候转移专用记忆集维护线程都是和mutator并发执行的,但是在GC的存活对象计数阶段记忆维护线程也是暂停的.888888</p><p>G1GC的优点:</p><ol><li>G1GC具备软实时性,可以由用户控制GC的暂停时间</li><li>能够充分发挥高配置机器的性能,做到并发执行</li><li>通过写屏障将处理粒度调整为更粗维度的卡片粒度,从而降低了写屏障发生的频率</li><li>通过对象的转移,实现了区域内没有内存碎片</li></ol><p>G1GC的缺点:</p><ol><li>适用与多核处理器的设备;</li><li>区域内不会出现碎片化,但是整个堆会按照区域出现碎片化;</li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><ul><li>《深入Java虚拟机：JVM G1GC的算法与实现》中村成洋(作者) 吴炎昌,杨文轩 (译者)</li><li>《垃圾回收的算法与实现》中村成洋,相川光,竹内郁雄 (作者) 丁灵 (译者)<br><a href="https://wiki.openjdk.org/display/HotSpot/G1GC+Feedback">G1GC Feedback</a><br><a href="https://www.huminxi.com/2022/07/06/java%208%20vs%20java%2017%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/">Java 8 vs Java 17 垃圾收集器</a><br><a href="https://www.bilibili.com/video/BV15B4y1972U/">G1GC最初的设计思路（上）</a><br><a href="https://developer.aliyun.com/article/1097566">JVM垃圾回收-记忆集和卡表</a><br><a href="https://zhuanlan.zhihu.com/p/444691935">图解 Remembered Set、Card Table、Write Barrier</a><br><a href="https://tech.meituan.com/2016/09/23/g1.html">Java Hotspot G1 GC的一些关键技术</a><br><a href="https://docs.oracle.com/en/java/javase/18/gctuning/garbage-first-g1-garbage-collector1.html#GUID-58968F63-9EAF-487E-A884-CF0831EA6D31">HotSpot Virtual Machine Garbage Collection Tuning Guide</a><br><a href="https://zhuanlan.zhihu.com/p/115501055">Java Memory：认识SafeRegion</a><br><a href="https://tschatzl.github.io/2022/08/04/concurrent-marking.html">Concurrent Marking in G1</a><br><a href="http://www.noobyard.com/article/p-smfxguqn-od.html">最清晰易懂的G1GC资料</a><br><a href="https://segmentfault.com/a/1190000039300766">SATB的一些理解</a><br><a href="https://www.zhihu.com/question/456166411">G1并发标记的原始快照（SATB）的过程是怎样的？</a><br><a href="https://www.jfokus.se/jfokus17/preso/Write-Barriers-in-Garbage-First-Garbage-Collector.pdf">Write Barriers in Garbage First Garbage Collector</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java性能权威指南-性能测试的方法和工具</title>
      <link href="2023/03/24/20.%E7%AC%94%E8%AE%B0/30.Java%E6%80%A7%E8%83%BD%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2023/03/24/20.%E7%AC%94%E8%AE%B0/30.Java%E6%80%A7%E8%83%BD%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1>Java性能权威指南-性能测试的方法和工具</h1><h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2><p>记录在阅读《Java性能权威指南》过程中的一些笔记和感悟,主要会分为一下几个部分:性能测试方式方法、影响性能的原因、如何进行调优;下面第一部分就是对<B>性能测试方式方法</B>进行分析</p><h2 id="性能测试的四项原则"><a class="header-anchor" href="#性能测试的四项原则"></a>性能测试的四项原则</h2><p>当一个应用出现性能瓶颈或者性能方面的问题时，往往不能一眼发现问题的根源，会从多个方向去猜测原因,毫无头绪，因此对应用进行性能测试是了解当前阀值的一个好方法;</p><p>性能测试时有几项原则，可以更好的帮助我们进行分析</p><ol><li>测试真实的应用</li></ol><p>在真实的应用上进行性能测试,因为如果你的测试目标和真实的应用不是同一个时,很多影响性能的因素会导致判断错误;</p><ol start="2"><li>理解批处理流逝时间、吞吐量和响应时间</li></ol><ul><li>批处理流逝时间指的是<B>一个批处理作业从开始运行到结束的时间间隔</B></li><li>吞吐量指的是单位时间内完成的工作量,常见的指标有:TPS(事务数/1s)、RPS(请求数/1s)、OPS(操作数/1s)</li></ul><ol start="3"><li><p>用统计方法应对性能的变化<br>在小样本的数据下结果会存在较大的差异,因此要采用大量的数据集来消除这种差异;</p></li><li><p>尽早的开始测试<br>这一点对于性能测试来说个人不太认同,尽早的开始测试应该是对应用代码进行测试,来保证业务上的正确性;</p></li></ol><h2 id="性能测试的种类"><a class="header-anchor" href="#性能测试的种类"></a>性能测试的种类:</h2><ol><li>微基准测试</li></ol><blockquote><p>用来测量微小代码单元的性能<br>主要是用于测试代码片段的性能,有两个问题:测试代码复杂/对于性能准确性会因为偏差造成不准</p></blockquote><ol start="2"><li>宏基准测试</li></ol><blockquote><p>宏基准测试是以真实世界中的业务为测试目标来进行测试的一种方法，是用于评估系统的整体性能;</p></blockquote><ol start="3"><li>介基准测试</li></ol><blockquote><p>介基准测试是微基准测试和宏基准测试之间的测试方法,是用于评估组成真实业务规则中的一系列子方法;</p></blockquote><h2 id=""><a class="header-anchor" href="#"></a></h2>]]></content>
      
      
      <categories>
          
          <category> 性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cola4.0的工程实践</title>
      <link href="2022/12/24/1.%E6%9D%82%E8%AE%B0/Cola4.0%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
      <url>2022/12/24/1.%E6%9D%82%E8%AE%B0/Cola4.0%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1>Cola4.0的工程实践</h1><p>cola在今年迎来了4.0版本,在最新的版本中对<B>包结构</B>进行了调整以及将COLA项目整体划分为两个部分<B>COLA架构</B>和<B>COLA组件</B>;<br>下面先简单的介绍COLA的改变,再介绍CLOA4.0的工程实践</p><h2 id="COLA的改变"><a class="header-anchor" href="#COLA的改变"></a>COLA的改变</h2><p>COLA4.0的改变主要是聚焦与COLA架构和COLA组件两个部分:</p><ol><li>COLA架构：关注应用架构的定义和构建，提升应用质量。</li><li>COLA组件：提供应用开发所需要的可复用组件，提升研发效率。<br>作者Frank画了两张图很好的表现出来</li></ol><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/cola/COLA4.0%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B.png?raw=true" alt="COLA4.0分层模型"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/cola/COLA%E6%9E%B6%E6%9E%84%E6%8A%BD%E8%B1%A1.png?raw=true" alt="COLA架构抽象"></p><h2 id="COLA-4-0d的实践"><a class="header-anchor" href="#COLA-4-0d的实践"></a>COLA 4.0d的实践</h2><h3 id="创建项目"><a class="header-anchor" href="#创建项目"></a>创建项目</h3><p>创建项目命令与之前的相同还是执行以下命令即可:</p><blockquote><p>mvn archetype:generate  -DgroupId=com.agmtopy.demo  -DartifactId=cola-demo  -Dversion=1.0.0-SNAPSHOT  -Dpackage=com.agmtopy.demo  -DarchetypeArtifactId=cola-framework-archetype-web  -DarchetypeGroupId=com.alibaba.cola  -DarchetypeVersion=4.3.1</p></blockquote><p>稍微注意修改 #groupId#/#artifactId#/#package#;<br>这个命令在PowerShell不能执行,参数传递错误,需要在CMD或者shell下执行</p><p>创建完成项目后可以看到项目目录如下:</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/cola/cola%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84_pom.jpg?raw=true" alt="cola项目结构_maven"></p><p>使用<B>gradle init</B>将maven转换成gradle项目</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/cola/cola%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84_gradle.jpg?raw=true" alt="cola项目结构_gradle"></p><p>在maven项目转换成gradle项目时遇到几个问题:</p><ol><li>gradle ext定义常量在使用kotlin定义时,方式为<B>val</B></li><li>主build.gradle.kts引入BOM,子项目使用组件版本问题未解决,现在还是通过在子项目中直接引入的目标组件</li></ol><p>项目build成功后,通过<B>Application.main</B>启动即可访问</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/cola/cola_helloworld.jpg?raw=true" alt="cola_helloworld"></p><h3 id="项目结构"><a class="header-anchor" href="#项目结构"></a>项目结构</h3><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/cola/cola%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84_gradle.jpg?raw=true" alt="cola项目结构_gradle"></p><p>通过<B>cola-framework-archetype-web</B>创建出来的项目结构如上所示,这个结构比较符合标准项目的定义;<br>在实际使用中结合目前团队现有方案我进行了部分调整,调整后的结构如下所示</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/cola/cola%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5.png?raw=true" alt="项目实践"></p><pre class="line-numbers language-none"><code class="language-none">├‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧integrationtest‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧┤├╌╌╌╌╌╌╌╌╌api&#x2F;app╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌batch╌╌╌╌╌╌╌╌╌╌╌╌╌┤                           ├╌╌╌╌╌╌╌╌╌╌joblay╌╌╌╌╌╌╌╌╌╌╌╌┤├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌business&#x2F;configure╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌domain╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌infrastructure&#x2F;common╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个结构中调整的地方如下:<br>新增:<B>integrationtest</B>作为通用测试的模块<br>新增:<B>configure</B>作为业务配置的模块,专门处理业务配置<br>改变:<B>adapter</B>模块扩充为<B>api/app/batch</B>三个模块,其中app和batch作为实例的启动入口<br>改变:<B>app</B>模块扩充为<B>joblay/business/configure</B>三个模块,作为业务处理<br>改变:<B>infrastructure</B>层新增加<B>common</B>模块,承载通用处理和工具类的职能<br>删除:删除<B>start</B>模块,将启动模块下沉到<B>app</B>和<B>batch</B>中</p><p>在这个模块设计中<B>joblay</B>存在的意义是用来实现批量业务领域内的功能;由于<B>app</B>和<B>batch</B>都只是承担start的功能;</p><p>项目地址为<B><a href="https://github.com/agmtopy/cola-demo">https://github.com/agmtopy/cola-demo</a></B></p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/significantfrank/article/details/110934799?spm=1001.2014.3001.5502">COLA 4.0：应用架构的最佳实践</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cola </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groowy脚本实现业务场景下动态性规则的实践</title>
      <link href="2022/12/16/1.%E6%9D%82%E8%AE%B0/Groowy%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E4%B8%8B%E5%8A%A8%E6%80%81%E6%80%A7%E8%A7%84%E5%88%99%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
      <url>2022/12/16/1.%E6%9D%82%E8%AE%B0/Groowy%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E4%B8%8B%E5%8A%A8%E6%80%81%E6%80%A7%E8%A7%84%E5%88%99%E7%9A%84%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1>Groowy脚本实现业务场景下动态性规则的实践</h1><h2 id="前言："><a class="header-anchor" href="#前言："></a>前言：</h2><p>在复杂的业务中我们往往会采用分层的思想来降低每一层的复杂度，应用层还会采用一些设计模式来预留出对于未来的扩展；在面对<br>复杂和易变的业务场景下，作为开发者，我们更期望程序框架底座能够保持稳定，而对”<B>扩展</B>”更期望可以做到能快速响应业务需求的变化和做到隔离性；<br>由于程序语言的特性，有些语言不能做到实时热编译和部署，需要借助其他工具来实现这一个效果，在jvm平台上Groovy脚本语言就非常适合这种场景。<br>接下来以一个具体的业务需求来作为“引子”，来展开是这个需求实现过程中的一些思考和实践;</p><h2 id="需求背景"><a class="header-anchor" href="#需求背景"></a>需求背景</h2><p>原始需求简化后得出的核心目标就是对业务数据进行巡检,本身从功能上来讲比较简单;在系统设计出发的时候就明确了本次的功能目标:</p><ol><li>向上会抽象出<B>巡检功能</B>的核心领域,并且支持扩展</li><li>向下会设计出基础设施层来作为支撑</li></ol><p>向上这一部分工作开展的比较顺利,因为是基于现实诉求抽象公共特性/接口;但是向下这一部分设计在落地的时候遇到一些问题,有三个阶段分别是:</p><ol><li>采用手动编译java代码</li><li>采用开源框架编译加载java代码</li><li>使用Groovy动态脚本</li></ol><h3 id="设计评审"><a class="header-anchor" href="#设计评审"></a>设计评审</h3><p>在实现这个需求的时候,做技术方案设计评审的时候,我提供了两种实现基础设施层的技术方案:<br>第一种是通过easy-rules提供出一个一个散列开的业务校验规则执行器,这样做的优点是在于技术成本最低,且代码可读性好,但是没有动态编译执行的能力<br>第二种是通过引入动态语言实现,这样做的优点是程序具有动态编译执行的能力,缺点是在于技术成本略高,Groovy脚本语言需要一定的学习成本</p><p>最后的技术评审经过大家的沟通交流最后决定采用第一种方案来进行实现;</p><h3 id="方案实施"><a class="header-anchor" href="#方案实施"></a>方案实施</h3><p>在按照第一种方案进行实施的时候,遇到一个问题,代码的重复度太高;因为业务需求的本质就只是<B>对比</B>,因此最开始想采用反射来降低代码的重复度,将需要检查的字段放在Map进行处理;<br>在继续沿着这方面思考,就想到了既然是用Map来获取校验规则,那可不可以将校验规则写入配置中心或者数据库,再进行动态加载楠;<br>沿着这个思路开始查找java文件进行动态编译的框架<a href="https://github.com/jOOQ/jOOR">joor</a>,在进行快速验证的时候发现joor可以做到对java文件的动态编译,但是在JDK8上有部分编译错误无法实现业务的扩展性;<br>这个时候似乎只有一种选择了,就是采用<B>Groovy</B>来进行实现</p><h2 id="Groovy使用"><a class="header-anchor" href="#Groovy使用"></a>Groovy使用</h2><h3 id="整体执行流程"><a class="header-anchor" href="#整体执行流程"></a>整体执行流程</h3><p><img src="https://github.com/agmtopy/noteBook/blob/master/excalidraw/Untitled-2022-09-08-1533.png?raw=true" alt="整体执行流程"></p><p>在流程中抽象的比较方法是作为所有动态脚本的父类,默认采用了反射的反射来或者Object中指定的字段</p><h3 id="DynamicUtil的设计"><a class="header-anchor" href="#DynamicUtil的设计"></a>DynamicUtil的设计</h3><p>从四个问题开始入手:</p><ol><li>如何简化Groovy的学习成本,从而推广出去?</li><li>如何保证性能?</li><li>如何保证动态脚本的安全性?</li><li>如何保证动态脚本的代码质量(动态脚本的单元测试如何进行)?</li></ol><h4 id="对于如何简化Groovy的学习成本"><a class="header-anchor" href="#对于如何简化Groovy的学习成本"></a>对于如何简化Groovy的学习成本?</h4><p>项目初期可以采用<B>GroovyClassLoader</B>来执行<B>Java脚本</B></p><ul><li>DynamicUtil</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GroovyClassLoader</span> groovyClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> helloScript <span class="token operator">=</span> <span class="token string">"package com.agmtopy.source.groovy;\n"</span> <span class="token operator">+</span>                <span class="token string">"\n"</span> <span class="token operator">+</span>                <span class="token string">"class Hello &#123;\n"</span> <span class="token operator">+</span>                <span class="token string">"    public String method(String name) &#123;\n"</span> <span class="token operator">+</span>                <span class="token string">"        System.out.println(\"hello, \" + name);\n"</span> <span class="token operator">+</span>                <span class="token string">"        return name;\n"</span> <span class="token operator">+</span>                <span class="token string">"    &#125;\n"</span> <span class="token operator">+</span>                <span class="token string">"&#125;\n"</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> helloClass <span class="token operator">=</span> groovyClassLoader<span class="token punctuation">.</span><span class="token function">parseClass</span><span class="token punctuation">(</span>helloScript<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GroovyObject</span> object <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GroovyObject</span><span class="token punctuation">)</span> helloClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> ret <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制台输出"hello, world"</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印world</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Hello.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>agmtopy<span class="token punctuation">.</span>source<span class="token punctuation">.</span>groovy</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在上面这个例子中,我们执行的脚本就是java语法规则的脚本;这样如何简化Groovy脚本的问题就可以得到解决;<br>在整个执行框架稳定以后,还是需要推广Groovy脚本,java语法的脚本只是一个中间过渡方案!</p><h4 id="如何保证脚本的执行性能"><a class="header-anchor" href="#如何保证脚本的执行性能"></a>如何保证脚本的执行性能?</h4><p>这里的性能指的是两方面:<B>编译</B>和<B>执行</B>,我们先来看Groovy是如何编译脚本的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">parseClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">GroovyCodeSource</span> codeSource<span class="token punctuation">,</span> <span class="token keyword">boolean</span> shouldCacheSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CompilationFailedException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取cacheKey:scriptTest+name 进行MD5</span>    <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> <span class="token function">genSourceCacheKey</span><span class="token punctuation">(</span>codeSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//sourceCache是一个类似与Map类型的类</span>    <span class="token keyword">return</span> sourceCache<span class="token punctuation">.</span><span class="token function">getAndPut</span><span class="token punctuation">(</span>            cacheKey<span class="token punctuation">,</span>            key <span class="token operator">-></span> <span class="token function">doParseClass</span><span class="token punctuation">(</span>codeSource<span class="token punctuation">)</span><span class="token punctuation">,</span>            shouldCacheSource    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Class</span> <span class="token function">doParseClass</span><span class="token punctuation">(</span><span class="token class-name">GroovyCodeSource</span> codeSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">validate</span><span class="token punctuation">(</span>codeSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> answer<span class="token punctuation">;</span>  <span class="token comment">// Was neither already loaded nor compiling, so compile and add to cache.</span>    <span class="token class-name">CompilationUnit</span> unit <span class="token operator">=</span> <span class="token function">createCompilationUnit</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> codeSource<span class="token punctuation">.</span><span class="token function">getCodeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//省略...</span>        <span class="token comment">//创建ClassCollector,class类属性相关的收集对象</span>    <span class="token class-name">ClassCollector</span> collector <span class="token operator">=</span> <span class="token function">createCollector</span><span class="token punctuation">(</span>unit<span class="token punctuation">,</span> su<span class="token punctuation">)</span><span class="token punctuation">;</span>    unit<span class="token punctuation">.</span><span class="token function">setClassgenCallback</span><span class="token punctuation">(</span>collector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始执行编译命令</span>    unit<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>goalPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>    answer <span class="token operator">=</span> collector<span class="token punctuation">.</span>generatedClass<span class="token punctuation">;</span>    <span class="token class-name">String</span> mainClass <span class="token operator">=</span> su<span class="token punctuation">.</span><span class="token function">getAST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMainClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> collector<span class="token punctuation">.</span><span class="token function">getLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token class-name">String</span> clazzName <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">definePackageInternal</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置到classCache中</span>        <span class="token function">setClassCacheEntry</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置为answer</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazzName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mainClass<span class="token punctuation">)</span><span class="token punctuation">)</span> answer <span class="token operator">=</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> answer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中,执行流程如下</p><p>doParseClass() -&gt; createCollector() -&gt; unit.compile(goalPhase) -&gt; ClassCollector.call() -&gt; ClassCollector.createClass()</p><p>创建class对象的过程是在<B>ClassCollector.createClass</B>方法中,在这个方法中可以看到最后是调用的java.security.SecureClassLoader#defineClass()</p><ul><li>ClassCollector.createClass</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Class</span> <span class="token function">createClass</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code<span class="token punctuation">,</span> <span class="token class-name">ClassNode</span> classNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BytecodeProcessor</span> bytecodePostprocessor <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytecodePostprocessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fcode <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytecodePostprocessor<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fcode <span class="token operator">=</span> bytecodePostprocessor<span class="token punctuation">.</span><span class="token function">processBytecode</span><span class="token punctuation">(</span>classNode<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fcode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//GroovyClassLoader extends SecureClassLoader</span>    <span class="token class-name">GroovyClassLoader</span> cl <span class="token operator">=</span> <span class="token function">getDefiningClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里通过SecureClassLoader.defineClass 来进行加载</span>    <span class="token class-name">Class</span> theClass <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>classNode<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fcode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fcode<span class="token punctuation">.</span>length<span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">getAST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCodeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>theClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//省略...</span>    <span class="token keyword">return</span> theClass<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里还有一个点是在创建<B>GroovyClassLoader</B>时,都是通过<B>new InnerLoader</B>的方式来创建</p><blockquote><p>return java.security.AccessController.doPrivileged((PrivilegedAction<InnerLoader>) () -&gt; new InnerLoader(GroovyClassLoader.this));</p></blockquote><p>这是因为Class对象是通过ClassLoader+class的方式来定位确定唯一一个类的,InnerLoader每次都会创建一个新的对象,这样可能会导致Metaspace内存溢出,虽然在Groovy3.0以后针对这个问题已经进行过优化了,但是还是强烈建议通过内存将脚本编译后的<B>GroovyObject</B>缓存下来,本身脚本的再次编译和加载都是一个较为消耗性能的动作;</p><p>我们下面继续对<B>执行性能</B>来进行分析,在网上大多数资料对于Groovy的脚本执行性能的分析,github中关于这方面的issue也比较少,并且大部分是针对与Groovy和Java进行对比的;<br>下面有几个关于Groovy脚本执行的建议:</p><ol><li>尽量使用静态类型,由于Groovy是动态语言,在将动态特性编译成为静态语言时是比较消耗性能的</li><li>oracle官方对于Groovy的5条性能建议</li></ol><h4 id="如何保证动态脚本的安全性"><a class="header-anchor" href="#如何保证动态脚本的安全性"></a>如何保证动态脚本的安全性?</h4><p>如何保证动态脚本的安全性?其实也是分为两个方面考虑的:</p><ol><li>执行安全性</li></ol><blockquote><p>执行安全性指的是在执行脚本时是否会影响到我的宿主进程?如何规避这种风险?</p></blockquote><ol start="2"><li>脚本本身的安全性</li></ol><blockquote><p>脚本本身的安全性指的是脚本语义是否正确/正常以及可信</p></blockquote><p>下面对着两方面进行分析和设计:</p><p><B>脚本执行的安全性</B>方面最主要的考虑是错误的脚本是否会影响到主进程的执行?主要从下面几个方面考虑:</p><ol><li>内存<blockquote><p>内存主要还是考虑堆栈内存即可,一个是成员变量的空间分配,一个是while造成死循环使栈溢出等;可以在定义<B>GroovyClassLoader</B>时进行排除</p></blockquote></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">SecureASTCustomizer</span> secure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureASTCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建SecureASTCustomizer</span>secure<span class="token punctuation">.</span><span class="token function">setClosuresAllowed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 禁止使用闭包</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> tokensBlacklist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tokensBlacklist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>*<span class="token operator">*</span>KEYWORD_WHILE<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加关键字黑名单 while和goto</span>tokensBlacklist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>*<span class="token operator">*</span>KEYWORD_GOTO<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>secure<span class="token punctuation">.</span><span class="token function">setTokensBlacklist</span><span class="token punctuation">(</span>tokensBlacklist<span class="token punctuation">)</span><span class="token punctuation">;</span>secure<span class="token punctuation">.</span><span class="token function">setIndirectImportCheckEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置直接导入检查</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"com.alibaba.fastjson.JSONObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>secure<span class="token punctuation">.</span><span class="token function">setImportsBlacklist</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>线程</li></ol><blockquote><p>对与线程方面的考虑主要是执行线程需要使用单独的线程池进行处理,这样做的目的是防止动态脚本的执行线程阻塞业务线程;第二个是动态脚本中应该禁止使用线程池来进行处理,这方面的考量主要是基于脚本业务代码尽量的要简单高效和可读性,引入线程池会增加脚本的复杂度和可维护性</p></blockquote><ol start="3"><li>数据库/资源的管理</li></ol><blockquote><p>对与数据库和其他资源的访问,我是持有拒绝的态度,主要观点还是和脚本中实现线程池类似,还有一点是脚本中进行数据变更和资源处理缺少了代码版本控制这一个环节;</p></blockquote><p><B>脚本本身的安全性</B>主要指的是脚本开发/提测/上线整个流程的安全和监控性,在这方面Vivo提供了一套内部使用的流程如下:</p><p><img src="https://static001.geekbang.org/infoq/ac/acf787602d9e4bf20abded0c80525565.png" alt="Groovy整体流程"></p><p>在这个过程中,除了code review部分需要开发者进行参与,其他部分都可以依托CI/CD工具实现自动化执行;<br>有了这样一个流程,其实是可以解决脚本本身的安全性的问题的;</p><h4 id="如何保证动态脚本的代码质量"><a class="header-anchor" href="#如何保证动态脚本的代码质量"></a>如何保证动态脚本的代码质量?</h4><p>动态脚本的代码质量如何进行保证,一方面是可以通过良好的code review机制来提高质量,另外一方面是需要建设好单元测试框架;<br>如何建立好动态脚本的单元测试?<br>首先是方便,在开发人员的角度一个工具只有在足够的简单方便的情况下才会乐意去进行使用,其次是流程规范.<br>目前执行的过程是在特定的测试包下,开发脚本,然后进行单元测试,在单元测试通过后在写入数据库中;<br>后续实践出更好的方案在进行更新</p><h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2><p>以上通过Groovy实现了动态特性的同时引入了一些尚未解决的问题:<br>执行性能/单元测试,后续在实践过程中也会对这些问题持续的进行更新.</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://docs.oracle.com/en/cloud/paas/app-builder-cloud/visual-builder-groovy/best-practices-for-groovy-performance.html">oracle官方对于Groovy 性能的最佳实践</a><br><a href="https://www.huangchaoyu.com/2021/10/16/groovy%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91%E5%AE%B9%E6%98%93%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/">groovy静态编译容易引发的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class文件格式与加载</title>
      <link href="2022/12/03/12.JVM/9.Class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%8E%E5%8A%A0%E8%BD%BD/"/>
      <url>2022/12/03/12.JVM/9.Class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%8E%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1>Class文件格式与加载</h1><h2 id="类文件结构"><a class="header-anchor" href="#类文件结构"></a>类文件结构</h2><ul><li>类文件结构也就是Class文件的结构<ul><li>魔数:用于标识Class文件的版本</li><li>常量池:主要用于保存<strong>字面量(类似于字符串等)</strong> 和 <strong>符号引用(类和接口的全限定名\字段名称以及描述符\方法名称和描述符);</strong> 由于jvm在加载Class文件时才会进行<B>动态连接</B>,因此需要保存这些方法或接口的信息</li><li>访问标识:标识这个Class的类型(接口/类/public/abstract/final等)</li><li>类索引、父类索引与接口索引集合</li><li>字段表集合</li><li>方法表集合</li><li>属性表集合</li></ul></li></ul><h2 id="虚拟机类加载机制"><a class="header-anchor" href="#虚拟机类加载机制"></a>虚拟机类加载机制:</h2><ul><li>虚拟机把描述类的数据从Class文件加载到内存中,并对数据进行校验、转换解析、初始化的过程,最终形成可以被虚拟机之间使用的Java类型对象,就是虚拟机类的加载过程.</li></ul><h3 id="类加载的步骤"><a class="header-anchor" href="#类加载的步骤"></a>类加载的步骤</h3><ol><li>加载</li><li>连接:验证→准备→解析</li><li>初始化</li><li>使用</li><li>卸载</li></ol><p>在执行顺序上:加载→验证→准备→解析→初始化,这五个步骤的顺序是固定的;</p><h4 id="加载"><a class="header-anchor" href="#加载"></a>加载</h4><ol><li>通过类的全限定名来获取定义此类的二进制字节流</li><li>将二进制字节流转换为方法区运行时的数据结构</li><li>在内存中创建这个类的Class对象,作为方法区类结构的方法映射</li></ol><ul><li>对于HotSpot虚拟机而言,Class对象比较特殊,它虽然是对象,但是存放在方法区内,作为访问类结构的对象接口</li></ul><h4 id="验证"><a class="header-anchor" href="#验证"></a>验证</h4><ol><li>文件格式的验证:文件格式\运行版本等</li><li>元数据的验证:对字节码语义信息的分析,</li><li>字节码内容的验证:通过程序来校验方法块中的内容是否正确</li></ol><p>验证阶段贯穿[加载、准备、解析]，并不是严格的线性的顺序</p><h4 id="准备"><a class="header-anchor" href="#准备"></a>准备</h4><ol><li>为类变量分配内存并设置初始值的过程，对于类变量也仅仅是进行类型初始值的赋值(零值)</li><li>final修饰的类变量在这个阶段会直接进行赋实际值的过程，因为final修饰的值会被当作常量</li></ol><h4 id="解析"><a class="header-anchor" href="#解析"></a>解析</h4><ul><li>解析阶段是虚拟机将常量池中的符号引用替换为直接引用的过程<ol><li>解析阶段会触发类的加载，当为找到Class对象时会根据类的全限定明进行加载</li><li>对字段会按照继承顺序从下先上进行查找，并校验访问权限</li><li>对类方法和接口方法的解析与字段类似</li></ol></li></ul><h4 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h4><p>初始化就是在执行<B>clint()</B>的过程</p><p><B>clint()</B>是编译器自动收集类中所有的类变量赋值动作和静态语句块合并生成的</p><p>静态代码块可以对在它之后的类变量进行赋值，但是不能进行访问；因为类变量在<strong>准备阶段</strong>就完成的零值的赋值</p><p>虚拟机内部保证了在执行器之类的<B>clint()</B>方法之前先执行父类的<B>clint()</B>方法</p><h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/ClassLoader_flow.jpg?raw=true" alt="Class文件整体加载结构"></p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.geeksforgeeks.org/classloader-in-java/">java中的类加载器</a></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能监控与故障处理工具</title>
      <link href="2022/12/01/1.%E6%9D%82%E8%AE%B0/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>2022/12/01/1.%E6%9D%82%E8%AE%B0/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1>性能监控与故障处理工具</h1><p>介绍处理jvm的相关问题办法以及相关工具的一个持续更新的集合</p><h2 id="📚-经验"><a class="header-anchor" href="#📚-经验"></a>📚 经验</h2><h3 id="CPU占用率高"><a class="header-anchor" href="#CPU占用率高"></a>CPU占用率高</h3><ul><li>通过jvm工具排查</li></ul><ol><li>通过<strong>top</strong>命令查询进程号</li><li>通过<strong>top -Hp <pid></strong> 查到线程号,转换成为<strong>16进制</strong></li><li>通过<strong>jstack <pid> |grep 16进制线程号 -A 10</strong> 找到CPU当前执行的方法堆栈</li></ol><ul><li>通过arthas排查</li></ul><ol><li>thread</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看线程状态(默认只显示10个线程)</span>thread <span class="token comment"># 查看全部线程状态</span>thread --all<span class="token comment"># 查看指定线程执行状态</span>thread --pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OOM问题"><a class="header-anchor" href="#OOM问题"></a>OOM问题</h3><ol><li>启动命令中设置</li></ol><blockquote><p><B>-XX:+HeapDumpOnOutOfMemoryError</B> 配合<B> -XX:HeapDumpPath</B><br>在OOM时生成dump文件</p></blockquote><ol start="2"><li>线上命令</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#生成堆转储快照dump文件命令</span>  jmap -dump:format<span class="token operator">=</span>b,file<span class="token operator">=</span>heapdump.hprof pid<span class="token comment"># 生成堆栈信息文件命令</span>  jstack -l pid <span class="token operator">>></span> stack.txt<span class="token comment"># Arthas命令</span>  heapdump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程问题"><a class="header-anchor" href="#线程问题"></a>线程问题</h3><ul><li>线程池提交任务不执行</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># arthas排查</span><span class="token comment"># 获取ClassLoad Hash</span>sc -d com.agmtopy.source.executer.ExecutorServiceUtil<span class="token comment"># 获取对象</span>ognl -x <span class="token number">1</span> <span class="token string">'@com.agmtopy.source.executer.ExecutorServiceUtil@threadPoolExecutor'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>线程死锁</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> <span class="token comment"># arthas排查</span>Thread -b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="⚙-工具"><a class="header-anchor" href="#⚙-工具"></a>⚙ 工具</h2><p><B>Arthas</B>强烈推荐</p><h2 id="📒-常用命令"><a class="header-anchor" href="#📒-常用命令"></a>📒 常用命令</h2><h3 id="网络"><a class="header-anchor" href="#网络"></a>网络</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 采样tcp连接</span><span class="token function">lsof</span> -p 进程号 <span class="token operator">></span> /tmp/进程号_lsof.txt<span class="token comment"># 查看指定端口</span><span class="token function">netstat</span> -tnlp <span class="token operator">|</span> <span class="token function">grep</span> :8080ss -tunlp <span class="token operator">|</span><span class="token function">grep</span> :8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排查网络问题步骤:</p><ol><li>ping 目标地址</li><li>丢包<br>a. 链路中断<br>b. 抖动<br>c. 出口堵塞</li><li>能通<br>a. 检查dns和域名解析</li></ol><blockquote><p>/etc/resolv.conf 或者 dig 或者 nslookup :url</p></blockquote><p>b. 检查端口</p><blockquote><p>telnet -&gt; 如果全部端口不通检查<B>安全组策略</B>;部分端口不通检查<B>负载均衡白名单</B></p></blockquote><ol start="3"><li>不通<br>检查ip设置/网卡驱动/物理链路</li></ol><h3 id="内存"><a class="header-anchor" href="#内存"></a>内存</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 系统内存分布</span>pmap -pid<span class="token comment"># 内存占用</span>jmap -heap 进程号 <span class="token operator">></span> /tmp/进程号_jmap_heap.txt<span class="token comment"># 保存进程堆栈</span>jmap -dump:format<span class="token operator">=</span>b,file<span class="token operator">=</span>/tmp/进程号_jmap_dump.hprof 进程号<span class="token comment"># 内存对象占比</span>jmap -histo <span class="token number">1</span> <span class="token operator">|</span><span class="token function">more</span><span class="token comment"># GC</span>jstat -gcutil 进程号 <span class="token operator">></span> /tmp/进程号_jstat_gc.txtjstat -gcutil <span class="token number">1</span> 1s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CPU"><a class="header-anchor" href="#CPU"></a>CPU</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看系统上下文切换</span><span class="token function">vmstat</span> -w <span class="token number">1</span><span class="token comment"># 查看进程上下文切换</span>pidstat -p /PID -wtu  <span class="token number">5</span><span class="token comment"># 打印系统负载快照</span><span class="token function">top</span> -b -n <span class="token number">2</span> <span class="token operator">></span> /tmp/top.txt<span class="token function">top</span> -H -n <span class="token number">1</span> -p pid <span class="token operator">></span> /tmp/pid_top.txt<span class="token comment"># 进程列表</span><span class="token function">ps</span> -mp-o THREAD,tid,time <span class="token operator">|</span> <span class="token function">sort</span> -k2r <span class="token operator">></span> /tmp/进程号_threads.txt<span class="token comment"># 线程信息</span>jstack -l 进程号 <span class="token operator">></span> /tmp/进程号_jstack.txt<span class="token comment"># Arthas</span>thread thread -tidthread -all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="I-O"><a class="header-anchor" href="#I-O"></a>I/O</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">strace</span> -p pidiotop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm-垃圾回收器及算法基础</title>
      <link href="2022/12/01/12.JVM/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%8F%8A%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2022/12/01/12.JVM/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%8F%8A%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>垃圾回收器及算法基础</h1><h2 id="前提介绍"><a class="header-anchor" href="#前提介绍"></a>前提介绍</h2><p>垃圾回收器(GC)的理论研究在很早直接就开始了,大概是在60年代lisp语言就开始使用内存分配和垃圾回收机制来管理程序的内存了,近现代这一方向也是保持着极高的研究热度,从G1-&gt;ZGC</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/excalidraw/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%8F%8A%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80.png?raw=true" alt="大纲"></p><h2 id="算法基础"><a class="header-anchor" href="#算法基础"></a>算法基础</h2><p>对内存空间的回收首先需要解决一个问题那些是需要进行回收的对象,针对这个问题有两种处理方案:</p><ul><li><p>引用计数算法<br>引用计数是通过对对象被引用次数来标识是否有效,存在循环引用问题,可以通过可达性分析的步骤来解决</p></li><li><p>根标记算法,从<strong>GC Roots</strong>开始遍历整个内存对象是否可达的方式来标记需要回收的对象</p><p>首先<strong>GC Roots</strong>对象包括以下的几种:</p><ul><li>虚拟机栈中引用指向的对象(reference)</li><li>方法区中类静态属性引用的对象(静态属性对象,虽然不在栈帧中)</li><li>方法区常量引用的对象(例如常量池中的对象)</li><li>本地方法栈中引用的对象</li></ul></li></ul><h2 id="对象"><a class="header-anchor" href="#对象"></a>对象</h2><ul><li><p>对象的回收</p><p>对象的回收是一个非常严肃的动作,错误的回收将会是一场对用户的灾难,因此在JVM的实现中,对于GC线程的优先级设置的非常低,其次是在标记对象不可达后,还会声明会执行一次<strong>对象</strong>的**finalize()**方法,对于这个方法是否执行完成不做保证(防止死循环/wait time)</p><ul><li>finalize():用于GC回收前对象最后一次自救的方法,但是只会执行一次,防止内存溢出</li></ul></li><li><p>对象的分配</p><p>对象的分配与垃圾收集器的选择有关,对象是优先在Eden区进行分配,</p><p>进入老年代的几种场景:</p><ol><li>大对象直接进入老年代</li><li>长期存活的对象(16次GC)</li><li>动态对象年龄判断(一半相同年龄的对象直接进入老年代)</li></ol></li></ul><h2 id="理论基础"><a class="header-anchor" href="#理论基础"></a>理论基础</h2><ul><li><p>标记类</p><p>标记-清除算法/标记-整理算法/复制算法</p><ul><li>标记整理算法是通过时间换空间形式的一种体现,通过整理回收后的内存碎片来达到可以继续分配的目的</li><li>复制算法是空间换时间的体现,通过预留一倍的空间来达到内存回收完成后没有内存碎片的问题</li></ul></li><li><p>分代类</p><p>分代算法主要是根据对象的存活周期,将对象划分为不同区域,在不同的区域上采取不同的算法来处理</p></li></ul><h2 id="HotSopt实现"><a class="header-anchor" href="#HotSopt实现"></a>HotSopt实现</h2><ul><li><p>枚举根节点</p><p>通过<strong>OopMap</strong>的的方式来快速查找GC Roots枚举</p></li><li><p>安全点</p><p>由于引用关系的变化会不断的影响GC Roots,因此HotSpot不是每条指令都会生成OopMap,而只在特定的位置才会产生OopMap,这种特殊的位置被称为<strong>Safe pint</strong>,有两种进入Safe point的方式:</p><ul><li>抢占式</li><li>主动中断式:主动中断的方式是通过设置<strong>中断标记</strong></li></ul></li><li><p>安全区域</p><p>安全区域被称为Safe Region,指的是一段不会改变引用关系的代码,在执行GC时是不会处理已进入Safe Region的线程,当这些线程在离开Sefe Region时也会检查GC是否完成</p></li></ul><h2 id="垃圾收集器"><a class="header-anchor" href="#垃圾收集器"></a>垃圾收集器</h2><ul><li><p>Parallel Scavenge收集器</p></li><li><p>Parallel  Old收集器</p><p>两种Parallel收集器分别是jdk8中默认是年轻代和老年代的垃圾收集器</p><ul><li><p>Parallel Scavenge收集器</p><p>用于<strong>新生代,<strong>关注</strong>吞吐量</strong>的多线程并行收集器</p><p>CMS是关注于停顿时间,尽可能的缩短用户线程的停顿时间,适合于有交互的web系统</p><p>Parallel是关注于吞吐量尽可能的在单位时间内多执行用户代码,缩小GC时间,适用于后台任务</p></li><li><p>Parallel Old收集器</p><p>是老年代的标记-整理算法的多线程垃圾收集器</p></li><li><p>CMS收集器(<strong>三标一清</strong>)</p><p>CMS收集器是以最短停顿时间为目标的垃圾收集器,是基于标记-清除算法演化而来,分为:</p><ol><li>初始标记阶段</li><li>并发标记阶段</li><li>重新标记阶段</li><li>并发清除阶段</li></ol><p>在初始标记和重新标记阶段会STW的方式来进行,因为初始化标记是查找**GC Roots,**重新标记是对并发标记阶段结果修正也需要STW;</p><p>整个CMS中最耗时的<strong>并发标记</strong>和<strong>并发清理阶段</strong>都可以和用户线程一起执行</p><p>CMS垃圾收集器的问题:</p><ol><li>参与线程过高,按照(coreSize+3)/4的方式分配</li><li>无法处理浮动垃圾,对于在重新标记后产生的垃圾只能在下一次GC时进行处理,占用空间,当老年代达到一个阈值后会出发full GC,当CMS在运行时产生内存不足会激活serial GC</li><li>内存碎片问题,通过full GC的方式解决</li></ol></li><li><p>G1收集器</p><ul><li>从jdk9开始G1就作为默认的垃圾处理器</li><li>在整体上G1是标记-整理算法,局部上是标记-复制算法</li></ul></li><li><p>Shenandoah/ZGC收集器</p><ul><li>亚毫秒级</li><li>无分区设计</li></ul></li></ul></li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.baeldung.com/jvm-zgc-garbage-collector">ZGC简介:可扩展的实验性低延迟 JVM 垃圾收集器</a><br><a href="https://xie.infoq.cn/article/586f901cf8f38dd2f63b54a44">ZGC</a></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm-内存布局设计</title>
      <link href="2022/11/30/12.JVM/7.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/"/>
      <url>2022/11/30/12.JVM/7.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1>内存布局设计</h1><p>JVM的内存设计上是划分为两个大的区域的<B>启动时向操作系统分配的程序内存区域</B>、<B>直接对系统内存进行操作的区域</B>,后者不属于JVM管理,我们主要是分析前者</p><h2 id="大体结构"><a class="header-anchor" href="#大体结构"></a>大体结构</h2><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/jvm%E6%80%BB%E8%A7%88.png?raw=true" alt="JVM架构图"></p><ol><li>程序计数器<ol><li><p>程序计数器是用来记录当前线程所执行的字节码的行号指示器,字节码解释器在工作时就是通过改变这个计数器的值来记录当前执行的指令.</p><p>它是JVM层次的指令执行记录与硬件层次的指令地址寄存器(IR)的区别在于程序计数器只是一段内存区域,通过软件实现的记录虚拟机字节码的执行地址,当执行Native方法时,该区域值为空</p></li><li><p>为什么要有程序计数器?</p><ol><li>在于jvm提交给CPU执行的指令不是一次性全部提交过去的,而是根据java的业务逻辑通过jvm编译在提交给CPU相应的指令,所以需要对IR进行抽象</li></ol></li></ol></li><li>Java虚拟机栈<ol><li>虚拟机栈描述的是Java方法执行时候的内存模型:线程在执行方法时都会创建相应独立的栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息;</li><li>虚拟机栈是由一个个栈帧组成的</li><li>局部变量表用于存储编译器可知的各种基本数据类型的值引用、对象引用、returnAddres类型(指向一个指令的类型,指的是方法返回的指令地址)</li></ol></li></ol><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E7%BA%BF%E7%A8%8B%E5%B8%A7%E6%A0%88.png?raw=true" alt="栈帧"></p><ol><li><p>本地方法栈</p><p>本地方法栈是用于表示对本地方法(native)执行的’c stack’</p></li><li><p>java堆</p><p>java堆是java进程管理的最大的一块内存区域,这个区域允许所有线程访问,作用是在这个区域分配对象实例空间;堆所分配的内存空间不需要是连续的(物理/逻辑上都是一样),在HotSpot中堆空间在默认情况下是申请的连续分配</p></li><li><p>方法区</p><p>方法区用于虚拟机加载类信息、常量池、静态变量、即时编译器编译后的代码数据等</p></li><li><p>常量池</p><p>常量池用于存放在编译期产生的各种字符串、符号引用以及允许运行期动态添加</p></li><li><p>直接内存</p></li></ol><p>直接内存指的是通过Native方法直接分配的堆外内存部分</p><h2 id="堆上内存分配过程"><a class="header-anchor" href="#堆上内存分配过程"></a>堆上内存分配过程</h2><p>堆上内存分配过程约等于对象的堆内存分配过程,堆上内存分配需要并发分配的问题,目前有两种处理方案:</p><ol><li>通过CAS机制加上失败重试来保证操作的原子性</li><li>通过本地线程分配缓冲(TLAB)的方式来保证,核心思想就是通过预先划分线程独占的内存空间来<strong>尽量避免从堆上直接分配内存从而避免频繁的锁竞争</strong></li></ol><h2 id="对象的内存布局"><a class="header-anchor" href="#对象的内存布局"></a>对象的内存布局</h2><p>对象的内存布局可以划分为三个区域:对象头(Header)、实例数据、对齐填充部分</p><ol><li><p>header</p><ol><li>Mark Word:通过标识来复用同一地址空间,列如对象哈希码/锁指针/偏向锁信息等</li><li>类型指针:用于标识对象的类元数据,其中数组类型要表示元素的类型以及元素的个数</li></ol></li><li><p>实例数据</p><ol><li>实例数据部分是用于存储业务数据的部分,在分配内存时会尽量遵守相同类型(宽度)的数据分配到一起</li></ol></li><li><p>对齐部分</p><ol><li>对齐部分不一定存在,由于jvm虚拟机分配内存是8个字节的整数倍,header部分设计是就遵守此规范,但是实例数据部分不一定能恰好遵循,因此需要进行数据填充来符合此规范</li></ol><h2 id="对象的访问定位"><a class="header-anchor" href="#对象的访问定位"></a>对象的访问定位</h2><p>在栈帧中通过<strong>reference</strong>来表示对象的指针,然后通过refernce查找对象的方式可以分为两种实现方案:</p><ol><li>直接通过指针来返回</li><li>通过句柄的方式来返回</li></ol><p>HotSpot是通过第二种方式来进行访问的,优点是**快,**缺点是在GC时需要修改栈帧中的reference数据</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D.png?raw=true" alt="对象地址"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程是否会影响执行效率</title>
      <link href="2022/11/15/1.%E6%9D%82%E8%AE%B0/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E4%BC%9A%E5%BD%B1%E5%93%8D%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87/"/>
      <url>2022/11/15/1.%E6%9D%82%E8%AE%B0/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E4%BC%9A%E5%BD%B1%E5%93%8D%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h1>多线程是否会影响执行效率</h1><h2 id="前提"><a class="header-anchor" href="#前提"></a>前提</h2><p>今天一位同事问了一个问题感觉比较有趣,问题简化规范后是这样的</p><blockquote><p>在同一机器/操作系统上,使用n个线程处理X个任务是不是和使用n*m个线程处理X个任务效率相同?</p></blockquote><p>这样的观点是基于<B>RR-时间片轮转</B>来进行推导的;我不太认同这种观点,直觉上认为参与处理的任务过多或过少都会影响执行效率;下面先进行这两种观点的推导然后在进行实际的验证</p><h2 id="时间片轮转"><a class="header-anchor" href="#时间片轮转"></a>时间片轮转</h2><p>假设前提:</p><ol><li>操作系统对进程的调度是采用的<B>时间片轮转</B>算法来进行处理的,时间片划分的大小为1s;</li><li>每个Task需要消耗单核CPU执行0.5s</li><li>不考虑线程上下文切换耗时</li></ol><p>根据以上的前提可以得出下面这个运行图例:</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E4%BC%9A%E5%BD%B1%E5%93%8D%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%871-%E7%AC%AC%201%20%E9%A1%B5.drawio.png?raw=true" alt="2Thread执行示例"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E4%BC%9A%E5%BD%B1%E5%93%8D%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%871-%E7%AC%AC%202%20%E9%A1%B5.drawio.png?raw=true" alt="4Thread执行示例"></p><p>从上图中可以看到无论是2Thread来进行执行还是4Thread来进行执行对于任务的执行耗时其实都是没有任何影响的,因为这其实是1000个Task与2个执行core之间的关系;</p><p>这种说法正确的前提必须是满足<B>假设前提</B>中的3点</p><h2 id="线程过多过少都会影响执行效率"><a class="header-anchor" href="#线程过多过少都会影响执行效率"></a>线程过多过少都会影响执行效率</h2><p>这种观点主要是基于《Java并发编程实战》一书中的观点:</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%BE%E7%BD%AE%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%A4%A7%E5%B0%8F.jpg?raw=true" alt="推算线程池大小"></p><p>N<sub>cpu</sub> ：指的是执行机器上的物理核心数,额外注意使用容器启动的核心数<br>U<sub>cpu</sub> ：指的期望的对CPU的使用率<br>W/C ：指的是等待时间与计算时间的比例,对于计算密集型与IO密集型这个值还有所区别</p><p>例子:</p><p>N<sub>Thread</sub> = 2 * 0.8 * (1 + 10/2) = 8</p><p>如果需要N<sub>Thread</sub>持续增长时需要<B>W/C</B>比例更大,这是不可能实现的,由于w/c是由于Task决定的;<br>以上是通过反证法的方式来解释提高N<sub>Thread</sub> 并不能增加并发执行效率的原因;</p><p>实际在运用过程中还需要注意<B>Amdahl定律</B>和线程引入造成的性能开销</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/amdahl%E5%AE%9A%E5%BE%8B.jpg?raw=true" alt="Amdahl定律"></p><p>Amdahl定律就是表达并发执行线程池数并不能提高效率,而是并发度提高才能提高执行效率</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BA%BF%E7%A8%8B%E5%BC%95%E5%85%A5%E7%9A%84%E5%BC%80%E9%94%80.jpg?raw=true" alt="线程引入造成的性能开销"></p><p>频繁的线程切换会引起性能损耗</p><h2 id="实例分析"><a class="header-anchor" href="#实例分析"></a>实例分析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorServiceUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> taskNum <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">LinkedBlockingQueue</span> QUEUE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span>taskNum <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>            QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>taskNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">8192</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线程数量为[%s]正在执行... %n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> st <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">extracted</span><span class="token punctuation">(</span>latch<span class="token punctuation">)</span><span class="token punctuation">;</span>            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> et <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线程数量为[%s]执行耗时[%s]ms %n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> et <span class="token operator">-</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>            QUEUE<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">extracted</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> taskNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>latch<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> taskId<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">;</span>        <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">,</span> <span class="token keyword">int</span> taskId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>latch <span class="token operator">=</span> latch<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>taskId <span class="token operator">=</span> taskId<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">isPrime2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrime2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> sqrt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sqrt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/agmtopy/jvmsource/blob/master/src/main/java/com/agmtopy/source/executer/ExecutorServiceUtil.java">ExecutorServiceUtil.java</a></p><p>这是一个循环求解0~10W之间的素数的程序,下面是分别在Windows/Linux上执行的结果</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux.jpg?raw=true" alt="Linux下的执行结果"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/windows.jpg?raw=true" alt="Windows下的执行结果"></p><p>操作系统的线程调度策略还是会影响性能的.Linux的线程调度要稍微比Windows的优秀一点点,下面使用<B>vmstat</B>和<B>pidstat</B>分析</p><ul><li>vmstat</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vmstat</span> -w <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/vmstat.jpg?raw=true" alt="vmstat执行结果"></p><ul><li>pidstat</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pidstat -p /PID -wtu  <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/pidstat.jpg?raw=true" alt="pidstat执行结果"></p><p>主要关心<B>cswch/s</B>和<B>nvcswch/s</B>、<B>in</B>和<B>cs</B>指标，表示的是<B>线程上下文切换</B>的一个频率,在线程不断的增加以后可以看到这几个指标在快速的向上增长<br>不管是从windows还是linux的一个执行结果来看，线程的增加都会导致程序的下降,但是这种下降并不是很明显，也许是得益于现代操作系统对线程切换的不断优化吧</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>一个线程池中核心线程数与最大线程数的数量是会受到多个方面因素共同影响的，例如<B>操作系统</B>、<B>物理核心逻辑线程</B> 以及任务类型(计算密集型/IO密集型)都有关系,因此在使用线程池时对于线程池的<B>6个</B>参数一定要有思考以后在进行创建相应的线程池;</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/13834692/threads-configuration-based-on-no-of-cpu-cores/13958877#13958877">Threads configuration based on no. of CPU-cores</a><br><a href="https://en.wikipedia.org/wiki/Amdahl%27s_law">Amdahl’s law</a><br><a href="https://research.cs.wisc.edu/multifacet/amdahl/">Amdahl’s Law in the Multicore Era</a><br><a href="https://www.cnblogs.com/ggjucheng/archive/2012/01/05/2312625.html">Linux vmstat命令实战详解</a><br><a href="https://timzhouyes.github.io/2020/04/29/Java%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/">Java常见的性能问题和排查</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入分布式缓存-从原理到实践(三)</title>
      <link href="2022/11/14/20.%E7%AC%94%E8%AE%B0/22.%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E8%B7%B5(%E4%B8%89)/"/>
      <url>2022/11/14/20.%E7%AC%94%E8%AE%B0/22.%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E8%B7%B5(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1>深入分布式缓存-从原理到实践(三)</h1><h2 id="Redis数据结构"><a class="header-anchor" href="#Redis数据结构"></a>Redis数据结构</h2><p>Redis的数据结构可以划分为下图所示:</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/drawio/s-%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98.%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E7%8E%B0/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.drawio.png?raw=true" alt="Redis的数据结构"></p><p>可以看到Redis底层采用的也是Map的方式来保存key以及value;</p><p>Redis主要的数据类型分为<B>String</B>、<B>list</B>、<B>set</B>、<B>map</B>、<B>sorted-set</B>等</p><p>下面会依次介绍这几种类型对象的底层实现原理</p><h2 id="String类型"><a class="header-anchor" href="#String类型"></a>String类型</h2>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TiDB数据库之简介</title>
      <link href="2022/11/05/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/41.TiDB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%AE%80%E4%BB%8B/"/>
      <url>2022/11/05/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/41.TiDB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1>TiDB数据库之简介</h1><blockquote><p>TiDB 是 PingCAP 公司自主设计、研发的开源分布式关系型数据库，是一款同时支持在线事务处理与在线分析处理 (Hybrid Transactional and Analytical Processing, HTAP) 的融合型分布式数据库产品，具备水平扩容或者缩容、金融级高可用、实时 HTAP、云原生的分布式数据库、兼容 MySQL 5.7 协议和 MySQL 生态等重要特性。目标是为用户提供一站式 OLTP (Online Transactional Processing)、OLAP (Online Analytical Processing)、HTAP 解决方案。</p></blockquote><p>简单的说就是一款分布式数据库.</p><h2 id="五大特性"><a class="header-anchor" href="#五大特性"></a>五大特性</h2><ol><li><p>支持水平扩容或缩容<br>这一点在传统的RDBMS上不容易实现,传统的RDBMS通常是数据存储和计算没有进行分离的;</p></li><li><p>金融级高可用<br>采用<B> Multi-Raft 协议</B>来进行保证的</p></li><li><p>实时 HTAP<br>同时支持OLAP和OLTP处理</p></li><li><p>云原生的分布式数据库</p></li><li><p>兼容MySQL 5.7协议<br>支持MySQL协议这是一大优点</p></li></ol><h2 id="四大核心应用场景"><a class="header-anchor" href="#四大核心应用场景"></a>四大核心应用场景</h2><ol><li>对数据一致性及高可靠、系统高可用、可扩展性、容灾要求较高的金融行业属性的场景</li></ol><p>也就是适合需要高性能/高可用/高扩展性的场景</p><ol start="2"><li>对存储容量、可扩展性、并发要求较高的海量数据及高并发的 OLTP 场景</li></ol><blockquote><p>随着业务的高速发展，数据呈现爆炸性的增长，传统的单机数据库无法满足因数据爆炸性的增长对数据库的容量要求，可行方案是采用分库分表的中间件产品或者 NewSQL 数据库替代、采用高端的存储设备等，其中性价比最大的是 NewSQL 数据库，例如：TiDB。TiDB 采用计算、存储分离的架构，可对计算、存储分别进行扩容和缩容，计算最大支持 512 节点，每个节点最大支持 1000 并发，集群容量最大支持 PB 级别。</p></blockquote><ol start="3"><li><p>HTAP场景<br>一套数据库支持全部场景</p></li><li><p>OLAP场景<br>TiDB在实现上比ETL + Hadddoop简单和高效低本,并且可以直接用SQL实现分析统计功能</p></li></ol><h2 id="快速上手"><a class="header-anchor" href="#快速上手"></a>快速上手</h2><p>本次快速上手实验的环境主要是: WSL2+Ubunta</p><ol><li>下载安装脚本</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> --proto <span class="token string">'=https'</span> --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 下载完成后会展示安装脚本路径  'Shell profile:'后面的就是 $&#123;your_shell_profile&#125; 替换量</span><span class="token builtin class-name">source</span> <span class="token variable">$&#123;your_shell_profile&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_1.jpg?raw=true" alt="下载安装脚本"></p><ol start="2"><li>启动集群</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 默认TiDB、TiKV、PD 和 TiFlash 实例各一个</span>tiup playground<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_%E5%90%AF%E5%8A%A8.jpg?raw=true" alt="启动"></p><ol start="3"><li>TiDB的相关操作</li></ol><ul><li>连接TiDB</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 使用TiDB clinet</span>tiup client<span class="token comment"># 使用MySQL 协议</span>mysql --host <span class="token number">127.0</span>.0.1 --port <span class="token number">4000</span> -u root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_3_tidb%E5%8D%8F%E8%AE%AE%E7%99%BB%E9%99%86.jpg?raw=true" alt="TiDB clinet"></p><p>在使用MySQL客户端连接的时候,因为TiDB默认没有为root用户分配密码的,可以通过TiDB clint 登陆后使用<B>set password for root=‘123456’;</B>来修改密码</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_4_%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81.jpg?raw=true" alt="修改root 密码"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_5_%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.jpg?raw=true" alt="MySQL 协议连接成功"></p><ul><li>退出/清理</li></ul><ol><li><p>按下 Control+C 键停掉上述启用的 TiDB 服务。</p></li><li><p>等待服务退出操作完成后，执行以下命令：</p></li></ol><blockquote><p>tiup clean --all</p></blockquote><ul><li>管控平台/性能分析后台</li></ul><ol><li>dashboard</li></ol><p>可以看到TiDB的后台管理页面比较现代,支持各种功能包括<B>集群信息</B>、<B>慢SQL分析</B>、<B>日志查询</B>、<B>性能诊断</B>等</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_6_dashboard.jpg?raw=true" alt="dashboard"></p><h2 id="HTAP功能对比"><a class="header-anchor" href="#HTAP功能对比"></a>HTAP功能对比</h2><p>HTAOP功能就是在线分析功能,在传统的数据库使用过程中通常会伴随着这样的使用场景,下面用<B>TiFlash</B>和MySQL之间来对比</p><h3 id="准备数据"><a class="header-anchor" href="#准备数据"></a>准备数据</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 使用以下命令安装数据生成工具</span>tiup <span class="token function">install</span> bench<span class="token comment"># 使用以下命令生成数据</span>tiup bench tpch --sf<span class="token operator">=</span><span class="token number">1</span> prepare<span class="token operator">!</span><span class="token punctuation">[</span>准备数据<span class="token punctuation">]</span><span class="token punctuation">(</span>https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/HTAP_%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_1.jpg?raw<span class="token operator">=</span>true<span class="token punctuation">)</span><span class="token comment"># 运行以下 SQL 语句查看生成的数据量</span>SELECT CONCAT<span class="token punctuation">(</span>table_schema,<span class="token string">'.'</span>,table_name<span class="token punctuation">)</span> AS <span class="token string">'Table Name'</span>, table_rows AS <span class="token string">'Number of Rows'</span>, CONCAT<span class="token punctuation">(</span>ROUND<span class="token punctuation">(</span>data_length/<span class="token punctuation">(</span><span class="token number">1024</span>*1024*1024<span class="token punctuation">)</span>,4<span class="token punctuation">)</span>,<span class="token string">'G'</span><span class="token punctuation">)</span> AS <span class="token string">'Data Size'</span>, CONCAT<span class="token punctuation">(</span>ROUND<span class="token punctuation">(</span>index_length/<span class="token punctuation">(</span><span class="token number">1024</span>*1024*1024<span class="token punctuation">)</span>,4<span class="token punctuation">)</span>,<span class="token string">'G'</span><span class="token punctuation">)</span> AS <span class="token string">'Index Size'</span>, CONCAT<span class="token punctuation">(</span>ROUND<span class="token punctuation">((</span>data_length+index_length<span class="token punctuation">)</span>/<span class="token punctuation">(</span><span class="token number">1024</span>*1024*1024<span class="token punctuation">)</span>,4<span class="token punctuation">)</span>,<span class="token string">'G'</span><span class="token punctuation">)</span> AS<span class="token string">'Total'</span>FROM information_schema.TABLES WHERE table_schema LIKE <span class="token string">'test'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/HTAP_%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_2_%E6%95%B0%E6%8D%AE%E9%87%8F%E5%B1%95%E7%A4%BA.jpg?raw=true" alt="数据行数"></p><h3 id="执行SQL"><a class="header-anchor" href="#执行SQL"></a>执行SQL</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT    l_orderkey,    SUM(        l_extendedprice * (1 - l_discount)    ) AS revenue,    o_orderdate,    o_shippriorityFROM    customer,    orders,    lineitemWHERE    c_mktsegment &#x3D; &#39;BUILDING&#39;AND c_custkey &#x3D; o_custkeyAND l_orderkey &#x3D; o_orderkeyAND o_orderdate &lt; DATE &#39;1996-01-01&#39;AND l_shipdate &gt; DATE &#39;1996-02-01&#39;GROUP BY    l_orderkey,    o_orderdate,    o_shippriorityORDER BY    revenue DESC,    o_orderdatelimit 10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步列存数据"><a class="header-anchor" href="#同步列存数据"></a>同步列存数据</h3><p>TiFlash 部署完成后并不会自动同步 TiKV 数据，你可以在 MySQL 客户端向 TiDB 发送以下 DDL 命令指定需要同步到 TiFlash 的表。指定后，TiDB 将创建对应的 TiFlash 副本。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">ALTER TABLE test.customer SET TIFLASH REPLICA 1;ALTER TABLE test.orders SET TIFLASH REPLICA 1;ALTER TABLE test.lineitem SET TIFLASH REPLICA 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="分析对比性能差异"><a class="header-anchor" href="#分析对比性能差异"></a>分析对比性能差异</h3><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/HTAP_%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_3_%E4%B8%8D%E4%BD%BF%E7%94%A8TiFlash.jpg?raw=true" alt="传统关系数据引擎"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/T-TiDB/HTAP_%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B_3_%E4%BD%BF%E7%94%A8TiFlash.jpg?raw=true" alt="TiFlash引擎"></p><p>可以看到TiFlash执行的耗时非常的少</p><h2 id="SQL-基本操作"><a class="header-anchor" href="#SQL-基本操作"></a>SQL 基本操作</h2><h2 id="SQL-基本操作-v2"><a class="header-anchor" href="#SQL-基本操作-v2"></a>SQL 基本操作</h2><p>TODO</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://docs.pingcap.com/zh/tidb/dev/quick-start-with-tidb#%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E9%9B%86%E7%BE%A4">TiDB官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TiDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git workflow的几种最佳实践方式</title>
      <link href="2022/10/29/1.%E6%9D%82%E8%AE%B0/git-workflow%E7%9A%84%E5%87%A0%E7%A7%8D%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%96%B9%E5%BC%8F/"/>
      <url>2022/10/29/1.%E6%9D%82%E8%AE%B0/git-workflow%E7%9A%84%E5%87%A0%E7%A7%8D%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>git workflow的几种最佳实践方式</h1><h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>现有的版本控制系统大多选择使用Git来进行管理/协作;不同的团队有会根据各自的情况选择不同的协助方式,常见的<B>git workflow</B>主要分为三种:</p><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow<br>常见的分支模式也可以大致划分为两种:</li><li>主干分支模式</li><li>特性分支模式</li></ul><p>下面就先介绍特性分支模式下的三种 Git WorkFlow特点与优劣;</p><h2 id="Git-flow"><a class="header-anchor" href="#Git-flow"></a>Git flow</h2><blockquote><p><B>Git flow</B>最早是由Vincent Driessen在2010年左右提出来的<B><a href="https://www.ruanyifeng.com/blog/2015/12/git-workflow.html">《一个成功的 Git 分支模型》</a></B>一文中介绍他自己的分支管理模式;主要核心思想就是会存在两类分支:</p></blockquote><ul><li><p>长期分支:</p><ul><li><B>master</B></li><li><B>develop</B></li></ul></li><li><p>临时分支:</p><ul><li><B>hotfixs branch</B></li><li><B>release branch</B></li><li><B>feature branch</B></li></ul></li></ul><p>长期分支是一直存在的,临时分支只是会存在与一个迭代或一次hotfix的过程中,他们之间的关系如下所示:</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%9D%82%E8%AE%B0/git_flow/git_flow.png?raw=true" alt="git flow "></p><p>也可以看下面这个简化的git flow流程<br><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%9D%82%E8%AE%B0/git_flow/git-flow%E7%AE%80%E5%8C%96%E6%B5%81%E7%A8%8B.png?raw=true" alt="git flow "></p><p>可以从上面两个图中看到开发者其实是站着<B>develop branch</B>一侧的,feature branch分支通常存在于本地,开发完成后执行<B>merge request(MR)</B>合并到<B>develop branch</B>(通常使用的是git merge --no–ff feature-branch的方式);同时发布分支(release branch)是从develop branch上切出来的,测试通过后mr到master中;</p><p>git flow中进行code review的判定点:</p><ul><li>尝试从私有分支合并代码到公有分支(develop, release/<em>, hotfix/</em>, master)中时</li></ul><p>例如从feature branch -&gt; develop branch,hotfixs branch -&gt; master/develop时是需要进行code review;<br>从develop -&gt; master时是不需要进行code review的;</p><h3 id="优点"><a class="header-anchor" href="#优点"></a>优点</h3><ul><li><p>严谨的合并流程<br>所有进入公共分支的代码都需要进行审核,确保代码问题;这样的合并流程适用于已有的成熟项目开发流程,可以尽量在前置协作过程中发现避免问题;</p></li><li><p>适用于开源项目(曾经)<br>各个贡献者都是在各自的repository(存储库)中工作,需要提出PR经过审核后才能提交代码到主库中</p></li></ul><h3 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h3><ul><li><p>繁琐<br>在开发过程中,会持续维护两个长期分支<B>develop</B>和<B>master</B>,并且这两个分支的实际含义还有所重合(develop-拥有不稳定的全部代码的分支/master-拥有全部稳定代码的分支);</p></li><li><p>持续交付困难<br>所有的功能开发必须是在一个周期或多个周期内完成,造成master中的代码不是最新的,因此很难进行CD;也有基于git flow开进行CD的方案,但是有点舍本求末的感觉在里面了,CI/CD应该是在’每个人每天都致力于master上工作’的前提</p></li></ul><h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3><p>git flow的开发模式过于繁琐来保证较高的代码质量,需要去维护多个长期分支;繁琐也是相对于下面两种模式而言的;git flow的作者目前也是建议大家基于团队/项目来选择和更简单的GitHub flow;</p><h2 id="GitHub-flow"><a class="header-anchor" href="#GitHub-flow"></a>GitHub flow</h2><p>GitHub flow最早是由GitHub的技术经理scott chacon提出来的<a href="http://scottchacon.com/2011/08/31/github-flow.html">GitHub Flow</a>,是基于Github内部使用Git工作的一种流程;</p><blockquote><p>GitHub flow主要有以下几个特征:<br>- master branch中的代码是在任何时候都是可以进行部署的<br>- 功能分支名称需要用描述功能特性来进行命名的<br>- 即时将本地代码push/pull到服务器上<br>- 使用PR来进行协作(反馈/帮助/合并)<br>- 完成master合并后立即部署</p></blockquote><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%9D%82%E8%AE%B0/git_flow/github%20flow.jpg?raw=true" alt="github flow"></p><p>这是一个简易的GitHub flow的流程,可以看到所有去请求在进行审核之后都会被合并到Master分支中;<br>在实践中GitHub flow是一个一直向前的流程,对于master分支几乎不会进行回滚操作(通过新的提交抵消错误需要进行回滚的合并)</p><h3 id="优点-v2"><a class="header-anchor" href="#优点-v2"></a>优点</h3><ul><li><p>分支模型简单<br>这个分支模型简单是相对于Git flow来说的,只用维护一个长期分支<B>master</B>,利于后续的CI/CD</p></li><li><p>PR<br>这个是GitHub flow的一个创新,PR不止是合并代码而是一种协作方式,可以进行评论/审查/帮助,这个是跨地域进行大规模协作的基础,改变了以前通过邮件的方式;</p></li><li><p>可以最大限度减少未发布代码的数量<br>master branch 在合并代码后就会进入持续交付阶段,这样会最大限度的降低未发布代码的数量</p></li></ul><h3 id="缺点-v2"><a class="header-anchor" href="#缺点-v2"></a>缺点</h3><ul><li><p>无法应对版本的延迟发布<br>在实际开发工作中,持续交付不一定能实现,毕竟大多数技术开发还是以业务为导向的;</p></li><li><p>无法处理多版本交付<br>开发环境/测试环境/预发环境甚至生产多版本部署的场景</p></li></ul><h3 id="小结-v2"><a class="header-anchor" href="#小结-v2"></a>小结</h3><p>GitHub flow在简化Git flow的基础上支持开源软件的开发模式,但是自身也有一些问题.</p><h2 id="GitLab-flow"><a class="header-anchor" href="#GitLab-flow"></a>GitLab flow</h2><p>GitLab flow是由极狐公司提出在<B><a href="https://docs.gitlab.cn/jh/topics/gitlab_flow.html">GitLab Flow介绍</a></B>一文实践的分支管理方式;</p><p>GitLab flow的设计遵寻两个原则:</p><ul><li>单一主分支</li></ul><blockquote><p>单一主分支原则与GitHub Flow所保留的Master分支一致</p></blockquote><ul><li>上游优先</li></ul><blockquote><p>上游优先原则指的是只存在一个主分支master,它是所有其他分支的<B>上游</B>.只有上游分支采纳的代码变化,才能应用到其他分支。对于<B>持续发布</B>的项目，它建议在master分支以外，再建立不同的环境分支。比如,<B>开发环境</B>的分支是master,<B>预发环境</B>的分支是pre-* ,<B>生产环境</B>的分支是pro-*;</p></blockquote><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%9D%82%E8%AE%B0/git_flow/GitLab%20flow%201.png?raw=true" alt="上游优先流程"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%9D%82%E8%AE%B0/git_flow/GitLab%20flow%202.png?raw=true" alt="生产分支的切出"></p><p>从上述的流程中可以看到GitLab flow在分支上选择是多分支的管理方式,但是是一种基于<B>上游优先</B>策略下的多分支管理方式,并不是像Git flow那样同时维护多个长期分支,对于后续的发布分支流程,GitLab采用的也是从Master branch中切分支或者打tag的方式:</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%9D%82%E8%AE%B0/git_flow/GitLab%20flow%203.jpg?raw=true" alt="GitLab 发布分支"></p><p>在GitLab的实践中,通常<B>Master branch</B>都是受保护的,这样大部分开发者不能对其进行直接修改;<br>其中在他们的实践中也认可践行(PR/MR)的协助方式,分支的命名也是采用的功能命名的方式,合并后立即删除,以便其他人重新开始这个功能的议题;issues是工作的开始,MR是工作的结束;</p><h3 id="优点-v3"><a class="header-anchor" href="#优点-v3"></a>优点</h3><ul><li><p>支持多版本部署<br>支持pre-* /pro-*的多分支部署方式</p></li><li><p>可以支持延迟发布<br>开发分支和发布分支可以并行</p></li></ul><h2 id="小结-v3"><a class="header-anchor" href="#小结-v3"></a>小结</h2><p>由于GitLab flow出现的时间比git flow/gitlab flow都要晚一些,因此吸收了这两种风格的特点(支持多分支/PR模式);<br>大多数开发模式都是让代码审查通过后直接进入Master branch,因为这样可以尽早的解决冲突;</p><p>以上三种代码分支的管理方式都是基于<B>功能开发</B>(先有需求驱动的开发模式),并不是GitLab flow就一定比Git flow要更好,只有更适合的,下面介绍三种简单的区分方式仅供参考:</p><ul><li>工作中会使用到多个版本 -&gt; Git flow</li></ul><blockquote><p>如果代码库在工作中有多个版本(即典型的软件产品,如操作系统、Office 软件包、自定义应用程序等);可以使用git-flow,主要原因是在开发下一个版本的同时,需要在生产中持续支持以前的版本,并且有一个较长的迭代周期;</p></blockquote><ul><li>工作中只会使用到一个版本 -&gt; GitHub flow</li></ul><blockquote><p>如果代码库始终只有一个生产版本（即网站、Web 服务等），可以使用 github flow。主要原因是您不需要为开发人员复杂的事情。一旦开发人员完成一项功能或完成错误修复，它就会立即升级为生产版本。</p></blockquote><ul><li>生产中的单一版本但非常复杂的软件 -&gt; Gitlab-flow</li></ul><blockquote><p>在商业大型软件或者是以提供服务的项目上，在生产中可能需要在您的分支和主分支之间来回部署,并且在不同版本都需要进行CI/CD。推荐就使用Gitlab-flow</p></blockquote><h2 id="基于主干的开发模式"><a class="header-anchor" href="#基于主干的开发模式"></a>基于主干的开发模式</h2><p>在基于主干的开发模式中,所有开发人员都在一个开放的分支上进行工作。一般是使用master分支.他们直接向Master提交代码并运行;开发人员会创建短暂的功能分支。一旦他们分支上的代码编译并通过所有测试，他们就会直接将其合并到master. 确保开发是真正连续的，并防止开发人员创建难以解决的合并冲突;</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%9D%82%E8%AE%B0/git_flow/%E5%9F%BA%E4%BA%8E%E4%B8%BB%E5%B9%B2%E7%9A%84%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.png?raw=true" alt="基于主干开发流程"></p><p>可以看到<B>基于主干的开发流程</B>非常的简单,任何人都可以直接向Master branch 合并代码,能够做到快速交付/迭代;缺点是没有人来进行功能性code review,只能进行完整的源代码检查(这是一种灾难😰);</p><p>基于主干的开发模式适用于:<B>项目开始的早期</B>、<B>拥有的都是老手</B>(😖)或者是<B>基础架构强/持续集成工具集成度高/TDD和自动化测试覆盖完善场景</B>下;</p><p>其实还有其他的开发模式例如<B>集中式</B>、<B>Forking</B>等工作流程,有兴趣的可以了解一下;</p><h2 id="使用Git的几个约定"><a class="header-anchor" href="#使用Git的几个约定"></a>使用Git的几个约定</h2><p>在使用Git过程中,其实每个团队的风格不同,都有一些比较好的值得借鉴的地方,以下可能是我自己的一个使用习惯</p><ol><li><p><B>使用rebase -i整理需要提交的commit</B><br>每次大功能向master/develop等公开分支提交时,会首先将同一需求的多个commit压缩合并成为一个有具体含义的commit后在发起PR;这样做的原因是基于我认为提交的MR应该是一个完整的功能/补丁/操作的log,可以让之后进行阅读的人知道这一行代码是为那个需求/修复而写的,而不应该是一个需求中的一个小点添加的;第二点是便于回滚/Cherry-pick,一个commit的操作要比多个commit的操作更简单;</p></li><li><p><B>基于最新的共享分支进行MR</B><br>这一点是基于Code review来说的,基于过时的分支合并到共享分支中是会夹杂大量代码差异,不利于code review的进行;对于rebase的使用,坚持一个原则<B>私有分支操作使用rebase,共享分支操作使用merge</B></p></li><li><p><B>使用stash</B><br>暂存区配合分支切换可以较好的完成,工作区的分支切换/代码存储合并的动作</p></li></ol><h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2><ul><li><p>Code Review如何让每一个人参与其中?</p></li><li><p>CI耗时过程问题以及是否需要进行CI?</p></li></ul><blockquote><p>需要,非常需要;gradle cache;</p></blockquote><ul><li>代码文件冲突/合并的问题?</li></ul><blockquote><p>产生的原因是与长期分支脱节、需求划分的不合理、没有及时的协作解决冲突等等</p></blockquote><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://docs.gitlab.cn/jh/topics/gitlab_flow.html">GitLab Flow 介绍</a><br><a href="https://www.ruanyifeng.com/blog/2015/12/git-workflow.html">Git 工作流程</a><br><a href="https://nvie.com/posts/a-successful-git-branching-model/">一个成功的Git分支模式</a><br><a href="http://dockone.io/article/2350">gitLab Flow的11条建议</a><br><a href="https://www.atlassian.com/git/tutorials/comparing-workflows">atlassian Bitbucket</a><br><a href="https://about.gitlab.com/topics/version-control/what-is-git-workflow/">what-is-git-workflow</a><br><a href="https://www.toptal.com/software/trunk-based-development-git-flow">trunk based developmentgit flow</a><br><a href="https://medium.com/burdaforward/state-of-ci-cd-and-the-dreaded-git-flow-fce92d04fb07">State of CI/CD and the omnipresent git flow</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式数据库系统原理</title>
      <link href="2022/09/27/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/31.%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
      <url>2022/09/27/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/31.%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1>分布式数据库系统原理</h1><h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><blockquote><p>为什么需要分布式?</p></blockquote><ul><li><B>处理逻辑</B></li><li><B>功能</B></li><li><B>数据</B></li><li><B>控制</B></li></ul><p>对于这个的理解应该是:</p><ul><li>处理逻辑:对应应用实例或者算法之类的,单点无法满足某些需求(AP)</li><li>功能:对于功能的分布式划分主要是体现在微服务的拆分上,不同的功能拆分成为不同的服务</li><li>数据:对于数据的拆分主要是单点数据服务无法满足要求的情况下,进行拆库拆表</li><li>控制:<font color="#dddd00">这个暂时不能理解?控制是否为程序或者算法的同义楠?</font></li></ul><blockquote><p>什么是分布式数据库?<br>物理上分布不同地方,通过计算机网络逻辑上相互关联的数据库</p></blockquote><h3 id="主要的问题"><a class="header-anchor" href="#主要的问题"></a>主要的问题</h3><ul><li>数据如何选择分片?</li><li>分布式事务的实现?</li><li>性能问题?</li></ul><p>如下图:</p><p><img src="https://raw.githubusercontent.com/agmtopy/noteBook/master/png/f-%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB.jpg" alt="分布式数据问题之间的联系"></p><h3 id="集中式数据库模型与分布式数据库模型"><a class="header-anchor" href="#集中式数据库模型与分布式数据库模型"></a>集中式数据库模型与分布式数据库模型</h3><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/f-%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86/%E9%9B%86%E4%B8%AD%E5%BC%8FDBMS%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84.jpg?raw=true" alt="集中式DBMS分层架构"></p><p>可以看到集中式数据库就是一个标准的应用分层,以MySql为例</p><p>界面: 提供不同语音的MySql Drive<br>控制: 连接校验<br>编译: sql解析<br>执行: innodb存储引擎处理<br>数据访问:MySql内核处理<br>一致性: 各种Lock和log</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/f-%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.jpg?raw=true" alt="分布式数据库结构"></p><p>可以看到分布式数据库系统需要从三个不同的方面进行考虑:<B>物理分布</B>&lt;B&gt;异构性</B>&lt;B&gt;自治性</B></p><ul><li>物理分布:指的是组成分布式系统的服务可以在物理上隔离,可以不需要在通一台硬件机器上运行</li><li>异构性:指的是各个服务允许使用各自的协议来提供服务,这一点在工业级的分布式数据库上应该没有实现,还是遵守相同协议来降低软件复杂度</li><li>自洽性:各个服务本身就可以单独对外提供服务,不用依赖其他系统,这一点常用的分布式系统较为不同</li></ul><h3 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h3><ul><li>DBMS</li></ul><blockquote><p>DBMS-关系数据库的概念是一组结构化的数据,它是出于我们对现实世界建模的映射,一个关系数据库是以表格形式表达数据的数据库.</p></blockquote><h2 id="分布式数据库设计"><a class="header-anchor" href="#分布式数据库设计"></a>分布式数据库设计</h2><p>有两种分布式数据库的设计方法:<B>自顶向下的方法</B>和<B>自底向上的方法</B>,这也是软件领域设计的两种通用设计方法,例如我们在设计系统的时候基于底层功能实现还是上层战略定位来进行的往往会得到不同的演进路线;</p><ul><li>自顶向下:指的是在设计的时候就考虑不同的实例去支持局部的全局概念模型</li><li>自底向上:指的是将多个数据库中的信息集成为一个紧密相连的多数据库系统,常用于<B>数据仓库/数据湖</B></li></ul><h3 id="分布设计的研究问题"><a class="header-anchor" href="#分布设计的研究问题"></a>分布设计的研究问题</h3><ul><li>如何得到正确的分片结果?<br>首先,数据分片有两种维度来进行,一种是垂直分片按照业务领域进行划分,一种是水平进行分片按照特定规则来进行划分;我们会重点研究采用水平模式的设计方案.</li></ul><p>专业的分布式数据库的数据划分好复杂,会去考虑数据的分片是按照某些条件来进行的,既要保证数据的分片又要保证数据的’亲和性’;一大段一大段的高阶函数~😳😳😳</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代操作系统原理与实现-内存管理篇</title>
      <link href="2022/09/24/20.%E7%AC%94%E8%AE%B0/12.%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%AF%87/"/>
      <url>2022/09/24/20.%E7%AC%94%E8%AE%B0/12.%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1>现代操作系统原理与实现-内存管理篇</h1><p>一晃而过距离上一篇<B>硬件结构</B>已经过去了一个月有余了.最近一直在整理<B>Notion</B>上的笔记,把《深入理解Java虚拟机》的相关笔记也在notion上写和整理去了,对《现代操作系统原理与实现》的笔记也耽搁了许久;这本书应该是本年度最佳书籍了,会争取在今年把第一遍阅读的相关笔记完成,时间过的真的很快,跑题感慨了一下,下面继续有关内存部分的整理和理解吧!</p><h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>在上一章中了解到物理内存是组成操作系统的重要部分,这一章节就是介绍操作系统是如何管理和使用内存的;</p><h3 id="内存管理"><a class="header-anchor" href="#内存管理"></a>内存管理</h3><p>内存管理主要是对物理内存的管理,在早期程序是直接分配在物理内存上运行的,那个时候操作系统都不存在,这样分配会产生几个问题例如程序直接操作物理内存无法做到隔离/分配内存空间的碎片化/无法处理超过物理容量限制的分配</p><p>针对这个些问题,提出了<B>虚拟内存</B>的概念,大概是在1956年的一位德国物理学家提出的,感觉这个时间过了好久了啊,但是在翻阅资料查这些的时候发现计算机的发明居然还没有80年,太不可思议了</p><p><img src="http://www.isolves.com/d/file/p/2020/03-17/bbd1470ef6879e2f6e4847b7444fde35.jpg" alt="虚拟内存技术发展时间线"></p><h4 id="虚拟内存"><a class="header-anchor" href="#虚拟内存"></a>虚拟内存</h4><blockquote><p>虚拟内存作为物理内存和应用程序之间的一个抽象层;应用程序不在直接运行在物理内存之上,而是运行在虚拟内存之上;应用程序在运行时只知道虚拟内存地址,cpu或者硬件负责将虚拟地址转换为物理地址,操作系统负责设置虚拟地址与物理地址之间的映射;每个应用程序只能看到属于自己的虚拟内存地址,并且看到的虚拟内存地址是同一的、连续的;</p></blockquote><ul><li>虚拟内存的结构<br>下面是一张有关CPU如何将虚拟地址转换为物理地址的图:</li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/drawio/x-%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/CPU%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%BF%BB%E8%AF%91%E7%A4%BA%E6%84%8F%E5%9B%BE.drawio.png?raw=true" alt="CPU虚拟地址翻译示意图"></p><p>可以看到操作系统向CPU发生虚拟地址访问请求后,传给MMU在通过TLB转换后,将物理地址发送给操作总线,从而访问到物理内存地址;</p><p>现代操作系统都是通过分页的形式采用页表来实现的,<B>TLB</B>缓存了虚拟页号到物理页号之间的映射关系,TLB的设计非常简单就是做映射,但是却十分的高效,因为在内存数据的访问遵守<B>时空局部性原理</B></p><ul><li>虚拟内存中的换页</li></ul><p>在前面说到物理内存无法自动处理分配超过实际容量限制的场景.而虚拟内存可以做到,就是通过换页机制来实现的,具体流程如下:</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/143273007">操作系统之内存管理</a><br><a href="https://ewikizh.top/wiki/Virtual_memory#cite_note-10">虚拟内存</a><br><a href="https://www.isolves.com/it/rj/jy/2020-03-17/14226.html">虚拟内存技术的前世今生</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代操作系统原理与实现-硬件结构篇</title>
      <link href="2022/08/14/20.%E7%AC%94%E8%AE%B0/11.%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84%E7%AF%87/"/>
      <url>2022/08/14/20.%E7%AC%94%E8%AE%B0/11.%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>操作系统是建立在硬件结构基础上的软件实现,这一章节我们来介绍计算机的硬件结构.</p><h2 id="CPU与指令集架构"><a class="header-anchor" href="#CPU与指令集架构"></a>CPU与指令集架构</h2><blockquote><p>指令集架构是cpu与软件之间的桥梁,包括指令集\特权级\寄存器\执行模式\安全扩展\性能加速等等</p></blockquote><h3 id="指令集"><a class="header-anchor" href="#指令集"></a>指令集</h3><p>指令集包括<B>精简指令集(RISC)</B>和<B>复杂指令集(CISC)</B>两种.</p><ul><li><p>精简指令集<br>指的是没有寄存器的指令集,通过指令来模拟寄存器的操作,常见的安卓和苹果的A系/M系芯片都是使用的这种指令集</p></li><li><p>复杂指令集<br>指的是有寄存器的指令集,通过使用寄存器来执行指令,常见的Intel的X86芯片都是使用的这种指令集</p></li></ul><p>目前在生产中并没有严格隔离指令集,CISC也在集成RISC的相关指令</p><p>常用的指令类型分为4种:</p><ul><li>数据搬移指令(mov等)</li><li>寄存器计算指令(add/sub等)</li><li>内存读写指令(ldr-加载/str-读写等)</li><li>调整指令(b)</li><li>过程调用指令(bl/ret)</li><li>特权指令(mrs/msr)</li></ul><h2 id="特权级"><a class="header-anchor" href="#特权级"></a>特权级</h2><p>指的是指令运行的级别,分别是El0,El1,El2,El3</p><ul><li><p>El0<br>指的是最低特权级,应用程序通常运行在这一级别上,也可以称为<B>用户态</B></p></li><li><p>EL1<br>操作系统通常运行在这一级别上,也称为<B>内核态</B></p></li><li><p>El2<br>指的是次高特权级,操作系统通常运行在这一级别上,也称为<B>高级内核态</B>,通常虚拟机监控器需要运行在这一状态</p></li><li><p>El3<br>负责普通世界与安全世界的切换,安全世界是<B>AArch64</B>提出来的一个管理硬件交互的级别,EL3在级别上是最高的,因为可以直接操作硬件</p></li></ul><blockquote><p>EL0 &lt; EL1 &lt; EL3 &lt; EL3</p></blockquote><p>程序在运行过程中大量的发生EL0 &lt;=&gt; EL1转换,其实就是用户进程与内核进程在不断的进行切换的过程;这里需要注意一点的是<B>中断</B>是运行在EL1级别上的</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E4%B8%AD%E6%96%AD%E5%88%87%E6%8D%A2.jpg?raw=true" alt="中断切换"></p><h2 id="寄存器"><a class="header-anchor" href="#寄存器"></a>寄存器</h2><p>寄存器是指令集中的一种数据结构,用于存储数据,比如寄存器中存储的是指令的地址,寄存器中存储的是指令的参数等等.它们是cpu的基本架构组成部分,参与指令的执行和计算过程.现代CPU往往会使用大量专用的寄存器来做专业的事情,比如帧指针寄存器,连接寄存器等</p><h2 id="物理内存与CPU缓存"><a class="header-anchor" href="#物理内存与CPU缓存"></a>物理内存与CPU缓存</h2><ul><li>物理缓存</li></ul><blockquote><p>CPU在执行的过程中,可以通过访存指令不断的向物理内存中读写数据;CPU使用物理内存的方式很简单:通过<B>总线</B>向物理内存发生一个读写请求,其中包括目标地址,物理内存在接收到请求后,会根据请求的类型进行读写操作,并返回相应的结果</p></blockquote><p>通过以上的描述可以得知CPU在进行执行时都是通过总线与内存进行交互\cpu从内存中取值后会放到私有的区域(CPU缓存)中,其实这样的设计也加大了应用人员开发出健壮/正确的并发代码难度,在编写并发相关代码时一定要仔细</p><ul><li>CPU缓存</li></ul><blockquote><p>CPU缓存是一个私有的区域,用于存储CPU执行过程中的数据;由若干个<B>缓存行</B>组成.每个缓存行包含:一个<B>有序位标识</B>标识数据是否有效和一个<B>标记地址</B>用于标记其对应的物理地址;</p></blockquote><blockquote><p>CPU以缓存行(常见的是64bit大小)为单位把物理内存读取到缓存中,也就是说如果只需要一个bit的数据,但是还是需要把该字节对应的缓存行数据全部读取到缓存中,写入反之亦然也是每次需要写出64bit大小的数据</p></blockquote><p>对于CPU缓存行最熟悉的一个作用是<B>禁止指令重排</B>,在java中我们知道valitate的一个作用是可见性,就是根据基于缓存行的<B>缓存一致性协议-MESI协议</B>来实现的</p><p>volatile的另外一个作用是可以解决编译器层面的可见性与重排序问题。而内存屏障则解决了硬件层面的可见性与重排序问题</p><h2 id="设备与中端"><a class="header-anchor" href="#设备与中端"></a>设备与中端</h2><p>常见的设备指的是输入与输出设备,常见的内存映射输入输出设备,常见的中断设备,比如硬盘,光驱,键盘,鼠标等</p><p><B>中断</B>机制是提供设备主动通知CPU的能力.设备通过向CPU发送中断来打断CPU的执行.</p><h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2><p>本章主要介绍<B>精简指令集</B>&lt;B&gt;特权级</B>&lt;B&gt;寄存器</B>&lt;B&gt;内存与缓存</B>等硬件基本结构<br>多核CPU缓存的设计遵守<B>缓存一致性协议</B>这个是valotail可见性的基础</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/MrLiuZF/p/15054855.html">CPU缓存</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入分布式缓存-从原理到实践(一)</title>
      <link href="2022/08/08/20.%E7%AC%94%E8%AE%B0/20.%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E8%B7%B5(%E4%B8%80)/"/>
      <url>2022/08/08/20.%E7%AC%94%E8%AE%B0/20.%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E8%B7%B5(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1>深入分布式缓存-从原理到实践(一)</h1><h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>是《深入分布式缓存-从原理到实践》一书的一些记录</p><h2 id="理论基础"><a class="header-anchor" href="#理论基础"></a>理论基础</h2><blockquote><p>cache这个词,据说来自于法语,本意是当CPU处理数据时先到cache中去寻找,如果数据在之前的操作与i就读取而被暂存其中,就不需要从主内存中去读取了.后来cache的范围有所扩展,泛指凡是位于速度相差比较大的两种硬件之间,用于协调两者数据传输差异的结构,都称为cache.</p></blockquote><p>凡是通过两种查询速度较大的方式来查询同一对象都称为cache</p><blockquote><p>缓存:存储在计算机上的一个原始数据复制集,以便用于访问   -wiki</p></blockquote><p>常见的一些缓存:</p><ul><li>CPU多级缓存</li><li>TLB(Translation lookaside buffer) -最新的虚拟内存-&gt;物理内存的转换</li></ul><p>缓存分类:</p><ul><li>按缓存位置划分<ul><li>客户端缓存</li><li>服务器端缓存</li><li>网络中的缓存</li></ul></li><li>按部署方式划分<ul><li>单体缓存</li><li>集群缓存</li><li>分布式缓存</li></ul></li></ul><h3 id="网络中的缓存"><a class="header-anchor" href="#网络中的缓存"></a>网络中的缓存</h3><ul><li>web代理缓存</li></ul><p>使用正向代理的方式将web服务器上的数据进行缓存,客户端请求后之间返回不需要重新先web服务器请求</p><ul><li>边缘缓存</li></ul><p>边缘缓存是通过反向代理的方式与用户处于同一网络,向用户提供静态内容的缓存,典型应用就是CDN缓存</p><h3 id="缓存算法"><a class="header-anchor" href="#缓存算法"></a>缓存算法</h3><p>LRU:最近最少使用算法<br>LFU:最少使用算法(会统计一段时间内每个缓存的访问次数)<br>SIZE:缓存大小算法(按照缓存的大小进行算法)</p><h2 id="分布式系统理论"><a class="header-anchor" href="#分布式系统理论"></a>分布式系统理论</h2><ul><li>并向与并发</li></ul><blockquote><p>并发指的是两个事情或多个事情在同一个时间段内间隔发生;并行指的是两个事情或多个事情在同一个时刻同时发生;</p></blockquote><ul><li>CAP</li></ul><blockquote><p>CAP理论提出一致性\可用性\分区容错性的取舍问题</p></blockquote><p>一致性©:指的是在同一时刻访问所有节点得到的数据相同<br>可用性(U):指的是在同一时刻访问所有节点得到的数据都可用<br>分区容错性§:指的是节点一定会发生故障,但是不会影响整个系统的正常运行</p><h3 id="分布式系统设计策略"><a class="header-anchor" href="#分布式系统设计策略"></a>分布式系统设计策略</h3><p>分布式系统设计策略指的是对于设计分布式系统常见的几个问题的处理策略:</p><ul><li>如何检测你还活着?</li><li>如何保障高可用?</li><li>容错机制的设计?</li><li>重试机制?</li><li>负载均衡?</li></ul><p>下面详细对每一个问题进行解答:</p><h4 id="如何检测你还活着"><a class="header-anchor" href="#如何检测你还活着"></a>如何检测你还活着?</h4><p>在分布式系统中如何检测当前节点是否存活?<br>在大多数分布式中间件中都是通过<B>心跳检测</B>的机制来检测当前节点是否存活的,例如在zk的client与server之间的心跳检测保持连接\redis哨兵架构中的哨兵与master/slave之间的心跳检测</p><p><B>φ-accrual 故障检测器</B>是通过滑动窗口的时间算法来统计结果</p><p><B>Gossip分发</B>(流言算法)通过消息的传递确定节点是否应该停止服务的算法</p><p>小结:<br>存活检测有两个方法:一个是从通信链路入手检测目标节点的网络是否异常\一种是通过检测当前状态是否符合预期状态来检测目标节点是否存活</p><h4 id="如何保障高可用"><a class="header-anchor" href="#如何保障高可用"></a>如何保障高可用?</h4><p>在分布式系统中保障高可用的核心就是数据备份,通过多个节点的备份来在任何节点故障的情况下提供服务<br>按照提供服务的节点时机可以分为<B>主备(Master/Slave)</B>&lt;B&gt;互备(Failover)</B>&lt;B&gt;集群(Cluster)</B>这三种方式</p><ul><li><p>主备(Master/Slave)模式<br>主备模式多用于要求严格提供C(一致性)\A(可用性)的场景中,MySQL的主备模式\Redis的哨兵模式</p></li><li><p>互备(Failover)模式<br>互备模式指的是各个节点提供的数据和服务是相同的,常见的RocketMQ的注册中心NameServer就是多个节点提供相同的服务</p></li><li><p>集群(Cluster)模式<br>集群模式指的是服务在多个节点运行,不同的节点运行不同的任务,比如Redis的集群模式;集群模式与主备模式/互备模式的区别在于集群模式是仅对服务进行高可用的设计,另外两种设计既有对服务和数据的双重含义</p></li></ul><h4 id="容错机制的设计"><a class="header-anchor" href="#容错机制的设计"></a>容错机制的设计</h4><p>容错机制指的是在系统设计中需要对一些异常场景的兼容,例如在Raft的一些实现中就会对CommitId进行CRC32的容错机制校验</p><h4 id="重试机制"><a class="header-anchor" href="#重试机制"></a>重试机制</h4><p>重试机制指的是系统调用失败后,由于无法确定是否网络异常,或者是否是系统调用的问题,可以重试一定次数,如果重试次数超过限制,则抛出异常;这种设计是基于网络异常和系统异常的区别的基础上来进行设计的,在一般认为中网络异常是频繁且持续的,因此可以重试机制下,重试一定次数<br>重试机制又会引出接口幂等的场景,因此在分布式系统设计中,接口一定要提供幂等</p><h4 id="负载均衡"><a class="header-anchor" href="#负载均衡"></a>负载均衡</h4><p>负载均衡类似于集群模式通过一个总的调度器来对任务进行分配,常用的负载均衡方案Nginx,LB</p><h3 id="分布式系统的几个通用问题"><a class="header-anchor" href="#分布式系统的几个通用问题"></a>分布式系统的几个通用问题</h3><ul><li>全局id的生成</li><li>hash取模分配</li><li>路由表</li><li>一致性hash算法</li><li>数据拆分</li><li>分布式锁的解决方案</li><li>分布式事务的解决方案</li></ul><h4 id="全局Id的生成方案"><a class="header-anchor" href="#全局Id的生成方案"></a>全局Id的生成方案</h4><p>分布式Id的产生是基于数据服务大都采用集群的模式提供服务,在这种模式下不同的节点如果产生的id不进行相互协调的话会造成id的冲突,因此需要一个全局的id生成方案来保证id的唯一性</p><p>有两种实现思路:</p><ul><li>基于节点执行不同规则的id生成</li><li>基于全局协调器的id生成</li></ul><p>下面分别来介绍一下这两种不同的方案</p><ul><li>基于节点执行不同规则的id生成</li></ul><p>是通过值得数据节点的id生成规则来实现的,例如对id设置初始值和步长,然后每个节点都会计算出自己的id,这样就可以保证id的唯一性</p><ul><li><p>基于全局协调器的id生成<br>基于全局协调器的id生成方案实现比较多,例如通过一张id表的方式来进行实现\通过分布式id生成器的号段模式来实现\通过分布式id生成器的雪花算法来实现</p></li><li><p>snowflake的id生成方案</p></li></ul><p>64bit = 41bit(时间戳) + 10bit(节点id) + 12bit(自增id)<br>时间戳精确到毫秒<br>12位自增id每个节点最多产生4096个id</p><h4 id="hash取模-路由表-一致性hash算法"><a class="header-anchor" href="#hash取模-路由表-一致性hash算法"></a>hash取模\路由表\一致性hash算法</h4><p>hash取模\路由表\一致性hash算法都是为了解决数据或服务的一个寻址过程,例如对于一个数据库来说,如果数据库有多个节点,那么对于某个数据来说,可以通过hash取模的方式来寻址到对应的节点,这样就可以保证数据的一致性</p><p>hash取模是指的是对数据进行hash取模,然后根据模的值来寻址到对应的节点,这样就可以保证数据的分片性</p><p>路由表是通过预设的路由表来寻址到对应的节点,这样就也可以保证数据的分片性;路由表还有一个优点是对于有序增加的场景下可以通过递增预设的路由表数据来寻址到对应的节点,还不影响之前的数据,但是这样有一个路由表单点问题,需要做好数据的备份和failover</p><h4 id="数据拆分"><a class="header-anchor" href="#数据拆分"></a>数据拆分</h4><p>数据的拆分主要指的是将数据分片到不同的节点上,这样就可以保证数据的一致性;前面已经介绍数据拆分的原理;<br>常用的数据拆分方案是mycat/shardingsphere等</p><h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3><p>这一章节主要给我们介绍<B>分布式系统设计策略</B>&lt;B&gt;分布式系统的几个通用问题</B>的解决方案</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入分布式缓存-从原理到实践(二)</title>
      <link href="2022/08/08/20.%E7%AC%94%E8%AE%B0/21.%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E8%B7%B5(%E4%BA%8C)/"/>
      <url>2022/08/08/20.%E7%AC%94%E8%AE%B0/21.%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E8%B7%B5(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1>深入分布式缓存-从原理到实践(二)</h1><h2 id="规划定义"><a class="header-anchor" href="#规划定义"></a>规划定义</h2><h3 id="JSR"><a class="header-anchor" href="#JSR"></a>JSR</h3><blockquote><p>JSR是java Specification Requests的缩写,是java定义的一种对java对象临时在内存中进行缓存的方法,包括对象的创建\访问\失效\一致性等</p></blockquote><h3 id="缓存常用方法"><a class="header-anchor" href="#缓存常用方法"></a>缓存常用方法</h3><table><thead><tr><th>接口</th><th>说明</th><th>Ehcache</th><th>Guava</th></tr></thead><tbody><tr><td>put()</td><td>添加缓存</td><td>✔</td><td>✔</td></tr><tr><td>putIfAbsent()</td><td>如果key不存在则添加缓存</td><td>✔</td><td>✔</td></tr><tr><td>replace()</td><td>如果key存在则替换缓存</td><td>✔</td><td>✔</td></tr><tr><td>get()</td><td>获取缓存</td><td>✔</td><td>✔</td></tr><tr><td>getAll()</td><td>获取所有缓存</td><td>✔</td><td>✔</td></tr><tr><td>getAllPresent(key)</td><td>存在key在进行加载</td><td>❌</td><td>✔</td></tr><tr><td>putAll(entries)</td><td>添加所有缓存</td><td>✔</td><td>✔</td></tr><tr><td>keySet()</td><td>获取所有key</td><td>❌</td><td>❌</td></tr><tr><td>remove()</td><td>移除缓存</td><td>✔</td><td>✔</td></tr><tr><td>clear()</td><td>清空缓存</td><td>✔</td><td>✔</td></tr></tbody></table><p>可以看到常见的缓存操作就三类:<B>添加</B>&lt;B&gt;获取</B>&lt;B&gt;移除</B></p><p>下面介绍两类缓存的实现方式:<B>本地缓存</B>和<B>分布式缓存</B></p><h2 id="本地缓存"><a class="header-anchor" href="#本地缓存"></a>本地缓存</h2><h3 id="Ehcache"><a class="header-anchor" href="#Ehcache"></a>Ehcache</h3><p>暂且将Ehcache划分到本地缓存中,因为在使用中大多数场景下还是将Ehcache作为本地缓存来进行使用</p><p>Ehcache2的核心淘汰策略逻辑如下:</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ehcache_AbstractPolicy_selectedBasedOnPolicy.jpg?raw=true" alt="selectedBasedOnPolicy"></p><p><a href="https://github.com/ehcache/ehcache2/blob/12f580426154277bd7079bb71e85ae3615eae36f/ehcache-core/src/main/java/net/sf/ehcache/store/AbstractPolicy.java#L77">AbstractPolicy.selectedBasedOnPolicy</a></p><ul><li>compare</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Compares the desirableness for eviction of two elements * * @param element1 the element to compare against * @param element2 the element to compare * @return true if the second element is preferable for eviction to the first element * under ths policy */</span><span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element1<span class="token punctuation">,</span> <span class="token class-name">Element</span> element2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<B>compare()</B>方法是核心的比较方法,下层有<B>LRUPolicy</B>&lt;B&gt;LFUPolicy</B>&lt;B&gt;FIFOPolicy</B>底层实现</p><ul><li>LruPolicy</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">// 最近最少使用算法</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element1<span class="token punctuation">,</span> <span class="token class-name">Element</span> element2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 比较最后访问时间</span>    <span class="token keyword">return</span> element2<span class="token punctuation">.</span><span class="token function">getLastAccessTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> element1<span class="token punctuation">.</span><span class="token function">getLastAccessTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/ehcache/ehcache2/blob/12f580426154277bd7079bb71e85ae3615eae36f/ehcache-core/src/main/java/net/sf/ehcache/store/LruPolicy.java#L52">LruPolicy.compare</a></p><ul><li>LFU</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">// 最近最少使用算法</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element1<span class="token punctuation">,</span> <span class="token class-name">Element</span> element2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 比较访问次数</span>    <span class="token keyword">return</span> element2<span class="token punctuation">.</span><span class="token function">getHitCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> element1<span class="token punctuation">.</span><span class="token function">getHitCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/ehcache/ehcache2/blob/12f580426154277bd7079bb71e85ae3615eae36f/ehcache-core/src/main/java/net/sf/ehcache/store/LfuPolicy.java#L52">LfuPolicy.compare</a></p><ul><li>FIFO</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">// 最近最少使用算法</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element1<span class="token punctuation">,</span> <span class="token class-name">Element</span> element2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 比较创建和更新时间</span>    <span class="token keyword">return</span> element2<span class="token punctuation">.</span><span class="token function">getLatestOfCreationAndUpdateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> element1<span class="token punctuation">.</span><span class="token function">getLatestOfCreationAndUpdateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/ehcache/ehcache2/blob/12f580426154277bd7079bb71e85ae3615eae36f/ehcache-core/src/main/java/net/sf/ehcache/store/FifoPolicy.java#L52">FIFOPolicy.compare</a></p><h3 id="Guava-Cache"><a class="header-anchor" href="#Guava-Cache"></a>Guava Cache</h3><p>Guava Cache是Google对java集合的一种封装来实现缓存功能;</p><p>Guava Cache 提供缓存的失效时间和定时更新功能,下面介绍Guava Cache定时更新方法</p><ul><li>scheduleRefresh()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">V</span> <span class="token function">scheduleRefresh</span><span class="token punctuation">(</span>    <span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> entry<span class="token punctuation">,</span>    <span class="token class-name">K</span> key<span class="token punctuation">,</span>    <span class="token keyword">int</span> hash<span class="token punctuation">,</span>    <span class="token class-name">V</span> oldValue<span class="token punctuation">,</span>    <span class="token keyword">long</span> now<span class="token punctuation">,</span>    <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> loader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">refreshes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//map.refreshes()判断是否存在过期时间</span>      <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> entry<span class="token punctuation">.</span><span class="token function">getWriteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> map<span class="token punctuation">.</span>refreshNanos<span class="token punctuation">)</span><span class="token comment">//判断是否已经过期</span>      <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>entry<span class="token punctuation">.</span><span class="token function">getValueReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否当前正在加载新值</span>    <span class="token class-name">V</span> newValue <span class="token operator">=</span> <span class="token function">refresh</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重新加载数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scheduleRefresh()方法是在get()方法中调用的<br><a href="https://github.com/google/guava/blob/c111c0150225739b3f5914d1739cd22fb692bce7/guava/src/com/google/common/cache/LocalCache.java#L2324">LocalCache.scheduleRefresh</a></p><h3 id="Caffine"><a class="header-anchor" href="#Caffine"></a>Caffine</h3><h2 id="二级缓存"><a class="header-anchor" href="#二级缓存"></a>二级缓存</h2><p>在使用集中式或者数据库热点配置数据时,我们往往将这些数据放到应用进程空间中中,这样可以提高缓存的命中率;可以用Echache/Guava作为二级缓存来进行使用<br>下面介绍两种常用的设计方案:</p><ul><li>定时轮询</li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/drawio/s-%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98.%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E7%8E%B0/reids%E6%95%B0%E6%8D%AE%E5%AE%9A%E6%97%B6%E8%BD%AE%E8%AF%A2%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88.drawio.png?raw=true" alt="定时轮询"></p><ul><li>消息通知</li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/drawio/s-%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98.%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E7%8E%B0/reids%E6%95%B0%E6%8D%AE%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88.drawio.png?raw=true" alt="消息通知"></p><p>消息通知的方案可以保证准实时下的推送,但是会带来一定的开销,比如消息通知的推送频率是每秒一次,那么每秒钟的消息会被推送到缓存中,这样会带来一定的开销,通过这样的消耗来保证实时性;还需要注意一点的是应用的重启后一定要消费最新的消息或从redis中获取最新的数据</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://github.com/hazelcast/hazelcast">https://github.com/hazelcast/hazelcast</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代操作系统原理与实现-操作系统结构篇</title>
      <link href="2022/08/04/20.%E7%AC%94%E8%AE%B0/10.%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E7%AF%87/"/>
      <url>2022/08/04/20.%E7%AC%94%E8%AE%B0/10.%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1>引言</h1><p>《现代操作系统原理与实现》是一本介绍操作系统相关的书籍,是以ARM平台进行演示的.目前在看过一遍之后,我觉得还是比较有意思的<B>操作系统结构</B>、<B>硬件结构</B>、<B>内存管理</B>、<B>进程与线程</B>、<B>进程间通信</B>、<B>同步原语</B>、<B>文件系统</B>这七个章节.<br>下面会依次对这些章节做相关介绍.</p><h2 id="操作系统结构"><a class="header-anchor" href="#操作系统结构"></a>操作系统结构</h2><p>为什么要优先介绍<B>操作系统结构</B>,是这个章节给我带来了极大的感悟：对于像操作系统这样庞大的系统,在良好的架构下可以很好的有序演进,这一点是很多业务系统所欠缺的.<br>下面将从两个方面进行介绍:<B>设计方法</B>、<B>实践</B></p><h2 id="设计方法"><a class="header-anchor" href="#设计方法"></a>设计方法</h2><p>对于操作系统的设计方法或者方法论(不太喜欢’方法论’这一表述词,因为有一种’定式’的味道,现实或代码中并没有什么是固定的)来说,主要是对复杂度进行管理的一种手段;<br>这里介绍了一种设计方法:<B>M.A.L.H</B>,即模块化(modularity)、抽象(abstraction)、分层(layering)、层级(hierarchy),我对于设计简直是认同的不能在认同了.</p><h3 id="模块化"><a class="header-anchor" href="#模块化"></a>模块化</h3><p>模块化是通过<B>‘分治法’</B>的思想,将一个复杂系统分解为一系列有明确含义/领域能相互进行交互的小模块.模块的划分一定要具有’高内聚’和’低耦合’的特性,不能过大也不能过于小.<br>现代操作系统都是模块化的,以linux内核为例,可以看到分为若干模块</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97.jpg?raw=true" alt="linux模块"></p><p>关于模块化还有一些学者的阐述:<br><img src="https://martinfowler.com/articles/microservice-trade-offs.html" alt="Microservice Trade-Offs"></p><h3 id="抽象"><a class="header-anchor" href="#抽象"></a>抽象</h3><p>抽象是在模块化的基础上,将<B>接口</B>与<B>内部实现</B>进行区分,从而使得策略与实现分离.<br>这也是程序设计中的一个重要的设计原则:<B>策略</B>与<B>机制</B>分离:<B>策略</B>表示的是&quot;要做什么&quot;,<B>机制</B>表示的是&quot;要如何做&quot;</p><p>在操作系统中有很多抽象的例子,比如<B>VFS</B>、<B>虚拟内存</B>等就对不同硬件的抽象.</p><p>良好的模块化与抽象可以很好的将一个大型系统分解为一系列能够比较好的进行交付的模块;</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E6%8A%BD%E8%B1%A1.jpg?raw=true" alt="模块化与抽象"></p><h3 id="分层"><a class="header-anchor" href="#分层"></a>分层</h3><p>分层是通过将模块按照一定的规则进行层次划分,约束每一层内部模块之间的交付方式与跨层次模块之间的交互方式,从而使得整个系统的交付方式有序;通常的规则约束是:一个模块只能和同一层模块以及相邻的上下层模块进行交互,而不能跨模块进行交互.</p><p>分层是开始构建复杂系统架构的开始,通过确定层级后,先构建底层基础模块,然后在利用这些基础模提供的功能来构建应用服务.</p><p>在实际web项目中基本上都会根据controller/service/dao三层架构来进行划分,service层的扩展要稍微多一点,例如六边形架构、洋葱圈架构等.</p><h3 id="层次"><a class="header-anchor" href="#层次"></a>层次</h3><p>层次是模块化的另外一种表现方式,是系统对功能的抽象与组织;例如组织架构类似,在组织架构上经理岗位是负责某一部分业务的,那公司的这一部分业务就需要交给他这个岗位进行负责;这个岗位下又会在分解交给其他岗位完成一样;</p><p>层次会在完成模块化、抽象、分层后自然体现出来,它与分层概念很类似,我认为的区别在于分层关注的是交互/调用关系的维护和有序,层次是关注与功能的抽象和组织;</p><h3 id="一些碎碎念"><a class="header-anchor" href="#一些碎碎念"></a>一些碎碎念</h3><p>大多数程序员长期以来写的代码都是以实现当前需求为己任,对于代码之后的生命周期是不会去考虑的.这样的代码在过了几个月以后或者另外一位同事接手后不得不在一声声’问候’下继续做相同的事情.<br>我始终认为简单明了的代码是最好的代码,因为这样的可读性是最好的; 不用去追求’新’、‘奇’来体现技术能力,而是要去追求’正确性’、'可读性’来体现技术能力;<br>然而在实际开发中,我们往往缺少一种能够指导的方法,我认为<B>M.A.L.H</B>就是一种非常好的实现,M.A.L.H中隐含了一些程序设计的技巧或法则:单一职责原则、依赖倒置原则、接口隔离原则</p><p>个人理解总结下来:</p><p>是否<B>能够</B>模块化?<br>是否<B>需要</B>抽象?<br>是否<B>能够</B>分层?<br>是否<B>体现</B>层次?</p><p>这些表现是层层递进的一个过程.</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven-shade-plugin使用中的小问题</title>
      <link href="2022/04/22/1.%E6%9D%82%E8%AE%B0/maven-shade-plugin%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
      <url>2022/04/22/1.%E6%9D%82%E8%AE%B0/maven-shade-plugin%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1>maven-shade-plugin使用中的小问题</h1><p>maven-shade-plugin打包导致META-INF/SERVICES中的文件丢失,导致jar在动态加载时无法启动.这个问题困扰了我一周,暂时先记录处理办法,后续完善解决步骤</p><p>主要是依据这篇文章来解决处理的<br><a href="https://cloud.tencent.com/developer/article/1622207">https://cloud.tencent.com/developer/article/1622207</a></p><ul><li>maven-shade-plugin模板</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- put your configurations here --></span>                <span class="token comment">&lt;!--只包含该项目代码中用到的jar,在父项目中引入了，但在当前模块中没有用到就会被删掉--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>minimizeJar</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>minimizeJar</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--重新定位类位置，就好像类是自己写的一样，修改别人jar包的package--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relocations</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relocation</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>com.alibaba.fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shadedPattern</span><span class="token punctuation">></span></span>com.gavinzh.learn.fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shadedPattern</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                            <span class="token comment">&lt;!--这些类和包不会被改变--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>com.alibaba.fastjson.not.Exists<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>com.alibaba.fastjson.not.exists.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relocation</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relocations</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token comment">&lt;!--创建一个你自己的标识符，位置在原有名称之后--></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shadedArtifactAttached</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shadedArtifactAttached</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shadedClassifierName</span><span class="token punctuation">></span></span>gavinzh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shadedClassifierName</span><span class="token punctuation">></span></span>                        <span class="token comment">&lt;!--在打包过程中对文件做一些处理工作--></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">></span></span>                            <span class="token comment">&lt;!--在META-INF/MANIFEST.MF文件中添加key: value 可以设置Main方法--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>                                    <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.gavinzh.learn.shade.Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Build-Number</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Build-Number</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Built-By</span><span class="token punctuation">></span></span>your name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Built-By</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>X-Compile-Source-JDK</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>X-Compile-Source-JDK</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>X-Compile-Target-JDK</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>X-Compile-Target-JDK</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token comment">&lt;!--阻止META-INF/LICENSE和META-INF/LICENSE.txt--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                            <span class="token comment">&lt;!--合并所有notice文件--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addHeader</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addHeader</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token comment">&lt;!--如果多个jar包在META-INF文件夹下含有相同的文件，那么需要将他们合并到一个文件里--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.AppendingTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring.handlers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.AppendingTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring.schemas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.AppendingTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring.factories<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.AppendingTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring.tld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.AppendingTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring-form.tld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.AppendingTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring.tooling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token comment">&lt;!--如果多个jar包在META-INF文件夹下含有相同的xml文件，则需要聚合他们--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ComponentsXmlResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                            <span class="token comment">&lt;!--排除掉指定资源文件--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>.no_need<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token comment">&lt;!--将项目下的文件file额外加到resource中--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.IncludeResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/pom_test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token comment">&lt;!--整合spi服务中META-INF/services/文件夹的相关配置--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ServicesResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot源代码分析之启动原理分析</title>
      <link href="2022/04/12/22.springboot/1.SpringBoot%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>2022/04/12/22.springboot/1.SpringBoot%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot源代码分析之启动原理分析</h1><h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>这是一系列关于SpringBoot源代码的相关分析文章,主要参考《SpringBoot编程思想-核心篇》的章节,在参考SpringBoot源代码分析而来,希望对你有所帮助</p><h2 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h2><p>参考项目为地址为:<a href="https://github.com/agmtopy/SpringBootExample">https://github.com/agmtopy/SpringBootExample</a></p><h2 id="启动类概览"><a class="header-anchor" href="#启动类概览"></a>启动类概览</h2><p>在项目中,启动类为<code>SpringDemoApplication</code>,这个类应该是一切的开始,下面我们就来根据这个<B>run</B>方法来进行分析</p><ul><li>SpringDemoApplication</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDemoApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行链路</li></ul><p>可以看到执行链路为:</p><p>这里有一个小细节,在没有提前初始化SpringApplication()时是不能使用arthas进行插入代码,显示错误为图一</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/S-springboot%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/Arthas_SpringApplicationRun1.jpg?raw=true" alt="图1"></p><p>查看相关类信息也没有看到类加载</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/S-springboot%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/Arthas_SpringApplicationRun2.jpg?raw=true" alt="图2"></p><p>经过分析可以知道这时候<B>SpringApplication</B>类还没有加载</p><h3 id="构造方法"><a class="header-anchor" href="#构造方法"></a>构造方法</h3><ul><li>SpringApplication()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">      <span class="token comment">//1. 启动方法  </span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> primarySources<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//2. 构造方法</span>   <span class="token keyword">public</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//1. 初始化ResourceLoader</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">"PrimarySources must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>bootstrapRegistryInitializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">BootstrapRegistryInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<B>SpringApplication</B>初始化的方法中可以看到几个关键的方法<B>3/4/5</B>,分别是获取到Spring工厂的实例后在将工厂实例进行传递;</p><p>下面就详细的探究一下这几个方法的作用</p><ul><li>getSpringFactoriesInstances()</li></ul><p>通过Springboot的源代码可以看到getSpringFactoriesInstances()最后调用到了Spring的<B>loadFactoryNames()</B>方法</p><ul><li>loadFactoryNames</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> factoryType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factories<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>factoryType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主要是获取this.factories这个Map对象中的值,this.factories是<B>SpringFactoriesLoader</B>在进行初始化时产生的,回到SpringBoot中可以看到是通过forDefaultResourceLocation()方法</p><ul><li>forDefaultResourceLocation()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories"</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SpringFactoriesLoader</span> <span class="token function">forDefaultResourceLocation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">forResourceLocation</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//实际调用这个方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SpringFactoriesLoader</span> <span class="token function">forResourceLocation</span><span class="token punctuation">(</span><span class="token class-name">String</span> resourceLocation<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>resourceLocation<span class="token punctuation">,</span> <span class="token string">"'resourceLocation' must not be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ClassLoader</span> resourceClassLoader <span class="token operator">=</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> classLoader <span class="token operator">:</span><span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">></span></span> loaders <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>resourceClassLoader<span class="token punctuation">,</span> key <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentReferenceHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> loaders<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>resourceLocation<span class="token punctuation">,</span> key <span class="token operator">-></span><span class="token comment">// 首次初始化时使用的是loadFactoriesResource()方法来生成FactoryName</span><span class="token keyword">new</span> <span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> <span class="token function">loadFactoriesResource</span><span class="token punctuation">(</span>resourceClassLoader<span class="token punctuation">,</span> resourceLocation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 生成FactoryName</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">loadFactoriesResource</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">,</span> <span class="token class-name">String</span> resourceLocation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">></span></span> urls <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>resourceLocation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">UrlResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> implementations <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">trim</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>implementations<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">SpringFactoriesLoader</span><span class="token operator">::</span><span class="token function">toDistinctUnmodifiableList</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unable to load factories from location ["</span> <span class="token operator">+</span> resourceLocation <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这一段方法的作用就是将传入的"META-INF/spring.factories"中的配置解析成为key-value形式的结果并返回</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>run()方法最后是执行<B>SpringApplication</B>的初始化方法:</p><h3 id="SpringApplication-run"><a class="header-anchor" href="#SpringApplication-run"></a>SpringApplication.run()</h3><ul><li>SpringApplication.run()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 运行Spring应用程序，创建并刷新新的容器 */</span><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 执行需要在初始化开始时执行的钩子方法 -- 已经是过时的方法了在V3.0.0中间hook的实现挪到了SpringApplicationRunListener中,也就是在步骤5中进行执行</span><span class="token class-name">SpringApplicationHooks</span><span class="token punctuation">.</span><span class="token function">hooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">preRun</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 获取初始化时间</span><span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.初始化BootStrapContext(引导上下文)</span><span class="token class-name">DefaultBootstrapContext</span> bootstrapContext <span class="token operator">=</span> <span class="token function">createBootstrapContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//4. 配置head头属性</span><span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5. 获取运行中的执行监听器</span><span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6. 启动监听器</span>listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//7. 初始化应用程序参数</span><span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8. 准备运行环境</span><span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> bootstrapContext<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9. 设置需要忽略的bean</span><span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10. 打印Banner信息</span><span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11. 创建ApplicationContext</span>context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12. 设置应用程序启动器(用于收集启动过程中的一些信息)</span>context<span class="token punctuation">.</span><span class="token function">setApplicationStartup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//13. 准备启动ApplicationContext</span><span class="token function">prepareContext</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//14. 判断是否需要重新刷新容器</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//15. 后置刷新容器方法</span><span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16. 记录时间</span><span class="token class-name">Duration</span> timeTakenToStartup <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofNanos</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeTakenToStartup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//17. 设置监听时间</span>listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> timeTakenToStartup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//18. 执行Runner方法</span><span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Duration</span> timeTakenToReady <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofNanos</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>listeners<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> timeTakenToReady<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//19. 执行后置Hook后置方法</span><span class="token class-name">SpringApplicationHooks</span><span class="token punctuation">.</span><span class="token function">hooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postRun</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到run方法的执行过程分为几个阶段:</p><ul><li><p><B>前置准备阶段</B></p><ul><li>执行前置钩子方法(步骤一)</li><li>初始化引导上下文(步骤二\步骤三\步骤四)</li><li>设置启动监听器 (步骤五\步骤六)</li></ul></li><li><p><B>启动容器阶段</B></p><ul><li>初始化应用参数(步骤七\八\九\十)</li><li>创建容器(步骤十一\十二\十三)</li></ul></li><li><p><B>刷新容器阶段</B></p><ul><li>刷新容器(步骤十四)</li><li>创建容器(步骤十五)</li></ul></li><li><p><B>执行后置方法阶段</B></p><ul><li>执行Runner(步骤十八)</li><li>执行hook(步骤十九)</li></ul></li></ul><h2 id="前置准备阶段"><a class="header-anchor" href="#前置准备阶段"></a>前置准备阶段</h2><p><B>前置准备阶段</B>主要是设置一些容器上下文和钩子函数,下面详细分析一下这几个功能的实现</p><h3 id="执行前置钩子方法"><a class="header-anchor" href="#执行前置钩子方法"></a>执行前置钩子方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置钩子方法</span><span class="token class-name">SpringApplicationHooks</span><span class="token punctuation">.</span><span class="token function">hooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">preRun</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个方法是在针对于AOT的启动过程中提供的钩子方法,最早应用于<B>v3.0.0-M4</B>版本中,<a href="https://github.com/spring-projects/spring-boot/commit/9cd17f8a14eab8007c372c045a6b9295a3a56126?diff=unified">commit</a>,但是在2022.09调整过一次代码结构,将hook重写为基于<B>SpringApplicationRunListener</B>来进行实现了</p><p>下面来继续分析<B>SpringApplicationHooks</B>的执行流程</p><ul><li>org.springframework.boot.SpringApplication#getRunListeners</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;1. 注册到Listeners中private SpringApplicationRunListeners getRunListeners(String[] args) &#123;ArgumentResolver argumentResolver &#x3D; ArgumentResolver.of(SpringApplication.class, this);argumentResolver &#x3D; argumentResolver.and(String[].class, args);List&lt;SpringApplicationRunListener&gt; listeners &#x3D; getSpringFactoriesInstances(SpringApplicationRunListener.class,argumentResolver);&#x2F;&#x2F;获取applicationHook对象SpringApplicationHook hook &#x3D; applicationHook.get();SpringApplicationRunListener hookListener &#x3D; (hook !&#x3D; null) ? hook.getRunListener(this) : null;if (hookListener !&#x3D; null) &#123;listeners &#x3D; new ArrayList&lt;&gt;(listeners);&#x2F;&#x2F;将applicationHookListener添加到listeners.add(hookListener);&#125;return new SpringApplicationRunListeners(logger, listeners, this.applicationStartup);&#125;&#x2F;&#x2F;2. 将Hook设置到applicationHook中public static &lt;T&gt; T withHook(SpringApplicationHook hook, ThrowingSupplier&lt;T&gt; action) &#123;applicationHook.set(hook);try &#123;return action.get();&#125;finally &#123;applicationHook.set(null);&#125;&#125;&#x2F;&#x2F;3. applicationHookprivate static final ThreadLocal&lt;SpringApplicationHook&gt; applicationHook &#x3D; new ThreadLocal&lt;&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<B>applicationHook</B>是放在一个ThreadLocal中的变量,由创建application对象输入;</p><p><B>SpringApplicationHook</B>只有一个方法,就是设置<B>Listener</B></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SpringApplicationHook</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplicationRunListener</span> <span class="token function">getRunListener</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span> springApplication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置主类"><a class="header-anchor" href="#设置主类"></a>设置主类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="准备运行环境"><a class="header-anchor" href="#准备运行环境"></a>准备运行环境</h3><ul><li>prepareEnvironment</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ConfigurableEnvironment</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListeners</span> listeners<span class="token punctuation">,</span><span class="token class-name">DefaultBootstrapContext</span> bootstrapContext<span class="token punctuation">,</span> <span class="token class-name">ApplicationArguments</span> applicationArguments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.初始化创建Environment对象</span><span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">getOrCreateEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 配置Environment对象</span><span class="token function">configureEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 先检查配置属性源</span><span class="token class-name">ConfigurationPropertySources</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.执行environmentPrepared方法(扩展点1)</span>listeners<span class="token punctuation">.</span><span class="token function">environmentPrepared</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5. 移除掉默认属性</span><span class="token class-name">DefaultPropertiesPropertySource</span><span class="token punctuation">.</span><span class="token function">moveToEnd</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token operator">!</span>environment<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span><span class="token string">"spring.main.environment-prefix"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Environment prefix cannot be set via properties."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6. 绑定"spring.main"为this</span><span class="token function">bindToSpringApplication</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isCustomEnvironment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//7. 转换Environment</span><span class="token class-name">EnvironmentConverter</span> environmentConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnvironmentConverter</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>environment <span class="token operator">=</span> environmentConverter<span class="token punctuation">.</span><span class="token function">convertEnvironmentIfNecessary</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token function">deduceEnvironmentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ConfigurationPropertySources</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> environment<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>prepareEnvironment</B>的大概方法就是执行</p><ol><li>初始化配置Environment对象</li><li>执行的SpringApplicationRunListeners.environmentPrepared方法(扩展点1)</li><li>绑定相关属性</li></ol><p>这里面最重要的当属<B>listeners.environmentPrepared</B></p><ul><li>org.springframework.boot.SpringApplicationRunListeners#environmentPrepared</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">environmentPrepared</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableBootstrapContext</span> bootstrapContext<span class="token punctuation">,</span> <span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">doWithListeners</span><span class="token punctuation">(</span><span class="token string">"spring.boot.application.environment-prepared"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token operator">-></span> listener<span class="token punctuation">.</span><span class="token function">environmentPrepared</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到会回调注册为<B>配置文件</B>中配置的类的相关方法</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Run Listeners</span>org.springframework.boot.SpringApplicationRunListener=\org.springframework.boot.context.event.EventPublishingRunListener<span class="token punctuation">,</span>\org.springframework.boot.context.event.SpringApplicationRunListenerTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在<B>SpringApplicationRunListeners</B>里面执行方法也比较有意思,就是直接执行方法listener的具体方法</p><h3 id="初始化ApplicationContext"><a class="header-anchor" href="#初始化ApplicationContext"></a>初始化ApplicationContext</h3><ul><li>createApplicationContext()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//ServletWebServerApplicationContextFactory.java</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationType</span> webApplicationType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>webApplicationType <span class="token operator">!=</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否需要激活AOT</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">AotDetector</span><span class="token punctuation">.</span><span class="token function">useGeneratedArtifacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigServletWebServerApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回ServletContext</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletWebServerApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化ApplicationContex方法就是根据应用类型,方法对应的ApplicationContex</p><h3 id="预处理容器"><a class="header-anchor" href="#预处理容器"></a>预处理容器</h3><ul><li>prepareContext()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span>CONFIGURATION_BEAN_NAME_GENERATOR<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">GenericApplicationContext</span> genericApplicationContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置ResourceLoader</span>genericApplicationContext<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">DefaultResourceLoader</span> defaultResourceLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置ClassLoader</span>defaultResourceLoader<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addConversionService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>prepareContext用来设置<B>setResourceLoader</B>&gt;、<B>setClassLoader</B><br>这里有一个没搞懂的</p><blockquote><p>context instanceof DefaultResourceLoader defaultResourceLoader<br>context会是DefaultResourceLoader的实现类嘛？这里没有搞懂</p></blockquote><ul><li>applyInitializers()</li></ul><p>执行初始化方法,这是第二个扩展点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">applyInitializers</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//遍历全部初始化容器&lt;ApplicationContextInitializer></span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContextInitializer</span> initializer <span class="token operator">:</span> <span class="token function">getInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> requiredType <span class="token operator">=</span> <span class="token class-name">GenericTypeResolver</span><span class="token punctuation">.</span><span class="token function">resolveTypeArgument</span><span class="token punctuation">(</span>initializer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token string">"Unable to call initializer."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行初始化方法</span>initializer<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//setInitializers</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> initializers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在SpringApplication()的构造方法中完成设置</span><span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Application Context Initializers</span>org.springframework.context.ApplicationContextInitializer=\org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer<span class="token punctuation">,</span>\org.springframework.boot.context.ContextIdApplicationContextInitializer<span class="token punctuation">,</span>\org.springframework.boot.context.config.DelegatingApplicationContextInitializer<span class="token punctuation">,</span>\org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer<span class="token punctuation">,</span>\org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看一下<B>ContextIdApplicationContextInitializer</B>是做什么的?</p><ul><li>ContextIdApplicationContextInitializer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getApplicationId</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> name <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.application.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token string">"application"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ContextId</span> contextId <span class="token operator">=</span> <span class="token function">getContextId</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContext<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>contextId<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">ContextId</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> contextId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这个类主要是想context中设置contextId的动作,也可以把它看做是设置context的一种扩展点</p><ul><li>设置BeanFactory</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取Bean Factory</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"springApplicationArguments"</span><span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>printedBanner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"springBootBanner"</span><span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">AbstractAutowireCapableBeanFactory</span> autowireCapableBeanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置BeanFactory是否允许循环依赖</span>autowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">setAllowCircularReferences</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">DefaultListableBeanFactory</span> listableBeanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置是否允许BeanDefinition重写</span>listableBeanFactory<span class="token punctuation">.</span><span class="token function">setAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对BeanFactory设置关键属性<B>是否可以重载BeanDefinition</B>和<B>是否允许循环依赖</B></p><ul><li>addBeanFactoryPostProcessor</li></ul><p>向容器中添加<B>BeanFactoryPostProcessor</B>,</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//是否延迟加载</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazyInitialization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置BeanFactoryPostProcessor</span>context<span class="token punctuation">.</span><span class="token function">addBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LazyInitializationBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//add PropertySourceOrderingBeanFactoryPostProcessor</span>context<span class="token punctuation">.</span><span class="token function">addBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertySourceOrderingBeanFactoryPostProcessor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后还有listeners.contextLoaded</span>listeners<span class="token punctuation">.</span><span class="token function">contextLoaded</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="刷新容器"><a class="header-anchor" href="#刷新容器"></a>刷新容器</h2><p>在SpringBoot中刷新容器反而比较简单,只需要调用Spring的refresh()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>applicationContext<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterRefresh</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//listeners.started</span>listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> timeTakenToStartup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在SpringContext refresh完成后还有一个afterRefresh方法,但是这个方法是空的,不会进行处理;</p><p>然后在往下就是一个listeners.started的调用</p><h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2><p>1.创建计时器并开始<br>​2.创建启动器上下文并执行监听器BootstrapRegistryInitializer的initialize方法<br>​3.创建上下文ConfigurableApplicationContext变量并设置环境一些属性<br>​4.获取SpringApplicationRunListener监听器并执行其starting方法<br>​5.将命令行参数封装到ApplicationArguments里面来<br>​6.初始化应用上下文环境<br>​7.处理忽略Bean的信息<br>​8.打印Banner信息<br>​9.根据当前应用类型来创建context上下文<br>​10.设置记录器<br>​11.为刷新上下前做准备<br>​12.刷新上下文，最重要的功能在这的<br>​13.刷新后的扩展方法，其实里面什么都没有<br>​14.计时器结束<br>​15.记录log<br>​16.SpringApplicationRunListener监听器回调started<br>​17.SpringApplicationRunListener监听器回调running</p><p>注意这个过程中的扩展点:</p><ol><li>listeners</li><li>ApplicationContextInitializer</li></ol><p>和对BeanFactory属性的设置;</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的定时测量分析</title>
      <link href="2022/04/02/21.linux/linux%E7%9A%84%E5%AE%9A%E6%97%B6%E6%B5%8B%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>2022/04/02/21.linux/linux%E7%9A%84%E5%AE%9A%E6%97%B6%E6%B5%8B%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>linux的定时测量分析</h1><p>定时测量之前的文章学习中的初步印象,是由特殊的电路系统上报给操作系统的一种信号量。下面是《深入理解Linux内核》一书中的阐述和思考。</p><h2 id="定时测量"><a class="header-anchor" href="#定时测量"></a>定时测量</h2><p>操作系统中需要处理的<B>定时测量</B>主要是两种：</p><ul><li>测量当前的日期和时间</li><li>维持定时器，以便测量出某一时间间隔</li></ul><p>定时测量是通过一种基于固定的频率振荡设备和计数器设备来实现的，下面介绍一下这几个硬件设备。</p><h3 id="时钟和定时器电路"><a class="header-anchor" href="#时钟和定时器电路"></a>时钟和定时器电路</h3><ul><li>实时时钟-RTC<br>实时时钟(Renl Time Clock RTC)是一个独立于CPU和其他芯片的设备，即使当计算设备被切断电源时，它还是还能正常工作。</li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/RTC.jpg?raw=true" alt="RTC产品图"></p><p>在现代的计算机结构中，RTC设备通常被集成到南桥中</p><ul><li>时间戳计数器-TSC</li></ul><p>时间戳计数器是用来接收外部传递的振荡器的时钟信号。在x86架构下是通过一条名叫<B>CLK</B>的输入总线和一个名叫<B>时间戳计时器寄存器</B>来实现的。</p><ul><li><p>可编程间隔定时器-PIT<br>PIT与RTC类似，也是一个独立于CPU和其他芯片的设备，但是它的工作方式与RTC不同。PIT是通过按照固定的频率发送一个特殊的中断信号来实现的。</p></li><li><p>CPU本地定时器</p></li></ul><p>CPU本地定时器的工作原理与PIT类似都是发送一个特殊的中断信号，但是不同点在于，CPU本地定时器是据语系统总线的时钟信号量的值来实现的。</p><ul><li>高精度事件定时器-HPET</li></ul><p>高精度事件定时器是由MS与Intel共同研发的一种新型定时器,目前应该是支持最广泛的定时器,内部主要包括8个32位或64位的独立计数器，在windows下通过设备管理器插看到</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/HPET.jpg?raw=true" alt="HPET"></p><p>在参考资料2中可以看到时钟频率对游戏帧率的影响，游戏帧率越高，时钟频率越低，这样的话，游戏的性能就会越好。这里的原理类似于显示屏幕的物理帧率对游戏性能的影响一样,可以看一下B站Up主的一个视频<a href="https://www.bilibili.com/video/BV19L411N7xw?spm_id_from=333.999.0.0">游戏帧数竟然可以影响永劫的攻击速度？！</a></p><ul><li>ACPI定时器</li></ul><p>ACPI电源管理定时器几乎存在所有的ACPI主板上，它是一个简单的计数器，每次时钟节拍到来时，寄存器就加1.</p><p>以上是一些定时器的简单介绍，主要有<B>RTC</B>、<B>HPET</B></p><h2 id="Linux计时体系结构"><a class="header-anchor" href="#Linux计时体系结构"></a>Linux计时体系结构</h2><p>linux启动后必须执行的与时间相关的操作是以下几个：</p><ul><li>更新系统启动以后经过的时间</li><li>更新当前日期和时间</li><li>确定当前进程在每一个CPU上运行的时间</li><li>更新资源使用统计数量<br>-检查每一个软件定时器的时间间隔是否达到</li></ul><p>在多处理器系统中，每一个CPU都有一个时钟，它的频率可以被设置，默认的频率是1GHz，也就是说，每秒钟的时钟节拍数是1000000。普通活动(例如:软定时器)都是由全局定时器产生的中断触发的；CPU的活动则是由本地的APIC产生的中断触发的。</p><p>(PS:APIC与ACPI的区别，ACIP是本地CPU定时器，而APIC是全局电源方面的定时器，优先级较高)</p><p>内核会提供两个最基本的计时函数:一个保持对当前时间的记录，一个计算当前秒内流逝的纳秒数</p><ul><li>计时体系的数据结构</li></ul><p>这里主要介绍一个<B>jiffies变量</B>,这个变量是用于记录系统启动后产生的节拍数，但是在X86架构下这个变量使用的是一个32位置的有符号值,因此大约只需要50天左右就会置为0，这被称为时钟回绕问题，linux提供了time_after和time_before函数来解决这个问题。解决问题的思路是通过先将32位的数据转化为64位的long类型来比较，这样做的原理是，当32位的数据转化为64位的long类型后，其符号位会被置为0，从一个有符号数变成了无符号数，在对差值与0进行比较，就可以解决时钟回绕问题。</p><p>关于这个<B>jiffies变量</B>还有一个指的注意的地方是，它在初始化时，并不是赋的0，而是负3W多的一个数字,这样做的目的是尽早的发现时钟回绕问题是否被正确的处理，这里面实际体现了一种不可靠思想，想尽量的让问题尽早的暴露出来，指的学习!</p><p>jiffies变量为什么选择的是32位而不是64位,这里主要是因为在32位系统中对64位数值的访问需要使用两个32位数值来处理，这样操作两次比直接操作32位的数值要慢一些</p><h2 id="定时测量的应用"><a class="header-anchor" href="#定时测量的应用"></a>定时测量的应用</h2><ul><li>更新日期和时间</li><li>更新系统统计数据，例如CPU统计数、系统负载等</li><li>监管内核代码，例如每次时钟中断时判断当前系统正在做什么</li><li>检查非屏蔽中断监视器,监控系统内核的运行情况</li><li>软定时器与延迟函数</li></ul><h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2><p>Linux的定时测量是通过不同的硬件来实现的，有记录当前时间的RTC、有记录系统启动时间的TSC、有记录CPU的时钟周期的APIC、有记录全局时间的电源定时器ACPI、记录高精度时间的HPET等。操作系统通过这些定时器来实现记录系统运行状态、记录当前时间、记录流逝时间等功能。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="http://manpages.ubuntu.com/manpages/xenial/man4/rtc.4.html">ubuntu RTC驱动说明书</a><br><a href="https://silicophilic.com/disabling-hpet-settings/">如何通过禁用 HPET 设置来提高游戏性能</a><br><a href="https://blogs.gnome.org/raywang/2007/11/19/acpi%E5%92%8Capic%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/">ACPI和APIC有什么关系</a><br><a href="https://www.modb.pro/db/217433">jiffies如何避免时钟回绕问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>银行会计-笔记</title>
      <link href="2022/03/27/1.%E6%9D%82%E8%AE%B0/%E9%93%B6%E8%A1%8C%E4%BC%9A%E8%AE%A1-%E7%AC%94%E8%AE%B0/"/>
      <url>2022/03/27/1.%E6%9D%82%E8%AE%B0/%E9%93%B6%E8%A1%8C%E4%BC%9A%E8%AE%A1-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>《银行会计》笔记</h1><p>《银行会计》一书是席总带给我看的，一直以来在对这方面的知识都比较匮乏，以下是我在阅读这本书是做的一些笔记,希望能对你有帮助,开心😋😋😋</p><h2 id="第二章-银行会计的基本核算方法"><a class="header-anchor" href="#第二章-银行会计的基本核算方法"></a>第二章:银行会计的基本核算方法</h2><h3 id="会计科目"><a class="header-anchor" href="#会计科目"></a>会计科目</h3><blockquote><p>会计科目指的是对会计对象的具体内容按照不同的性质和经济管理的要求进行分类，分类后的种种科目就是会计科目</p></blockquote><p>会计科目就是根据一些法规和自身的场景/要求，将经营过程/活动分解成的科目，通过这些科目就可以按照一定的维度，统计出经营结果，从而进行会计分析</p><h3 id="会计科目的分类"><a class="header-anchor" href="#会计科目的分类"></a>会计科目的分类</h3><blockquote><p>1.按照资产负载表进行分类</br>2. 按照会计科目所反映的经营活动进行分类(这里可以理解为按照会计科目来进行分类，因为会计科目的编码是要符号一定的经济活动的</p></blockquote><ul><li><p>按照资产负载表进行分类<br>按照这种方式主要是通过资产负载表来进行分类，这种方式的好处就是可以按照资产负载表的结构来进行分类，这种方式的缺点就是不能按照经营活动的结构来进行分类，因为经营活动的结构是不确定的，这里引申出一个概念<B>资产负载表</B></p><ul><li>资产负载表<blockquote><p>资产负债表是反应企业在<B>某一特点时间</B>的<B>财务状况</B>的报表,是企业经营活动的<B>静态</B>展示;由两个方面组成<B>资产</B>、<B>负债与股东权益</B>两个大的方面组成<br>会计科目按照资产负载表的关系进行分类就可以划分为<B>表内科目</B>、<B>表外科目</B></p></blockquote></li></ul><p>这里又引申出来两个概念<B>表内科目</B>、<B>表外科目</B></p><ul><li><p>表内科目</p><blockquote><p>表内科目指的是反映银行资金发生增减变化的会计科目，其余额会在资产负债表上体现，用于表示复式记账法的会计核算过程</p></blockquote></li><li><p>表外科目</p><blockquote><p>表外科目指的是核算业务中已发生，但是尚未涉及资金增减的事项的科目，其余额不会在负债资产表上体现，用于单式记账法的会计核算过程<br>表外科目主要用于指代不列入资产负债表内和损益表内的会计科目，主要用于金融行业内使用的一类特殊科目，这里的<B>表</B>指的是资产负债表。</p></blockquote></li></ul></li><li><p>按照经营活动进行分类</p><ul><li>资产类科目</li><li>负债类科目</li><li>资产负债共同类科目</li><li>所有者权益类科目</li><li>损益类科目<br>以下是一个银行会计科目表列子</li></ul></li><li><p>银行会计科目表</p></li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E9%93%B6%E8%A1%8C%E4%BC%9A%E8%AE%A1%E7%A7%91%E7%9B%AE%E8%A1%A8.jpg?raw=true" alt=""><br><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E9%93%B6%E8%A1%8C%E4%BC%9A%E8%AE%A1%E7%A7%91%E7%9B%AE%E8%A1%A81.jpg?raw=true" alt="银行会计科目表"></p><p>可以看到会计科目表分为5大分类，分别对应不同的经营活动</p><h3 id="科目代号"><a class="header-anchor" href="#科目代号"></a>科目代号</h3><p>从上面的银行会计科目表中可以看到，不同的科目都有一个特定的编号，分别由两个部分组成<B>一级科目</B>、<B>二级科目</B></p><ul><li><p>一级科目<br>一级科目的编排规则是：第一位数字代表科目的资金性质，即：1-代表资产类科目；2-代表负债类科目；3-代表所有者权益类科目；4-代表资产负债类科目；5-代表损益类科目；6~9代表表外科目及补充资料；第二位数字代表业务性质；剩下两位表示顺序；</p></li><li><p>二级科目<br>二级科目是一般是由6位组成，前四位是一级科目，后两位表示顺序</p></li></ul><h3 id="记账方法"><a class="header-anchor" href="#记账方法"></a>记账方法</h3><p>记账方法指的是在核算过程中，按照那样的规则进行处理；我们需要知道的就是表内用<B>复式记账法</B>、表外用<B>单式记账法</B></p><ul><li>单式记账法<br>单式记账法指的是对每一次经营活动只会在一个科目中进行登记，即：一个科目只会记录一次，不会出现多次记账的情况，这样的记账方式优点是简单,缺点是不能反映完整的经营活动</li><li>复式记账法<br>复式记账法指的是对于每笔经营活动都需要在多个科目中进行登记，即：一个科目可以记录多次，这样的记账方式优点是可以反映完整的经营活动，缺点是记账方式复杂，不能简单地反映经营活动</li></ul><p>简单的理解就是，单式记账法只能记录一次经营活动的结果，而不是过程，复式记账法记录的是一个经营活动的过程，通过在两个以上的账户中同时描述同一笔经营活动的过程，可以反映完整的经营活动</p><p>根据复式记账法原理演化出来的<B>借贷记账法</B>是国际通用的记账法，主要包括记账主体、记账符号、记账规则、试算平衡四个方面</p><ul><li>借贷记账法</li></ul><blockquote><p>借贷记账法是根据复式记账法原理,以<B>‘借’</B>、<B>‘贷’</B>作为记账符号，以<B>有借必有贷，借贷必相等</B>作为记账规则，用以记录和反映经济业务发生而导致的会计要素增减编号过程及其结果的一种复试记账法<br>可以从上面的表述中得知，借贷记账法的的目标是描述经济活动的<B>过程</B>和<B>结果</B>这两方面。</p></blockquote><ul><li>记账主体</li></ul><blockquote><p>记账主体指的是借贷记账法进行记账时，记录的是一条条<B>会计科目</B>，这些会计科目就是借贷记账法的记账主体。</p></blockquote><ul><li>记账符号</li></ul><blockquote><p>记账符号指的是<B>借</B>、<B>贷</B>，这两个符号，表示的是科目的方向，在前面的会计科目中可以得知会计科目实际上是没有方向概念的，只是描述经济活动的过程，因此需要有方向概念，这个方向概念就是记账符号。</p></blockquote><ul><li><p>记账规则<br><B>有借必有贷,借贷必相等</B>，这个规则是根据’资产 = 负载 + 所有者权益’的会计恒等式作为理论基础发展而来，通俗的表述就是：<B>即一笔经济业务的发生，必然会在一个账户的借方和贷方登记相同的金额，以达到会计分录是借贷平衡的结果</B>。</p></li><li><p>试算平衡<br>试算平衡指的是在记账过程中如果每笔经济活动记账时都满足’记账规则’时，那么在核对<B>发生额</B>和<B>余额</B>时也应该是相等的。银行每天按照总账维度核对借方和贷方的发生额和总额。</p></li></ul><p><img src="" alt="试算平衡表"></p><p>以上是借贷记账法的组成元素，分别是记账主体、记账符号、记账规则、试算平衡四个方面。复式记账法可以较好的描述表内的资产增减过程，但是对于表外资产就不太适用，因此表外资产采用的是单式记账法，即采用收入和支出作为记账符号，业务事项发生时计入<B>收入</B>、业务事项注销或冲正时计入<B>付出</B>；余额表示尚未结算的业务事项；</p><h3 id="账务组织"><a class="header-anchor" href="#账务组织"></a>账务组织</h3><p>账务组织指的是根据会计凭证对经济业务活动进行核算，分为<B>账务明细</B>、<B>综合核算</B>两个大的方面组成，都会根据<B>账簿</B>来进行记录，账簿分为<B>明显账</B>、<B>日记账</B>、<B>总账</B>、<B>登记簿</B>四种类型</p><ul><li><p>明细账<br>明细账指的是会计账簿中反映相关业务情况的账簿</p></li><li><p>总账<br>总账指的是银行会计账簿中综合核算和监督各项经济业务的分类账簿，它是综合核算和明显核算相互核对以及统驭明显分户账的主要工具</p></li><li><p>日记账<br>日记账主要是核算现金收入和现金付出的日记账，是现金收入和现金付出的详细记录</p></li><li><p>登记簿<br>登记簿主要是用于记录表外科目的增减变化的账簿</p></li></ul><h2 id="第四章-贷款业务的核算"><a class="header-anchor" href="#第四章-贷款业务的核算"></a>第四章:贷款业务的核算</h2>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI/CD与GitHub Actions的介绍和使用</title>
      <link href="2022/03/25/1.%E6%9D%82%E8%AE%B0/GitLab_CI-CD%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>2022/03/25/1.%E6%9D%82%E8%AE%B0/GitLab_CI-CD%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>GitLab CI/CD与GitHub Actions的介绍和使用</h1><p>本篇日志主要是用来记录<B>GitLab</B>的CI/CD与<B>GitHub Actions</B>的介绍和使用。先从操作GitLab的CI/CD开始</p><h2 id="GitLab-CI-CD"><a class="header-anchor" href="#GitLab-CI-CD"></a>GitLab CI/CD</h2><p>GitLab支持多种CI方式,本身有Ai DevOps的支持,如下所示</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/gitlab_ai_devops.jpg?raw=true" alt="GitLab AI DevOps"></p><p>启动Ai DevOps后gitlab会根据项目的语言使用一套预设的模板,具体可以参考<a href="https://docs.gitlab.com/ee/topics/autodevops/index.html">GitLab Ai DevOps</a></p><p>在我们的演示项目中,我们可以选择开启Ai DevOps,但是实际并不会使用,而是使用我们项目中自定义的<B>.gitlab-ci.yml</B>文件</p><p>接下来介绍,让我们开始学习如何自定义GitLab的CI/CD与gradle结合使用.</p><ul><li>前置条件:<ul><li>项目地址:<a href="https://github.com/agmtopy/testcontainers-simple">https://github.com/agmtopy/testcontainers-simple</a></li></ul></li><li>步骤:<ul><li>clone 项目到本地</li><li>修改.gitlab-ci.yml文件</li><li>上传到GitLab</li><li>执行构建</li></ul></li></ul><p>下面来详细的做一下步骤二和步骤四</p><h3 id="修改-gitlab-ci-yml文件"><a class="header-anchor" href="#修改-gitlab-ci-yml文件"></a>修改.gitlab-ci.yml文件</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">services:  - name: docker:dind         # Testcontainers需要docker in docker    command: [&quot;--tls&#x3D;false&quot;]  # 禁用tls以避免docker启动中断variables:  DOCKER_HOST: &quot;tcp:&#x2F;&#x2F;docker:2375&quot;  DOCKER_TLS_CERTDIR: &quot;&quot;  DOCKER_DRIVER: overlay2  GRADLE_OPTS: &quot;-Dorg.gradle.daemon&#x3D;false&quot;stages:          # 作业的阶段列表及其执行顺序  - build  - test  - deploybuild-job:       # 此作业在构建阶段运行，构建阶段是最先执行的  image: gradle:7.4.1-jdk11-alpine  stage: build  script:    - echo &quot;开始编译代码...&quot;    - gradle clean compileJava    - echo &quot;编译代码完成...&quot;test-job:        # 此作业在测试阶段运行，测试阶段在第二阶段执行的  image: gradle:7.4.1-jdk11-alpine  stage: test  script:    -  echo &quot;开始测试代码...&quot;    - gradle test --info    - echo &quot;测试代码完成...&quot;deploy-job:      # 此作业在部署阶段运行  stage: deploy  # 只有当之前两个阶段都成功完成时，才会执行部署的。  script:    - echo &quot;开始部署代码...&quot;    - echo &quot;部署代码完成..&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这个.gitlab-ci.yml文件中,有一个稍微特殊一点的地方在于,由于我们的代码中使用到了testcontainers,所以我们需要在.gitlab-ci.yml文件中添加一个service,这个service是用来启动testcontainers相关容器的,具体可以参考<a href="https://docs.gitlab.com/runner/install/docker.html#install-the-docker-image-and-start-the-container">安装 Docker 镜像并启动容器</a></p><p>然后我们定义了三个阶段:build,test,deploy,这三个阶段的执行顺序是:build-job,test-job,deploy-job,这样我们就可以在GitLab中按照顺序执行这三个阶段的作业了,在流水线中我们也可以看到</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%B5%81%E6%B0%B4%E7%BA%BF.jpg?raw=true" alt="流水线"></p><p>由于我们没有资源,不能进行deploy,在这个阶段实际上只是打印一下,之前的build-job和test-job阶段分别是执行:<br>- gradle clean compileJava<br>- gradle test --info</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg?raw=true" alt="执行结果"></p><p>通过在流水线中点击相关的阶段,可以看到详细的日志</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E6%89%A7%E8%A1%8C%E6%97%A5%E5%BF%97.jpg?raw=true" alt="执行日志"></p><h2 id="GitHub-Actions"><a class="header-anchor" href="#GitHub-Actions"></a>GitHub Actions</h2><p>GitHub Actions是github推出的一套发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程。</p><h3 id="创建Actions"><a class="header-anchor" href="#创建Actions"></a>创建Actions</h3><p>在Actions中,选择对应的模板进行创建</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/GitHub_Actions_1.jpg?raw=true" alt="创建workflows"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/GitHub_Actions_2.jpg?raw=true" alt="选择模板"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/GitHub_Actions_3.jpg?raw=true" alt="模板"></p><h3 id="执行Actions"><a class="header-anchor" href="#执行Actions"></a>执行Actions</h3><p>创建完成Actions后,会自动运行.运行结果可以在workflow中查看</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/GitHub_Actions_4.jpg?raw=true" alt="执行Actions"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/GitHub_Actions_5.jpg?raw=true" alt="执行结果"></p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/GitHub_Actions_5.jpg?raw=true" alt="执行日志"></p><p>注意:</p><ul><li>编译gradle项目出现’Error: Gradle script ‘/home/runner/work/testcontainers-simple/testcontainers-simple/gradlew’ is not executable.'的问题是由于我们项目中的gradlew文件不是可执行的,所以需要将其设置为可执行的,在项目中执行<B>git update-index --chmod=+x gradlew</B>即可</li></ul><h3 id="Actions配置解释"><a class="header-anchor" href="#Actions配置解释"></a>Actions配置解释</h3><ul><li>main.yml</li></ul><pre class="line-numbers language-yml文件" data-language="yml文件"><code class="language-yml文件"># This workflow uses actions that are not certified by GitHub.# They are provided by a third-party and are governed by# separate terms of service, privacy policy, and support# documentation.# This workflow will build a Java project with Gradle and cache&#x2F;restore any dependencies to improve the workflow execution time# For more information see: https:&#x2F;&#x2F;help.github.com&#x2F;actions&#x2F;language-and-framework-guides&#x2F;building-and-testing-java-with-gradlename: Java CI with Gradleon: push        # 触发事件jobs:  build:    runs-on: ubuntu-latest    steps:    - uses: actions&#x2F;checkout@v2    - name: Set up JDK 11      uses: actions&#x2F;setup-java@v2      with:        java-version: &#39;11&#39;        distribution: &#39;temurin&#39;    - name: Build with Gradle      uses: gradle&#x2F;gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee      with:        arguments: build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>github的CI/CD配置就比gitlab的配置看起来要清爽很多,主要是分为三个部分:</p><ul><li><p>name<br>name主要是用来标识这个workflows的名称的</p></li><li><p>on<br>on主要是用来标识触发Actions的动作的</p></li><li><p>jobs<br>jobs又很为两个部分:</p><ul><li>runs-on<br>标识运行的基础环境</li><li>steps<br>标识运行的步骤,其中with.arguments是用来指定gradle的参数的</li></ul></li></ul><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>GitLab和GitHub的CI/CD在使用上都是比较简单的,只需要使用到专用的配置文件就可以触发,需要主要一点的是GitLab的配置文件中需要指定Docker in Docker配置,<br>而GitHub Actions使用上要比GitLab的.gitlab-ci.yml要方便,可以直接从marketplace下载已经预设好的模板,直接进行使用.配置文件中也不需要指定运行环境</p><h2 id="参考文档"><a class="header-anchor" href="#参考文档"></a>参考文档</h2><p><a href="https://about.gitlab.com/install/">gitlab install</a><br><a href="https://help.aliyun.com/document_detail/52857.html">安装和使用GitLab</a><br><a href="http://blinkfox.com/2018/11/22/ruan-jian-gong-ju/devops/gitlab-ci-jie-shao-he-shi-yong/#toc-heading-20">GitLab CI/CD 介绍和使用</a><br><a href="https://zq99299.github.io/note-combat/gitlab/cicd/">CI/CD</a><br><a href="https://docs.github.com/cn/actions/quickstart">GitHub Actions 快速开始</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pulsar的简单使用</title>
      <link href="2022/03/19/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/50.pulsar%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2022/03/19/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/50.pulsar%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>pulsar的简单使用</h1><p>Apache Pulsar 是一个云原生的分布式消息传递和流媒体平台，最初由 Yahoo! 创建。现在是作为Apache软件基金会的顶级项目.<br>在pulsar这个项目中还大量使用了另外一个Apache的顶级项目<B>Bookkeeper</B>作为存储层的解决方案,在研究完成Pulsar之后也会对Bookkeeper进行研究.<br>本文用于记录本地安装Pulsar的过程,希望对你有所帮助,祝好!</p><h2 id="安装Pulsar"><a class="header-anchor" href="#安装Pulsar"></a>安装Pulsar</h2><p>根据官网介绍安装Pulsar一共有三种安装方式,分别是</p><ul><li>本地运行</li><li>docker中运行</li><li>k8s中运行</li></ul><h3 id="本地运行"><a class="header-anchor" href="#本地运行"></a>本地运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载</span>$ <span class="token function">wget</span> https://archive.apache.org/dist/pulsar/pulsar-2.9.1/apache-pulsar-2.9.1-bin.tar.gz<span class="token comment">#解压</span>$ <span class="token function">tar</span> xvfz apache-pulsar-2.9.1-bin.tar.gz<span class="token comment"># 启动pulsar</span>$ <span class="token builtin class-name">cd</span> apache-pulsar-2.9.1$ bin/pulsar standalone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker中运行"><a class="header-anchor" href="#docker中运行"></a>docker中运行</h3><ul><li>pulsar</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -p <span class="token number">6650</span>:6650  -p <span class="token number">8080</span>:8080 --mount <span class="token assign-left variable">source</span><span class="token operator">=</span>pulsardata,target<span class="token operator">=</span>/pulsar/data --mount <span class="token assign-left variable">source</span><span class="token operator">=</span>pulsarconf,target<span class="token operator">=</span>/pulsar/conf apachepulsar/pulsar:2.9.1 bin/pulsar standalone -nfw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>pulsar admin</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动pulsar admin</span>docker run -it  -p <span class="token number">9527</span>:9527 -p <span class="token number">7750</span>:7750 -e <span class="token assign-left variable">SPRING_CONFIGURATION_FILE</span><span class="token operator">=</span>/pulsar-manager/pulsar-manager/application.properties apachepulsar/pulsar-manager:v0.2.0<span class="token comment"># 修改密码</span><span class="token function">curl</span>  -H <span class="token string">'X-XSRF-TOKEN: $CSRF_TOKEN'</span> -H <span class="token string">'Cookie: XSRF-TOKEN=$CSRF_TOKEN;'</span>  -H <span class="token string">"Content-Type: application/json"</span> -X PUT http://localhost:7750/pulsar-manager/users/superuser -d <span class="token string">'&#123;"name": "admin", "password": "apachepulsar", "description": "test", "email": "username@test.org"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pulsar admin</li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/pulsar/puslarAdmin.jpg?raw=true" alt="pulsar admin"></p><h3 id="k8s中运行"><a class="header-anchor" href="#k8s中运行"></a>k8s中运行</h3><p>k8s中需要使用helm来运行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">helm install     <span class="token operator">--</span>values examples<span class="token operator">/</span>values<span class="token operator">-</span>minikube<span class="token punctuation">.</span>yaml     <span class="token operator">--</span>set initialize<span class="token operator">=</span><span class="token boolean">true</span>     <span class="token operator">--</span>namespace pulsar     pulsar<span class="token operator">-</span>mini apache<span class="token operator">/</span>pulsar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pulsar示例"><a class="header-anchor" href="#pulsar示例"></a>pulsar示例</h2><p>使用kotlin来演示</p><h3 id="普通消息功能"><a class="header-anchor" href="#普通消息功能"></a>普通消息功能</h3><ul><li>PulsarUtil</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 用于创建Pulasr使用中用到的一些工具 */</span><span class="token keyword">class</span> PulsarUtil<span class="token comment">/** * 创建pulsar客户端对象 */</span><span class="token keyword">fun</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> PulsarClient <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> PulsarClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">serviceUrl</span><span class="token punctuation">(</span><span class="token string">"pulsar://localhost:6650"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 创建Topic */</span><span class="token keyword">fun</span> <span class="token function">createProduct</span><span class="token punctuation">(</span>topic<span class="token operator">:</span> String<span class="token punctuation">,</span> client<span class="token operator">:</span> PulsarClient<span class="token punctuation">)</span><span class="token operator">:</span> Producer<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">newProducer</span><span class="token punctuation">(</span>Schema<span class="token punctuation">.</span>STRING<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PulsarProducer</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> PulsarProducer<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> product <span class="token operator">=</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token string">"pulsar-topic-1"</span><span class="token punctuation">,</span> client<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        product<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"message:<span class="token interpolation variable">$i</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PulsarConsumer</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> subscribe <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token string">"pulsar-topic-1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscriptionName</span><span class="token punctuation">(</span><span class="token string">"pulsar-topic-1-sub"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ackTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscriptionType</span><span class="token punctuation">(</span>SubscriptionType<span class="token punctuation">.</span>Exclusive<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> receive <span class="token operator">=</span> subscribe<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message:"</span> <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span>receive<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        subscribe<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span>receive<span class="token punctuation">.</span>messageId<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个例子只是使用一个普通消息来演示pulsar的消息功能,推送完成后可以看到消息被消费了.</p><h3 id="异步消息功能"><a class="header-anchor" href="#异步消息功能"></a>异步消息功能</h3><blockquote><p>异步消息分为’异步发送’和’异步接收’,异步接收应该是puslar特有的功能,虽然业务代码在使用MQ时也可以通过自定义线程池的方式来完成异步接收的效果<br>下面展示一个发送消息和异步接收消息的示例</p></blockquote><ul><li>PulsarAsyncProducer</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 异步消息 */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">asyncMsg</span><span class="token punctuation">(</span>product<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">":提交任务"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        product<span class="token punctuation">.</span><span class="token function">sendAsync</span><span class="token punctuation">(</span><span class="token string">"message:<span class="token interpolation variable">$i</span>|"</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span> <span class="token punctuation">&#123;</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Message with ID <span class="token interpolation variable">$it</span> successfully sent|"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果</li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/pulsar/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg?raw=true" alt="异步消息执行结果"></p><p>可以看到回调线程不是main,而是单独的一个线程池中的线程</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pulsar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理-内存部分</title>
      <link href="2022/03/07/20.%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E5%86%85%E5%AD%98%E9%83%A8%E5%88%86/"/>
      <url>2022/03/07/20.%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E5%86%85%E5%AD%98%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1>编译原理-内存部分</h1><p>这一篇主要是对后端编译器对内存布局的分析和笔记,之前的有关词法/语法方面的理论知识实在是太枯燥了,翻了又翻是在是难以理解,只能暂时放下那一部分的内容了.<br>在编译时主要将内存划分为两个部分<B>栈</B>、<B>堆</B>：<br>栈主要是作为程序的临时空间实现方法、局部变量的区域<br>堆主要是作为分配大对象的区域</p><h2 id="存储组织"><a class="header-anchor" href="#存储组织"></a>存储组织</h2><blockquote><p>存储组织指的是内存区域，字节是内存中的最小编址单元.一个字节包含8个bit.多个连续的字节作为一块内存区域，并这块区域的第一个字节作为它的地址</p></blockquote><p>这里需要注意的是向操作系统申请的一段连续的内存空间可能并不是连续的，内存地址是操作系统提供的，在底层是通过页表的形式将物理上不连续的空间组织成为逻辑上连续的一段内存地址</p><blockquote><p>数据对象的存储分配受到目标机器的寻址约束影响很大。在很多机器中，执行整数加法的指令可能要求整数必须是位数相同(对齐)的。也就是说这些对象长度必须被4整除(4字节)。编译器可能会对数据进行指针对齐操作，对于空白的空间被称为<B>‘补白’</B></p></blockquote><p>'指针对齐’其实是由于CPU决定的，当现代CPU决定以2的指数倍数进行数据读取计算时，就决定了数据-指针的位数了。'补白’的指针在进行运算时肯定是优与未进行’补白’的指针的</p><blockquote><p>生成的目标代码在编译时刻就决定了编译后的大小了，因此编译器可以将可执行目标代码放到一个静态确定的区域:<B>代码区</B></p></blockquote><p>静态区域:<br>静态区域指的是在编译后就能确定内存分配的区域，例如代码区\JVM中的常量池等</p><p>动态区域:<br>动态区域指的是只能在运行时才能填充的内存区域，例如局部变量、堆区等</p><p>关于静态分配和动态分配分别表示的是<B>编译时刻</B>、<B>运行时刻</B></p><p>动态分配主要有两种实现方式分别是</p><ol><li>栈式存储<br>一个过程局部名字在栈中分配空间,通常支持过程调用/结果返回</li><li>堆存储<br>有一些数据结构的生命周期比较长，这些数据通常被放到一个可重复存储的&quot;堆&quot;中</li></ol><blockquote><p>为了支持堆区管理，通过设计&quot;垃圾回收器&quot;来是的在运行时刻能够检测出堆区的无用的数据结构，并且自动回收</p></blockquote><p>GC的概念在很早的时候就出现了</p><h2 id="栈空间"><a class="header-anchor" href="#栈空间"></a>栈空间</h2><blockquote><p>有些语言使用过程、函数或方法作为用户自定义动作的单元，通过在运行时刻按照栈结构进行管理。在调用一个过程的时候将存放这个过程的指针入栈，计算结束时出栈。这样能带来的好处是允许同时调用多个不交叠的过程</p></blockquote><blockquote><p>为了将运行时刻的空间最大化利用,<B>堆</B>和<B>栈</B>分别被放到内存空间的两端,栈区用来存放活动记录的数据结构,这些活动记录会在函数调用过程中产生.栈区存放在内存高位端向下增长,堆区存放在低位端向上增长.</p></blockquote><h3 id="静态与动态的区别"><a class="header-anchor" href="#静态与动态的区别"></a>静态与动态的区别</h3><ul><li><p>静态指的是编译器只需要观察程序源代码就可分析出某个存储的决定,这个时期被称为<B>编译时刻</B></p></li><li><p>动态指的是需要在程序执行过程中才会对内存地址进行分配</p></li></ul><h3 id="动态存储分配"><a class="header-anchor" href="#动态存储分配"></a>动态存储分配</h3><p>动态存储分配可以有两种实现方式:<br>1. 栈式存储<br>2. 堆存储</p><h3 id="栈式存储的好处"><a class="header-anchor" href="#栈式存储的好处"></a>栈式存储的好处</h3><p>栈式存储的好处是在于方便活跃时间段内不重叠的多个过程调用时共享空间,还有一个好处是保持非局部变量的地址不变</p><h2 id="栈帧"><a class="header-anchor" href="#栈帧"></a>栈帧</h2><p>在之前的理解中把栈帧理解称为一个局部变量帧空间与栈结构的联合体,这个理解是错误的,栈帧指的就是一个活动记录,只是栈中的一个元素而已</p><h2 id="函数式语言"><a class="header-anchor" href="#函数式语言"></a>函数式语言</h2><p>函数式语言支持将一个函数作为参数传递到方法中,也支持方法中直接返回函数.java中通过类似语法糖的方式实现了部分函数式的调用过程,并不是真正的函数式调用.java不能实现函数式调用的根本原因在于java无法在运行时刻更改栈空间的非成员变量的地址,在栈空间中的非成员变量地址已经确定了的.</p><h2 id="堆管理"><a class="header-anchor" href="#堆管理"></a>堆管理</h2><p>堆是存储空间中的一部分,它被用来存储那些生命周期比较长的对象.堆必须具备两个能力:</p><ol><li>分配空间</li><li>回收空间</li></ol><p>关于堆能操作的空间也只能是在程序初始化开始后向操作系统申请的空间,对于这段空间我们的堆处理程序认为是连续的,但是在物理结构上不一定是连续的,这一部分是操作系统屏蔽的内存分配的实现细节</p><p>GC这门技术发展的真的很早,很早.也是比较底层的技术,直到现在还有源源不断的新想法出现</p><h2 id="计算机的存储结构"><a class="header-anchor" href="#计算机的存储结构"></a>计算机的存储结构</h2><p>这一段与编译没有直接关系,但是我觉得很好,推荐出来</p><p>一个处理器一般都拥有几个专属的寄存器,寄存器的内容由CPU厂商提供接口供上层软件使用.在往上可以看到由一层或多层高速缓存,做开始</p><h2 id=""><a class="header-anchor" href="#"></a></h2>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理-词法语法理论</title>
      <link href="2022/03/05/20.%E7%AC%94%E8%AE%B0/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%8D%E6%B3%95%E8%AF%AD%E6%B3%95%E7%90%86%E8%AE%BA/"/>
      <url>2022/03/05/20.%E7%AC%94%E8%AE%B0/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%8D%E6%B3%95%E8%AF%AD%E6%B3%95%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1>编译原理-词法语法理论</h1><p>第二章<B>创建一个简单的语法指导器</B>里面设计了很多理论知识,暂时只记录关键概念。这一章看的很困，外面阳光明媚，只能通过打字来压制一下困意😂😂😂</p><h2 id="关键概念"><a class="header-anchor" href="#关键概念"></a>关键概念</h2><ul><li><p>语法制导翻译器<br><B>语法制导翻译器</B>是用于构建语法翻译器的程序</p></li><li><p>语法的定义</p></li></ul><blockquote><p>一种用于描述程序设计语言语法的表示方法 - “上下文无关文法”,这种文法用于前端编译器</p></blockquote><ul><li>语法分析器</li></ul><p>语法分析是决定如何通过一个文法生成一个终结符号的过程。语法分析有两个过程，分别是<B>自顶向下</B>、<B>自底向上</B>两种方法，指的是语法分析对语法分析的构造顺序。</p><h2 id="词法分析器"><a class="header-anchor" href="#词法分析器"></a>词法分析器</h2><blockquote><p>词法分析是编译的第一个阶段.主要是将输入的源代码生成一个词法单元序列,每个词法单元对应一个词素</p></blockquote><p>如下图所示:<br>@TODO</p><p>词法分析器还会完成一些辅助功能例如过滤空白字符、记录源代码行号</p><h3 id="词素的识别"><a class="header-anchor" href="#词素的识别"></a>词素的识别</h3><p>源代码是由不同的字符组成的，在进行编译时首先要将输入的字符串进行拆分，拆分成为不同的词素。</p><p>对于无法识别成为词素的字符，其实可以通过变化字符来进行匹配，但是这种方案代价太高，不值得使用。我赞同这种观点，编译器的功能就是编译代码而不是尝试对代码进行修复，也是单一职责的表现</p><ul><li><p>加载源代码是否会使用完缓冲区?.<br>不会,词素只需要根据前后一两个字符就可以确定了,因此只需要数千个字节就可以完成这个工作了.</p></li><li><p>如何鉴定语言的保留字?<br>通过在初始化时将各个保留字填入符号表中,符号表会标识这些保留字不是普通的标识符,并且会指向他们说代表的词法单元去</p></li></ul><h3 id="词素识别工具"><a class="header-anchor" href="#词素识别工具"></a>词素识别工具</h3><ul><li>Lex/Yacc</li></ul><blockquote><p>Lex是Unix环境下非常著名的工具,主要功能是生成一个扫描器(Scanner)的C源码。扫描器是一种识别文本中的词汇模式的程序。 这些词汇模式（或者常规表达式）在一种特殊的句子结构中定义。一种匹配的常规表达式可能会包含相关的动作。这一动作可能还包括返回一个标记。 当 Lex 接收到文件或文本形式的输入时，它试图将文本与常规表达式进行匹配。 它一次读入一个输入字符，直到找到一个匹配的模式。 如果能够找到一个匹配的模式，Lex 就执行相关的动作（可能包括返回一个标记）。 另一方面，如果没有可以匹配的常规表达式，将会停止进一步的处理，Lex 将显示一个错误消息。</p></blockquote><p>也就是通过Lex来生成一个’正则表达式’,并进行后续操作</p><h2 id="语法分析器"><a class="header-anchor" href="#语法分析器"></a>语法分析器</h2><p>下图所示的是语法分析器在编译器中的过程<br>@TODO</p><h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2><p>这一章主要是关于前端编译器的两个部分’词法分析器’和’语法分析器’的一些理论知识的介绍</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://sighingnow.github.io/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/lex_yacc.html">Lex和Yacc</a></p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理-引言</title>
      <link href="2022/03/03/20.%E7%AC%94%E8%AE%B0/0.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E5%BC%95%E8%A8%80-/"/>
      <url>2022/03/03/20.%E7%AC%94%E8%AE%B0/0.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E5%BC%95%E8%A8%80-/</url>
      
        <content type="html"><![CDATA[<h1>编译原理-引言</h1><p>大概是在开始学习编写程序的时候购入了一系列的计算机基础书籍,由于自己的原因导致很多书都只是寥寥翻开几页,就匆匆放下了.<br>近来这两年,随着年纪的增大忽然有了一个念头就是自己的程序生涯已经快要结束,但是还有那么多书未看未读,有一些惋惜和不舍.不舍的既有对知识的向往也有对年轻的奢望,惋惜的是荒废了大好年华.不如把既有的书籍看完,也是完成当初对自己的期待和结束吧.</p><p>碎碎念了很久,让我们接下来开始吧,笔记按照书籍的章节进行记录</p><h2 id="第一章"><a class="header-anchor" href="#第一章"></a>第一章</h2><blockquote><p>程序设计语言是向人以及计算机描述计算过程的记号</p></blockquote><p>这是这本书的第一句话,我觉得很好.程序/代码是由人编写给人阅读,拿给机器进行执行的,因此在编写的时候既要考虑到程序的可阅读性也要考虑到机器执行的效率.<br>但是机器是看不懂人类编写的语言,就需要一个’翻译家’将我们需要的计算过程转义后告诉计算机进行执行,这个’翻译家’就是我们的<B>编译器</B><br>研究这些编译原理,也许究其一生我们也不会使用到一次相关的知识,但是可以学习前人在处理复杂问题时候的解决思路,没有灵活的思维就只能通过经验来模仿大师的行为</p><h2 id="语言处理器"><a class="header-anchor" href="#语言处理器"></a>语言处理器</h2><p>编译器泛指语言处理器,通常由两部分组成<B>编译器</B>、<B>解释器</B></p><ol><li><p>编译器<br>编译器指的是将某一种语言翻译成为行为相同的另外一种语言(目标语言)</p></li><li><p>解释器<br>解释器指的是直接执行输入过来的语言</p><p>java语言的处理器就融合了这两个语言处理器,向通过编译器将源代码编译成为中间语言代码,在通过JVM解释执行中间语言代码</p></li></ol><ul><li>编译器结构<ol><li><p>分析部分(analysis)</p><blockquote><p>分析部分又被称为前端,指的是将源程序分解为多个组成要素,并在这些要素根据语法结构来创建出一个’中间输出’,提供给下一阶段作为输入,并且生成’符号表’</p></blockquote><p>以上是书上对前端编译器的定义,目前认为前端编译器就是执行语法规则/约束来将源代码翻译成为’中间代码’</p></li><li><p>综合部分(synthesis)</p><blockquote><p>综合部分是根据前端输入的中间代码和符号表来构造用户期望的目标代码</p></blockquote><p>对于这个的理解是从中间代码转换为目标代码的过程,例如生成目标代码为java的某A语言以及A-j的中间代码,最后才能生成java语言<br>前端编译器是与机器无关的,后端编译器是与机器相关的</p></li></ol></li></ul><h2 id="编译器的步骤"><a class="header-anchor" href="#编译器的步骤"></a>编译器的步骤</h2><p>编译器执行的步骤大致分为七个步骤,置顶向下分别是</p><ol><li>词法分析器</li><li>语法分析器</li><li>语义分析器</li><li>中间代码生成器</li><li>机器无关代码优化器</li><li>代码生成器</li><li>机器相关代码优化器</li></ol><p>下图所示:<br><img src="https://github.com/agmtopy/noteBook/blob/master/png/%E7%BC%96%E8%AF%91%E5%99%A8%E6%AD%A5%E9%AA%A4%E5%9B%BE.png?raw=true" alt="编译器步骤图"></p><p>下面就对这7个步骤进行分析</p><h3 id="1-词法分析器"><a class="header-anchor" href="#1-词法分析器"></a>1.词法分析器</h3><blockquote><p>词法分析器指的是将源代码的<B>词素(lexeme)</B>转义成为由<B>词法单元(token)</B>组成的<B>词法单元序列</B></p></blockquote><p>这里涉及到两个知识点:<br>以java代码为示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>词素(lexeme)<br>词素(lexeme)在语言领域等同与词汇,在这里指的是组成源代码的单个符号.<br>示例的源代码中的词素为’String’、‘name’、‘=’、‘&quot;’、‘hello’、‘&quot;’</p></li><li><p>词法单元<br>词法单元指的是编译器对词素的抽象承载对象,通过两部分组成&lt;token-name,attribute-value&gt;<br>token-name:语法分析步骤中使用到的抽象符号<br>attribute-value:指向符号表中关于这个词法单元的条目(可选)</p></li><li><p>符号表<br>符号表指的是用于记录源代码程序中使用到的变量名字，用于存储各种属性</p></li></ol><p>通过步骤1<B>语法分析器</B>可以将源代码转换成为<B>词法单元序列</B>，后续的操作是建立在词法单元序列的基础上的</p><h3 id="2-语法分析"><a class="header-anchor" href="#2-语法分析"></a>2.语法分析</h3><blockquote><p>编译器的第二个步骤是<B>语法分析</B>或<B>解析</B>.语法分析器使用上一步词法分析器的输出<B>词法单元序列</B>作为输入，通过使用词法单元来构建语法树结构。<br><B>语法树结构</B>是由树中的每一个内部节点表示一个<B>运算</B>组成，叶子节点表示该运算的分量 ，如下图所示中的第二个步骤，通过这个步骤将将’操作’和’分量’分离，以便下一步语义分析器使用</p></blockquote><p><img src="https://github.com/agmtopy/noteBook/blob/master/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%B5%84%E6%96%99/%E7%BC%96%E8%AF%91%E5%99%A8%E7%BC%96%E8%AF%91%E7%A4%BA%E4%BE%8B.jpg?raw=true" alt="编译器工作示例"></p><h3 id="3-语义分析器"><a class="header-anchor" href="#3-语义分析器"></a>3. 语义分析器</h3><blockquote><p>语义分析器是根据<B>语法树</B>和<B>符号表</B>中的信息来检查输入的源代码是否符合语言的定义，同时收集类型信息存放到语法树和符号表中，以便在随后生成中间代码的过程中进行使用</p></blockquote><p>在语义分析的过程中主要是做两方面的事情:<br>第一: 根据语言语义和符号表对语法树中的节点进行分析语义的正确性<br>第二：进行类型检查和自动类型转换</p><h3 id="4-中间代码的生成"><a class="header-anchor" href="#4-中间代码的生成"></a>4. 中间代码的生成</h3><p>通过以上三个步骤(词法分析/语法分析/语义分析)得到正确的语法树，通过这个语法树生成需要的中间代码<br>中间代码指的是是一种易于生成并且可以与目标代码进行转换的一种语言,生成一种伪指令的代码表述</p><h3 id="5-代码优化"><a class="header-anchor" href="#5-代码优化"></a>5. 代码优化</h3><p>这一步进行对中间代码的一个与机器无关的优化，由于在上一步中生成中间代码是完全按照源代码的逻辑，因此可以按照逻辑规则进行一些优化处理，由于是对逻辑的优化因此是与机器无关的</p><h3 id="6-代码生成"><a class="header-anchor" href="#6-代码生成"></a>6. 代码生成</h3><p><B>代码生成</B>是根据上一步中优化后的中间代码作为输入，然后根据不同的计算平台来生成操作具体的寄存器/内存地址的机器代码</p><h3 id="编译器处理过程小结"><a class="header-anchor" href="#编译器处理过程小结"></a>编译器处理过程小结</h3><p>编译器处理过程的过程划分为以上6个步骤(词法/语法/语义/中间代码生成/代码优化/机器代码生成)这几个步骤，在实现时可以将这几个步骤合并成为<B>“一趟”</B></p><h2 id="程序设计语言的历史"><a class="header-anchor" href="#程序设计语言的历史"></a>程序设计语言的历史</h2><p>我很喜欢了解这种技术的发展过程，虽然这段历史离我们很遥远，但是在阅读的过程中好像在历史的长流中一样，按照时间顺序</p><ul><li><p>机器指令</p></li><li><p>汇编语言</p><ul><li>宏指令</li></ul></li><li><p>高级程序语言</p><ul><li>lisp</li><li>C/C++</li><li>JAVA</li></ul></li><li><p>特定应用程序设计语言</p><ul><li>SQL</li></ul></li><li><p>基于逻辑和约束的语言</p><ul><li>prolog</li><li>ops5</li></ul></li></ul><p>语言的发展变化也在一定程度上到了编译器的方向,编译器的演化也会影响到语言的发展，两者是相辅相成的。</p><p>编译器也会对机器指令集的发展产生影响，例如编译器更喜欢RISC(精简指令集)因为RISC上的可以做更好的指令优化</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://cs.nju.edu.cn/changxu/2_compiler/slides/Chapter_1.pdf">编译原理讲义-南京大学</a></p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis如何实现持久化的</title>
      <link href="2022/01/20/1.%E6%9D%82%E8%AE%B0/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84/"/>
      <url>2022/01/20/1.%E6%9D%82%E8%AE%B0/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1>redis如何实现持久化的</h1><p>redis目前实现持久化主要有两种方式,一种是通过<B>RDB文件</B>,另外一种是通过<B>AOF文件</B>.<br>redis对于持久化支持4种部署方式</p><ul><li>无持久性</li><li>RDB</li><li>AOF</li><li>RDB + AOF</li></ul><p>让就让我们来详细比较和分析以下redis底层是如何实现的RDB和AOF机制的</p><h2 id="RDB文件"><a class="header-anchor" href="#RDB文件"></a>RDB文件</h2><ul><li>RDB定义</li></ul><blockquote><p>RDB 持久性指的是在指定时间间隔后执行记录当前数据集的全部数据快照</p></blockquote><p>RDB文件就类似于MySql进行全量备份,记录某一个时间点的全部数据</p><ul><li>RDB优点</li></ul><ol><li>文件即数据,不浪费空间</li><li>异步生成文件,性能损耗最小</li><li>不需要重新执行指令,数据恢复更快</li><li>支持主从切换后的数据同步</li></ol><ul><li>RDB缺点</li></ul><ol><li>没有采用LSM日志处理,会丢失数据</li><li>对于需要持久化大量数据时,性能不如AOF增量模式</li></ol><h3 id="使用实例"><a class="header-anchor" href="#使用实例"></a>使用实例</h3><p>RDB有两种触发方式:</p><ol><li>配置文件触发</li><li>命令触发</li></ol><ul><li>配置文件触发</li></ul><p>配置文件触发为在<B>redis.conf</B>中设置</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">#文件路径dir#RDB文件名称dbfilename #是否启用数据校验rdbchecksum yes#是否启用RDB文件压缩格式rdbcompression yes#bgsave异常时是否停止写入缓存stop-writes-on-bgsave-error yes#60秒内有5个值发生变化时触发生成RDB文件save 60 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>命令触发</p><ul><li>save<br>同步阻塞命令</li><li>bgsave<br>fork子进程异步生成RDB文件</li></ul></li></ul><h3 id="源码解析"><a class="header-anchor" href="#源码解析"></a>源码解析</h3><ul><li>bgsave的执行调用链</li></ul><p><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-22%20230847.jpg" alt="bgsave的执行链"></p><blockquote><p><B>server.main()</B> -&gt; <B>server.processCommand()</B> -&gt; <B>rdb.rdbSaveBackground()</B> -&gt; <B>rdb.redisFork()</B></p></blockquote><p>下面自底向上依次分析下这个四个方法</p><ul><li><B>rdbSave()</B></li></ul>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 将数据保存在磁盘上 */</span><span class="token keyword">int</span> <span class="token function">rdbSave</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> rdbSaveInfo <span class="token operator">*</span>rsi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> tmpfile<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cwd<span class="token punctuation">[</span>MAXPATHLEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Current working dir path for error messages. */</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    rio rdb<span class="token punctuation">;</span>    <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>tmpfile<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token string">"temp-%d.rdb"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>tmpfile<span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>cwdp <span class="token operator">=</span> <span class="token function">getcwd</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span>MAXPATHLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span>            <span class="token string">"Failed opening the RDB file %s (in server root dir %s) "</span>            <span class="token string">"for saving: %s"</span><span class="token punctuation">,</span>            filename<span class="token punctuation">,</span>            cwdp <span class="token operator">?</span> cwdp <span class="token operator">:</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span>            <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">rioInitWithFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdb<span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">startSaving</span><span class="token punctuation">(</span>RDBFLAGS_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span>rdb_save_incremental_fsync<span class="token punctuation">)</span>        <span class="token function">rioSetAutoSync</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdb<span class="token punctuation">,</span>REDIS_AUTOSYNC_BYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rdbSaveRio</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdb<span class="token punctuation">,</span><span class="token operator">&amp;</span>error<span class="token punctuation">,</span>RDBFLAGS_NONE<span class="token punctuation">,</span>rsi<span class="token punctuation">)</span> <span class="token operator">==</span> C_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        errno <span class="token operator">=</span> error<span class="token punctuation">;</span>        <span class="token keyword">goto</span> werr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Make sure data will not remain on the OS's output buffers */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fflush</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> werr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fsync</span><span class="token punctuation">(</span><span class="token function">fileno</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> werr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> werr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">//重命名文件来实现写入文件的原子性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span>tmpfile<span class="token punctuation">,</span>filename<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>cwdp <span class="token operator">=</span> <span class="token function">getcwd</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span>MAXPATHLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span>            <span class="token string">"Error moving temp DB file %s on the final "</span>            <span class="token string">"destination %s (in server root dir %s): %s"</span><span class="token punctuation">,</span>            tmpfile<span class="token punctuation">,</span>            filename<span class="token punctuation">,</span>            cwdp <span class="token operator">?</span> cwdp <span class="token operator">:</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span>            <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span>tmpfile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">stopSaving</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_NOTICE<span class="token punctuation">,</span><span class="token string">"RDB落盘成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>lastsave <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>lastbgsave_status <span class="token operator">=</span> C_OK<span class="token punctuation">;</span>    <span class="token function">stopSaving</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C_OK<span class="token punctuation">;</span>werr<span class="token operator">:</span>    <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span><span class="token string">"Write error saving DB on disk: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>tmpfile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">stopSaving</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>rdbSave()</B>完成对RDB文件的写入操作:</p><ol><li>创建一个临时文件,将内存中的数据进行写入,然后刷盘</li><li>对临时文件进行rename(👍写入文件不一定是原子,但是rename file一定是原子性的),来保证文件写入的原子性</li></ol><ul><li><B>rdbSaveBackground</B></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">rdbSaveBackground</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> rdbSaveInfo <span class="token operator">*</span>rsi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pid_t</span> childpid<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasActiveChildProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>    server<span class="token punctuation">.</span>dirty_before_bgsave <span class="token operator">=</span> server<span class="token punctuation">.</span>dirty<span class="token punctuation">;</span>    server<span class="token punctuation">.</span>lastbgsave_try <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//fork子进程进行处理RDB文件,这里的fork()返回值-1表示没有创建新进程成功,0表示创建新进程成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>childpid <span class="token operator">=</span> <span class="token function">redisFork</span><span class="token punctuation">(</span>CHILD_TYPE_RDB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> retval<span class="token punctuation">;</span>        <span class="token comment">/* Child */</span>        <span class="token function">redisSetProcTitle</span><span class="token punctuation">(</span><span class="token string">"redis-rdb-bgsave"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">redisSetCpuAffinity</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>bgsave_cpulist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span><span class="token string">"RDB文件为: %s"</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        retval <span class="token operator">=</span> <span class="token function">rdbSave</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>rsi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成rdb文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> C_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">sendChildCowInfo</span><span class="token punctuation">(</span>CHILD_INFO_TYPE_RDB_COW_SIZE<span class="token punctuation">,</span> <span class="token string">"RDB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">exitFromChild</span><span class="token punctuation">(</span><span class="token punctuation">(</span>retval <span class="token operator">==</span> C_OK<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 父进程处理 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childpid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            server<span class="token punctuation">.</span>lastbgsave_status <span class="token operator">=</span> C_ERR<span class="token punctuation">;</span>            <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span><span class="token string">"Can't save in background: fork: %s"</span><span class="token punctuation">,</span>                <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_NOTICE<span class="token punctuation">,</span><span class="token string">"Background saving started by pid %ld"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> childpid<span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span>rdb_save_time_start <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span>rdb_child_type <span class="token operator">=</span> RDB_CHILD_TYPE_DISK<span class="token punctuation">;</span>        <span class="token keyword">return</span> C_OK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> C_OK<span class="token punctuation">;</span> <span class="token comment">/* unreached */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个方法内部通过<B>redisFork()</B>创建了一个子进程来完成<B>rdbSave()</B>的调用</p><p>父进程不会阻塞而是直接打印RDB文件开始处理的消息</p><p>需要注意一点的是fork()进程的方法返回值是0-成功/-1-失败</p><p>在这一步的调用中省略<B>rdb.bgsaveCommand()</B>的调用逻辑,直接分析<B>server.c</B>中的逻辑</p><ul><li><B>server.c()</B></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">redisCommand</span> redisCommandTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token string">"module"</span><span class="token punctuation">,</span>moduleCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>     <span class="token string">"admin no-script"</span><span class="token punctuation">,</span>     <span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"get"</span><span class="token punctuation">,</span>getCommand<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>     <span class="token string">"read-only fast @string"</span><span class="token punctuation">,</span>     <span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"bgsave"</span><span class="token punctuation">,</span>bgsaveCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>     <span class="token string">"admin no-script"</span><span class="token punctuation">,</span>     <span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//省略其他命令</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用命令模式将所有客户端命令以及命令的处理方式放到<B>redisCommandTable</B>中进行处理,然后在和网络时间绑定就形成最开始说的调用链结构</p><ul><li>cron方式启动<br>cron方式启动的逻辑位于<B>server.serverCron()</B>中</li></ul><h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3><p>RDB文件是通过fork()子进程来处理文件,采用的是rename temp file的方式保证原子性. 父进程并不会阻塞,而是启动子进程后立即返回</p><h2 id="AOF文件"><a class="header-anchor" href="#AOF文件"></a>AOF文件</h2><p>AOF文件就类似于MySql中的binlog使用的Statement格式记录数据变化,每次只记录指令,并且超过设定的大小后会进行覆盖</p><h3 id="使用实例-v2"><a class="header-anchor" href="#使用实例-v2"></a>使用实例</h3><ul><li>配置文件</li></ul><pre class="line-numbers language-config" data-language="config"><code class="language-config">#开启redis aofappendonly yes#aof刷新机制 always:每一条都写入磁盘,everysec:每秒写入磁盘一次,no:文件系统刷新appendfsync everysec#aof文件扩容的阀值比例auto-aof-rewrite-percentage 100#aof文件重写后的初始大小auto-aof-rewrite-min-size 64mb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源码解析-v2"><a class="header-anchor" href="#源码解析-v2"></a>源码解析</h3><h3 id="小结-v2"><a class="header-anchor" href="#小结-v2"></a>小结</h3><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><h2 id="参考文章"><a class="header-anchor" href="#参考文章"></a>参考文章</h2><p><a href="https://redis.io/topics/persistence">Redis Persistence</a><br><a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html">Redis persistence demystified</a><br><a href="https://redis.io/topics/latency">Redis 延迟问题排查</a><br><a href="https://dl.acm.org/doi/fullHtml/10.1145/3318159">TxFS：利用文件系统崩溃一致性来提供 ACID 事务</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis源代码构建</title>
      <link href="2022/01/19/1.%E6%9D%82%E8%AE%B0/redis%E6%BA%90%E4%BB%A3%E7%A0%81%E6%9E%84%E5%BB%BA/"/>
      <url>2022/01/19/1.%E6%9D%82%E8%AE%B0/redis%E6%BA%90%E4%BB%A3%E7%A0%81%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1>redis源代码构建</h1><p>主要用来记录以下在WSL下编译和部署redis源码的过程</p><h2 id="环境准备"><a class="header-anchor" href="#环境准备"></a>环境准备</h2><ul><li><p>WSL<br>wsl2搭配Ubuntu 18.04使用,这一项不是必须的<br><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-19%20220306.jpg" alt="wsl"></p></li><li><p>Clion<br>JetBrains的C/C++ IDE,这一项也不是必须的</p></li><li><p>源代码<br><a href="https://github.com/redis/redis">https://github.com/redis/redis</a></p></li></ul><h2 id="构建过程"><a class="header-anchor" href="#构建过程"></a>构建过程</h2><ul><li>按照Linux编译工具</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update<span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span>  cmake <span class="token function">make</span> gcc g++ gdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>构建release.h</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#授权</span><span class="token function">chmod</span> +x mkreleasehdr.sh<span class="token comment">#执行make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上两个步骤就完成redis源代码的编译,接下来让我们把源代码导入CLion中进行debug</p><h2 id="调试过程"><a class="header-anchor" href="#调试过程"></a>调试过程</h2><ul><li>导入项目</li></ul><p><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-19%20231623.jpg" alt="导入项目"></p><ul><li>设置远程部署</li></ul><ol><li>设置远程部署工具链</li></ol><p><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-19%20231847.jpg" alt="工具链"></p><ol start="2"><li>设置CMake</li></ol><p><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-19%20231912.jpg" alt="CMake"></p><ol start="3"><li>设置MakeFile</li></ol><p><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-19%20232004.jpg" alt="MakeFile"></p><ul><li>设置调试器</li></ul><p><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-19%20232030.jpg" alt="设置调试器"></p><h2 id="debug"><a class="header-anchor" href="#debug"></a>debug</h2><ul><li>启动redis-server</li></ul><p><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-19%20232618.jpg" alt="启动redis-server"></p><ul><li>设置断点</li></ul><p><img src="https://hexo-1254947285.cos.ap-chengdu.myqcloud.com/hexo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-19%20235133.jpg" alt="设置断点"></p><p>以set为例,基本调用过程为<br><B>server.c</B> -&gt; <B>connection.c</B> -&gt; <B>t_set.c</B></p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>以上就是本地编译redis的过程,后续官网上还有编译挂载redis扩展库的过程和dockerfile的相关操作(未完待续!)</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis底层数据结构分析</title>
      <link href="2022/01/05/1.%E6%9D%82%E8%AE%B0/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
      <url>2022/01/05/1.%E6%9D%82%E8%AE%B0/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>redis底层数据结构分析</h1><p>redis底层数据结构分析主要是根据《Redis5 设计与源码分析》一书的章节而来,参考对照代码版本为6.2,源代码的编译和部署可以查看上一篇文章</p><p>redis底层数据结构可以划分为</p><ul><li>简单动态字符串</li><li>跳跃表</li><li>压缩列表</li><li>字典</li><li>整数集合</li><li>quicklist</li><li>stream</li></ul><p>这七种数据类型,下面分别对这七种数据类型进行分析</p><h2 id="简单动态字符串"><a class="header-anchor" href="#简单动态字符串"></a>简单动态字符串</h2><h3 id="数据结构"><a class="header-anchor" href="#数据结构"></a>数据结构</h3><p>简单动态字符串又被称为<B>SDS</B>,几乎贯穿redis中所有的模块。redis中重新设计字符串的原因是由于C语言中的char*,不满足redis中的一些常用操作例如追加字符、<br>计数等。</p><ul><li><p>char*<br>在C语言中定义的字符串结构为:字符+字符结尾，例如&quot;hello world!/n&quot;,而/n就是字符结尾，这样的结构不满足redis所需要的快速追加和计数操作</p></li><li><p>SDS<br>SDS结构是一个可以描述字符串类型(redis内部用于区分长度)、字符串长度、字符指针的类型,下面是一个具体的SDS的定义</p></li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef char *sds;struct __attribute__ ((__packed__)) sdshdr8 &#123;    uint8_t len; &#x2F;* used *&#x2F;    uint8_t alloc; &#x2F;* excluding the header and null terminator *&#x2F;    unsigned char flags; &#x2F;* 3 lsb of type, 5 unused bits *&#x2F;    char buf[];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到SDS的类型还是*char，但是在内部重新定义了len-占用长度、alloc-最大长度、flags-标识等。</p><p><img src="https://s2.loli.net/2022/01/17/VpmsYwhPUc9KBCq.png" alt="sds的数据结构"></p><p>在这张图中的<B>sdshdr8</B>、<B>sdshdr16</B>,flags的低三位存储的是SDS的类型，高5位没有含义，在SDS5中高5位存储的是长度。<br>实际存储数据的是<B>buf[]</B>,buf[]是一个柔性数组，柔性数组指的是数据结构和内容在内存上是连续的，这样的结构查询更快速(因为不需要额外进行指针操作)<br>使用<B><strong>attribute</strong></B>让编译器以紧凑模式进行内存分配,这样可以节省<B>flags</B>的3个字节，默认内存分配是以4个字节进行分配的</p><ul><li>小结<br>关于SDS需要记住的tags:</li></ul><ol><li>[继承] 继承于char*</li><li>[类型] 是一种动态的字符串，根据字符的长度可以分配不同的SDS类型</li><li>[组成] 由于len、alloc、flags、buf[]构成</li><li>[紧凑] 紧凑模式分配类型</li></ol><h3 id="操作"><a class="header-anchor" href="#操作"></a>操作</h3><p>SDS-动态字符串具有的操作分别有增删改查这几种，其中删除的设计比较特别。</p><ul><li>删除</li></ul><p>SDS的删除是通过<B>sdsclear</B>来实现的,直接设置len为0的方式来实现</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Modify an sds string in-place to make it empty (zero length).* However all the existing buffer is not discarded but set as free space* so that next append operations will not require allocations up to the* number of bytes previously available. *&#x2F;void sdsclear(sds s) &#123;    sdssetlen(s, 0);    s[0] &#x3D; &#39;\0&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加</li></ul><p>增加机制可参考下图<br><img src="https://s2.loli.net/2022/01/06/LUTovNR2k3hyIKm.png" alt="redis_sds_扩容机制"></p><p>主要是进行两个判断</p><ol><li>判断是否需要进行扩容</li><li>判断是否需要进行类型更改</li></ol><p>默认情况下是不会使用SDS5的类型,因为Redis认为扩容是一种常见的操作,因此SDS5很大的几率会更新成为SDS8类型.</p><h2 id="跳跃列表"><a class="header-anchor" href="#跳跃列表"></a>跳跃列表</h2><h3 id="数据结构-v2"><a class="header-anchor" href="#数据结构-v2"></a>数据结构</h3><p>跳跃列表指的是通过维护一个多层的链表结构来实现快速查找的数据结构<br><a href="https://zh.wikipedia.org/wiki/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8">跳跃列表</a>的解释.<br>下面是一个跳跃列表的数据结构</p><p><img src="https://s2.loli.net/2022/01/06/uciEDA9j2THBkJx.gif" alt="跳跃列表"></p><blockquote><p>通过将有序集合的部分节点分层，由最上层开始依次向后查找，如果本层的next节点大于要查找的值或next节点为NULL，则从本节点开始，降低一层继续向后查找，依次类推，如果找到则返回节点；否则返回NULL。采用该原理查找节点，在节点数量比较多时，可以跳过一些节点，查询效率大大提升，这就是跳跃表的基本思想。</p></blockquote><p>redis中的跳跃列表主要是由两个元素进行实现<B>zskiplistNode</B>、<B>zskiplist</B>,下面来详细分析一下这两个元素的源代码</p><ul><li>zskiplistNode</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* ZSETs 所使用的特殊版本的Skiplists *&#x2F;typedef struct zskiplistNode &#123;    &#x2F;&#x2F;字符串类型ele    sds ele;    &#x2F;&#x2F;用于存储排序的分值,最底层的列表就是根据这个分值进行排序    double score;    &#x2F;&#x2F;后退指针    struct zskiplistNode *backward;    &#x2F;&#x2F;层信息描述    struct zskiplistLevel &#123;        &#x2F;&#x2F;同层中的下一个节点指针        struct zskiplistNode *forward;        &#x2F;&#x2F;同层中的跨度,用于计数        unsigned long span;    &#125; level[];&#125; zskiplistNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>zskiplist</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct zskiplist &#123;    &#x2F;&#x2F;分别指向跳跃列表的头结点指针和尾节点指针    struct zskiplistNode *header, *tail;    &#x2F;&#x2F;列表的长度    unsigned long length;    &#x2F;&#x2F;列表的高度    int level;&#125; zskiplist;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作-v2"><a class="header-anchor" href="#操作-v2"></a>操作</h3><ul><li>查找过程</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* 查询包含在指定范围内的第一个节点，反之返回null. *&#x2F;zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range)&#123;    zskiplistNode *x;    int i;    &#x2F;* 判断传入范围超过列表范围 *&#x2F;    if (!zslIsInRange(zsl, range))        return NULL;    x &#x3D; zsl-&gt;header;    &#x2F;&#x2F;从最高层向下查找    for (i &#x3D; zsl-&gt;level - 1; i &gt;&#x3D; 0; i--)    &#123;        &#x2F;* 在同一层内从左到右依次查找 *&#x2F;        while (x-&gt;level[i].forward &amp;&amp; !zslValueGteMin(x-&gt;level[i].forward-&gt;score, range))            x &#x3D; x-&gt;level[i].forward;    &#125;    &#x2F;* 目标节点不能是最后一个*tail节点 *&#x2F;    x &#x3D; x-&gt;level[0].forward;    serverAssert(x !&#x3D; NULL);    &#x2F;*再次检测分数限制 *&#x2F;    if (!zslValueLteMax(x-&gt;score, range))        return NULL;    return x;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先从上到下，再从左到右的进行查找</p><ul><li>跳跃列表的实际应用</li></ul><p>跳跃列表主要是作为<B>zset</B>的一种底层实现,在满足以下三个条件后zset会使用<B>压缩列表-ziplist</B>作为底层实现</p><ol><li>有序集合元素数量小于128个时</li><li>元素大小不超过64字节时</li><li>集合大小操作1G时<br>如果不同时满足这三个条件时,则使用<B>skipList-跳跃列表</B>作为底层数据结构,这里需要注意的是zset底层结构转换成为skipList以后,就不会在转换成为ziplist</li></ol><ul><li>zset</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token comment">//如果当前列表长度大于128个时进行转化</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">zzlLength</span><span class="token punctuation">(</span>zobj<span class="token operator">-></span>ptr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">></span> server<span class="token punctuation">.</span>zset_max_ziplist_entries <span class="token operator">||</span> <span class="token comment">//如果当前列表格式大于64个时进行转化</span>    <span class="token function">sdslen</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">></span> server<span class="token punctuation">.</span>zset_max_ziplist_value <span class="token operator">||</span>  <span class="token comment">//如果当前列表大小大于1G时进行转化</span>    <span class="token operator">!</span><span class="token function">ziplistSafeToAdd</span><span class="token punctuation">(</span>zobj<span class="token operator">-></span>ptr<span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token comment">//转换为skip结构</span>      <span class="token function">zsetConvert</span><span class="token punctuation">(</span>zobj<span class="token punctuation">,</span>OBJ_ENCODING_SKIPLIST<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//继续添加数据</span>      zobj<span class="token operator">-></span>ptr <span class="token operator">=</span> <span class="token function">zzlInsert</span><span class="token punctuation">(</span>zobj<span class="token operator">-></span>ptr<span class="token punctuation">,</span>ele<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newscore<span class="token punctuation">)</span> <span class="token operator">*</span>newscore <span class="token operator">=</span> score<span class="token punctuation">;</span>      <span class="token operator">*</span>out_flags <span class="token operator">|=</span> ZADD_OUT_ADDED<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="压缩列表"><a class="header-anchor" href="#压缩列表"></a>压缩列表</h2><blockquote><p>压缩列表本质上是一个字节数组,是redis为了节省内存空间而设计的紧凑性数据结构,可以包含多个元素.压缩列表可以作为有序集合(zset)、散列(hash)、列表(list)</p></blockquote><h3 id="数据结构-v3"><a class="header-anchor" href="#数据结构-v3"></a>数据结构</h3><p><img src="https://s2.loli.net/2022/01/10/79cA85aCil3IzJf.png" alt="ziplist结构"></p><ul><li>zlbytes：压缩列表的字节长度，占4个字节，因此压缩列表最多有232-1个字节</li><li>zltail：压缩列表尾元素相对于压缩列表起始地址的偏移量，占4个字节</li><li>zllen：压缩列表的元素个数，占2个字节。zllen无法存储元素个数超过65535（216-1）的压缩列表，必须遍历整个压缩列表才能获取到元素个数</li><li>entryX：压缩列表存储的元素，可以是字节数组或者整数，长度不限。entry的编码结构将在后面详细介绍</li><li>zlend：压缩列表的结尾，占1个字节，恒为0xFF</li></ul><p>以下是创建ziplist的代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 创建一个空白的ziplist *&#x2F;  unsigned char *ziplistNew(void) &#123;      &#x2F;&#x2F;ZIPLIST_HEADER_SIZE &#x3D; (sizeof(uint32_t)*2+sizeof(uint16_t))  + (sizeof(uint8_t))      &#x2F;&#x2F;8个字节 + 2个字节 + 1个字节      unsigned int bytes &#x3D; ZIPLIST_HEADER_SIZE+ZIPLIST_END_SIZE;      &#x2F;&#x2F;分配内存,返回列表指针      unsigned char *zl &#x3D; zmalloc(bytes);      &#x2F;&#x2F;尝试将大端数据转换成小端数据      ZIPLIST_BYTES(zl) &#x3D; intrev32ifbe(bytes);      ZIPLIST_TAIL_OFFSET(zl) &#x3D; intrev32ifbe(ZIPLIST_HEADER_SIZE);      &#x2F;&#x2F;初始化列表长度      ZIPLIST_LENGTH(zl) &#x3D; 0;      &#x2F;&#x2F;设置列表尾部字符为hex_ff      zl[bytes-1] &#x3D; ZIP_END;      return zl;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意的是第三个步骤使用<B>intrev32ifbe()</B>尝试将大端数据转换成为小段数据;</p><p>大小端数据定义</p><blockquote><p>字节的排列方式有两个通用规则。例如，将一个多位数的低位放在较小的地址处，高位放在较大的地址处，则称小端序；反之则称大端序。在网络应用中，字节序是一个必须被考虑的因素，因为不同机器类型可能采用不同标准的字节序，所以均按照网络标准转化。<br>这里redis尽量采用小端的原因是在于<B>X86架构</B>和<B>ARM架构</B>是采用的小端模式,但是网络传输采用的是大端模式.</p></blockquote><h3 id="Entry的内部结构"><a class="header-anchor" href="#Entry的内部结构"></a>Entry的内部结构</h3><p>entry的结构体定义如下:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 我们使用这个函数来接收有关 ziplist 条目的信息。   请注意，这不是数据的实际编码方式，这是我们  被一个函数填充以便更容易操作。 *&#x2F;typedef struct zlentry &#123;    unsigned int prevrawlensize; &#x2F;* 对prevrawlen编码后的字节大小*&#x2F;    unsigned int prevrawlen;     &#x2F;* 上一个节点的长度 *&#x2F;    unsigned int lensize;        &#x2F;* 对len编码后的长度*&#x2F;    unsigned int len;            &#x2F;* 当前节点的长度 *&#x2F;    unsigned int headersize;     &#x2F;* prevrawlensize + lensize. *&#x2F;    unsigned char encoding;      &#x2F;* 当前节点所使用的编码类型:ZIP_STR_* or ZIP_INT *&#x2F;    unsigned char *p;            &#x2F;* 指向列表第一个元素的指针 *&#x2F;&#125; zlentry;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ziplist中需要注意的是’连锁更新’问题,由于ziplist的结构并不是链表结构而是连续内存结构,导致在删除上一个大节点时会导致数组整体移动的问题</p><h2 id="字典"><a class="header-anchor" href="#字典"></a>字典</h2><blockquote><p>字典又称散列表，是用来存储键值（key-value）对的一种数据结构.</p></blockquote><h3 id="数据结构-v4"><a class="header-anchor" href="#数据结构-v4"></a>数据结构</h3><p>Redis字典实现依赖的数据结构主要包含了三部分：字典、Hash表、Hash表节点。字典中嵌入了两个Hash表，Hash表中的table字段存放着Hash表节点，Hash表节点对应存储的是键值对。</p><p>结构如下:<br><img src="https://s2.loli.net/2022/01/16/sbcuXE1oLvhFzi9.jpg" alt="空Hash表结构示意"></p><ul><li>dict</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;** hash结构体* 会同时使用两个hash结构体,以便实现增量扩容*&#x2F;typedef struct dictht &#123;    &#x2F;&#x2F;指针数组,用于存储键值对    dictEntry **table;    &#x2F;&#x2F;table数组的大小    unsigned long size;    &#x2F;&#x2F;掩码(size-1)    unsigned long sizemask;    &#x2F;&#x2F;已存储的元素数量    unsigned long used;&#125; dictht;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里着重介绍一下掩码(sizemask)这个字段,sizemask的计算方式为取(size-1)这样的好处是通过<br><B>hash_key&amp;sizemask = hash_key/size</B><br>位操作的性能要高于取余操作</p><ul><li>dictEntry</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct dictEntry &#123;    void *key;    union &#123;        void *val;        uint64_t u64;        int64_t s64;        double d;    &#125; v;    struct dictEntry *next;&#125; dictEntry;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dictEntry是hash的节点元素结构,需要注意的是<B>V</B>是一种联合体结构,根据使用场景使用不同类型<br>*next是用来解决hash冲突的,采用的是头插法</p><ul><li>渐进式ReHash</li></ul><ol><li>当执行插入\删除\查找\修改时都会先判断当前字典是否在进行rehash,然后尝试进行rehash后才会执行操作</li><li>线程空闲时会每次对100个节点进行rehash</li></ol><h3 id="操作-v3"><a class="header-anchor" href="#操作-v3"></a>操作</h3><ul><li>迭代操作</li></ul><p>redis中的数据迭代分为两种类型</p><ol><li>普通迭代器<br>普通迭代器只会遍历数据</li><li>安全迭代器<br>安全迭代器,在遍历过程中会删除数据</li></ol><p>这两种迭代器对迭代过程中可能会产生重复数据的处理方式不一样</p><ol><li>普通迭代器<br>普通迭代器是通过标志位来限制字典结构的变化</li><li>安全迭代器<br>安全迭代器是通过限制rehash来保证数据的准确性</li></ol><h2 id="整数集合"><a class="header-anchor" href="#整数集合"></a>整数集合</h2><p>redis中的<B>整数集合</B>是作为集合的底层数据结构,用来保存少量的数据和整数元素,下面我们来分析它的数据结构和操作</p><h3 id="数据结构-v5"><a class="header-anchor" href="#数据结构-v5"></a>数据结构</h3><ul><li>intset.h</li></ul><pre class="line-numbers language-h" data-language="h"><code class="language-h">&#x2F;*** 整数集合结构体*&#x2F;typedef struct intset &#123;    &#x2F;&#x2F;编码格式    uint32_t encoding;    &#x2F;&#x2F;数组长度    uint32_t length;    &#x2F;&#x2F;元素数组    int8_t contents[];&#125; intset;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到整数集合的结构体比较简单,只有编码格式/长度/数据,这三个部分组成.下面继续分析一下整数数组创建的过程</p><ul><li>intsetNew</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* 创建空白的intset *&#x2F;intset *intsetNew(void) &#123;    &#x2F;&#x2F;通过zmalloc分配连续内存    intset *is &#x3D; zmalloc(sizeof(intset));    &#x2F;&#x2F;设置编码    is-&gt;encoding &#x3D; intrev32ifbe(INTSET_ENC_INT16);    &#x2F;&#x2F;设置长度    is-&gt;length &#x3D; 0;    return is;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作-v4"><a class="header-anchor" href="#操作-v4"></a>操作</h3><p>操作主要分析添加元素(intsetAdd)和删除元素()这两个操作</p><ul><li>intsetAdd</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* 添加元素 *&#x2F;intset *intsetAdd(intset *is, int64_t value, uint8_t *success) &#123;    &#x2F;&#x2F;1. 计算value的编码格式    uint8_t valenc &#x3D; _intsetValueEncoding(value);    uint32_t pos;    if (success) *success &#x3D; 1;    &#x2F;*    *判断即将添加的元素是否需要修改intset修改编码才能添加    *&#x2F;    if (valenc &gt; intrev32ifbe(is-&gt;encoding)) &#123;        &#x2F;* 这个操作默认都是成功的 *&#x2F;        return intsetUpgradeAndAdd(is, value);    &#125; else &#123;        &#x2F;&#x2F;判断当前元素是否存在于集合中,如果有则返回失败        &#x2F;&#x2F;*pos        if (intsetSearch(is, value, &amp;pos)) &#123;            if (success) *success &#x3D; 0;            return is;        &#125;        &#x2F;&#x2F;判断当前添加元素后是否需要扩容        is &#x3D; intsetResize(is, intrev32ifbe(is-&gt;length) + 1);        &#x2F;&#x2F;pos如果在当前数组中,需要对元素进行移位操作        if (pos &lt; intrev32ifbe(is-&gt;length)) intsetMoveTail(is, pos, pos + 1);    &#125;    &#x2F;&#x2F;向pos的位置上插入元素value    _intsetSet(is, pos, value);    &#x2F;&#x2F;设置length    is-&gt;length &#x3D; intrev32ifbe(intrev32ifbe(is-&gt;length) + 1);    return is;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加元素是通过*pos指针来进行确定位置的,先获取可以插入的位置,在将元素插到指定的位置上,最后在进行位移操作</p><ul><li>intsetRemove</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* 删除元素 *&#x2F;intset *intsetRemove(intset *is, int64_t value, int *success) &#123;    &#x2F;&#x2F;判断元素编码    uint8_t valenc &#x3D; _intsetValueEncoding(value);    uint32_t pos;    if (success) *success &#x3D; 0;    &#x2F;&#x2F;查找元素位置    if (valenc &lt;&#x3D; intrev32ifbe(is-&gt;encoding) &amp;&amp; intsetSearch(is, value, &amp;pos)) &#123;        uint32_t len &#x3D; intrev32ifbe(is-&gt;length);        &#x2F;* We know we can delete *&#x2F;        if (success) *success &#x3D; 1;        &#x2F;*使用位移操作覆盖元素*&#x2F;        if (pos &lt; (len - 1)) intsetMoveTail(is, pos + 1, pos);        &#x2F;&#x2F;重新设置数组长度        is &#x3D; intsetResize(is, len - 1);        is-&gt;length &#x3D; intrev32ifbe(len - 1);    &#125;    return is;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先查找元素,在根据元素的位置进行移位操作.<br>从<B>intsetAdd</B>方法中可以看到整数集合中的数据是不允许重复的,是有序的数组组成.</p><h2 id="quicklist"><a class="header-anchor" href="#quicklist"></a>quicklist</h2><p>quicklist是为优化处理<B>List</B>的底层存储结构ziplist和adlist而来,关于List的定义这个描述的比较好</p><blockquote><p>链表是这样一种数据结构，其中的各对象按线性顺序排列。链表与数组的不同点在于，数组的顺序由下标决定，链表的顺序由对象中的指针决定。</p></blockquote><p>关于quicklist的定义如下</p><blockquote><p>Redis中对quciklist的注释为A doubly linked list of ziplists。quicklist是一个双向链表，链表中的每个节点是一个ziplist结构。quicklist可以看成是用双向链表将若干小型的ziplist连接到一起组成的一种数据结构。</p></blockquote><h3 id="数据结构-v6"><a class="header-anchor" href="#数据结构-v6"></a>数据结构</h3><ul><li>quicklist</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;*** quickList结构体* 大小为40字节*&#x2F;typedef struct quicklist &#123;    &#x2F;&#x2F;首尾节点    quicklistNode *head;    quicklistNode *tail;    &#x2F;&#x2F;总条数    unsigned long count;    &#x2F;&#x2F;节点数量    unsigned long len;    &#x2F;&#x2F;单个节点的填充因子    int fill : QL_FILL_BITS;    &#x2F;&#x2F;不同节点的深度    unsigned int compress : QL_COMP_BITS;    unsigned int bookmark_count: QL_BM_BITS;    &#x2F;&#x2F;书签列表(用于快速查找节点使用)    quicklistBookmark bookmarks[];&#125; quicklist;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于超大型列表会采用列表尾部使用书签这种数据结构来进行快速查找</p><ul><li>quicklistBookmark</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct quicklistBookmark &#123;    quicklistNode *node;    char *name;&#125; quicklistBookmark;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以从quicklist/quicklistBookmark的结构体中看到<B>quicklistNode</B>是底层元素存储节点的结构体</p><ul><li>quicklistNode</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;*** quicklistNode 是一个 32 字节的结构，用于描述一个快速列表的ziplist。* 我们使用sz(位域)将 quicklistNode 保持在 32 字节。* count: 16位，最大 65536（最大 zl 字节为 65k，因此最大计数实际上 &lt; 32k）。* encoding: 2位，RAW&#x3D;1，LZF&#x3D;2。* container: 2 位，NONE&#x3D;1，ZIPLIST&#x3D;2。* recompress: 1 位，布尔值，如果节点临时解压缩以供使用，则为 true。* attempted_compress: 1 位，布尔值，用于测试期间的验证。* extra: 10 位，免费供以后使用； 填充剩余的 32 位*&#x2F;typedef struct quicklistNode &#123;    struct quicklistNode *prev;    struct quicklistNode *next;    unsigned char *zl;    unsigned int sz;             &#x2F;* ziplist size in bytes *&#x2F;    unsigned int count : 16;     &#x2F;* count of items in ziplist *&#x2F;    unsigned int encoding : 2;   &#x2F;* RAW&#x3D;&#x3D;1 or LZF&#x3D;&#x3D;2 *&#x2F;    unsigned int container : 2;  &#x2F;* NONE&#x3D;&#x3D;1 or ZIPLIST&#x3D;&#x3D;2 *&#x2F;    unsigned int recompress : 1; &#x2F;* was this node previous compressed? *&#x2F;    unsigned int attempted_compress : 1; &#x2F;* node can&#39;t compress; too small *&#x2F;    unsigned int extra : 10; &#x2F;* more bits to steal for future usage *&#x2F;&#125; quicklistNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析quicklistNode:</p><ol><li>结构上于ziplist不相同,采用的是列表格式记录数据</li><li>单个node最大链表数量不操作32K</li><li>encoding:LZF进行压缩编码</li></ol><p>总结:<br>redis底层数据格式分为六种</p><ul><li><p>简单动态字符串<br>简单动态字符串(SDS),逻辑上是对*char指针的扩展,结构上根据不同的长度可以分为多种类型,使用惰性删除机制</p></li><li><p>跳跃列表<br>跳跃列表(skipList)结构上zskiplistNode/zskiplist,zset在满足任意条件(元素个数超过128/元素大小大于64字节/ziplist大小超过1G)后使用skip作为底层数据结构且不会回退</p></li><li><p>压缩列表<br>压缩列表(ziplist)结构上分为*ziplist/entry,需要注意的是ziplist是连续的内存节点组成,并且entry上还有上一节点的信息</p></li><li><p>字典<br>字典(dict)结构是通过hash结构来组成,特点是采用位运算与来取余数,并且采用两个hash来实现渐进式Rehash,是通过懒处理和线程空闲时处理的方式来完成</p></li><li><p>整数集合<br>整数集合结构是连续的内存,每次添加前都要先计算编码长度和插入位置以便进行扩容</p></li><li><p>quicklist<br>quicklist是一个双向链表结构,每个节点又是ziplist组成</p></li><li><p>stream<br>省略,详见src/stream.h文件</p></li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://redis.io/topics/internals-sds">Hacking Strings</a><br><a href="http://www.itabin.com/redis-zskiplist/">zskiplist</a><br><a href="https://www.geek-share.com/detail/2714589322.html">redisd源代码的大端与小端</a><br><a href="https://cache.one/read/2884987">redis压缩列表ziplist的连锁扩容</a><br><a href="https://redisbook.readthedocs.io/en/latest/compress-datastruct/intset.html">整数集合</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解linux内核笔记</title>
      <link href="2021/12/08/21.linux/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/12/08/21.linux/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>深入理解linux内核笔记</h1><h2 id="内核"><a class="header-anchor" href="#内核"></a>内核</h2><p>unix内核根据执行状态分为’用户态’和’执行态’</p><ul><li>用户与内核态的切换</li></ul><ol><li>进程调用系统调用</li><li>触发异常(exception)</li><li>响应中断</li><li>内核线程的执行(这里有一些歧义,本身就是内核态)</li></ol><ul><li>进程描述符</li></ul><p>进程描述符是用来描述当前正在运行的进程的详细信息,包括以下几个部分<br>- 程序计数器和栈指针<br>- 通用寄存器<br>- 浮点寄存器<br>- 内存管理寄存器</p><ul><li>可重入内核</li></ul><p>unix是可重入内核,意味着同时有若干个进程在执行,在抢占式内核调度系统中进程会交替执行</p><ul><li><p>僵尸进程<br>僵尸进程的产生是由父进程通过’wait4()'的系统调用等待子进程的结束的状态,</p></li><li><p>进程组与会话<br>进程组是对一种&quot;作业&quot;的抽象<br>登录会话指的是</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析Kubernetes之编排能力</title>
      <link href="2021/11/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/3.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8B%E7%BC%96%E6%8E%92%E8%83%BD%E5%8A%9B/"/>
      <url>2021/11/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/3.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8B%E7%BC%96%E6%8E%92%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<h1>深入剖析Kubernetes之编排能力</h1><ul><li>名词解释</li></ul><blockquote><p>编排: 引申为描述复杂计算机系统、中间件 (middleware) 和业务的自动化的安排、协调和管理。</p></blockquote><h2 id="编排能力"><a class="header-anchor" href="#编排能力"></a>编排能力</h2><ul><li><p>为什么需要编排能力?<br>在应用大规模的拆分实施微服务化以后,需要解决微服务之间的服务依赖/注册发现/资源管理等问题.</p></li><li><p>编排能力需要那一层来实现?<br>之所以需要提出这个问题是因为,目前应用的按层划分,可以在每一层都实现相同的能力,但是为什么目前主流的解决编排问题是在基础设施层解决,主要是依据责任的划分,基础能力的下沉</p></li></ul><h2 id="编排对象"><a class="header-anchor" href="#编排对象"></a>编排对象</h2><ul><li><p>资源编排<br>资源编排指的是对具体容器的NameSpace\Cgroup\网络的管理,文件系统的管理等</p></li><li><p>工作负载编排<br>工作负载编排指的是对pod生命周期的管理</p></li><li><p>服务编排<br>服务编排是应用开发人员比较熟悉的一个领域,指的是对具体的服务的服务发现/高可用的管理</p></li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/36062500">编排的艺术| K8S 中的容器编排和应用编排</a><br><a href="https://zhuanlan.zhihu.com/p/144452103">云原生时代（五）：Kubernetes与容器编排之战</a></p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析Kubernetes之Pods的概念</title>
      <link href="2021/11/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/2.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8BPod%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>2021/11/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/2.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8BPod%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1>深入剖析Kubernetes之Pods的概念</h1><p>在上一篇文章中了解到kubernetes的部署在逻辑上是按照<B>Pod</B>的概念进行的,下面来详细的了解一下pod的知识</p><h2 id="基础概念"><a class="header-anchor" href="#基础概念"></a>基础概念</h2><blockquote><p>Pods是您可以在 Kubernetes 中创建和管理的最小的可部署计算单元。Pods是一组由一个或一个以上的容器组成的共享存储和网络资源，以及如何运行容器的规范。Pod 的内容始终位于同一地点并共同调度，并在共享上下文中运行。Pod 为特定于应用程序的“逻辑主机”建模：它包含一个或多个相对紧密耦合的应用程序容器。在非云环境中，在同一物理或虚拟机上执行的应用程序类似于在同一逻辑主机上执行的云应用程序。</p></blockquote><p>Pods的官网定义,这个定义传达出三个规范:</p><ol><li>Pods是Kubernetes管理执行的最小单元</li><li>Pods是容器组成,并且容器内部可以共享网络和存储</li><li>Pods是一个逻辑概念,替kubernetes完成底层操作的还是容器三剑客’Namespace’、‘Cgroup’、‘rootFs’</li></ol><h2 id="Pods组成"><a class="header-anchor" href="#Pods组成"></a>Pods组成</h2><p>Pods的组成可以参考这张图:<br><img src="https://d33wubrfki0l68.cloudfront.net/aecab1f649bc640ebef1f05581bfcc91a48038c4/728d6/images/docs/pod.svg" alt="Pods组成"></p><p>Pods除了本身的容器’ContainerA/ContainerB’以外还有一个<B>Infra container</B>容器，这个容器的镜像很小解压后也只有100kb~200kb大小。</p><ul><li><p>Init容器<br>init容器是在用户容器启动之前-网络和数据卷初始化完成后启动<br>用于代理用户容器的网络和IO,其实就是Sidecar模式</p></li><li><p>用户容器<br>用户容器是’Web Server’也就是在YML中定义的容器</p></li></ul><h2 id="Pods功能"><a class="header-anchor" href="#Pods功能"></a>Pods功能</h2><ul><li><p>volume</p><p>volume数据卷其中有一种特殊的volume-&gt;‘Projected Volume’(投射数据卷)主要是用来向容器内部提供预先定义好的数据，可以划分为</p><ol><li>Secret</li><li>ConfigMao</li><li>DownwardApi</li><li>ServiceAccountToken</li></ol><p>这几种类型，其中Secret指的是将配置添加到kubernetes中镜像管理的数据，在通过Pods的YMAL文件的定义可以将这部分配置信息直接写入容器中，并且可以随着Kubernetes中内容的变化而变化，类似与配置中心的使用</p></li><li><p>异常恢复策略</p><p>Pods的异常恢复策略可以分为:</p><ol><li>只要容器没有运行就进行自动重启</li><li>只有在容器异常时才进行chongq</li><li>永不自动重启容器</li></ol><p>检查容器是否运行的方法有:</p><ol><li>响应外部请求，例如http请求</li><li>外部检查预设的启动后的钩子方法，例如检查文件卷宗预设的文件是否存在等</li></ol><p>实现对容器进行定期诊断的功能叫’容器探针’，由容器内部进行实现。分为三种类型</p><ol><li>ExecAction</li><li>TCPSocketAction</li><li>HTTPGetAction</li></ol><p>容器探针又分为：</p><ol><li>存活探针<br>存活探针指的是要确认一个容器是否真正的死亡的场景，例如重启时检测之前的失败容器是否已经死亡</li><li>就绪探针<br>就绪探针指的是区分应用是否准备就绪的场景</li><li>启动探针<br>启动探针指的是对于大型容器的启动比较慢的场景需要区分容器是否还在启动</li></ol></li></ul><h2 id="Pods生命周期"><a class="header-anchor" href="#Pods生命周期"></a>Pods生命周期</h2><p>Pod的阶段分为</p><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>Pending（悬决）</td><td>Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间，</td></tr><tr><td>Running（运行中）</td><td>Pod 已经绑定到了某个节点，Pod 中所有的容器都已被创建。至少有一个容器仍在运行，或者正处于启动或重启状态。</td></tr><tr><td>Succeeded（成功）</td><td>Pod 中的所有容器都已成功终止，并且不会再重启。</td></tr><tr><td>Failed（失败）</td><td>Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非 0 状态退出或者被系统终止。</td></tr><tr><td>Unknown（未知）</td><td>因为某些原因无法取得 Pod 的状态。这种情况通常是因为与 Pod 所在主机通信失败。</td></tr></tbody></table><h2 id="Pod的上层抽象-Service"><a class="header-anchor" href="#Pod的上层抽象-Service"></a>Pod的上层抽象:Service</h2><p>这里先简单的介绍以下Service，kubernetes中Service是将一组Pod暴露给外界的一种方式。对外提供两种访问方式</p><ol><li><p>VIP<br>通过对外提供Service的虚拟IP,然后在将请求转发到具体的Pod上。</p></li><li><p>DNS<br>- Normal Service<br>与VIP方式类似<br>- Headles Service<br>对于请求直接返回具体Pod的IP。类似于DNS直接解析出真实Pod的IP</p></li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/">pod是什么?</a><br><a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase">pod的生命周期</a></p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大规模分布式存储系统-基础篇</title>
      <link href="2021/11/09/19.%E5%88%86%E5%B8%83%E5%BC%8F/0.%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>2021/11/09/19.%E5%88%86%E5%B8%83%E5%BC%8F/0.%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1>大规模分布式存储系统-基础篇</h1><p>主要是记录阅读《大规模分布式存储系统：原理解析与架构实战》基础篇中的一些知识和理解。</p><ul><li>书评</li></ul><p><a href="https://book.douban.com/subject/25723658/">大规模分布式存储系统</a></p><p>基础篇主要是从<B>单机存储系统</B>到<B>分布式存储系统</B>的演化过程以及各自的特点进行分析</p><h2 id="单机存储系统"><a class="header-anchor" href="#单机存储系统"></a>单机存储系统</h2><p>单机存储系统最早应该是来源自关系型数据库的理论，根据数据库操作在发展出事务的概念</p><h3 id="硬件基础"><a class="header-anchor" href="#硬件基础"></a>硬件基础</h3><p>介绍CPU、IO总线、网络拓扑等知识，其中南桥/北桥的作用比较有意思</p><ul><li>南桥负责与低速设备的交互</li><li>北桥负责与高速设备的交互</li></ul><p><img src="https://i.loli.net/2021/11/09/6OIbyw3zZGTFCkc.jpg" alt="南北桥结构"></p><h3 id="存储引擎"><a class="header-anchor" href="#存储引擎"></a>存储引擎</h3><p>存储引擎是根据文件系统对存储系统提供底层的CRUD能力的引擎,根据存储引擎底层使用的算法可以大致划分为’hash存储引擎’、‘B tree存储引擎’、'LSM存储引擎’这三类</p><ul><li><p>hash存储引擎<br>hash存储引擎底层采用hash算法确定key的位置，value则代表文件的物理位置。使用这种算法的可以参考RocketMQ中的indexFile和commitLog文件之间的关系.<br>hash存储引擎不支持顺序读写</p></li><li><p>B+ tree存储引擎<br>B+ tree存储引擎具体的实现可以参考MySQL中的innodb存储引擎的设计模型，会设计出一个缓存区来对热点数据的缓存。对于缓存数据的替换策略有<B>LRU</B>、<B>LIRS</B>，其中LIRS的设计比较有趣，LIRS是为了解决LRU策略无法处理因全表扫描导致污染缓冲区的场景，底层采用多级缓冲的策略，设置晋升阈值来避免一级缓存受到污染</p></li><li><p>LSM存储引擎<br>LSM存储引擎的全称是’Log-structured merge-tree’. 将对数据的修改增量保持在内存中，达到指定的大小限制后将这些修改操作批量顺序写入磁盘中。LSM适合于写多读少的场景，通过牺牲读取性能来换写入的性能</p></li></ul><h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3><p>关于更多的存储引擎可以参考<br><a href="https://dev.to/creativcoder/what-is-a-lsm-tree-3d75">What is a LSM Tree?</a><br><a href="ttps://bbs.huaweicloud.com/blogs/detail/197482">存储引擎对比</a><br><a href="https://www.cs.umb.edu/~poneil/lsmtree.pdf">LSM Tree 论文</a></p><h2 id="数据模型"><a class="header-anchor" href="#数据模型"></a>数据模型</h2><p>数据模型指的是存储引擎用什么格式保存数据常用的数据模型有’文件’、‘关系’、‘键值对’</p><h2 id="事务"><a class="header-anchor" href="#事务"></a>事务</h2><ul><li>事务的特性:ACID</li><li>事务的种类:读事务、写事务、混合事务</li><li>事务的实现:锁、COW、MVCC</li></ul><h2 id="故障恢复"><a class="header-anchor" href="#故障恢复"></a>故障恢复</h2><p>数据库需要实现完善的故障恢复机制，一般是采用操作日志来实现的。<br>操作日志分为</p><ul><li>回滚日志(UNDO log) 用来记录事务修改前的记录</li><li>重做日志(REDO log) 用来记录事务修改后的状态</li><li>操作日志(binlog) 用来记录对物理磁盘的操作</li></ul><h2 id="数据压缩"><a class="header-anchor" href="#数据压缩"></a>数据压缩</h2><p>数据压缩是对大量数据进行压缩以节省空间。压缩算法的核心就是查找重复数据，'列式存储技术’是把相同列的数据组织在一起</p><h3 id="压缩算法"><a class="header-anchor" href="#压缩算法"></a>压缩算法</h3><ul><li>Huffman编码</li><li>LZ系列压缩算法</li></ul><h3 id="列式存储"><a class="header-anchor" href="#列式存储"></a>列式存储</h3><pre><code>列式存储是针对于传统的行式存储的对应，针对的是OLAP的场景。按照列来存储数据就会导致列上重复的值较多，因此就需要使用压缩算法来进行压缩</code></pre><h2 id="分布式存储系统特性"><a class="header-anchor" href="#分布式存储系统特性"></a>分布式存储系统特性</h2><p>分布式存储系统底层主要依赖两个协议<B>Paxos选举协议</B>、<B>两阶段提交协议</B></p><h3 id="异常"><a class="header-anchor" href="#异常"></a>异常</h3><ul><li>宕机</li><li>网络异常<br>消息丢失、消息乱序、网络数据包异常</li></ul><blockquote><p>设计分布式系统的一个原则是:网络永远是不可靠的</p></blockquote><ul><li>磁盘故障</li></ul><h3 id="状态"><a class="header-anchor" href="#状态"></a>状态</h3><p>分布式系统中定义的系统状态有且只有<B>成功</B>、<B>失败</B>、<B>未知</B></p><h3 id="一致性"><a class="header-anchor" href="#一致性"></a>一致性</h3><p>在分布式环境中由于异常是无法避免的，因此需要冗余多份数据来保证可用性。冗余的多份副本就会存在数据一致性的问题，如何保证副本之间的一致性是关键</p><h2 id="数据分布"><a class="header-anchor" href="#数据分布"></a>数据分布</h2><p>分布式系统与单机存储系统系统最大的区别在于<B>数据分布</B>上,分布式系统可以将数据按照<B>Hash分布</B>、<B>顺序分布</B>两种方式进行划分。</p><h3 id="Hash分布"><a class="header-anchor" href="#Hash分布"></a>Hash分布</h3><p>Hash分布原理比较简单，需要注意的是扩容场景下的处理，有两种处理方法分别是</p><ul><li>元数据区<br>引入元数据区，通过元数据区来管理hash的key与value之间的关系</li><li>一致性hash算法<br>使用一致性hash算法,保证节点的平均分布</li></ul><blockquote><p>一致性hash算法如何在扩容时保证数据的平均分布?</p></blockquote><p>Hash算法不支持顺序查找</p><h3 id="顺序分布"><a class="header-anchor" href="#顺序分布"></a>顺序分布</h3><p>顺序分布指的是数据按照指定的维度顺序的写入数据，多用于分布式表格系统中</p><h2 id="复制"><a class="header-anchor" href="#复制"></a>复制</h2><p>分布式系统中数据的复制机制决定了这个分布式系统对可用性和一致性的取舍。数据的复制可以分为<B>强同步复制</B>、<B>异步复制</B>两种方向。<br>在工程实践中又可以根据这两个方向做不同的取舍，以Oracle的DataGuard复制组件为例,提供了三种不同的模式</p><ul><li>最大保护模式<br>最大保护模式也就是强同步复制模式</li><li>最大性能模式<br>最大性能模式也就是异步复制模式</li><li>最大可用模式<br>最大可用模式是默认情况下使用强同步复制模式，网络异常时使用异步复制模式</li></ul><h2 id="故障检测"><a class="header-anchor" href="#故障检测"></a>故障检测</h2><p>故障检测常用的方法有心跳、φ-accrual(累计历史故障检测器)、 Gossip故障检测.这几种方式</p><p><a href="https://iswade.github.io/database/db_internals_ch09_failure_detection/#gossip">分布式系统之故障检测</a><br><a href="https://www.serf.io/docs/internals/gossip.html">serf官网</a><br><a href="https://flogx.com/post/using-serf-to-implement-distributed-fault-detection/">使用serf实现分布式故障检测</a></p><h2 id="故障恢复-v2"><a class="header-anchor" href="#故障恢复-v2"></a>故障恢复</h2><p>故障恢复是由于分布式环境下机器或网络的故障，需要通过故障恢复的机制将服务从不可用状态恢复成可用状态。分布式系统的存储方案分为两种结构:<B>单层结构</B>、<B>双层结构</B></p><ul><li>单层结构<br>单层结构指的是服务和存储都作为一个节点，然后按照节点进行分片</li><li>多层结构<br>多层结构指的是存储系统按照服务层和存储层进行分层,在服务层只提供一个一份数据</li></ul><h2 id="分布式协议"><a class="header-anchor" href="#分布式协议"></a>分布式协议</h2><p><B>分布式协议</B>根据不同的作用域可以划分为租约\复制协议\一致性协议等.比较重要的是<B>两阶段提交协议</B>、<B>Paxos选举协议</B></p><ul><li><p>两阶段提交协议<br>两阶段提交协议指的是将分布式事务的操作划分为两个阶段,分别是<B>请求阶段</B>、<B>提交阶段</B><br>两阶段提交协议中的包括的节点有两类，分别是<B>协调者</B>和<B>参与者</B></p><p><img src="https://i.loli.net/2021/11/11/qxE9X3mhKwDJfBg.jpg" alt="两阶段提交过程.jpg"></p></li><li><p>Paxos选举协议<br>Paxos选举协议主要是用于解决多个节点之间的一致性问题。可以参考之前的一篇文章<a href="https://agmtopy.github.io/2020/06/23/1.%E6%9D%82%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7paxos%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0zab%E5%8D%8F%E8%AE%AE/">分布式中的一致性paxos算法以及其实现zab协议</a><br>采用’Quorum机制’机制来保证节点作为一个整体对外的一致性,简单的来说就是通过序列号和大多数确认机制来保证集群的一致性</p></li><li><p>Paxos与2PC混合场景<br><img src="https://i.loli.net/2021/11/11/M12yJLwtjePQfnr.jpg" alt="2PC与Paoxs的对比.jpg"></p></li></ul><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>基础篇主要是介绍单机存储系统的<B>硬件基础</B>、<B>存储引擎</B>、分布式存储系统<B>数据模型</B>、<B>分布式特性</B>、<B>故障检测/恢复</B>、<B>分布式协议</B>等</p><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析Kubernetes之Kubernetes的基础概念</title>
      <link href="2021/11/08/18.%E5%AE%B9%E5%99%A8%E5%8C%96/1.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8BKubernetes%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>2021/11/08/18.%E5%AE%B9%E5%99%A8%E5%8C%96/1.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8BKubernetes%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1>深入剖析Kubernetes之Kubernetes的基础</h1><blockquote><p>Kubernetes是由google和RetHot主导的容器编排工具，已经称为容器编排的标准.Kubernetes源自Google内部的Borg,可以参考这篇文章</p></blockquote><p><a href="https://kubernetes.io/zh/blog/2015/04/borg-predecessor-to-kubernetes/">Borg: Kubernetes 的前身</a></p><h2 id="概念"><a class="header-anchor" href="#概念"></a>概念</h2><p>Kubernetes是一个对容器进行管理的框架,提供了<B>服务发现和负载均衡</B>、<B>存储编排</B>、<B>自动部署和回滚</B>、<B>自动完成装箱计算</B>、<B>自我修复</B>、<B>密钥与配置管理</B>等功能，可以参考这篇文章</p><p><a href="https://kubernetes.io/zh/docs/concepts/overview/">Kubernetes 是什么</a></p><h2 id="组件"><a class="header-anchor" href="#组件"></a>组件</h2><p><img src="https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg" alt="kubernetes组件总览"></p><p>kubernetes的组件分为<B>控制平面组件</B>、<B>Node 组件</B>、<B>插件</B></p><h3 id="控制平面组件"><a class="header-anchor" href="#控制平面组件"></a>控制平面组件</h3><p>控制平面组件是对集群做出全局决策(比如调度)，以及检测和响应集群事件的决策和处理。</p><h3 id="Node-组件"><a class="header-anchor" href="#Node-组件"></a>Node 组件</h3><p>Node节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p><h3 id="插件（Addons）"><a class="header-anchor" href="#插件（Addons）"></a>插件（Addons）</h3><p>插件是是对Kubernetes资源（DaemonSet、 Deployment等）实现管理的功能。 因为这些插件提供集群级别的功能，插件中命名空间域的资源属于kube-system命名空间。</p><h2 id="部署"><a class="header-anchor" href="#部署"></a>部署</h2><p>Kubernetes的部署工具目前有<B>kubectl</B>、<B>kind</B>、<B>minikube</B>、<B>kubeadm</B></p><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/">kubernetes的部署工具文档</a></p><h2 id="实例"><a class="header-anchor" href="#实例"></a>实例</h2><p>如何创建一个简单的kubernetes的本地环境</p><h3 id="前置准备"><a class="header-anchor" href="#前置准备"></a>前置准备</h3><ul><li><p>工具</p><ol><li>minikube</li><li>kubectl</li></ol></li><li><p>步骤</p><ol><li>安装minikube</li></ol><ul><li>检查是否支持虚拟化</li></ul><blockquote><p>grep -E --color ‘vmx|svm’ /proc/cpuinfo</p></blockquote><ul><li>安装配置 kubectl</li></ul>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y apt-transport-https<span class="token function">curl</span> -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token builtin class-name">echo</span> <span class="token string">"deb https://apt.kubernetes.io/ kubernetes-xenial main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/apt/sources.list.d/kubernetes.list<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装minikube</li></ul>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64<span class="token function">sudo</span> <span class="token function">install</span> minikube-linux-amd64 /usr/local/bin/minikube<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>启动</li></ol><ul><li>查看所有namespace下的pod</li></ul><blockquote><p>kubectl get po -A</p></blockquote><ul><li>安装仪表盘</li></ul><blockquote><p>minikube dashboard</p></blockquote><p>启动控制台后可以看到<br><img src="https://i.loli.net/2021/11/27/iYAxaecJMdFurZQ.jpg" alt="kubernetes控制台"></p></li></ul><h3 id="配置文件"><a class="header-anchor" href="#配置文件"></a>配置文件</h3><p>kubernetes不推荐使用命令行来操作容器，而是推荐使用YAML文件来进行配置</p><p>下面是一个典型的zk集群的配置文件</p><ul><li>application/zookeeper/zookeeper.yaml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>hs  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> zk<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2888</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> server  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3888</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>election  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> zk<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>cs  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> zk<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2181</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> client  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> zk<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> policy/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PodDisruptionBudget<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>pdb<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> zk  <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> zk  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>hs  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">updateStrategy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate  <span class="token key atrule">podManagementPolicy</span><span class="token punctuation">:</span> OrderedReady  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> zk    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>                <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"app"</span>                    <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                    <span class="token key atrule">values</span><span class="token punctuation">:</span>                    <span class="token punctuation">-</span> zk              <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> <span class="token string">"kubernetes.io/hostname"</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>zookeeper        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always        <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"k8s.gcr.io/kubernetes-zookeeper:1.0-3.4.10"</span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"1Gi"</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"0.5"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">2181</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> client        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">2888</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> server        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3888</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>election        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sh        <span class="token punctuation">-</span> <span class="token punctuation">-</span>c        <span class="token punctuation">-</span> "start<span class="token punctuation">-</span>zookeeper \          <span class="token punctuation">-</span><span class="token punctuation">-</span>servers=3 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>data_dir=/var/lib/zookeeper/data \          <span class="token punctuation">-</span><span class="token punctuation">-</span>data_log_dir=/var/lib/zookeeper/data/log \          <span class="token punctuation">-</span><span class="token punctuation">-</span>conf_dir=/opt/zookeeper/conf \          <span class="token punctuation">-</span><span class="token punctuation">-</span>client_port=2181 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>election_port=3888 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>server_port=2888 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>tick_time=2000 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>init_limit=10 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>sync_limit=5 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>heap=512M \          <span class="token punctuation">-</span><span class="token punctuation">-</span>max_client_cnxns=60 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>snap_retain_count=3 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>purge_interval=12 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>max_session_timeout=40000 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>min_session_timeout=4000 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>log_level=INFO"        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> sh            <span class="token punctuation">-</span> <span class="token punctuation">-</span>c            <span class="token punctuation">-</span> <span class="token string">"zookeeper-ready 2181"</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> sh            <span class="token punctuation">-</span> <span class="token punctuation">-</span>c            <span class="token punctuation">-</span> <span class="token string">"zookeeper-ready 2181"</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> datadir          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/zookeeper      <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>        <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">1000</span>        <span class="token key atrule">fsGroup</span><span class="token punctuation">:</span> <span class="token number">1000</span>  <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> datadir    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">accessModes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"ReadWriteOnce"</span> <span class="token punctuation">]</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">requests</span><span class="token punctuation">:</span>          <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件以’—'作为容器配置分割符，分别创建了4个容器从而创建一个完整的ZK集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">service/zk-hs createdservice/zk-cs createdpoddisruptionbudget.policy/zk-pdb createdstatefulset.apps/zk created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><ol><li>kubernetes内部是由四个组件组成</li></ol><ul><li>控制平面组件</li><li>Node节点组件</li><li>插件</li></ul><ol start="2"><li>部署工具</li></ol><ul><li>minikube</li><li>kind</li><li>kubeadm</li></ul><ol start="3"><li>配置文件<br>配置文件将容器中按照集群部署的方式根据应用维度打包形成一个配置文件,后续就可以读取这个配置文件进行启动。这里应用的概念在kubernetes中被称为pod,一个pod是由一个或多个容器组成的。</li></ol><h2 id="参考文档"><a class="header-anchor" href="#参考文档"></a>参考文档</h2><p><a href="https://kubernetes.io/zh">kubernetes中文官网</a><br><a href="https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/create-cluster/cluster-interactive/">kubernetes交互文档</a><br><a href="https://minikube.sigs.k8s.io/docs/handbook/">minikube官网</a><br><a href="https://kubernetes.io/zh/docs/tutorials/stateful-application/zookeeper/">部署运行ZooKeeper集群</a></p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReadWriteLock的源码分析</title>
      <link href="2021/11/02/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/16.ReadWriteLock%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/11/02/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/16.ReadWriteLock%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>ReadWriteLock的源码分析</h1><p>ReadWriteLock是JUC包下的定义的读写锁的接口,定义两个接口<B>readLock()</B>、<B>writeLock()</B>分别是返回读锁和返回一个写锁。<br>ReadWriteLock默认有两个实现分别是<B>ReadWriteLockView</B>、<B>ReentrantReadWriteLock</B>。</p><p>ReentrantReadWriteLock是默认的读写锁的实现<br>ReadWriteLockView是<B>StampedLock</B>的内部类，StampedLock是JDK 1.8中对ReentrantReadWriteLock的一个增强的实现<br>下面会先分析ReentrantReadWriteLock，在对StampedLock进行分析</p><h2 id="ReentrantReadWriteLock"><a class="header-anchor" href="#ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><blockquote><p>ReentrantReadWriteLock是实现ReadWriteLock接口,对外提供read()和wirte()方法。特点主要是支持公平锁选择、可重入、锁降级的分类</p></blockquote><h3 id="用例"><a class="header-anchor" href="#用例"></a>用例</h3><p>这个用例是对ReentrantReadWriteLock提供的用例CachedData的简化版本</p><ul><li>CachedData</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> CachedData <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> <span class="token keyword">data</span><span class="token operator">:</span> String    <span class="token keyword">private</span> <span class="token keyword">var</span> cacheValid<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> lock<span class="token operator">:</span> ReentrantReadWriteLock <span class="token operator">=</span> <span class="token function">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">processCacheData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取读锁</span>        lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheValid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取写锁之前先要释放读锁</span>            lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//获取写锁</span>            lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//再次检查标记,因为上一次检查标记是在获取写锁之前</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheValid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" set data"</span><span class="token punctuation">)</span>                    <span class="token keyword">data</span> <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    cacheValid <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//重新获取读锁来完成锁降级</span>                lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"打印data:"</span> <span class="token operator">+</span>  <span class="token keyword">data</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建线程池</span>    <span class="token keyword">val</span> poolExecutor <span class="token operator">=</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//创建任务</span>    <span class="token keyword">var</span> cache<span class="token operator">:</span>CachedData <span class="token operator">=</span> <span class="token function">CachedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> barrier<span class="token operator">:</span>CyclicBarrier <span class="token operator">=</span> <span class="token function">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">&#123;</span>        poolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">&#123;</span>            barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            cache<span class="token punctuation">.</span><span class="token function">processCacheData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果</li></ul><p><img src="https://i.loli.net/2021/11/12/wNerlsGfKLpEhzd.jpg" alt="执行结果"><br>可以看到两个线程对data的写锁进行竞争,但是只有一个线程成功执行set方法,另外的一个线程只能执行读锁的操作<br>从现象上来看一个<B>ReentrantReadWriteLock</B>对外提供了读锁和写锁两个功能,下面就开始对代码进行详细的分析</p><h3 id="构造函数"><a class="header-anchor" href="#构造函数"></a>构造函数</h3>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Creates a new &#123;@code ReentrantReadWriteLock&#125; with * default (nonfair) ordering properties. */</span><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Creates a new &#123;@code ReentrantReadWriteLock&#125; with * the given fairness policy. * * @param fair &#123;@code true&#125; if this lock should use a fair ordering policy */</span><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriteLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到无参的构造函数是非公平锁的策略,在构造方法中主要是创建了三个成员变量</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">&#123;</span>    <span class="token comment">//公平锁类型</span>    <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>    <span class="token comment">//内部读锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span> readerLock<span class="token punctuation">;</span>    <span class="token comment">//内部写锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> writerLock<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源码解析"><a class="header-anchor" href="#源码解析"></a>源码解析</h3><h4 id="构造方法"><a class="header-anchor" href="#构造方法"></a>构造方法</h4><ul><li>获取锁的方法<br>获取读锁/写锁就是直接返回内部的读锁/写锁变量</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> writerLock<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span>  <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> readerLock<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到锁的类型分别是ReadLock和WriteLock,继续分析ReadLock/WriteLock</p><ul><li><p>ReadLock与WriteLock对比</p></li><li><p>ReadLock</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReadLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5992448646407690164L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">ReadLock</span><span class="token punctuation">(</span><span class="token class-name">ReentrantReadWriteLock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync <span class="token operator">=</span> lock<span class="token punctuation">.</span>sync<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireSharedNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> sync<span class="token punctuation">.</span><span class="token function">getReadLockCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">"[Read locks = "</span> <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>WriteLock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WriteLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4992448646407690164L</span><span class="token punctuation">;</span>    <span class="token comment">//ReentrantReadWriteLock内部的AQS公平/非公平抽象类</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">WriteLock</span><span class="token punctuation">(</span><span class="token class-name">ReentrantReadWriteLock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync <span class="token operator">=</span> lock<span class="token punctuation">.</span>sync<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> o <span class="token operator">=</span> sync<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                    <span class="token string">"[Unlocked]"</span> <span class="token operator">:</span>                                    <span class="token string">"[Locked by thread "</span> <span class="token operator">+</span> o<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查询当前线程是否持有写锁</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当前写锁的锁定次数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">getWriteHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过对比可知<B>WriteLock</B>只是比<B>ReadLock</B>多两个方法</p><ul><li>isHeldByCurrentThread()<br>查询当前线程是否持有写锁</li><li>getHoldCount()<br>当前写锁的锁定次数</li></ul><p>同时可以看到不管是<B>WriteLock</B>、<B>ReadLock</B>都是使用<B>Sync</B>来实现的功能，下面详细的分析一下<B>Sync</B>类的实现</p><ul><li><B>Sync</B></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">ThreadLocalHoldCounter</span> readHolds<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>    <span class="token comment">//构造函数</span>    <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建ThreadLocalHoldCounter(记录线程持有的锁数量)</span>        readHolds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalHoldCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置状态，调用AQS的setState()</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ensures visibility of readHolds</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码可以看出<B>Sync</B>是继承自<B>AbstractQueuedSynchronizer</B>，在构造方法中创建<B>ThreadLocalHoldCounter</B>和调用AQS的<B>setState()</B>方法</p><p>有关<B>AbstractQueuedSynchronizer</B>的内容可以参考之前写的<br><a href="../../../../../2020/05/22/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/13.AbstractQueuedSynchronizer%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">AbstractQueuedSynchronizer的源码分析</a></p><ul><li><p>ThreadLocalHoldCounter<br>ThreadLocalHoldCounter的代码如下所示</p></li><li><p>ThreadLocalHoldCounter</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalHoldCounter</span>    <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HoldCounter</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HoldCounter</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HoldCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HoldCounter</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HoldCounter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始为0</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment">//使用id来标识Thread而不是引用,避免引用逃逸</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> tid <span class="token operator">=</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ThreadLocalHoldCounter继承于ThreadLocal然后在初始化时用initialValue()方法返回一个<B>HoldCounter</B>引用<br>HoldCounter是用来记录线程中加锁的统计与线程id相关联,这里关联线程引用是比较优秀的,通过<B>LockSupport.getThreadId</B>获取一个long类型的线程标识</p><ul><li>LockSupport.getThreadId</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//U是Unsafe类型的对象</span>    <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> TID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><B>Sync</B>除了通过构造函数初始化上述的ThreadLocalHoldCounter对象以外,还有一些静态成员变量来完成一些例如控制允许线程重复持有锁的次数等</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_SHIFT   <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_UNIT    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_COUNT      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCLUSIVE_MASK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//省略...</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">></span> MAX_COUNT<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Reentrant acquire</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是对同一个线程持有的锁超过阈值的演示</p><p><img src="https://i.loli.net/2021/11/13/uon9IW6fcLxPRv5.jpg" alt="超过锁阈值场景"></p><h4 id="readLock"><a class="header-anchor" href="#readLock"></a>readLock()</h4><ul><li>lock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接使用<B>AbstractQueuedSynchronizer</B>的<B>acquireShared()</B>获取一把共享锁,失败就阻塞</p><ul><li>AbstractQueuedSynchronizer.acquireShared</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//调用子类的tryAcquireShared()实现</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ReentrantReadWriteLock.tryAcquireShared()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ReservedStackAccess</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    * 例子:    * 1. 如果写锁被其他线程持有就返回失败    * 2. 因此该线程获取到写入资格,根据线程队列判断是否要进行阻塞,不需要进行阻塞时就通过CAS的方式来操作锁以及计数    * 3. 对cas失败的场景进行重试    */</span>    <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取同步状态</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果有独占线程并且独占线程不是当前线程时直接返回-1(失败)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//共享计数</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1. 通过readerShouldBlock()判断当前是否可以操作,readerShouldBlock()主要是对公平锁和非公平锁的一个判断</span>    <span class="token comment">//2. 判断当前是否操作了最大的加锁量</span>    <span class="token comment">//3. 通过CAS进行操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果是首次加锁,设置首次加锁线程和次数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>            firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是首次加锁线程进行继续加锁那么次数++</span>            firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//处理holdCounter对象</span>            <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>            rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//重复处理</span>    <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>tryAcquireShared</B>是会执行锁的计数、初始线程的绑定等工作，并且会对执行失败进行自旋重试</p><ul><li>unlock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<B>releaseShared</B>来完成释放锁的操作,AQS又是通过<B>tryReleaseShared</B>来完成的，下面可以看一下tryReleaseShared的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//尝试释放锁</span><span class="token annotation punctuation">@ReservedStackAccess</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果是首次加锁线程对首次的标记进行修改</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert firstReaderHoldCount > 0;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            firstReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//对HoldCounter进行修改</span>        <span class="token comment">//如果不是临时holdCounter,那么获取holdCounter后在进行处理</span>        <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//自旋</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>        <span class="token comment">//CAS的方式对锁进行释放</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="writeLock"><a class="header-anchor" href="#writeLock"></a>writeLock()</h4><ul><li>lock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接使用<B>AbstractQueuedSynchronizer</B>的<B>acquire()</B>获取一把独占锁,失败就阻塞</p><ul><li>unlock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<B>release</B>来完成释放锁的操作</p><p>通过上面的代码可以看到所有的操作都是通过<B>Sync</B>这个类委托给<B>AbstractQueuedSynchronizer</B>来进行的,主要是三个功能</p><ul><li>加锁(共享/独占)</li><li>解锁(共享/独占)</li><li>计数(共享/独占)<br>然后AQS作为入口也会通过调用<B>ReentrantReadWriteLock</B>的具体的加锁/解锁/计数的进行操作。<br>读锁不进行排队，写锁会进行排队阻塞<br><B>ReentrantReadWriteLock</B>中有趣的操作是把state的高16位作为读锁标识，低16位作为写锁标识，因此也是只能加锁2^16的原因</li></ul><h2 id="StampedLock"><a class="header-anchor" href="#StampedLock"></a>StampedLock</h2><p><B>StampedLock</B>是对ReentrantReadWriteLock的迭代，在对StampedLock中优化了写锁饥饿的问题</p><h3 id="用例-v2"><a class="header-anchor" href="#用例-v2"></a>用例</h3><ul><li>StampedLockDemo</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> StampedLockDemo <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> stampedLock <span class="token operator">=</span> <span class="token function">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> <span class="token keyword">data</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">fun</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">data</span> <span class="token operator">+=</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token number">1</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            stampedLock<span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用乐观锁</span>        <span class="token keyword">var</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> curData <span class="token operator">=</span> <span class="token keyword">data</span>        <span class="token comment">//2. 写法1 双重锁保证读取到的是最新数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stampedLock<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                curData <span class="token operator">=</span> <span class="token keyword">data</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                stampedLock<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3. 写法2 循环</span><span class="token comment">//        while(!stampedLock.validate(stamp)) &#123;</span><span class="token comment">//            stamp = stampedLock.tryOptimisticRead();</span><span class="token comment">//            curData = this.data;</span><span class="token comment">//        &#125;</span>        <span class="token keyword">return</span> curData    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>StampedLock</B>在加锁时会返回一个戳(stamp),可以把它理解为版本号/时间戳，在后续解锁时会用到.</p><ul><li><p>提供了乐观锁和悲观锁的实现</p><ul><li>tryOptimisticRead()</li><li>tryReadLock()</li></ul></li><li><p>锁降/升级</p><ul><li>tryConvertToWriteLock()</li><li>tryConvertToReadLock()</li></ul></li></ul><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>ReadWriteLock是读写锁的接口，默认有两个实现分别是<B>ReentrantReadWriteLock</B>、<B>StampedLock</B>,分别是针对读多写少的场景和需要使用乐观锁的场景。<br>底层都采用一个标志位来进行区分读锁/写锁标识,一个是Int(32位),一个是Long(64位)，并且都继承与<B>AbstractQueuedSynchronizer</B>来进行实现的。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/zxporz/p/11642176.html">StampedLock的理解和使用</a><br><a href="https://zxs.io/article/1667">StampedLock源码分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReadWriteLock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析Kubernetes之容器化的基础</title>
      <link href="2021/10/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/0.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A1%80/"/>
      <url>2021/10/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/0.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>深入剖析Kubernetes之容器化的基础</h1><h2 id="容器化的基础之进程管理"><a class="header-anchor" href="#容器化的基础之进程管理"></a>容器化的基础之进程管理</h2><p><B>容器化的基础</B>是依赖于Linux底层提供的两种能力分别是<B>cgroups</B>,<B>Namespace</B></p><h3 id="cgroups"><a class="header-anchor" href="#cgroups"></a>cgroups</h3><blockquote><p>cgroups 的全称是control groups,是Linux内核提供的一种可以限制单个进程或者多个进程所使用资源的机制<br>cgroups可以管理的资源有:</p></blockquote><ul><li><B>cpu子系统</B><br>主要限制进程的cpu使用率</li><li><B>cpuacct子系统</B><br>可以统计cgroups中的进程的cpu使用报告</li><li><B>cpuset 子系统</B><br>可以为cgroups中的进程分配单独的cpu节点或者内存节点</li><li><B>memory子系统</B><br>可以限制进程的 </B><br>可以限制进程的块设备 io</li><li><B>devices子系统</B><br>可以控制进程能够访问某些设备</li><li><B>net_cls子系统</B><br>可以标记cgroups中进程的网络数据包，然后可以使用tc模块(traffic control)对数据包进行控制</li><li><B>freezer子系统</B><br>可以挂起或者恢复cgroups中的进程</li><li><B>ns子系统</B><br>可以使不同cgroups下面的进程使用不同的namespace</li></ul><p><B>cgroups</B>是通过与内核的其他模块来完成<B>进程维度</B>对<B>资源</B>的管理</p><h3 id="Namespace"><a class="header-anchor" href="#Namespace"></a>Namespace</h3><p><B>namespace</B>是对内核资源进行分组管理的一个特性,用来修改进程间的可见性</p><p>namespace创建进程时会使用<B>CLONE_NEWPID</B>这个参数来创建一个新的进程空间</p><h3 id="虚拟机与Docker的区别"><a class="header-anchor" href="#虚拟机与Docker的区别"></a>虚拟机与Docker的区别</h3><p>虚拟机与Docker的区别在于虚拟机会采用硬件虚拟化功能,模拟出操作系统底层的设备;docker只是在宿主机上做了进程隔离和资源隔离</p><h2 id="容器化的基础之隔离和限制"><a class="header-anchor" href="#容器化的基础之隔离和限制"></a>容器化的基础之隔离和限制</h2><p><img src="https://i.loli.net/2021/10/28/HNTkSg5vwd7jymf.jpg" alt="容器化与虚拟机之间的对比"></p><p>通过<B>namespace</B>来完成进程之间的隔离,通过<B>cgroups</B>来完成对资源的限制</p><p><B>cgroups</B>是通过配置在<B>/sys/fs/cgroup</B>文件夹下会有</p><ul><li><p>资源分组<br><img src="https://i.loli.net/2021/10/28/gUHWXSlaGd7Lpn8.jpg" alt="cgroup资源分组"><br>这些限制项来进行处理</p></li><li><p>控制组<br><img src="https://i.loli.net/2021/10/28/PFv8caUqsLiYBpo.jpg" alt="cgroup详细控制"></p></li></ul><p>通过详细信息可以看到这个目录下有不同的配置文件<B>cgroup.procs</B>,内容如下展示</p><p><img src="https://z3.ax1x.com/2021/10/29/5jdCIx.jpg" alt="cgroup.procs内容"><br>可以看到这里记录的就是pid列表,<cgroup>就是通过管理为每个线程分配资源的执行时间来控制不同进程的资源使用情况</p><p>docker就是在创建容器的时候为每一个容器创建一个控制组,在将用户指定的docker容器初始化资源配置写入控制组中就可以了<br><B>cgroups</B>采用的资源限制方式主要是通过控制时间的形式来实现的,因此就会存在容器的进程实际上可以看到整个宿主机的一些状态.这是相较与虚拟机方式的不足</p><blockquote><p><B>容器的本质就是一个特殊的进程</B></p></blockquote><h2 id="容器中镜像的概念"><a class="header-anchor" href="#容器中镜像的概念"></a>容器中镜像的概念</h2><blockquote><p>镜像指的是一个由容器识别的只读模板.通常这个模板是基于另外的一个模板并进行一些自定义改动的</p></blockquote><p>以上是docker官网中对镜像概念的描述,镜像在物理上指的是容器进程实际可用的文件<br>通过<B>Namespace</B>和<B>cgroups</B>实现了对进程和操作时间的隔离,但是容器之间没有对文件的隔离,容器进程的可用文件与其他用户进程的可用文件相同.<br>因此需要对容器的可用文件进行限制,在docker上是优先使用<B>pivot_root</B>,其次使用<B>chroot</B></p><h3 id="pivot-root与chroot的区别"><a class="header-anchor" href="#pivot-root与chroot的区别"></a>pivot_root与chroot的区别</h3><ul><li><p>pivot_root改变当前mount namespace的rootfs(&quot;/&quot;目录)</p></li><li><p>chroot改变的是当前进程的rootfs(&quot;/&quot;目录)</p></li></ul><p>pivot_root的执行步骤分为三步:</p><ol><li>创建临时目录并将当前所有的root mount移动到临时目录</li><li>创建新目录(“/”)</li><li>清理新目录</li></ol><h3 id="rootfs"><a class="header-anchor" href="#rootfs"></a>rootfs</h3><p><B>rootfs</B>指的是就是镜像中的文件,也就是登录到具体的镜像中看到的文件.<B>rootfs</B>在结构上可以分为三层<B>可读写层</B>、<br><B>init层</B>、<B>只读层</B></p><p>从上到下分别是应用层到系统层的划分,在详细的对这三层进行分析之前需要了解一下为什么镜像文件中分层的文件在使用的时候可以想在同一个文件夹中一样？<br>这是采用了一种被称为联合文件系统(union file System)概念,docker中默认是使用Overlay2的实现，关于联合文件系统的文章看可以参考<br><a href="https://lwn.net/Articles/324291/">https://lwn.net/Articles/324291/</a></p><ul><li><p>可读写层<br>可读写层是rootfs中最上面的一层，是承载容器中文件读写的操作一层,在这一层中的挂载方式是read + write</p></li><li><p>init层<br>init层指的是Docker项目用来存放对底层操作系统的改动信息例如’etc/hosts’、‘etc/resolv.conf’等，因为容器在启动时可以手动指定。init层在挂载时是采用’ro’ + 'wh’的方式，'ro’指的是read onley,'wh’指的是whiteout,即只读 + ‘whiteout’,whiteout指的是对文件的操作会在通过一定的手段进行隐藏，类似与java中的临时变量的概念，只在当前容器中有效，不会真正的修改底层的文件</p></li><li><p>只读层<br>只读层指的是镜像中最底层的系统镜像层，它们的挂载方式也是’ro’ + ‘wh’</p></li></ul><h3 id="总结"><a class="header-anchor" href="#总结"></a>总结</h3><p>docker中的镜像通过这种分层构建的方式大大的减少了传统镜像中操作系统的大小，只包含了可读写层中应用的部分。底层支持这种构建方式主要是依赖<B>chroot</B>(切换根目录的能力)和<B>union file System</B>(联合文件系统)</p><h2 id="总结-v2"><a class="header-anchor" href="#总结-v2"></a>总结</h2><p>docker容器化的基础是三个部分</p><ul><li>Namespace提供的进程隔离能力</li><li>Cgroup提供的资源限制能力</li><li>rootfs的文件分层结构设计</li></ul><p><B>clone(true)/cgroup file/union file System</B></p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://tech.meituan.com/2015/03/31/cgroups.html">Linux资源管理之cgroups简介</a><br><a href="https://www.nginx.com/blog/what-are-namespaces-cgroups-how-do-they-work/">什么是命名空间和cgroup,以及它们是如何工作的？</a></p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq索引实现原理之IndexService</title>
      <link href="2021/10/13/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/15.rocketmq%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BIndexService/"/>
      <url>2021/10/13/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/15.rocketmq%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BIndexService/</url>
      
        <content type="html"><![CDATA[<h1>rocketmq索引实现原理之IndexService</h1><p>在之前的文章中分析了消息是如果通过Commitlog的逻辑设计到MappedFile的与文件系统进行交付的过程，这篇文章来分析消息体是如何实现快速查找的以及底层实现<br>RocketMQ的索引相关的工作都是由Store包下的<B>IndexService</B>实现的,<B>IndexService</B>操作的对象是<B>IndexFile</B>,下面主要来分析IndexFile的<B>创建</B>、<B>加载</B>、<B>插入</B>、<B>内容</B>过程。</p><h2 id="IndexFile文件的创建过程"><a class="header-anchor" href="#IndexFile文件的创建过程"></a>IndexFile文件的创建过程</h2><p>创建Index索引文件的过程的触发点是在<B>load()</B>方法中进行触发的,主要是通过<B>IndexService.retryGetAndCreateIndexFile()</B>方法执行的</p><ul><li>IndexService.retryGetAndCreateIndexFile</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">IndexFile</span> <span class="token function">retryGetAndCreateIndexFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IndexFile</span> indexFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//1. 重复尝试创建索引文件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">null</span> <span class="token operator">==</span> indexFile <span class="token operator">&amp;&amp;</span> times <span class="token operator">&lt;</span> MAX_TRY_IDX_CREATE<span class="token punctuation">;</span> times<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//2.获取或创建index文件</span>        indexFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndCreateLastIndexFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> indexFile<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//线程休眠1s,重新尝试创建indexFile文件</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Tried to create index file fail. times: %s ,start sleep 1s"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Interrupted"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> indexFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getAccessRights</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeIndexFileError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Mark index file cannot build flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> indexFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>retryGetAndCreateIndexFile()</B>方法主要是对文件的创建过程有一个重试的机制来尽量保证<B>index文件</B>的成功创建,具体的创建过程就是通过<br><B>getAndCreateLastIndexFile()</B>方法来进行创建</p><ul><li>getAndCreateLastIndexFile()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取或创建index文件 */</span><span class="token keyword">private</span> <span class="token class-name">IndexFile</span> <span class="token function">getAndCreateLastIndexFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化成员变量</span>    <span class="token class-name">IndexFile</span> indexFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">IndexFile</span> prevIndexFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lastUpdateEndPhyOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lastUpdateIndexTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//使用代码块?</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//执行读锁</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果indexFileList不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取最后一个indexFile</span>            <span class="token class-name">IndexFile</span> tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断当前indexFile文件是否写入满额</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">.</span><span class="token function">isWriteFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果写入满额的法直接使用indexFile</span>                indexFile <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果写入满额就会查询这个文件的最后一次写入的offset</span>                lastUpdateEndPhyOffset <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">getEndPhyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//查询最后一次更新的时间戳</span>                lastUpdateIndexTimestamp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">getEndTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//标记当前文件为上一个使用的索引文件</span>                prevIndexFile <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//释放锁操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//indexFile文件没有获取成功时</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>indexFile <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//计算index fileName 格式为yyyyMMddHHmmssSSS</span>            <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeIndexPath <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">timeMillisToHumanString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//新建indexFile文件</span>            indexFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashSlotNum<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexNum<span class="token punctuation">,</span> lastUpdateEndPhyOffset<span class="token punctuation">,</span> lastUpdateIndexTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//占用写锁</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getLastIndexFile exception "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//释放写锁</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>indexFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//对上一个index文件进行刷盘操作</span>            <span class="token keyword">final</span> <span class="token class-name">IndexFile</span> flushThisFile <span class="token operator">=</span> prevIndexFile<span class="token punctuation">;</span>            <span class="token class-name">Thread</span> flushThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span>flushThisFile<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"FlushIndexFileThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flushThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flushThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> indexFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>getAndCreateLastIndexFile()</B>方法主要是分为三个步骤</p><ul><li>查询可以使用的indexFile文件</li><li>如果没有index文件就新建一个indexFile文件</li><li>尝试将已经满额的indexFile文件刷盘</li></ul><h2 id="IndexFile文件的加载过程"><a class="header-anchor" href="#IndexFile文件的加载过程"></a>IndexFile文件的加载过程</h2><p><B>IndexService</B>的加载过程是由<B>load()</B>方法实现的,这个方法的被调用链是由<br><B>BrokerController</B> -&gt; <B>DefaultMessageStore</B> -&gt; <B>IndexService</B></p><p><img src="https://i.loli.net/2021/10/17/KA9awWtHXcfGjRL.jpg" alt="IndexService被调用链"><br><B>load()</B>构造方法主要是对原有的index文件分析然后生成IndexFile对象的过程</p><ul><li>load()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> lastExitOK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.查找指定文件目录下的文件列表</span>    <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storeIndexPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//2.按照文件名称进行升序</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//3.根据index文件初始化indexFile对象</span>                <span class="token class-name">IndexFile</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashSlotNum<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexNum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//3.初始化indexFile对象的头文件信息</span>                f<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//4.判断上次是否正常退出，未正常退出并且文件记录在日志保存点之后的进行舍弃</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastExitOK <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span><span class="token function">getEndTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIndexMsgTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//4.1 舍弃未到保存点的数据</span>                    f<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"load index file OK, "</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//5.将文件装载到indexFileList中</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e <span class="token operator">|</span> <span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//省略...</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码就是对之前的indexFile文件进行加载，并且对在日志保存点之后的数据进行抛弃。</p><ul><li>IndexFile()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">IndexFile</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> hashSlotNum<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> indexNum<span class="token punctuation">,</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> endPhyOffset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> endTimestamp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//计算index文件大小 = 头信息长度 + 哈希slot数量*哈希slot长度 + index数量*index长度</span>    <span class="token keyword">int</span> fileTotalSize <span class="token operator">=</span> <span class="token class-name">IndexHeader</span><span class="token punctuation">.</span>INDEX_HEADER_SIZE <span class="token operator">+</span> <span class="token punctuation">(</span>hashSlotNum <span class="token operator">*</span> hashSlotSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>indexNum <span class="token operator">*</span> indexSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建mappedFile对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> fileTotalSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对属性进行赋值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFile<span class="token punctuation">.</span><span class="token function">getFileChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFile<span class="token punctuation">.</span><span class="token function">getMappedByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hashSlotNum <span class="token operator">=</span> hashSlotNum<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>indexNum <span class="token operator">=</span> indexNum<span class="token punctuation">;</span>    <span class="token comment">//处理文件头信息</span>    <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexHeader</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化'空间位置'和'时间位置'</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>endPhyOffset <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">setBeginPhyOffset</span><span class="token punctuation">(</span>endPhyOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">setEndPhyOffset</span><span class="token punctuation">(</span>endPhyOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>endTimestamp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">setBeginTimestamp</span><span class="token punctuation">(</span>endTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">setEndTimestamp</span><span class="token punctuation">(</span>endTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>IndexFile()</B>方法会根据文件名称创建一个index文件对象，这个方法中比较有意思的是会根据配置文件<B>解析</B>、<B>创建</B>头文件信息对象<B>IndexHeader</B>而且还是是通过<B>MappedFile</B>对象进行处理的</p><h2 id="IndexFile文件的插入过程"><a class="header-anchor" href="#IndexFile文件的插入过程"></a>IndexFile文件的插入过程</h2><p>IndexService对外提供插入索引的方法是<B>buildIndex</B>,buildIndex()是通过<B>DefaultMessageStore</B>的<B>ReputMessageService</B>来进行触发的</p><ul><li>ReputMessageService</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReputMessageService</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceThread</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//真正启动索引任务入口</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.判断索引的offset是否小于commitLog中最小的offset</span>        <span class="token comment">//2.只处理需要进行索引操作的消息</span>        <span class="token comment">//3.根据消息组装消息后置处理器</span>        <span class="token comment">//4/5。处理主节点和从节点的差异</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doReput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<B>ReputMessageService</B>可以看到是使用一个循环每隔1s去查询一次commitLog文件中需要进行后置处理的消息来进行处理</p><h2 id="IndexFile文件的查询过程"><a class="header-anchor" href="#IndexFile文件的查询过程"></a>IndexFile文件的查询过程</h2><p>前面介绍了对indexFile文件的创建、加载、写入的过程，接下介绍一下indexFile文件的查询过程</p><ul><li>调用流程</li></ul><pre class="line-numbers language-none"><code class="language-none">NettyRemotingServer -&gt; NettyRemotingAbstract -&gt; QueryMessageProcessor -&gt; DefaultMessageStore -&gt; IndexService -&gt; IndexFile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上是调用索引文件的查询过程，从Netty的服务端到IndexFile文件的整体流程，具体的执行方法是IndexFile文件中的selectPhyOffset()</p><ul><li>selectPhyOffset</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//计算出indexFile文件中数据的具体物理位置</span><span class="token keyword">int</span> keyHash <span class="token operator">=</span> <span class="token function">indexKeyHashMethod</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> slotPos <span class="token operator">=</span> keyHash <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashSlotNum<span class="token punctuation">;</span><span class="token keyword">int</span> absSlotPos <span class="token operator">=</span> <span class="token class-name">IndexHeader</span><span class="token punctuation">.</span>INDEX_HEADER_SIZE <span class="token operator">+</span> slotPos <span class="token operator">*</span> hashSlotSize<span class="token punctuation">;</span><span class="token comment">//根据具体的位置进行取数操作</span><span class="token keyword">int</span> keyHashRead <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>absIndexPos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> phyOffsetRead <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> timeDiff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> prevIndexRead <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IndexFile文件的内容"><a class="header-anchor" href="#IndexFile文件的内容"></a>IndexFile文件的内容</h2><p>索引文件是放置在<B>${rootpath}/index</B>目录下的，文件名称按照yyyyMMddhhmmsssss的形式进行生成，默认大小为400MB,由三个部分组成</p><ul><li>header</li><li>slot table</li><li>index linked list</li></ul><p>结构如下所示:</p><pre class="line-numbers language-none"><code class="language-none">|&lt;-- 40 byte --&gt;|&lt;---   500w   ---&gt;|&lt;---   2000w   ---&gt;|+---------------+------------------+-------------------+|    header     |   slot table     | index linked list |+---------------+------------------+-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详细的数据结构如下所示</p><h3 id="B-header结构-B"><a class="header-anchor" href="#B-header结构-B"></a><B>header结构</B></h3><pre class="line-numbers language-none"><code class="language-none">+---------------------+--0| beginTimestampIndex |             ----&gt; 第一条消息的保存时间+---------------------+--8| endTimestampIndex   |             ----&gt; 最后一条消息的保存时间+---------------------+--16| beginPhyoffsetIndex |             ----&gt; 第一条消息的在commitlog中的偏移量+---------------------+--24| endPhyoffsetIndex   |             ----&gt; 最后一条消息的在commitlog中的偏移量+---------------------+--32| hashSlotcountIndex  |             ----&gt; 哈希槽数量，保存添加到本槽列表的最新索引位置+---------------------+--36| indexCountIndex     |             ----&gt; 索引数量，具体索引数据+---------------------+--40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键代码可以参考<B>IndexHeader</B>的静态成员变量,以下是展示用例</p><ul><li>IndexHeader</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INDEX_HEADER_SIZE <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> beginTimestampIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> endTimestampIndex <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> beginPhyoffsetIndex <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> endPhyoffsetIndex <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> hashSlotcountIndex <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> indexCountIndex <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span>    <span class="token comment">//插入indexFile文件的开始时间</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeginTimestamp</span><span class="token punctuation">(</span><span class="token keyword">long</span> beginTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//本地缓存</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>beginTimestamp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>beginTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//指定位置插入时间戳,beginTimestampIndex默认为0</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>byteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>beginTimestampIndex<span class="token punctuation">,</span> beginTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里初始化的静态变量会在插入具体的头文件值时进行使用,可以参考<B>setBeginTimestamp</B>方法;<br>通过vscode的hexdump插件可以看到indexFile文件的内容如下</p><p><img src="https://i.loli.net/2021/11/04/jXilUC1O9em3v4P.jpg" alt="indexFile原始文件"></p><p>可以看到前8个字节为<B>00 00 01 7C E9 D4 AA A5</B>,通过计算器转换为十进制为<B>1636010601125</B></p><p><img src="https://i.loli.net/2021/11/04/UHYsJqGEyrotCxP.jpg" alt="时间戳"></p><p>时间戳在进行一次转换可以看到为<br><img src="https://i.loli.net/2021/11/04/UQqBHVZ4vliWNIs.jpg" alt="开始时间"></p><p>剩下的endTimestampIndex、beginPhyoffsetIndex、beginPhyoffsetIndex、endPhyoffsetIndex、hashSlotcountIndex、indexCountIndex信息的处理方式与这个类似，不进行重复了</p><h3 id="B-slot-table结构-B"><a class="header-anchor" href="#B-slot-table结构-B"></a><B>slot table结构</B></h3><p><B>slot table结构</B>是对</p><h3 id="B-index-linked-list结构-B"><a class="header-anchor" href="#B-index-linked-list结构-B"></a><B>index linked list结构</B></h3><p><B>index linked list</B>的结构是在indexFile上的hash索引之后用存放实际的offset的值</p><p>结构如下所示</p><pre class="line-numbers language-none"><code class="language-none">+---------------------+--0| key hash            |             ----&gt; 会根据Topic和key的值拼接在一起计算的一个hash值+---------------------+--4| commitLogOffset     |             ----&gt; commitLog Offset是commitLog文件上的位置+---------------------+--12| timeDiff            |             ----&gt; timeDiff是写入时的相对时间戳+---------------------+--16| slotValue           |             ----&gt; slotValue表示的是记录因为hash冲突造成的下一个节点的数据的相对位置+---------------------+--20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键的代码如下所示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 写入keyHash 长度为4</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>absIndexPos<span class="token punctuation">,</span> keyHash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 写入commitLogOffset 长度为 8</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> commitLogOffset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 写入时的相对时间戳 长度为 4</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> timeDiff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4. 写入slotValue 长度为 4,记录因为hash冲突造成的下一个节点的数据的相对位置</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> slotValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.更新slot上的记录的hash槽位使用数量</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>absSlotPos<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">getIndexCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>IndexFile文件最精华的设计在于对索引数据的分类，并且按照分类将数据依次写入IndexFile文件。IndexFile文件分为header、Hash solt、offset三种类型数据</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="http://zjykzk.github.io/post/cs/rocketmq/store/">http://zjykzk.github.io/post/cs/rocketmq/store/</a></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G1GC的算法与实现</title>
      <link href="2021/09/26/12.JVM/6.G1GC%E7%9A%84%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/09/26/12.JVM/6.G1GC%E7%9A%84%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1>G1GC的算法与实现-算法篇</h1><p>根据《深入Java虚拟机-JVM G1GC的算法与实现》-算法篇整理而来,该篇主要由以下章节组成</p><ul><li>第一章 G1GC是什么?</li><li>第二章 并发标记</li><li>第三章 转移</li><li>第四章 软实时性</li><li>第五章 分代G1GC模式</li><li>第六章 算法篇总结</li></ul><h2 id="G1GC是什么"><a class="header-anchor" href="#G1GC是什么"></a>G1GC是什么?</h2><blockquote><p>Garbage-First (G1) 垃圾收集器是一种服务端的垃圾收集器，针对具有大内存和多处理器的机器。它尝试尽量满足用户设定的垃圾收集 (GC) 暂停时间，同时实现高吞吐量。GC操作（例如全局标记）与应用程序线程同时执行。<br>这是JDK官方对于G1的定义,这里作者提出一个结论G1的特点是非常非常的关注实时性,并且实时性分为<B>软实时性</B>/<B>硬实时性</B><br>硬实时性指的是硬性强制要求的，如果达不到指定时间就会返回失败的处理;<br>软实时性指的是柔性的，对于设定的指定时间只是一个期望，不会做强制的要求限制;<br>额外一点是<B>G1是支持4G以上的堆内存进行垃圾收集</B></p></blockquote><h3 id="G1出现的背景"><a class="header-anchor" href="#G1出现的背景"></a>G1出现的背景</h3><p>在G1出现之前的GC处理器主要是通过增量GC或者是并发GC来提高STW的暂停时间，但是这样缩短时间会造成吞吐量下降。<br>G1的出现是为了解决在期望的暂停时间周围尽量的完成更大的GC吞吐量。目前GC的关注点都是在尽可能的减少暂停时间，而不是增大吞吐量上，这可能是因为堆中的对象大多属于是朝生夕死的类型</p><h3 id="G1的目前的现状"><a class="header-anchor" href="#G1的目前的现状"></a>G1的目前的现状</h3><p>G1在JDK9中就作为默认的垃圾回收器，现阶段G1在最后一次增强是在JDK14中增加对NUMA(非统一内存访问)的增强。在JDK14中新增了ZGC收集器，并且预计将ZGC在未来的JDK版本中作为默认GC</p><h2 id="G1GC的执行过程"><a class="header-anchor" href="#G1GC的执行过程"></a>G1GC的执行过程</h2><p>所有GC在执行过程可以都划分为</B>标记</B>和<B>整理</B>两个大的步骤，不同的是具体的执行过程会有差别</p><h3 id="G1GC的标记过程"><a class="header-anchor" href="#G1GC的标记过程"></a>G1GC的标记过程</h3><p>G1GC的标记过程是<B>并发标记</B>,但是目前的GC还做不到全局并发，只能在某些标记步骤中做到并发。G1的标记过程划分为五个步骤分别是</p><ul><li>初始标记阶段</li><li>并发标记阶段</li><li>最终标记阶段</li><li>存活对象计数阶段</li><li>收尾工作</li></ul><hr><ul><li><p>初始化标记阶段<br><b>初始化标记阶段</b>只对<b>根引用对象</b>进行标记这个过程也称为根扫描，由于mutator(用户线程)会修改根对象引用，因此在者一步是需要将mutator暂停下来，这里之所以没有采用读/写屏障的技术来实现并发个人猜测是因为mutator会频繁修改根对象，因此在此处保证并发后的性能损耗远远大于顺序执行所带来的性能损耗。<br>在初始化标记阶段只会对根引用对象进行标记到特定的内存中称为<b>标记位图</b></p></li><li><p>并发标记阶段<br><b>并发标记阶段</b>的特点是GC线程与mutator线程是并发执行的，在mutator线程修改根对象引用时会采用<b>写屏障</b>来记录对象之间引用关系的变化。<br>SATB是记录对象之间逻辑引用关系的结构，全称为Snapshot At The Beginning(初始快照),在并发标记过程中产生的新对象会作为“已完成扫描和标记”的对象，在mutator线程发生对标记对象的修改时，SATB专用写屏障也会将该对象记录到SATB队列中。SATB队列在实现上采用与线程绑定的形式来进行，当队列装满时，将会添加到全局SATB队列中。</p></li></ul><p>log</p><blockquote><p>并发指的是更多的指的是软件领域的无序执行，不同任务之间没有顺序关系的一种软件启动方式</br>并行更多的指的是在硬件领域不同指令在同一时刻执行的</p></blockquote><h2 id="参考文章"><a class="header-anchor" href="#参考文章"></a>参考文章</h2><p><a href="https://tech.meituan.com/2016/09/23/g1.html">https://tech.meituan.com/2016/09/23/g1.html</a><br><a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html">https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq的存储实现原理之MappedFile</title>
      <link href="2021/09/09/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/14.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BMappedFile/"/>
      <url>2021/09/09/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/14.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BMappedFile/</url>
      
        <content type="html"><![CDATA[<h1>rocketmq的存储实现原理之MappedFile</h1><p><B>MappedFile</B>是RoketMq处理底层文件的类,在上面一篇文章中已经了解了如何通过<B>CommitLog</B>类来处理请求以及如何通过<B>MappedFile</B>来实现底层存储的<br><B>MappedFile</B>的整体逻辑是</p><h2 id="MappedFile"><a class="header-anchor" href="#MappedFile"></a>MappedFile</h2>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq的存储实现原理之commitlog</title>
      <link href="2021/09/09/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/13.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8Bcommitlog/"/>
      <url>2021/09/09/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/13.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8Bcommitlog/</url>
      
        <content type="html"><![CDATA[<h1>rocketmq的存储实现原理之commitlog</h1><p>在之前的《rocketmq的存储原理》文章中分析了rocketmq的存储过程主要是通过两个类来实现的分别是commitlog和MappedFile，这篇文章重点分析commitlog这个类的实现</p><h2 id="初始化过程"><a class="header-anchor" href="#初始化过程"></a>初始化过程</h2><p>comitlog对象是通过三个方法来负责初始化处理过程分别是构造方法<b>commitLog()</b>/加载方法<b>load()</b>/启动方法<b>start()</b>,这里将commitlog的对象初始化过程和load过程以及启动-start过程都划分为初始化过程中</p><h3 id="commitLog-构造方法"><a class="header-anchor" href="#commitLog-构造方法"></a>commitLog()构造方法</h3><p>CommitLog()构造方法的调用链如图所示<br><img src="https://i.loli.net/2021/09/10/s2fcpiQdSHC8Tyv.png" alt="CommitLog()"><br>可以看到在Broker启动过程中会通过<B>DefaultMessageStore</B>来调用<B>Commitlog</B>构造方法,commitlog的构造方法主要是做初始化日志环境的功能，下面详细的看一下<B>commitLog()</B>方法的实现</p><ul><li>CommitLog构造方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CommitLog</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DefaultMessageStore</span> defaultMessageStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 初始化文件信息在内存中的映射的queue</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedFileQueue</span><span class="token punctuation">(</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStorePathCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMappedFileSizeCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultMessageStore<span class="token punctuation">.</span><span class="token function">getAllocateMappedFileService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 设置默认的消息存储</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore <span class="token operator">=</span> defaultMessageStore<span class="token punctuation">;</span>    <span class="token comment">//3. 设置刷盘策略</span>    <span class="token comment">//TODO 这里的刷盘策略'FlushCommitLogService'是使用final关键字进行修饰的，在初始化完成以后就不允许更新刷盘策略的。暂时还不知道为什么这样做</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FlushDiskType</span><span class="token punctuation">.</span>SYNC_FLUSH <span class="token operator">==</span> defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushDiskType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置同步刷盘策略</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupCommitService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置异步刷盘策略</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlushRealTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4. 设置消息提交策略为实时提交,CommitRealTimeService继承FlushCommitLogService并作为默认的提交策略，具体实现类还有GroupCommitService/FlushRealTimeService</span>    <span class="token comment">//TODO 这里的抽象不是很好，将提交策略通过内部类的方式来隐藏实现</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>commitLogService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommitRealTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5. 设置默认响应策略</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>appendMessageCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAppendMessageCallback</span><span class="token punctuation">(</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxMessageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6. 初始化提交消息线程</span>    putMessageThreadLocal <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">PutMessageThreadLocal</span><span class="token punctuation">(</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxMessageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7. 初始化提交消息的锁，TODO  会根据配置初始化出可重入锁或自旋锁??</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>putMessageLock <span class="token operator">=</span> defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUseReentrantLockWhenPutMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">PutMessageReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PutMessageSpinLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤1~7是初始化日志环境的工作，依次是</p><ul><li>初始化messagequeue\messafestore</li><li>设置刷盘策略、提交策略、响应策略</li><li>初始化提交线程池</li></ul><hr><h3 id="load-方法"><a class="header-anchor" href="#load-方法"></a>load()方法</h3><p>在构造方法完成后<B>BrokerController</B>会继续调用<B>DefaultMessageStore</B>load()方法,来对<B>CommitLog</B>对象进行加载</p><ul><li>BrokerController.load</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//initialize()方法执行message加载动作</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//省略...</span>    result <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//省略...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DefaultMessageStore.load()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> loadResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 通过是否存在临时文件判断是否上一次正常退出</span>        <span class="token keyword">boolean</span> lastExitOK <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTempFileExist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"last shutdown &#123;&#125;"</span><span class="token punctuation">,</span> lastExitOK <span class="token operator">?</span> <span class="token string">"normally"</span> <span class="token operator">:</span> <span class="token string">"abnormally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. TODO 这里的判断是多余的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> scheduleMessageService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//执行调度</span>            loadResult <span class="token operator">=</span> loadResult <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduleMessageService<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3. 加载CommitLog</span>        loadResult <span class="token operator">=</span> loadResult <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.加载loadConsumeQueue</span>        loadResult <span class="token operator">=</span> loadResult <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadConsumeQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.创建成功后续操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//初始化文件存储的检查对象</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>storeCheckpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StoreCheckpoint</span><span class="token punctuation">(</span><span class="token class-name">StorePathConfigHelper</span><span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getStorePathRootDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//加载index的管理服务</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>indexService<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>lastExitOK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//根据上次服务是否异常中断进行状态恢复</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>lastExitOK<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"load over, and the max phy offset = &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxPhyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"load exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        loadResult <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载失败时,关闭 TODO 这里就只有文件映射服务(MappedFileService)需要关闭吗?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>allocateMappedFileService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> loadResult<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在DefaultMessageStore.load的第3步会将commitLog进行加载,其他方法是对异常恢复、延迟消息处理队列服务、ConsumerQueue进行加载。<br>下面介绍一下commitLog.loan的加载过程</p><ul><li>CommitLog.load()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//加载mappedFileQueue</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"load commit log "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token string">"OK"</span> <span class="token operator">:</span> <span class="token string">"Failed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到CommitLog.load()方法就是加载<B>MappedFileQueue</B></p><ul><li>MappedFileQueue.load()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 加载commit log文件 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//默认地址为System.getProperty("user.home") + File.separator + "store" + File.separator + "commitlog"; @see org.apache.rocketmq.store.config.MessageStoreConfig.storePathCommitLog</span>    <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件不存在时,直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token operator">||</span> files<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对文件按照升序进行排序 TODO 这里也是多余的文件的命名规则是有序</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//commitLog的文件大小默认为1G TODO 这个大小是介于性能和容量之间的一个选择</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>file <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" length not matched message store config value, please check it manually"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//设置MappedFile对象信息</span>            <span class="token class-name">MappedFile</span> mappedFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            mappedFile<span class="token punctuation">.</span><span class="token function">setWrotePosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            mappedFile<span class="token punctuation">.</span><span class="token function">setFlushedPosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            mappedFile<span class="token punctuation">.</span><span class="token function">setCommittedPosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将MappedFile对象添加到mappedFiles，注意是通过CopyOnWriteArrayList容器进行保存</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mappedFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"CommitLog  call MappedFileQueue load &#123;&#125; :OK"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"CommitLog  call MappedFileQueue load &#123;&#125; :ERROR"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mappedFiles.load()方法主要通过指定的文件路径加载文件，并将文件对象通过CopyOnWriteArrayList容器进行存放<br>CopyOnWriteArrayList是读无锁-写有锁的容器，存储commitLog信息</p><h3 id="start-方法"><a class="header-anchor" href="#start-方法"></a>start()方法</h3><ul><li>commitLog.Start()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.启动刷盘线程</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.判断是否启动异步提交</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransientStorePoolEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>commitLogService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>commitLog.start()方法主要是启动刷盘线程和判断是否启动异步提交</p><h2 id="调用过程"><a class="header-anchor" href="#调用过程"></a>调用过程</h2><p>CommitLog底层是通过<B>asyncPutMessage()</B>方法来实现异步向文件系统提交的，下面我们先根据asyncPutMessage()来分析从上至下的调用链过程</p><h3 id="调用链"><a class="header-anchor" href="#调用链"></a>调用链</h3><p>通过Arthas分析<B>asyncPutMessage()</B>的调用过程如图所示</p><p><img src="https://i.loli.net/2021/09/13/rbDHVqyCkc8XJoj.jpg" alt="/调用链路.jpg"></p><ul><li>arthas cmd</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stack org.apache.rocketmq.store.CommitLog asyncPutMessage  -n <span class="token number">5</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从图中可以看处理整个调用过程从网络I/O到文件I/O是非常短的</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token operator">@</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>store<span class="token punctuation">.</span>CommitLog<span class="token punctuation">.</span>asyncPutMessage<span class="token operator">(</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>store<span class="token punctuation">.</span>DefaultMessageStore<span class="token punctuation">.</span>asyncPutMessage<span class="token operator">(</span>DefaultMessageStore<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">435</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>broker<span class="token punctuation">.</span>processor<span class="token punctuation">.</span>SendMessageProcessor<span class="token punctuation">.</span>asyncSendMessage<span class="token operator">(</span>SendMessageProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">314</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>broker<span class="token punctuation">.</span>processor<span class="token punctuation">.</span>SendMessageProcessor<span class="token punctuation">.</span>asyncProcessRequest<span class="token operator">(</span>SendMessageProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">101</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>broker<span class="token punctuation">.</span>processor<span class="token punctuation">.</span>SendMessageProcessor<span class="token punctuation">.</span>asyncProcessRequest<span class="token operator">(</span>SendMessageProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">82</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>NettyRemotingAbstract<span class="token operator">$</span>1<span class="token punctuation">.</span>run<span class="token operator">(</span>NettyRemotingAbstract<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">225</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>RequestTask<span class="token punctuation">.</span>run<span class="token operator">(</span>RequestTask<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">80</span><span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NettyRemotingAbstract -&gt; SendMessageProcessor -&gt; CommitLog 三个类就完成了处理</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos使用指南</title>
      <link href="2021/09/05/17.Nacos/0.Nacos%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>2021/09/05/17.Nacos/0.Nacos%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1>Nacos使用指南</h1><p>Nacos的定位是注册中心，支持目前主流的分布式架构K8S/RPC/RESTful。主要功能有</p><ul><li>服务发现和服务健康监测</li><li>动态配置服务</li><li>动态 DNS 服务</li><li>服务及其元数据管理</li></ul><h2 id="构建Nacos"><a class="header-anchor" href="#构建Nacos"></a>构建Nacos</h2><h3 id="Nacos-docker"><a class="header-anchor" href="#Nacos-docker"></a>Nacos docker</h3><ul><li>clone项目</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/nacos-group/nacos-docker.git<span class="token builtin class-name">cd</span> nacos-docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>单机模式 Derby</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose -f example/standalone-derby.yaml up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意一定要启动docker desktop或者docker进程，然后就经过漫长的编译环节，编译完成后docker镜像会自动启动</p><p><img src="https://i.loli.net/2021/09/08/xpdPVki2fA18yh3.jpg" alt="/镜像image.jpg"></p><ul><li>测试服务状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -X POST <span class="token string">'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/08/yt43erZ8ED2SoBm.jpg" alt="/服务注册.jpg"><br>Nacos提供的服务以RESTful风格进行提供，因此可以直接通过http请求进行操作</p><h3 id="Nacos-Cons"><a class="header-anchor" href="#Nacos-Cons"></a>Nacos Cons</h3><ul><li>服务地址<br><a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></li><li>账号/密码<br>nacos/nacos<br>这个账号/密码是存放在数据库中的，可以进行更改</li></ul><p><img src="https://i.loli.net/2021/09/08/qSbWEAl1zR4Cpxa.jpg" alt="/nacos_admin.jpg"></p><h3 id="spring-boot示例"><a class="header-anchor" href="#spring-boot示例"></a>spring boot示例</h3><h4 id="配置管理"><a class="header-anchor" href="#配置管理"></a>配置管理</h4><ul><li>ConfigExample</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> serverAddr <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> dataId <span class="token operator">=</span> <span class="token string">"nacos.cfg.dataId1"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> group <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>SERVER_ADDR<span class="token punctuation">,</span> serverAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建连接</span>    <span class="token class-name">ConfigService</span> configService <span class="token operator">=</span> <span class="token class-name">NacosFactory</span><span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取配置</span>    <span class="token class-name">String</span> content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content1:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置监听</span>    configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"recieve:"</span> <span class="token operator">+</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//推送配置</span>    <span class="token keyword">boolean</span> isPublishOk <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">publishConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isPublishOk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content2:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//移除配置</span>    <span class="token keyword">boolean</span> isRemoveOk <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">removeConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isRemoveOk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content3:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注册中心"><a class="header-anchor" href="#注册中心"></a>注册中心</h4>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编写JavaAgent</title>
      <link href="2021/07/03/12.JVM/5.%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99JavaAgent/"/>
      <url>2021/07/03/12.JVM/5.%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99JavaAgent/</url>
      
        <content type="html"><![CDATA[<h1>如何编写JavaAgent</h1><p>这篇文章是根据MegaEase的袁伟老师的分享而来,地址是<a href="https://www.youtube.com/watch?v=ujhqct2POLU">How To Write a JavaAgent</a></p><h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2><h3 id="java-agent是什么？"><a class="header-anchor" href="#java-agent是什么？"></a>java agent是什么？</h3><p>java agent是jdk1.5时候推出的一个在运行时动态修改class,从而达到动态修改行为的目的</p><h3 id="能做什么？"><a class="header-anchor" href="#能做什么？"></a>能做什么？</h3><p>功能与AOP类似，它的优势在与彻底和业务代码隔离，可以完成AOP相同的事情，并且不入侵业务代码，适合于日志采集、链路追踪等基础组件</p><h2 id="用法"><a class="header-anchor" href="#用法"></a>用法</h2><p>java agent主要可以在两个时间点进行加载：</p><ol><li>JVM启动时</li><li>目标方法运行时</li></ol><h4 id="项目结构"><a class="header-anchor" href="#项目结构"></a>项目结构</h4><p><img src="https://i.loli.net/2021/07/11/uUxsh1JqQzaSXAW.png" alt="项目结构"></p><h4 id="启动时加载示例"><a class="header-anchor" href="#启动时加载示例"></a>启动时加载示例</h4><ul><li>AgentExampleDemo</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentExampleDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> instrumentation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"premain start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AgentTarget</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentTarget</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始打印...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>build.gradle</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  //重新定义MANIFEST.MF  jar <span class="token punctuation">&#123;</span>    manifest <span class="token punctuation">&#123;</span>        attributes <span class="token string">'Premain-Class'</span><span class="token builtin class-name">:</span> <span class="token string">'com.agmtopy.source.agent.AgentExampleDemo'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>javaagent启动参数</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-javaagent:build/libs/jvmsource-1.0-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/11/kH6wQJD5my7bxuX.png" alt="Idea设置"></p><ul><li>运行结果</li></ul><p><a href="https://imgtu.com/i/R7rfyV"><img src="https://z3.ax1x.com/2021/07/07/R7rfyV.png" alt="结果"></a></p><blockquote><p>这是第一种使用agent的方式,在目标代码运行前使用,java agent代码与目标方法进行组合的方式进行执行</p></blockquote><h3 id="运行时加载示例"><a class="header-anchor" href="#运行时加载示例"></a>运行时加载示例</h3><p>目标方法远行时加载要使用到javassist这个工具帮助我们修改class,注意javassist有两个项目,要使用<b>org.javassist</b>😂才可以</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">implementation &quot;org.javassist:javassist:3.28.0-GA&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>修改AgentTarget</li></ol><p>保持jvm运行,以便通过Attach的方式进行替换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentTarget</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始打印...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在AgentExampleDemo中增加agentmain方法</li></ol><ul><li>AgentExampleDemo</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * attach:方式运行 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"agentmain start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 显示执行时间</span>    inst<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShowExecTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重写载入新的字节码</span>        inst<span class="token punctuation">.</span><span class="token function">retransformClasses</span><span class="token punctuation">(</span><span class="token class-name">AgentTarget</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnmodifiableClassException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>增加ShowExecTime来修改字节码</li></ol><ul><li>ShowExecTime</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 自定义ClassFileTransformer*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShowExecTime</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> classBeingRedefined<span class="token punctuation">,</span> <span class="token class-name">ProtectionDomain</span> protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalClassFormatException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//只针对目标包下进行耗时统计</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>className<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"com/agmtopy/source/agent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在加载类："</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ClassPool</span> classPool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            classPool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoaderClassPath</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CtClass</span> cl <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>classfileBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 所有方法，统计耗时</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CtMethod</span> method <span class="token operator">:</span> cl<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始修改:"</span> <span class="token operator">+</span> method <span class="token operator">+</span><span class="token string">" 方法"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//需要通过`addLocalVariable`来声明局部变量</span>                method<span class="token punctuation">.</span><span class="token function">addLocalVariable</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>longType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//插入 开始语句</span>                method<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"start = java.lang.System.currentTimeMillis();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getLongName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//创建并插入 打印语句 System.out.println("方法：test， 执行时间：" + (System.currentTimeMillis() - start));</span>                <span class="token class-name">String</span> statement <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"java.lang.System.out.println(\"方法：%s， 执行时间：\" + (java.lang.System.currentTimeMillis() - start));"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>                method<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformed <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> transformed<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>transform()方法是通过javassist来修改字节码,在方法执行前后插入局部变量，然后打印方法执行耗时</p><ol start="4"><li>运行jar进行替换字节码替换</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 修改指定运行中的代码 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 传入目标 JVM pid</span>    <span class="token class-name">VirtualMachine</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token string">"6068"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vm<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span><span class="token string">"D:\\project\\jvmsource\\build\\libs\\jvmsource-1.0-SNAPSHOT.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>修改MANIFEST.MF<br>需要将<b>Agent-Class</b>写入MANIFEST.MF文件</li></ol><ul><li>gradle</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">jar &#123;    manifest &#123;        attributes &#39;Can-Redefine-Classes&#39;: true        attributes &#39;Can-Retransform-Classes&#39;: true        attributes &#39;Agent-Class&#39;: &#39;com.agmtopy.source.agent.AgentExampleDemo&#39;        attributes &#39;Premain-Class&#39;: &#39;com.agmtopy.source.agent.AgentExampleDemo&#39;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>执行字节码替换</li></ol><p>6.1 先将项目构建成为jar包<br>6.2 运行AgentTarget<br>不需要使用-javaagent的方式进行启动<br><img src="https://i.loli.net/2021/07/11/d3kZXA769yheB8L.png" alt="AgentTarget结果"><br>6.3 执行字节码替换</p><ul><li>运行结果<br><img src="https://i.loli.net/2021/07/11/bksIl8USHRMc72d.png" alt="运行结果"></li></ul><h2 id="源码分析"><a class="header-anchor" href="#源码分析"></a>源码分析</h2><p>java agent的原理根据加载时机还是可以分为两类入口，一类是启动时将agent class挂载到目标JVM上，另外一类入口是运行时动态加载，采用的是JVM attach技术</p><h3 id="启动时加载原理分析"><a class="header-anchor" href="#启动时加载原理分析"></a>启动时加载原理分析</h3><h4 id="分析目标方法调用链"><a class="header-anchor" href="#分析目标方法调用链"></a>分析目标方法调用链</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentExampleDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> instrumentation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"premain start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//打印调用栈</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" ClassName: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" Method Name : "</span> <span class="token operator">+</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/07/f4o2qQryOKwpWPL.png" alt="调用栈"></p><p>通过调用栈可以分析出是<B>InstrumentationImpl</B>调用<B>premain()</B>方法的,下面开始分析InstrumentationImpl</p><h4 id="InstrumentationImpl"><a class="header-anchor" href="#InstrumentationImpl"></a>InstrumentationImpl</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstrumentationImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Instrumentation</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><B>InstrumentationImpl</B>实现<B>Instrumentation</B>,<B>Instrumentation</B>接口是JVM定义对字节码操作的接口，我们按照调用链的顺序倒叙进行分析（执行、触发）</p><ol><li>permain执行过程分析</li></ol><p>由于<B>InstrumentationImpl.loadClassAndCallPremain()</B>方法已经最顶层的java代码入口，通过方法名称查找可以在<B>JPLISAgent.h</B>文件中查询到该方法名称被定义成为一个常量</p><ul><li>JPLISAgent.h</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define JPLIS_INSTRUMENTIMPL_PREMAININVOKER_METHODNAME      &quot;loadClassAndCallPremain&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该常量被<B>JPLISAgent.c</B>的<B>createInstrumentationImpl</B>方法所使用</p><ul><li>JPLISAgent.c</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">jboolean createInstrumentationImpl(JNIEnv *jnienv,JPLISAgent *agent)&#123;    &#x2F;&#x2F;省略....    &#x2F;* Now look up the method ID for the pre-main caller (we will need this more than once) *&#x2F;    if (!errorOutstanding)    &#123;        &#x2F;&#x2F;①获取到调用permain方法MethodId        premainCallerMethodID &#x3D; (*jnienv)-&gt;GetMethodID(jnienv,                                                       implClass,                                                       JPLIS_INSTRUMENTIMPL_PREMAININVOKER_METHODNAME,                                                       JPLIS_INSTRUMENTIMPL_PREMAININVOKER_METHODSIGNATURE);    &#125;    if (!errorOutstanding)    &#123;        agent-&gt;mInstrumentationImpl &#x3D; resultImpl;        &#x2F;&#x2F;②指针赋值        agent-&gt;mPremainCaller &#x3D; premainCallerMethodID;        agent-&gt;mAgentmainCaller &#x3D; agentmainCallerMethodID;        agent-&gt;mTransform &#x3D; transformMethodID;    &#125;        &#x2F;&#x2F;省略....    return !errorOutstanding;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段方法主要是做两件事，第一是获取到调用permain方法MethodId；第二件事是将这个MethodId传递出去,分析mPremainCaller的使用可以得到该值在’processJavaStart’中使用</p><p><img src="https://i.loli.net/2021/07/07/WbT3LyNCQilShcv.png" alt="mPremainCaller"></p><ul><li>processJavaStart</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">result &#x3D; startJavaAgent(agent, jnienv,                        agent-&gt;mAgentClassName,                         agent-&gt;mOptionsString,                        agent-&gt;mPremainCaller);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>processJavaStart通过前面获取到的MethodId启动javaAgent，下面我们分析<B>statrJavaAgent</B></p><ul><li>statrJavaAgent</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//...</span>success <span class="token operator">=</span> <span class="token function">invokeJavaAgentMainMethod</span><span class="token punctuation">(</span>jnienv<span class="token punctuation">,</span>                                    agent<span class="token operator">-></span>mInstrumentationImpl<span class="token punctuation">,</span>                                    agentMainMethod<span class="token punctuation">,</span>                                    classNameObject<span class="token punctuation">,</span>                                    optionsStringObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</B>invokeJavaAgentMainMethod</B>传入对象、方法ID、实参，执行定义的premain方法</p><p>通过上面的分析知道了permai执行的过程，继续看一下permain方法是如何触发的</p><ol start="2"><li>permain触发过程分析</li></ol><p><B>processJavaStart</B>方法是执行permain的入口，它在<B>JPLISAgent.h</B>中进行定义的,在源代码中全局搜索：<B> JPLISAgent *</B>可以找到JPLISAgent是在&lt;InvocationAdapter.c&gt;中重新进行过赋值</p><ul><li>InvocationAdapter.c</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">void JNICALL eventHandlerVMInit(jvmtiEnv *jvmtienv,                    JNIEnv *jnienv,                    jthread thread)  &#123;      JPLISAgent *agent &#x3D; environment-&gt;mAgent;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>eventHandlerVMInit</B>方法在<B>JPLISAgent.c</B>的<B>initializeJPLISAgent</B>方法中被设置为回调方法</p><ul><li>initializeJPLISAgent</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;关键执行逻辑if (jvmtierror &#x3D;&#x3D; JVMTI_ERROR_NONE)&#123;    jvmtiEventCallbacks callbacks;    memset(&amp;callbacks, 0, sizeof(callbacks));    &#x2F;&#x2F;设置JVM回调    callbacks.VMInit &#x3D; &amp;eventHandlerVMInit;    jvmtierror &#x3D; (*jvmtienv)-&gt;SetEventCallbacks(jvmtienv,                                                &amp;callbacks,                                                sizeof(callbacks));    check_phase_ret_blob(jvmtierror, JPLIS_INIT_ERROR_FAILURE);    jplis_assert(jvmtierror &#x3D;&#x3D; JVMTI_ERROR_NONE);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这里可以看到在初始化JPLISAgent时候就设置了JVM初始化完成后会回调InvocationAdapter来执行<B>permain</B>方法</p><ol start="3"><li>JPLISAgent的初始化</li></ol><p>回溯<B>initializeJPLISAgent</B>方法可以找到分别在<B>InvocationAdapter.c</B>的<B>DEF_Agent_OnLoad</B>、<B>DEF_Agent_OnAttach</B>上被调用。这两种方式也正是前面讲到的agent的两种增强方式的入口。</p><p>在JVM启动时最开始加载的是libinstrument动态链接库，然后在动态链接库里面找到JVMTI的入口方法：Agent_OnLoad和Agent_OnAttach。InvocationAdapter.c的定义</p><ul><li>InvocationAdapter.c</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;**  This will be called once for every -javaagent on the command line.*  Each call to Agent_OnLoad will create its own agent and agent data.**  The argument tail string provided to Agent_OnLoad will be of form*  &lt;jarfile&gt;[&#x3D;&lt;options&gt;]. The tail string is split into the jarfile and*  options components. The jarfile manifest is parsed and the value of the*  Premain-Class attribute will become the agent&#39;s premain class. The jar*  file is then added to the system class path, and if the Boot-Class-Path*  attribute is present then all relative URLs in the value are processed*  to create boot class path segments to append to the boot class path.*&#x2F;JNIEXPORT jint JNICALLDEF_Agent_OnLoad(JavaVM *vm, char *tail, void *reserved)&#x2F;**  This will be called once each time a tool attaches to the VM and loads*  the JPLIS library.*&#x2F;JNIEXPORT jint JNICALLDEF_Agent_OnAttach(JavaVM *vm, char *args, void *reserved)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>整体逻辑<br>整体的执行逻辑就是：</li></ol><ul><li>JPLISAgent声明JVM启动时候初始化JPLISAgent</li><li>JPLISAgent初始化时设置InvocationAdapter的回调方法</li><li>JVM初始化完成后执行回调方法</li><li>InvocationAdapter的回调方法执行permain方法</li></ul><h3 id="运行时加载原理分析"><a class="header-anchor" href="#运行时加载原理分析"></a>运行时加载原理分析</h3><ol><li>分析字节码<br>使用<B>HSDB</B>查看AgentTarget未进行字节码替换前的数据</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jhsdb hsdb --pid <span class="token number">21656</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>常量池</li></ul><p><img src="https://i.loli.net/2021/07/11/phklzJKYTs7IG16.jpg" alt="替换前的常量池"></p><p><img src="https://i.loli.net/2021/07/11/tkaOxIQ62fbs84K.png" alt="替换后的常量池"><br>明显可以看到常量池中增加了22条指令，这22条指令就是新加入的字节码所要使用到的常量</p><ul><li>方法区</li></ul><p><img src="https://i.loli.net/2021/07/11/3DvWBpyuHQ7I2cM.jpg" alt="替换前的方法区"></p><p><img src="https://i.loli.net/2021/07/11/e9TObiVwDPH7Whv.jpg" alt="替换后的方法区"></p><ol start="2"><li>重新加载字节码原理<br>@TODO</li></ol><blockquote><p>通过字节码对比可以明显的看出在使用<B>Instrumentation.addTransformer();</B>后确实将字节码进行了修改,其实修改字节码还是有两个时机:</p></blockquote><ul><li>一个是在启动编译时,会在jvm启动完毕后在执行permain方法来修改字节码</li><li>一个就是在运行期间动态的修改字节码</li></ul><h3 id="整体执行逻辑"><a class="header-anchor" href="#整体执行逻辑"></a>整体执行逻辑</h3><p><img src="https://i.loli.net/2021/07/11/sCey6D7USV9LRXo.jpg" alt="整体执行逻辑"></p><h2 id="开发工具"><a class="header-anchor" href="#开发工具"></a>开发工具</h2><ul><li><p>ASM</p></li><li><p>Javassist</p></li><li><p>Byte Buddy</p></li></ul><h3 id="功能对比"><a class="header-anchor" href="#功能对比"></a>功能对比</h3><table><thead><tr><th>-</th><th>ASM</th><th>Javassist</th><th>Byte Buddy</th></tr></thead><tbody><tr><td>学习成本</td><td>高</td><td>低</td><td>低</td></tr><tr><td>使用方法</td><td>使用字节码方式进行插入,需要了解class类结构和JVM指令集</td><td>提供高级抽象接口和低级字节码接口</td><td>同Javassist,并且提供声明式接口</td></tr><tr><td>性能</td><td>极快</td><td>一般</td><td>快</td></tr></tbody></table><p>详细的对比可参考byteBuddy官方资料:<a href="https://bytebuddy.net/#/tutorial">https://bytebuddy.net/#/tutorial</a></p><h3 id="Byte-Buddy"><a class="header-anchor" href="#Byte-Buddy"></a>Byte Buddy</h3><h4 id="示例"><a class="header-anchor" href="#示例"></a>示例</h4><ul><li>gradle</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;&#x2F;目前最新版本为1.11.6implementation &quot;net.bytebuddy:byte-buddy:LATEST&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>AgentExampleForByteBuddy</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentExampleForByteBuddy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Advice.OnMethodEnter</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Advice.Origin</span> <span class="token class-name">Executable</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte buddy before : "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Advice.OnMethodExit</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Advice.Origin</span> <span class="token class-name">Executable</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte buddy after : "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> arguments<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">AgentBuilder<span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">AgentBuilder<span class="token punctuation">.</span>RedefinitionStrategy</span><span class="token punctuation">.</span>RETRANSFORMATION<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">AgentBuilder<span class="token punctuation">.</span>InstallationListener<span class="token punctuation">.</span>StreamWriting</span><span class="token punctuation">.</span><span class="token function">toSystemError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">nameContains</span><span class="token punctuation">(</span><span class="token string">"AgentTarget"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> td<span class="token punctuation">,</span> cl<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">-></span> builder<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Advice</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">AgentExampleForByteBuddy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">MethodDescription</span><span class="token operator">::</span><span class="token function">isConstructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">installOn</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AgentTarget</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentTarget</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始打印...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AgentTarget</span> agentTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AgentTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agentTarget<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span> <span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里演示的是一个重写加载类的示例:</p><ol><li>通过</B>@Advice.OnMethodEnter</B>和<B>@Advice.OnMethodExit</B>定义执行方法前后插入的字节码</li><li>通过<B>AgentBuilder</B>指定要增强的类和类型</li><li><B>AgentBuilder.with</B>可以添加监听，方便输出调试</li></ol><h3 id="Byte-Byddy常见问题"><a class="header-anchor" href="#Byte-Byddy常见问题"></a>Byte Byddy常见问题</h3><ul><li>依赖冲突</li></ul><p>处理方案：</p><ol><li><p>构建工具排除</p></li><li><p>使用自定义classLoader加载agent所使用的类<br>通过指定agent类的加载器,让</B>BootstrapClassLoader</B>去加载</p></li></ol><ul><li>Byte-Buddy提供的API</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassInjector<span class="token punctuation">.</span>UsingInstrumentation</span>         <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">FileJar</span><span class="token punctuation">,</span> <span class="token class-name">ClassInjector<span class="token punctuation">.</span>UsingInstrumentation<span class="token punctuation">.</span>Target</span><span class="token punctuation">.</span>BOOTSTRAP<span class="token punctuation">,</span> instrumentation<span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">injectRaw</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>instrumentation<span class="token punctuation">,</span> <span class="token class-name">ClassFileLocator                 <span class="token punctuation">.</span>ForClassLoader</span><span class="token punctuation">.</span><span class="token function">ofSystemLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token string">"com.agmtopy.source.agent.AgentExampleForByteBuddy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>java agent中传参</li></ul><p>处理方案:</p><ol><li>ThreadLocal</li><li>增加临时的成员变量</li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://asm.ow2.io/">https://asm.ow2.io/</a><br><a href="https://www.javassist.org/">https://www.javassist.org/</a><br><a href="https://bytebuddy.net/#/">https://bytebuddy.net/#/</a><br><a href="https://blog.csdn.net/wanxiaoderen/article/details/107079741">https://blog.csdn.net/wanxiaoderen/article/details/107079741</a><br><a href="https://www.cnblogs.com/old-cha/p/13264114.html">https://www.cnblogs.com/old-cha/p/13264114.html</a><br><a href="https://www.cnblogs.com/chiangchou/p/javassist.html#_label9">https://www.cnblogs.com/chiangchou/p/javassist.html#_label9</a><br><a href="https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html">https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html</a><br><a href="https://github.com/gzzchh/de-ag">https://github.com/gzzchh/de-ag</a><br><a href="https://gitee.com/mazhimazh/bytecode-examples">https://gitee.com/mazhimazh/bytecode-examples</a></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过WSL2编译JDK源码</title>
      <link href="2021/06/19/1.%E6%9D%82%E8%AE%B0/%E9%80%9A%E8%BF%87WSL2%E7%BC%96%E8%AF%91JDK%E6%BA%90%E7%A0%81/"/>
      <url>2021/06/19/1.%E6%9D%82%E8%AE%B0/%E9%80%9A%E8%BF%87WSL2%E7%BC%96%E8%AF%91JDK%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1>通过WSL2编译JDK源码</h1><p>WSL的全称是’Windows Subsystem for Linux’,通过在系统层面对Linux内核进行支持,WSL1只是部分支持Linux内核而WSL2支持完整的Linux内核。不但可以通过WSL运行Linux内核，甚至可以将Windows Docker指定通过WSL2来进行远行</p><h2 id="WSL1-WSL2"><a class="header-anchor" href="#WSL1-WSL2"></a>WSL1 -&gt; WSL2</h2><ul><li><p>安装Linux发行版<br>WSL1只需要开启Linux子系统并下载linux发行版即可,linux发行版默认是只能通过Windows Store进行下载，也可以通过下载安装包(msi)进行安装,手动选择安装包地址如下(<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">https://docs.microsoft.com/zh-cn/windows/wsl/install-manual</a>)</p></li><li><p>切换WSL2</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl --set-default-version <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动WSL</li></ul><ol><li>应用程序直接启动安装Linux发行版</li><li>‘wsl -l -v’ 检查WSL版本,VERSION -&gt; 2即可<br><a href="https://imgtu.com/i/RPsbr9"><img src="https://z3.ax1x.com/2021/06/19/RPsbr9.png" alt="WSL2"></a></li></ol><h2 id="编译JDK"><a class="header-anchor" href="#编译JDK"></a>编译JDK</h2><p>严谨的说法是编译OpenJDK</p><h3 id="下载JDK源代码"><a class="header-anchor" href="#下载JDK源代码"></a>下载JDK源代码</h3><p>推荐直接下载,下面是JDK11的源代码地址,直接选择zip file进行下载,也可以选择不同的版本<br><a href="https://jdk.java.net/java-se-ri/11">https://jdk.java.net/java-se-ri/11</a></p><h3 id="准备JDK编译环境"><a class="header-anchor" href="#准备JDK编译环境"></a>准备JDK编译环境</h3><h4 id="安装必要程序"><a class="header-anchor" href="#安装必要程序"></a>安装必要程序</h4><ul><li>推荐先先切换软件源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">sed</span> -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list<span class="token function">sudo</span> <span class="token function">apt</span> update -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装必要软件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y <span class="token function">curl</span> <span class="token function">ssh</span> <span class="token function">zip</span> <span class="token function">unzip</span> ant <span class="token function">git</span> build-essential ccache cpio g++ gcc gdb libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev libcups2-dev libfreetype6-dev libasound2-dev libelf-dev ccache libfontconfig1-dev autoconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装BootStrap-JDK"><a class="header-anchor" href="#安装BootStrap-JDK"></a>安装BootStrap JDK</h4><p>BootStrap JDK的作用是编译JDK源代码中的java代码,默认要比编译的JDK小一个版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-10-jdkjava -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="解压JDK源代码"><a class="header-anchor" href="#解压JDK源代码"></a>解压JDK源代码</h4><p>由于我比较喜欢使用VS code,VS code中已经集成了连接WSL的插件，因此只需要将JDK源代码直接拖拽到Linux的目录下即可。也可以通过WSL进行复制<br>得到JDK源代码后就可以进行解压</p><h4 id="编译JDK源代码"><a class="header-anchor" href="#编译JDK源代码"></a>编译JDK源代码</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 准备配置(警告不作为异常抛出)</span><span class="token function">bash</span> ./configure --disable-warnings-as-errors<span class="token function">make</span> all<span class="token comment"># 编译失败时推荐先进行clean,在重新进行编译</span><span class="token function">make</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异常处理"><a class="header-anchor" href="#异常处理"></a>异常处理</h4><ol><li>在构建低版本的JDK时可能出现OS版本不支持<br>修改./hotspot/make/linux/Makefile</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 5% 内核版本</span>SUPPORTED_OS_VERSION <span class="token operator">=</span> <span class="token number">2.4</span>% <span class="token number">2.5</span>% <span class="token number">2.6</span>% <span class="token number">2.7</span>% <span class="token number">3</span>% <span class="token number">4</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ中NameSrv的详细设计分析</title>
      <link href="2021/06/11/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/98.RocketMQ%E4%B8%ADNameSrv%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/"/>
      <url>2021/06/11/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/98.RocketMQ%E4%B8%ADNameSrv%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>RocketMQ中NameSrv的详细设计分析</h1><h2 id="设计目标"><a class="header-anchor" href="#设计目标"></a>设计目标</h2><p>NameSrv是RoctetMQ项目下的一个模块，作为RockerMQ中的轻型注册中心,只负责与Topic有关的功能。<br>使用NameSrv来替代ZK等注册中心主要是有两个好处:</p><ol><li>减少整体复杂性<br>一个分布式系统强依赖另外一个分布式系统，增加了整个系统的复杂性(整体代码复杂性、运维的复杂性);<br>使用内置的轻量级注册中心,就可以消除原来与ZK等第三方注册中心的各种协议适配;<br>Namesrv中只需要开发与Topic有关的业务场景;<br>系统维护时也不用在考虑第三方系统的处理机制;</li><li>扩展能力<br>RocketMQ从设计初就考虑过在嵌入式设备上进行部署的能力,因此采用Namesrv的设计能最大限度的掌握系统</li></ol><p>目前Kafka在这方面做的更好，在V2.8之后不但去掉了ZK，并且采用broker集群中通过选举的方式选出leader节点来管理Topic、broker、consumer</p><h2 id="基础功能"><a class="header-anchor" href="#基础功能"></a>基础功能</h2><ul><li><p>整体架构<br><img src="https://github.com/apache/rocketmq/raw/master/docs/cn/image/rocketmq_architecture_3.png" alt="整体架构"><br>Namesrv集群是无状态的设计,每个组件(Broker、Producer、Consumer)都会向每一个Namesrv进行请求,因此Namesrv是选择了可用性</p></li><li><p>功能解析</p></li></ul><ol><li>Topic路由管理</li><li>Remoting远程服务</li><li>定时任务</li><li>KV管理模块</li></ol><h2 id="源码分析"><a class="header-anchor" href="#源码分析"></a>源码分析</h2><h3 id="Namesrv时序图"><a class="header-anchor" href="#Namesrv时序图"></a>Namesrv时序图</h3><p><a href="https://imgtu.com/i/2jkklQ"><img src="https://z3.ax1x.com/2021/06/16/2jkklQ.png" alt="Namesrv执行流程"></a></p><h3 id="NamesrvStartup"><a class="header-anchor" href="#NamesrvStartup"></a>NamesrvStartup</h3><h4 id="main"><a class="header-anchor" href="#main"></a>main()</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 主函数入口 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">main0</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 具体执行逻辑:避免在main函数中添加过多的逻辑 */</span><span class="token keyword">fun</span> <span class="token function">main0</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> controller <span class="token operator">=</span> <span class="token function">createNamesrvController</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token function">start</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span>        <span class="token keyword">val</span> tip <span class="token operator">=</span>            <span class="token string">"The Name Server boot success. serializeType="</span> <span class="token operator">+</span> RemotingCommand<span class="token punctuation">.</span><span class="token function">getSerializeTypeConfigInThisServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        log<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 初始化NamesrvController */</span><span class="token keyword">fun</span> <span class="token function">createNamesrvController</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> NamesrvController <span class="token punctuation">&#123;</span>  <span class="token comment">//去除TLS和apache.commons的版本</span>  <span class="token keyword">return</span> <span class="token function">NamesrvController</span><span class="token punctuation">(</span><span class="token function">NamesrvConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NettyServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="start"><a class="header-anchor" href="#start"></a>start()</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/**  * 启动NamesrvController  */</span><span class="token keyword">fun</span> <span class="token function">start</span><span class="token punctuation">(</span>controller<span class="token operator">:</span> NamesrvController<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>controller <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"NamesrvController is null"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//NamesrvController执行初始化,如果失败时退出进程</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>controller<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        controller<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    controller<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NamesrvStartup启动时候主要做了以下几个步骤：</p><ol><li>创建NamesrvController</li><li>处理TLS和加载Namesrv配置文件</li><li>启动NamesrvController</li><li>关闭NamesrvController</li></ol><ul><li>NamesrvController<br>NamesrvController主要逻辑很为两个部分初始化和执行</li></ul><ol><li>初始化</li></ol><ul><li>初始化那些东西</li></ul><ol><li><p>配置</p></li><li><p>服务</p></li><li><p>线程池</p></li><li><p>自省</p></li><li><p>加载配置文件</p></li></ol><h2 id="扩展思考"><a class="header-anchor" href="#扩展思考"></a>扩展思考</h2><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://rocketmq.apache.org/">rocketmq</a><br><a href="https://github.com/apache/rocketmq">rocketmq-github</a><br><a href="https://www.confluent.io/blog/kafka-without-zookeeper-a-sneak-peek/">Apache Kafka Made Simple: A First Glimpse of a Kafka Without ZooKeeper</a></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于消息队列的一些历史</title>
      <link href="2021/05/08/1.%E6%9D%82%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2/"/>
      <url>2021/05/08/1.%E6%9D%82%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h1>关于消息队列的一些历史</h1><p>这是一篇关于消息队列的历史文章，有关消息队列的前世今生的一些信息。</p><h2 id="起源"><a class="header-anchor" href="#起源"></a>起源</h2><p>软件领域的消息队列最早是由Vivek Ranadive参考硬件中的系统总线提出来的,这老哥是一个印度裔,现在还是国王队的老板。<br>硬件领域中的系统总线主要分为数据总线、地址总线、控制总线这几个部分，用来连接不同的设备传输数据使用。<br><a href="https://imgtu.com/i/gJ4Q61"><img src="https://z3.ax1x.com/2021/05/09/gJ4Q61.png" alt="系统总线"></a><br>硬件上的系统总线着重在于通过线连接不同设备之间的交互，而消息队列是软件领域的连接不同系统之间交互的方式有应用层协议，现代的消息队列主要着重点是在于队列上。</p><h2 id="上古时期"><a class="header-anchor" href="#上古时期"></a>上古时期</h2><ul><li><p>1985<br>Vivek Ranadive根据系统总线设计出来的第一个消息系统叫The Information Bus(TIB)，TIB但是主要是在电信和金融领域进行使用。</p></li><li><p>1993<br>IBM MQ是由蓝色巨人IBM与1993年推出的消息队列产品，目前还保持更新现在迭代到了V9版本</p></li><li><p>1997<br>MS MQ是由微软推出的消息队列产品,不由感慨一句微软是真吊，为了.net硬是整了一个全家桶。</p></li></ul><p>这一时期由于各家的MQ产品都是为了旗下其他产品进行服务，为了形成壁垒，各家的MQ产品并未形成一个统一的规范，导致不同公司下的产品并不能使用其他公司的MQ。</p><h2 id="中古时期"><a class="header-anchor" href="#中古时期"></a>中古时期</h2><p>由于早期的MQ产品各自为政的场景下，这一时期主要统一了消息队列的协议，这些协议一直影响到了现在，主要诞生了以下几种协议以及接入规范：</p><ul><li><p>JMS<br>JMS是一套接入MQ中间件产品的接口规范，java为了黏合各家的消息队列试图通过类似于JDBC的方案在java端通过统一的协议，在根据不同产品的驱动去连接MQ。<br>各个厂商根据这套接口规范自行选择客户端进行实现，实现了这个接口规范的客户端可以在java应用程序内自由切换，类似于适配器模式</p></li><li><p>AMQP<br>AMQP是实现消息队列的一种协议，在协议层规定了消息队列应该有的逻辑规范。AMQP与具体的MQ(例如RabbitMQ、ActiveMQ)的关系类似与jvm规范和JVM实现(HotSpot)一样</p></li><li><p>MQTT<br>为嵌入式设备设计的一套消息队列协议</p></li><li><p>STOMP<br>Stomp协议，英文全名Streaming Text Orientated Message Protocol，中文名称为 ‘流文本定向消息协议’。是一种以纯文本为载体的协议（以文本为载体的意思是它的消息格式规范中没有类似XMPP协议那样的xml格式要求，你可以将它看作‘半结构化数据’）<br>双向消息通信协议还有很多，除了AMQP以外其他的大多都是即时消息协议。</p></li><li><p>ActiveMQ<br>在这一时期还有根据AMQP还诞生了ActiveMQ这一开源产品，ActiveMQ是第一个广泛使用到的开源MQ产品</p></li><li><p>RabbitMQ<br>RabbitMQ是2006年诞生的，现在和spring框架同属于vmware。由Erlang开发的。</p></li></ul><h2 id="现代时期"><a class="header-anchor" href="#现代时期"></a>现代时期</h2><p>由于ActiveMQ和RabbitMQ发展了多年，背负着沉重的历史包袱支持这非常全的MQ功能，在现代的MQ使用场景中这些消息队列不符合当下数据爆炸，小型机组成分布式系统的场景了。这时候出现了针对某个细分领域的消息队列框架Kafka、RocketMQ、Pulsar</p><ul><li><p>Kafka<br>Kafka是Linkedin为解决ActiveMQ性能问题而开发的分布式消息队列，目前已经成为大数据领域实际的消息传递组件</p></li><li><p>RocketMQ<br>RocketMQ是阿里开源的消息队列中间件，在设计上参考了kafka,通过java语言进行开发</p></li><li><p>Pulsar<br>Pulsar是雅虎开源的，天然支持多组成并且是计算和存储分离式的实现</p></li></ul><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>消息队列的诞生是从金融场景出发，发展到现在最开始的那几种消息队列在功能上已经变得非常臃肿。现代的消息队列根据某一方面的着重点开始进行发展。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-可复用面向对象软件设计的基础-行为模式</title>
      <link href="2021/04/29/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/04/29/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>设计模式-可复用面向对象软件设计的基础-行为模式</h1><p>行为模式是通过将多个类通过继承\组合的形式形成对方法的处理,主要有以下几种</p><ol><li>责任链模式</li><li>命令模式</li><li>解释器模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>模板模式</li><li>访问者模式</li></ol><h2 id="责任链模式"><a class="header-anchor" href="#责任链模式"></a>责任链模式</h2><h3 id="意图"><a class="header-anchor" href="#意图"></a>意图</h3><blockquote><p>责任链模式是使得多个对象都有机会处理请求,从而避免请求的发送者和接收者之间的耦合关系,这些对象的处理过程逻辑上形成链状结构,请求沿着这条链依次被不同的对象进行处理。标准的定义是直到有一个对象处理请求为止，我自己理解应该是依次进行处理，而不是有一个处理即止，因为如果只有一个处理，那么责任链模式与策略模式类似。责任链模式是通过将请求需要依次处理的场景从显的客户端一个一个调用的过程，升级成了将请求传入和由责任链客户端去串联整个调用过程，并且这样更容易扩展步骤。</p></blockquote><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><h3 id="结构"><a class="header-anchor" href="#结构"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/2021-chain-of-responsibility.svg" alt="责任链模式"></p><h3 id="实例"><a class="header-anchor" href="#实例"></a>实例</h3><ul><li>AbstractLogger.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractLogger</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> INFO <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DEBUG <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ERROR <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>    <span class="token comment">//责任链中的下一个元素</span>   <span class="token keyword">protected</span> <span class="token class-name">AbstractLogger</span> nextLogger<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span> nextLogger<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nextLogger <span class="token operator">=</span> nextLogger<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">&lt;=</span> level<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token function">write</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nextLogger <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         nextLogger<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ChainPatternDemo.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainPatternDemo</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AbstractLogger</span> <span class="token function">getChainOfLoggers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">AbstractLogger</span> errorLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AbstractLogger</span> fileLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AbstractLogger</span> consoleLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>       errorLogger<span class="token punctuation">.</span><span class="token function">setNextLogger</span><span class="token punctuation">(</span>fileLogger<span class="token punctuation">)</span><span class="token punctuation">;</span>      fileLogger<span class="token punctuation">.</span><span class="token function">setNextLogger</span><span class="token punctuation">(</span>consoleLogger<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> errorLogger<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">AbstractLogger</span> loggerChain <span class="token operator">=</span> <span class="token function">getChainOfLoggers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       loggerChain<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"This is an information."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       loggerChain<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span>          <span class="token string">"This is a debug level information."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       loggerChain<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>          <span class="token string">"This is an error information."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ErrorLogger、FileLogger、ConsoleLogger都是AbstractLogger.java的子类，在客户端中，通过提供setNextHandler的方法，客户端可以根据业务场景自由组合链的顺序</p><h2 id="命令模式"><a class="header-anchor" href="#命令模式"></a>命令模式</h2><h3 id="意图-v2"><a class="header-anchor" href="#意图-v2"></a>意图</h3><p>将请求封装成为一个对象，从而使得你可以用不同的请求对客户进行参数化</p><h3 id="动机"><a class="header-anchor" href="#动机"></a>动机</h3><p>命令模式主要是将请求和对请求执行的动作责任分离,让两者都可以独立进行演化。适合请求内容是类似于信号量的场景，接受者可以根据这个请求内容进行不同的处理</p><h3 id="结构-v2"><a class="header-anchor" href="#结构-v2"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/commanduml.jpg" alt="命令模式"></p><h3 id="实例-v2"><a class="header-anchor" href="#实例-v2"></a>实例</h3><ul><li>Command</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 执行方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Command.java 定义的抽象命令类，所有具体命令的接口</p><ul><li>PlayCommand.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//具体的执行类</span>    <span class="token keyword">private</span> <span class="token class-name">AudioPlayer</span> myAudio<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">PlayCommand</span><span class="token punctuation">(</span><span class="token class-name">AudioPlayer</span> audioPlayer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        myAudio <span class="token operator">=</span> audioPlayer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 执行方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        myAudio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PlayCommand是具体的命令执行类，内部具有一个execute方法,该方法会执行该命令定义的动作</p><ul><li>Keypad.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Keypad</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> playCommand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPlayCommand</span><span class="token punctuation">(</span><span class="token class-name">Command</span> playCommand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playCommand <span class="token operator">=</span> playCommand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">//执行播放方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        playCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keyPad作为请求类，再次对命令进行一次封装，便于客户端进行调用，这里可以不用再次封装，自己通过客户端进行调用</p><ul><li>client.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Julia</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//创建接收者对象</span>        <span class="token class-name">AudioPlayer</span> audioPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudioPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建命令对象</span>        <span class="token class-name">Command</span> playCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayCommand</span><span class="token punctuation">(</span>audioPlayer<span class="token punctuation">)</span>         <span class="token comment">//创建请求者对象</span>        <span class="token class-name">Keypad</span> keypad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keypad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keypad<span class="token punctuation">.</span><span class="token function">setPlayCommand</span><span class="token punctuation">(</span>playCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//执行具体的类</span>        keypad<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端通过调用请求类==Keypad==的指定方法，keyPad会调用具体的命令封装类进行执行。其实命令模式只是将请求和对应的动作进行分离，便于复杂请求场景的扩展</p><h2 id="解释器模式"><a class="header-anchor" href="#解释器模式"></a>解释器模式</h2><h3 id="意图-v3"><a class="header-anchor" href="#意图-v3"></a>意图</h3><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p><h3 id="动机-v2"><a class="header-anchor" href="#动机-v2"></a>动机</h3><p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><h3 id="结构-v3"><a class="header-anchor" href="#结构-v3"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg" alt="解释器模式"></p><h2 id="迭代器模式"><a class="header-anchor" href="#迭代器模式"></a>迭代器模式</h2><h3 id="意图-v4"><a class="header-anchor" href="#意图-v4"></a>意图</h3><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露聚合对象内部表示的模式</p><h3 id="别名"><a class="header-anchor" href="#别名"></a>别名</h3><p>游标(Cursor)</p><h3 id="动机-v3"><a class="header-anchor" href="#动机-v3"></a>动机</h3><p>迭代器模式是为了将内部元素和访问/遍历动作分离开，通过增加一个迭代器，通过迭代器来访问内部元素。</p><h3 id="结构-v4"><a class="header-anchor" href="#结构-v4"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/iterator_pattern_uml_diagram.jpg" alt="迭代器模式"></p><h2 id="中介者模式"><a class="header-anchor" href="#中介者模式"></a>中介者模式</h2><h3 id="意图-v5"><a class="header-anchor" href="#意图-v5"></a>意图</h3><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立的改变它们之间的交互</p><h3 id="动机-v4"><a class="header-anchor" href="#动机-v4"></a>动机</h3><p>由于面向对象鼓励按照行为进行类的划分，因此系统中会存在大量的类。如果不同的类之间都要相互引用来完成一个行为的话不符合面向对象的特性，因此需要有一个中介来将服务聚合起来，相当于将细小的行为进行一次聚合形成较大的行为，这样不用关注细小的行为对象。</p><h3 id="结构-v5"><a class="header-anchor" href="#结构-v5"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/mediator_pattern_uml_diagram.jpg" alt="中介者模式"></p><p>中介者模式在功能上类似于门面模式，但是门面模式着重于对子系统类的封装，中介者模式着重是对行为的封装和调和各个子行为从而形成一个大的行为，因此门面模式是结构型而中介者模式是行为型。</p><h2 id="备忘录模式"><a class="header-anchor" href="#备忘录模式"></a>备忘录模式</h2><h3 id="意图-v6"><a class="header-anchor" href="#意图-v6"></a>意图</h3><p>在不破坏对象封装性的前提下，捕获一个对象的内部状态，并将该状态保存在对象之外。在需要时，可以根据这个数据进行恢复。类似于游戏中的存档点设置。</p><h3 id="别名-v2"><a class="header-anchor" href="#别名-v2"></a>别名</h3><p>token</p><h3 id="动机-v5"><a class="header-anchor" href="#动机-v5"></a>动机</h3><p>备忘录模式针对于那些需要进行暂存的数据或对象，在不破坏封装性的前提下。</p><h3 id="结构-v6"><a class="header-anchor" href="#结构-v6"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/memento_pattern_uml_diagram.jpg" alt="备忘录模式"></p><p>CareTaker.java 负责保存每个阶段的对象状态</p><h2 id="观察者模式"><a class="header-anchor" href="#观察者模式"></a>观察者模式</h2><h3 id="意图-v7"><a class="header-anchor" href="#意图-v7"></a>意图</h3><p>定义对象之间的一种一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都会得到通知</p><h3 id="别名-v3"><a class="header-anchor" href="#别名-v3"></a>别名</h3><p>依赖(Dependents),发布-订阅(Publish-Subscribe)</p><h3 id="动机-v6"><a class="header-anchor" href="#动机-v6"></a>动机</h3><p>在一个系统中一个对象的改变会导致引起相关对象的改变，如果要保持这样的一致性会导致对象间强依赖。观察者模式就是通过发布-订阅模式将通知的职责从动作类中强制依赖转换为通知的模式</p><h3 id="结构-v7"><a class="header-anchor" href="#结构-v7"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg" alt="观察者模式"></p><p>Subject作为被观察者中维护一个所有观察者的引用，Observer作为被观察者维护一个Subject的引用，将自己组成到被观察者中<br>可参考<br><a href="../../../../../2020/05/06/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/#more">观察者模式</a></p><h3 id="实例-v3"><a class="header-anchor" href="#实例-v3"></a>实例</h3><p>spring中的ApplicationListener和ApplicationEvent、ApplicationEventPublisherAware分别作为被观察者、观察者和客户端</p><h2 id="状态模式"><a class="header-anchor" href="#状态模式"></a>状态模式</h2><h3 id="意图-v8"><a class="header-anchor" href="#意图-v8"></a>意图</h3><p>允许一个对象在其内部状态发生改变时改变它的行为。从表象上来看就是对象可以根据内部状态执行不同的业务逻辑。</p><h3 id="动机-v7"><a class="header-anchor" href="#动机-v7"></a>动机</h3><p>一个对象的行为取决于内部状态进行驱动时，状态模式可以将状态和行为分离，减少分支的条件语句。</p><h3 id="结构-v8"><a class="header-anchor" href="#结构-v8"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/state_pattern_uml_diagram.png" alt="状态模式"></p><p>可以看到doAction()方法中才会执行具体的行为，不同的状态具有不同的行为，通过context维护状态，当状态发生改变时，对应的行为也随之发生改变</p><h2 id="策略模式"><a class="header-anchor" href="#策略模式"></a>策略模式</h2><h3 id="意图-v9"><a class="header-anchor" href="#意图-v9"></a>意图</h3><p>策略模式是将不同的算法单独定义起来，通过不同的场景选择不同的算法。将客户端中的条件分支去掉，并且支持扩展。</p><h3 id="结构-v9"><a class="header-anchor" href="#结构-v9"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg" alt="策略模式"></p><p>Context中的strategy类是具体执行的算法，这里有两种设计方案，第一种就是UML图中的写法，将Contetxx作为每次行动的容器，每次执行前都先进行赋值。第二种是Context持有一个Strategy的List根据添加选择算法、</p><p>策略模式在实际工作中大量使用到，因为消除了条件判断减少了分支。通过增加类的方式来减少分支，结构上便于扩展了</p><h2 id="模板模式"><a class="header-anchor" href="#模板模式"></a>模板模式</h2><h3 id="意图-v10"><a class="header-anchor" href="#意图-v10"></a>意图</h3><p>定义一个方法的骨架，通过继承的方式让子类可以改变特点行为，使得不用重新定义算法的顺序就能改变行为。</p><h3 id="动机-v8"><a class="header-anchor" href="#动机-v8"></a>动机</h3><p>模板方法的出现主要是为了解决重复定义的算法执行顺序并且具体执行有差异的场景</p><h3 id="结构-v10"><a class="header-anchor" href="#结构-v10"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="模板模式"></p><p>模板模式与策略模式的区别在于模板模式是通过继承的方式来改变行为，策略模式是通过改变委托对象的方式来改变行为；策略模式针对的场景是相同类在处理不同的业务场景时候算法的选择问题，模板模式针对的是相同的类在处理相同的业务场景下算法细微的差异结构上。</p><h2 id="访问者模式"><a class="header-anchor" href="#访问者模式"></a>访问者模式</h2><h3 id="意图-v11"><a class="header-anchor" href="#意图-v11"></a>意图</h3><p>将数据和数据操作分离</p><h3 id="动机-v9"><a class="header-anchor" href="#动机-v9"></a>动机</h3><p>对一个对象需要进行多次操作时，为了避免这些操作将对象污染，可以通过访问者模式将数据和操作进行隔离。实现不同的访问者访问不同的数据。</p><h3 id="结构-v11"><a class="header-anchor" href="#结构-v11"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/visitor_pattern_uml_diagram.jpg" alt="访问者模式"></p><p>访问者模式的核心是在于数据对象会针对不同的访问者定义出不同的行为，由于访问者知道被访问的数据对象中的数据结构，因此访问者可以根据不同的对象定义出不同的行为</p><p>访问者的好处在于将数据对象的操作延迟到的访问者那一步中去了，通过定义不同的访问者可以执行不同的动作。</p><h2 id="设计模式思维导图"><a class="header-anchor" href="#设计模式思维导图"></a>设计模式思维导图</h2><p><a href="https://imgtu.com/i/gJVn2Q"><img src="https://z3.ax1x.com/2021/05/08/gJVn2Q.png" alt="设计模式思维导图"></a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-可复用面向对象软件设计的基础-结构型模式</title>
      <link href="2021/04/24/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/04/24/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>设计模式-可复用面向对象软件设计的基础-结构型模式</h1><h2 id="结构型模式"><a class="header-anchor" href="#结构型模式"></a>结构型模式</h2><blockquote><p>结构型模式涉及到的是如何组织类和对象之间的引用关系,以便获得更大的组织结构和更好的可扩展性。结构性模式往往采用继承和组合两种手段来实现，关注的重点在于对象之间相互组合引用的关系上。主要有以下几种具体的模式：</p></blockquote><ol><li>适配器模式</li><li>桥接模式</li><li>组合模式</li><li>装饰模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ol><h2 id="适配器模式"><a class="header-anchor" href="#适配器模式"></a>适配器模式</h2><h3 id="意图"><a class="header-anchor" href="#意图"></a>意图</h3><blockquote><p>将一个类的接口转换成客户端所期望能使用的另外一个接口。Adapter模式使原本由于接口不兼容不能在一起使用的类能够通过一个中间适配类从而能一起工作了</p></blockquote><h3 id="别名"><a class="header-anchor" href="#别名"></a>别名</h3><p>Wrapper</p><h3 id="结构"><a class="header-anchor" href="#结构"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/20210223-adapter.png" alt="适配器模式"><br>可以看到原本AudioPlayer不能直接引用AdvanceMediaPlayer，但是通过MediaAdapter实现AudioPlayer同样的接口后，在MediaAdapter中引用AdvanceMediaPlayer实现去执行具体的方法，从而迂回实现AdvanceMediaPlayer的调用</p><h2 id="桥接模式"><a class="header-anchor" href="#桥接模式"></a>桥接模式</h2><h3 id="意图-v2"><a class="header-anchor" href="#意图-v2"></a>意图</h3><blockquote><p>将抽象部分和它的实现部分分离，从而使得两者都可以独立的变化。出现桥接模式的原因在因为继承接口-实现方法这种模式下接口定义好的方法子类必须按照定义进行实现，缺乏灵活性(PS:继承方式是一种强约束的关系，适用于强约束的场合)</p></blockquote><h3 id="别名-v2"><a class="header-anchor" href="#别名-v2"></a>别名</h3><p>Hadnle/Body</p><h3 id="结构-v2"><a class="header-anchor" href="#结构-v2"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2018/06/1528771072-8457-5780d2384acdbb60ec07fc3c71a1.png" alt="桥接模式"></p><p>Abstraction和Implementor都是抽象类，由于Abstraction内部持有Implementor抽象类，从而使得这两个抽象类都可以独立的发展，桥接模式的核心应该是将业务上不同的抽象部分单独分离开，独立演化，关注的应该是业务上抽象的功能分离和在抽象对象类的组合。通过分离和组合更好的描述一个类</p><h2 id="组合模式"><a class="header-anchor" href="#组合模式"></a>组合模式</h2><blockquote><p>将对象组合成树形结构以表示&quot;部分-整体&quot;的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。适用于希望忽略组合对象和单个对象的不同，用户将统一的使用组合结构中的所有对象。</p></blockquote><h3 id="结构-v3"><a class="header-anchor" href="#结构-v3"></a>结构</h3><p><a href="https://imgtu.com/i/cztr0P"><img src="https://z3.ax1x.com/2021/04/25/cztr0P.png" alt="cztr0P.png"></a><br>提供Component接口(抽象构件)，该接口有两个实现分别是容器构件(Composlte)、叶子构件(Leaf)。客户端通过直接使用Component接口，来忽略具体是单个对象还是组合对象提供的服务。composlte对象实现了Componet所定义的管理叶子节点的方法Add()、Remove()、GetChild()</p><p>组合模式在实现上有两种方法：1.透明组合模式、2.安全组合模式。<br>透明组合模式的特点是叶子节点和容器构件都要实现相同的接口，但是叶子节点和抽象构件节点其实都相互冗余了部分不属于自己的方法。<br>安全组合模式指的是在抽象构件中不会声明任何有关容器构件的方法，而是在容器构件中去声明并实现该方法</p><h3 id="实例"><a class="header-anchor" href="#实例"></a>实例</h3><h4 id="java-awt-Container"><a class="header-anchor" href="#java-awt-Container"></a>java.awt.Container</h4><ul><li>Container.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">></span></span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Container类内部管理一个<b>Component</b>的集合引用，这里采用的是安全的组合模式因此管理集合中的元素的方法是在Container中实现的</p><h2 id="装饰模式"><a class="header-anchor" href="#装饰模式"></a>装饰模式</h2><blockquote><p>动态的为目标对象添加一些额外的职责，装饰模式(Decorator)在功能上与继承类似都是增强目标方法，但是装饰模式在结构上是向上的，而继承在结构上是向下的。装饰模式更加的灵活，没有继承那种强依赖的关系。</p></blockquote><h3 id="别名-v3"><a class="header-anchor" href="#别名-v3"></a>别名</h3><p>包装器-Wrapper</p><h3 id="结构-v4"><a class="header-anchor" href="#结构-v4"></a>结构</h3><p><a href="https://imgtu.com/i/gpGYfe"><img src="https://z3.ax1x.com/2021/04/26/gpGYfe.jpg" alt="装饰器模式"></a></p><p>Component是顶层接口，分别别目标对象和装饰器对象实现，装饰器对象通过内部持有目标对象的一个引用，客户端在调用目标类的时候，实际上是通过调用装饰类的提供出来的方法。装饰器在持有目标类的引用后就可以在执行方法前后都进行自定义增强处理，从而实现对目标类的增强</p><p>装饰器的优点在于：</p><ol><li>比静态继承灵活且无强依赖性</li><li>避免类继承结构过高</li></ol><p>这个缺点不甚理解：</p><blockquote><p>装饰类和目标类是不一样的，装饰类对于其他对象来说是透明的</p></blockquote><ol start="4"><li>过多的类(个人认为不是缺点，类按照职责划分本来就会产生更多的小类，而不是一个大而全的类)</li></ol><h2 id="外观模式"><a class="header-anchor" href="#外观模式"></a>外观模式</h2><blockquote><p>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，使得子系统中的一组接口都实现该接口，对外提供一个相同的接口。</p></blockquote><h3 id="动机"><a class="header-anchor" href="#动机"></a>动机</h3><p>复杂的子系统有多个类，每个类暴露出一些公共方法这些方法相互调用并对外提供一个服务，这个时候外部客户端并不关心子系统的内部调用，就可以通过Facade的模式将子系统暴露出去的接口整理成独立的接口，如下图所示：<br><a href="https://imgtu.com/i/gCcIqx"><img src="https://z3.ax1x.com/2021/04/27/gCcIqx.png" alt="门面模式"></a></p><ul><li><p>Facade<br>将请求发送给子系统对象</p></li><li><p>Subsystem class<br>实现子系统功能<br>处理有Facade指派的任务</p></li></ul><h3 id="实例-v2"><a class="header-anchor" href="#实例-v2"></a>实例</h3><ul><li><p>JdbcUtil.java<br>JdbcUtil将有关jdbc的操作封装成为一个方法，对外提供服务</p></li><li><p>RequestFacade.java<br>Tomcat的RequestFacade.java</p></li></ul><h2 id="享元模式"><a class="header-anchor" href="#享元模式"></a>享元模式</h2><blockquote><p>运用共享技术有效的支持大量细粒度的对象，通俗的来将就是缓存具体对象，在使用时返回该对象。与单例模式类似，区别在于单例模式要保证全局唯一。享元模式不用保证全局唯一，并且可以继续创建对象。享元模式会通过内部状态和外部状态两个标识来保证对象行为的内部一致性和外部差异性</p></blockquote><h3 id="结构-v5"><a class="header-anchor" href="#结构-v5"></a>结构</h3><p><a href="https://imgtu.com/i/gC5iBd"><img src="https://z3.ax1x.com/2021/04/28/gC5iBd.png" alt="享元模式"></a></p><h3 id="实例-v3"><a class="header-anchor" href="#实例-v3"></a>实例</h3><ul><li>String常量池</li><li>线程池</li></ul><h2 id="代理模式"><a class="header-anchor" href="#代理模式"></a>代理模式</h2><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问</p></blockquote><h3 id="别名-v4"><a class="header-anchor" href="#别名-v4"></a>别名</h3><p>Surrogate</p><h3 id="动机-v2"><a class="header-anchor" href="#动机-v2"></a>动机</h3><p>代理模式为对象提供了一个可自定义的访问对象，可以实现<b>远程代理</b>、<b>虚代理</b>、<b>保护代理</b>、<b>智能指引</b>等功能<br>虚代理:指的是也就是动态代理，将初始化延迟到运行时<br>保护代理/虚代理:都是对代理对象的增强</p><h3 id="结构-v6"><a class="header-anchor" href="#结构-v6"></a>结构</h3><p><a href="https://z3.ax1x.com/2021/04/28/gC5ujg.png">![代理模式]</a>](<a href="https://imgtu.com/i/gC5ujg">https://imgtu.com/i/gC5ujg</a>)</p><p>代理模式侧重于对目标对象的访问控制上，装饰模式侧重于对目标对象功能增强上。代理模式主要是对不可见的对象进行访问的代理。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-可复用面向对象软件设计的基础-对象创建型模式</title>
      <link href="2021/04/17/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/04/17/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>设计模式-可复用面向对象软件设计的基础-对象创建型模式</h1><h2 id="对象创建型模式"><a class="header-anchor" href="#对象创建型模式"></a>对象创建型模式</h2><blockquote><p>对象创建型模式抽象了对象的实例化过程.帮助一个系统独立于如何创建、组合和表示它的那些对象。一个类型创建模式使用继承改变被实例化的类，而一个对象创建型模式将实例化委托给另外一个对象</p></blockquote><p>创建型模式的主要特点是该模式聚焦于对象的创建上，关注于对象创建的过程。因为同一个类不同的实例化过程会对该类所表现出来的行为产生影响。从而在创建时，通过不同的设计模式将该过程抽象出来适应不同的场景</p><p>创建型模式主要有以下5种类型：</p><ol><li>抽象工厂模式</li><li>构造器模式</li><li>工厂模式</li><li>原型模式</li><li>单例模式</li></ol><h2 id="抽象工厂模式"><a class="header-anchor" href="#抽象工厂模式"></a>抽象工厂模式</h2><h3 id="意图"><a class="header-anchor" href="#意图"></a>意图</h3><blockquote><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</p></blockquote><h3 id="别名"><a class="header-anchor" href="#别名"></a>别名</h3><p>Kit</p><h3 id="动机"><a class="header-anchor" href="#动机"></a>动机</h3><p>为解决对象工厂的创建问题。当一个业务场景需要多个工厂实例来创建对象时，如何创建这些工厂就可以使用抽象工厂模式来进行。这个模式操作的对象是是工厂对象，而不是具体工厂对象产生的实例对象。这样设计的好处是对外部来说只需要依赖AbstractFactory和AbstractProduct就可以了，不用关系具体BeanFactory和ProductFactory是怎么样被创建和依赖的。对AbstractFactory内部实现了Factory和Product的聚合。坏处在于增加一个Producty时会同时修改Abstract和创建新的具体的BeanFactory。</p><h3 id="结构"><a class="header-anchor" href="#结构"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg" alt="抽象工厂模式"></p><h3 id="实例"><a class="header-anchor" href="#实例"></a>实例</h3><h4 id="简单实现"><a class="header-anchor" href="#简单实现"></a>简单实现</h4><ul><li>AbstractFactory.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>AbstractFactory抽象类定义获取对象的方法</p><ul><li>ObjectFactory1</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectFactory1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Shape</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> objectType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>objectType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"object1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>objectType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"object2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ObjectFactory1作为工厂类继承抽象工厂类，并实现具体的抽象方法生产对象</p><ul><li>Client</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1. 生成工厂类</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractFactory</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> classType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2. 通过工厂类生成产品</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">AbstractFactory</span> factory <span class="token operator">=</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"classType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"objectType"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在客户端中主要有两步，第一个是获取具体的工厂类。第二个是根据工厂类获取对应的产品。从上面的代码中我们可以看到工厂的生成和产品的生成都需要按照不同的类型来选择生成的具体实现。抽象工厂模式管理的是工厂类。</p><h4 id="Spring中的抽象工厂模式"><a class="header-anchor" href="#Spring中的抽象工厂模式"></a>Spring中的抽象工厂模式</h4><p><B>AbstractBeanFactory</B>主要有三个实现类<B>XmlBeanFactory(已过时)</B>、<B>AbstractAutowireCapableBeanFactory</B>、<B>DefaultListableBeanFactory</B><br>其中主要使用的是作为自动装配的工厂类AbstractAutowireCapableBeanFactory</p><h2 id="build模式"><a class="header-anchor" href="#build模式"></a>build模式</h2><h3 id="意图-v2"><a class="header-anchor" href="#意图-v2"></a>意图</h3><blockquote><p>将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同含义的对象。构造者模式要求构造对象足够复杂并且能够按照部分参数进行处理，构造者模式将内部对象初始化的细节封装起来，外部对象之间调用即可</p></blockquote><h3 id="结构-v2"><a class="header-anchor" href="#结构-v2"></a>结构</h3><p><a href="https://imgtu.com/i/cqsLl9"><img src="https://z3.ax1x.com/2021/04/22/cqsLl9.png" alt="构造者模式"></a></p><h3 id="实例-v2"><a class="header-anchor" href="#实例-v2"></a>实例</h3><ul><li>lombok中的@Builder</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserParam</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//DELOMBOK之后的代码</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserParam</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>        <span class="token class-name">UserParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserParamBuilder</span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserParamBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserParamBuilder</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>            <span class="token class-name">UserParamBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">UserParamBuilder</span> <span class="token function">userName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">UserParamBuilder</span> <span class="token function">password</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">UserParam</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserParam</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"UserParam.UserParamBuilder(userName="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">+</span> <span class="token string">", password="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到lombok的@Builder注解只是在内部设置了一个静态方法和静态类来生成build方式，将<B>Direct</B>的职责交给类的使用者去处理了。</p><h2 id="工厂模式"><a class="header-anchor" href="#工厂模式"></a>工厂模式</h2><h3 id="意图-v3"><a class="header-anchor" href="#意图-v3"></a>意图</h3><blockquote><p>定义一个创建对象的接口，让子类决定实例化具体的类对象。Factort Method使得类的实例化延迟到了子类使用的时候。</p></blockquote><h3 id="别名-v2"><a class="header-anchor" href="#别名-v2"></a>别名</h3><p>虚构造器(Virtual Constructor)</p><h3 id="结构-v3"><a class="header-anchor" href="#结构-v3"></a>结构</h3><p><a href="https://imgtu.com/i/cOCXVJ"><img src="https://z3.ax1x.com/2021/04/22/cOCXVJ.jpg" alt="工厂模式"></a></p><p>在图中可以看到产品必须抽象出一个接口，然后在通过工厂定义创建产品的方法。通过集成工厂接口实现不同的产品的初始化过程。</p><h3 id="实例-v3"><a class="header-anchor" href="#实例-v3"></a>实例</h3><h4 id="spring工厂模式"><a class="header-anchor" href="#spring工厂模式"></a>spring工厂模式</h4><ul><li>FactoryBean.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取具体的类</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token comment">//获取类的类型</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//是否是单例</span><span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型T是抽象的产品的接口,在FactoryBean的实现类上可以根据构造器或者在调用getObject()方法之前调用初始化方法来对生成的对象进行自定义的参数配置,这样做的好处是可以不改变调用端的逻辑从而增加一个产品子类</p><p>在具体的实现上,工厂模式有两种方式,1. 工厂类作为抽象类,提供抽象方法,由实现该类的子类具体的去做初始化产品的操作;2.工厂类不做为抽象类,并且提供默认的产品创建</p><h2 id="原型模式"><a class="header-anchor" href="#原型模式"></a>原型模式</h2><h3 id="意图-v4"><a class="header-anchor" href="#意图-v4"></a>意图</h3><blockquote><p>用原型实例指定创建对象的种类,并且通过拷贝这些原型创建新的对象</p></blockquote><h3 id="结构-v4"><a class="header-anchor" href="#结构-v4"></a>结构</h3><p><a href="https://imgtu.com/i/cOmRSJ"><img src="https://z3.ax1x.com/2021/04/23/cOmRSJ.png" alt="原型模式"></a></p><p>原型模式是通过拷贝一个现有对象生成一个新的对象,需要主要的是原型模式是深拷贝而不是浅拷贝</p><h2 id="单例模式"><a class="header-anchor" href="#单例模式"></a>单例模式</h2><h3 id="意图-v5"><a class="header-anchor" href="#意图-v5"></a>意图</h3><blockquote><p>保证一个全局只有一个类,并且提供一个访问它的全局访问点</p></blockquote><h3 id="结构-v5"><a class="header-anchor" href="#结构-v5"></a>结构</h3><p><a href="https://www.runoob.com/wp-content/uploads/2014/08/62576915-36E0-4B67-B078-704699CA980A.jpg"><img src="https://z3.ax1x.com/2021/04/23/cOmRSJ.png" alt="单例模式"></a></p><h3 id="实例-v4"><a class="header-anchor" href="#实例-v4"></a>实例</h3><p>Spring中的单例模式</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-可复用面向对象软件设计的基础</title>
      <link href="2021/04/15/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/15/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>设计模式-可复用面向对象软件设计的基础</h1><h2 id="设计模式简介"><a class="header-anchor" href="#设计模式简介"></a>设计模式简介</h2><ul><li>设计模式列表</li></ul><ol><li>Abstract Factory</li></ol><blockquote><p>提供一个<b>创建</b>一系列相关或相互依赖对象的接口,而无需指定它们具体的类</p></blockquote><ol start="2"><li>Adapter</li></ol><blockquote><p>将一个类的接口转换成客户端希望的另外一个接口.Adapter模式使得原本由于接口不兼容而不能在一起工作的那些类可以在一起工作</p></blockquote><ol start="3"><li>Bridge</li></ol><blockquote><p>使得抽象部分与它的实现部分分离,使得它们都可以独立的变化</p></blockquote><ol start="4"><li>Builder</li></ol><blockquote><p>将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的对象</p></blockquote><ol start="5"><li>Chain of Responsibility</li></ol><blockquote><p>为解除请求的发送者和接受者之间的耦合,使得多个对象都有机会处理这个请求.将这些处理对象连成链,并沿着这条链传递该请求,直到链尾</p></blockquote><ol start="6"><li>Command</li></ol><blockquote><p>将一个请求封装成为一个对象,从而使你可用不同的请求对客户进行参数化;对请求排队或记录日志,以及支持可取消的操作</p></blockquote><ol start="7"><li>Composite</li></ol><blockquote><p>将对象组合成树形结构以表示’部分-整体’的层次机构.Composite使得客户对单个或复合对象的使用具有一致性</p></blockquote><ol start="8"><li>Decorator</li></ol><blockquote><p>动态的给一个对象添加一些额外的职责.就扩展功能而言Decorator比字节生产子类更为灵活</p></blockquote><ol start="9"><li>Facade</li></ol><blockquote><p>为子系统中的一组接口提供一个一致的界面,Facade定义了一个高层次的接口,这个接口使得子系统更加易用</p></blockquote><ol start="10"><li>Factory Method</li></ol><blockquote><p>定义一个用于创建对象的接口,让子类去决定将那个类进行实列化,Factory Method使得类的实例化延迟到了子类中</p></blockquote><ol start="11"><li>Flyweight</li></ol><blockquote><p>运用共享技术有效的支持大量细粒度的对象</p></blockquote><ol start="12"><li>Interpreter</li></ol><blockquote><p>给定一个语言,定义它的文法的一种表示,并定义一个解释器,该解释器使用该表示来解释语言中的句子</p></blockquote><ol start="13"><li>Iterator</li></ol><blockquote><p>提供一种方法顺序访问一个聚合对象中的各个元素,而又不需要暴露该对象的内部表示</p></blockquote><ol start="14"><li>Mediator</li></ol><blockquote><p>用一个中介对象来封装一系列的对象交互.中介者使得各个对象不需要显示的相互引用,从而使得其耦合松散,而且可用独立地改变它们之间的交互</p></blockquote><ol start="15"><li>Memento</li></ol><blockquote><p>在不破坏封装性的前提下,捕获一个对象的内部状态,并在该对象之外保存这个状态.这样以后就可以将该对象恢复到保存状态</p></blockquote><ol start="16"><li>Observer</li></ol><blockquote><p>定义对象间的一种一对多的依赖关系,以便于当一个对象的状态发生改变时,所有依赖于它的对象都可以得到通知并自动刷新</p></blockquote><ol start="17"><li>Prototype</li></ol><blockquote><p>用原型实例指定创建对象的种类,并通过拷贝这个原型来创建新的对象</p></blockquote><ol start="18"><li>Proxy</li></ol><blockquote><p>为其他对象提供一个代理以控制这个对象的访问</p></blockquote><ol start="19"><li>Singleton</li></ol><blockquote><p>保证一个类仅有一个实例.并提供一个访问它的全局访问点</p></blockquote><ol start="20"><li>State</li></ol><blockquote><p>允许一个对象在其内部状态改变时改变它的行为.对象看起来似乎修改了它所属的类.</p></blockquote><ol start="21"><li>Strategy</li></ol><blockquote><p>定义一系列的算法,把它们封装起来,使得它们之间可以相互替换,使得算法的变化可以独立与客户</p></blockquote><ol start="22"><li>Template Method</li></ol><blockquote><p>定义一个操作中算法的骨架,而将一些具体步骤延迟到子类中去实现.Template Method使得之类可以复用父类定义的算法,并且进行细节的修改</p></blockquote><ol start="23"><li>visitor</li></ol><blockquote><p>表示一个作用于某对象结构中的各元素的操作.使得你可以在不改变各元素类的前提下定义作用于这些元素的新操作</p></blockquote><ul><li>根据类型划分</li></ul><table><thead><tr><th></th><th></th><th>目的</th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td>创建型</td><td>结构型</td><td>行为型</td></tr><tr><td>范围</td><td>类</td><td>Factory Method</td><td>Adapter(类)</td><td>Interpreter</br>Template Method</td></tr><tr><td></td><td>对象</td><td>Abstract Factory</br>Builder</br>Prototype</br>Singleton</td><td>Adapter(对象)</br>Bridge</br>Composite</br>Decorator</br>Facade</br>Flyweight</br>Proxy</br></td><td>Chain of Responsibility</br>Command</br>Iterator</br>Mediator</br>Memento</br>Observer</br>State</br>Strategy</br>Visitor</td></tr></tbody></table><ul><li>设计模式之间的关系<br><a href="https://imgtu.com/i/cRdD4H"><img src="https://z3.ax1x.com/2021/04/15/cRdD4H.jpg" alt=""></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找两个正序数组中的中位数</title>
      <link href="2021/04/02/13.LeetCode/10.%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
      <url>2021/04/02/13.LeetCode/10.%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1>寻找两个正序数组中的中位数_LeetCode4</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><blockquote><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p></blockquote><p>示例 1：<br>输入：nums1 = [1,3], nums2 = [2]<br>输出：2.00000<br>解释：合并数组 = [1,2,3] ，中位数 2</p><p>示例 2：<br>输入：nums1 = [1,2], nums2 = [3,4]<br>输出：2.50000<br>解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</p><p>示例 3：<br>输入：nums1 = [0,0], nums2 = [0,0]<br>输出：0.00000</p><p>示例 4：<br>输入：nums1 = [], nums2 = [1]<br>输出：1.00000</p><p>示例 5：<br>输入：nums1 = [2], nums2 = []<br>输出：2.00000</p><p>提示：<br>nums1.length == m<br>nums2.length == n<br>0 &lt;= m &lt;= 1000<br>0 &lt;= n &lt;= 1000<br>1 &lt;= m + n &lt;= 2000<br>-106 &lt;= nums1[i], nums2[i] &lt;= 106</p><h2 id="第一种解法"><a class="header-anchor" href="#第一种解法"></a>第一种解法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转置矩阵</title>
      <link href="2021/04/02/13.LeetCode/9.%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5/"/>
      <url>2021/04/02/13.LeetCode/9.%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1>转置矩阵_LeetCode867</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><blockquote><p>给你一个二维整数数组 matrix， 返回 matrix 的 转置矩阵 。矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p></blockquote><p>示例 1：</p><p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[[1,4,7],[2,5,8],[3,6,9]]<br>示例 2：</p><p>输入：matrix = [[1,2,3],[4,5,6]]<br>输出：[[1,4],[2,5],[3,6]]</p><h2 id="解法"><a class="header-anchor" href="#解法"></a>解法</h2><h3 id="第一种解法"><a class="header-anchor" href="#第一种解法"></a>第一种解法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transpose</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> matrix<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种解法错误,因为只考虑了行数和列数相等的情况,没有考虑行数和列数不相等的二维数组</p><h3 id="第二种解法"><a class="header-anchor" href="#第二种解法"></a>第二种解法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transpose</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种解法能通过,但是内存消耗比较大,因为是先创建了一个数组,然后对原数组中的每个元素遍历确定位置</p><h3 id="第三种解法"><a class="header-anchor" href="#第三种解法"></a>第三种解法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transpose</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r <span class="token operator">*</span> c<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp<span class="token punctuation">[</span>i<span class="token operator">/</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">%</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token operator">%</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">/</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种解法巧妙的运用到了取余和模除两种,但是在空间复杂度上和第二种类似,由于数组具有不可变性,因此想要实现空间复杂度小的代码很难实现.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL总结</title>
      <link href="2021/03/30/6.mysql/MySQL%E6%80%BB%E7%BB%93/"/>
      <url>2021/03/30/6.mysql/MySQL%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过以上几篇文章分别介绍了MySQL的文件系统/索引/锁/事务等功能点,这篇文章将对这些知识点进行汇总,描述出MySQL大概的架构</p></blockquote><h2 id="文件数据"><a class="header-anchor" href="#文件数据"></a>文件数据</h2><p>MySQL在文件数据上可以划分为<B>MySQL系统数据</B>/<B>存储引擎数据</B></p><ul><li>文件数据<ul><li>系统文件</li><li>参数文件<br>参数文件指的是系统运行时的参数,主要分为’静态参数’和’动态参数’</li><li>日志文件</li><li>系统错误日志文件</li><li>二进制(binlog)<br>binlog目前有三种记录格式分别是STATEMENT/ROW/MIXED;RC和STATEMENT格式不兼容,因为binlog的是在事务进行提交时写入</li><li>慢查询日志</li><li>查询日志</li><li>套接字文件<br>套接字文件是UNIX下使用套接字链接方式打开的socket文件</li><li>pid文件</li><li>表结构文件<br>定义表结构的文件,每个表都有一个frm的表结构文件</li></ul></li><li>InnoDB存储引擎文件<ul><li>表空间文件<br>实际存储数据的文件,名称为ibdata1的文件作为共享表空间文件,MySQL也支持为每个表单独设置表空间文件,后缀名为.ibd</li><li>redolog<br>redoLog又称为重做日志,文件名称为ib_logfile0/ib_logfile1</li></ul></li></ul><p><a href="https://imgtu.com/i/cESwqK"><img src="https://z3.ax1x.com/2021/04/01/cESwqK.png" alt="cESwqK.png"></a></p><h2 id="索引系统"><a class="header-anchor" href="#索引系统"></a>索引系统</h2><p>MySQL的索引系统主要是由于B+ Tree索引作为底层数据结构,也有采用Hash自适应索引场景.</p><ul><li>索引<ul><li>分类<ul><li>B+Tree索引<br>B+ TREE索引作为MySQL底层数据结构的好处是在于B+TREE平衡且层级不高并且叶子节点可以作为聚集索引</li><li>全文索引<br>MySQL的全文索引也是采用倒排算法,通过关键字来进行文档映射,现实工作中未涉及到,因此未详细研究</li><li>Hash索引<br>InnoDB只支持自适应的Hash索引,不能显示的去创建并且要满足Hash索引自动创建的条件(等值查询/命中范围/查询频率)</li></ul></li></ul></li></ul><h2 id="锁"><a class="header-anchor" href="#锁"></a>锁</h2><ul><li>锁<ul><li>锁分类<ul><li>行级锁<ul><li>共享锁(S锁)<br>共享锁允许事务同时读取同一行数据</li><li>排他锁(X锁)<br>排他锁是独占锁,不允许其他事务读取或操作数据</li></ul></li><li>表锁<ul><li>意向共享锁(IS锁)<br>意向共享锁是表维度的锁,意向共享锁是在事务读取表中某行数据时候自动加上的,同理意向排他锁也是这个逻辑;设计意向锁的主要目的是在于当事务想要获取到表锁时,可以直接通过是否能获取到意向锁来判断,相当于一个表级别的锁标志</li><li>意向排他锁(IX锁)</li></ul></li><li>锁算法<ul><li>行锁<br>行锁的作用范围是对数据的某一行进行操作</li><li>间隙锁<br>间隙锁是对数据间隙进行上锁,这样可以防止数据出现幻读的情况</li><li>Next-Key Lock<br>行锁+间隙锁就是Next-Key Lock</li><li>锁降级<br>当发现可以用行数时,Next-Key会降级成行锁</li></ul></li></ul></li></ul></li></ul><h2 id="事务"><a class="header-anchor" href="#事务"></a>事务</h2><ul><li>事务<ul><li>事务的隔离级别<ul><li>串行化(Serializable)</li><li>读未提交(Read Uncommitted)</li><li>读已提交(Read Committed)</li><li>可重复读(Repeatable Read)</li></ul></li><li>串行化<br>串行化指的是事务按照串行化执行的结果执行,InnoDB的串行化是通过增加读锁的方式来实现的</li><li>读未提交<br>读未提交指的是当前事务可以读取到其他事务尚未提交的数据,底层实现是当前事务直接返回记录上的最新值</li><li>读已提交<br>读已提交指的是事务中的SQL在执行时会去读取最后一次提交的数据信息</li><li>可重复读<br>可重复读指的是事务开始时会分配一个全局唯一且自增的事务ID,并且可重复读只能读取到小于等于该事务id的数据;快照数据是通过UNDO LOG实现的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="2021/03/27/6.mysql/MySQL%E4%BA%8B%E5%8A%A1/"/>
      <url>2021/03/27/6.mysql/MySQL%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="事务的定义"><a class="header-anchor" href="#事务的定义"></a>事务的定义</h2><p>事务是数据库与文件系统最重要的差异之一,数据库通过事务保证了数据的ACID特性,分别是原子性/一致性/隔离性/持久性</p><h2 id="事务的分类"><a class="header-anchor" href="#事务的分类"></a>事务的分类</h2><p>事务可以划分为:<br>1.扁平事务以及带有保存点的扁平事务<br>2.链事务<br>3.嵌套事务<br>4.分布式事务</p><h2 id="事务的实现"><a class="header-anchor" href="#事务的实现"></a>事务的实现</h2><p>InnoDB通过日志系统来实现事务,redo log可以保证事务的原子性/一致性/持久性,undo log可以保证事务的原子性和持久性</p><h3 id="redo-log的作用"><a class="header-anchor" href="#redo-log的作用"></a>redo log的作用</h3><p>redo log是重做日志,通过每次事务提交前先修改该事务要修改的页,在提交过程中如果中断,通过redo log就可以继续提交事务</p><h3 id="undo-log的作用"><a class="header-anchor" href="#undo-log的作用"></a>undo log的作用</h3><p>undo log是回滚日志,通过记录每个事务开始时的数据,在回滚发生中断时,可以根据undo log 继续进行事务回滚</p><h2 id="redo-log"><a class="header-anchor" href="#redo-log"></a>redo log</h2><p>redo log由两部分组成’redo log buffer’和’redo log file’,在进行事务connit之前都会将事务的所有日志写入日志文件中进行持久化<br>InnoDB提供一个参数’innodb_flush_log_at_trx_commit’来控制redo log的刷盘策略,0:由master thread进行控制 1:每次提交后进行同步刷盘 2:每次提交后只是将数据提交给文件系统,不进行主动刷盘操作</p><h2 id="undo-log"><a class="header-anchor" href="#undo-log"></a>undo log</h2><p>undo log是回滚日志,是逻辑日志并不是redo log的物理日志,只是在逻辑上保证了数据回滚到原始状态.例如用户执行一个insert操作,在undo log里面就需要一个delete操作</p><h2 id="MVVC"><a class="header-anchor" href="#MVVC"></a>MVVC</h2><p>多版本控制,InnoDB会在行记录上默认增加两个隐藏列来作为MVVC实现的基础,分别是DB_TRX_ID-最新一次事务提交版本号/DB_ROLL_PTR-删除事务的版本号<br>数据行和undo log组成了不同版本之间的数据链,通过对比版本号和undo log日志将所需要的数据还原出来</p><p>undo log还会采用段的方式进行保存,在不同的段中存放undo log page,通过这样的方式进行存储</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引与锁</title>
      <link href="2021/03/21/6.mysql/MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%94%81/"/>
      <url>2021/03/21/6.mysql/MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a class="header-anchor" href="#索引"></a>索引</h2><p>InnoDB存储引擎支持以下几种索引结构:</p><ol><li>B+树索引</li><li>全文索引</li><li>哈希索引</li></ol><h3 id="B-树索引"><a class="header-anchor" href="#B-树索引"></a>B+树索引</h3><p>结构为’B+树’的索引有聚集索引/辅助索引<br>聚集索引是以主键来构造B+树,在叶子节点中存放行记录,也就是叶子节点称为数据页.<br>辅助索引是以索引key来构造B+树,叶子节点记录的是主键,因此在进行查找是会进行一次读取聚集索引的操作</p><h3 id="全文索引"><a class="header-anchor" href="#全文索引"></a>全文索引</h3><p>全文索引指的是将存储与数据库中的全部数据中的任意内容信息查询出来的技术.<br>全文索引主要是用倒排索引的技术来进行实现,倒排索引需要用到一个索引辅助表,对全文中的值进行分词和索引定位</p><h3 id="哈希索引"><a class="header-anchor" href="#哈希索引"></a>哈希索引</h3><p>哈希索引指的是用哈希算法来存储索引的结构,InnoDB的哈希索引不能由用户自定义,而是由客户进行多次查询和命中某种条件后会将B+树索引进行升级转换成哈希索引,这种算法有点类似JVM中对热点代码的JIT技术,提前将热点数据拿出来</p><h2 id="锁"><a class="header-anchor" href="#锁"></a>锁</h2><blockquote><p>锁是数据库系统区别于文件系统的一个关键特性.锁机制用于管理对共享资源的并发访问.InnoDB存储引擎会在行级别上对表数据上锁.</p></blockquote><h3 id="锁类型"><a class="header-anchor" href="#锁类型"></a>锁类型</h3><p>InnoDB存储引擎实现了两种标准的行级锁</p><ul><li>共享锁(S Lock),允许事务读一行数据</li><li>排他锁(X Lock),允许事务删除或更新一行数据</li></ul><p>InnoDB存储引擎支持多粒度锁定,这种锁定允许事务在行级上的锁和表级上的锁同时存在.<br>为了支持在不同粒度上进行加锁操作,InnoDB存储引擎支持意向锁,意向锁可以分为’意向共享锁’/‘意向排他锁’<br>意向共享锁:事务想要获得一张表中的某几行的共享锁<br>意向排他锁:事务想要获得一张表中的某几行的排他锁</p><h3 id="一致性非锁定读"><a class="header-anchor" href="#一致性非锁定读"></a>一致性非锁定读</h3><p>'一致性非锁定读’指的是InnoDB通过行的多版本控制系统,在读取时不必等待X锁的释放.<br>RC隔离级别下,一致性非锁定读一定是读取最新的一份快照数据<br>RR隔离级别下,一致性非锁定读一定是读取事务开始时的一份快照数据</p><h3 id="一致性锁定读"><a class="header-anchor" href="#一致性锁定读"></a>一致性锁定读</h3><p>InnoDB通过两种操作显式的支持一致性锁定读,第一种是</p><ul><li>SELECT * FOR UPDATE 加X锁</li><li>SELECT * LOCK IN SHARE MODE 加S锁</li></ul><h3 id="自增计数"><a class="header-anchor" href="#自增计数"></a>自增计数</h3><p>InnoDB的自增计数是通过表上的一个自增长计数器来进行的,当插入SQL执行完毕后该自增计数器就完成自增操作并提交</p><h3 id="锁算法"><a class="header-anchor" href="#锁算法"></a>锁算法</h3><ol><li>Record Lock:行锁</li><li>Gap Lock:间隙锁</li><li>Next-Key Lock:行锁+间隙锁</li></ol><ul><li>Next-Key Lock是默认InnoDB默认采用的锁定算法,但是当查询时使用到了聚集索引时会降级成’Record Lock’锁.<br>这里有一个小疑问,InnoDB对于Insert的操作会检查插入记录的下一条记录是否被锁定,如果锁定则不允许操作</li></ul><p>Next-Key Loc只在RR隔离模式下使用,主要是为了解决RR模式下的幻读问题(这是又有一个疑问了既然RR模式读取的是数据的快照,按理说这个时候应该没有新插入数据的快照,为什么要这样设计喃)</p><ul><li><p>阻塞<br>阻塞指的是不同锁之间的兼容关系,在某些时刻需要等待另外一个事务中的锁释放.在默认情况下InnoDB的存储引擎在大部分情况下都不会对异常进行回滚.</p></li><li><p>死锁<br>死锁指的是两个以上的事务在执行过程中相互等待.解决死锁最简单的方法是超时机制.MySQL检测超时机制是通过’等待图’的机制来进行死锁检测.</p></li><li><p>等待图检测机制<br>通过保存锁信息和事务等待链表形成一张图结构,检测图中是否存在回路,如果存在回路证明发生了死锁.</p></li><li><p>死锁回滚<br>对于死锁异常,InnoDB会选择回滚UNDO量最小的事务进行回滚</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL文件和表结构</title>
      <link href="2021/03/18/6.mysql/MySQL%E6%96%87%E4%BB%B6%E5%92%8C%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
      <url>2021/03/18/6.mysql/MySQL%E6%96%87%E4%BB%B6%E5%92%8C%E8%A1%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL文件体系"><a class="header-anchor" href="#MySQL文件体系"></a>MySQL文件体系</h2><p>MySql文件体系主要分为:</p><ol><li>参数文件<br>参数文件的定义是作为存储MySql初始化参数的作用,负责记录各种参数</li><li>日志文件:<br>这里的日志文件主要是系统操作日志,主要有错误日志文件,二进制日志文件,慢查询日志文件等</li><li>socket文件:<br>UNIX域套接字所需文件</li><li>pid文件<br>MySql实例进程的ID文件</li><li>MySQL表结构文件<br>用来存放MySQL表结构定义文件</li><li>存储引擎文件<br>存储引擎文件存放了真正的记录和索引数据</li></ol><p>主要关心的是日志文件和存储引擎文件</p><h3 id="日志文件"><a class="header-anchor" href="#日志文件"></a>日志文件</h3><p>日志文件主要有错误日志,二进制日志,慢查询日志,查询日志文件<br>二进制日志就是bin_log文件,会记录所有对MySql数据库执行更新的操作,就算最后数据未发生改变;<br>当使用支持事务的存储引擎时,所有未提交的二进制日志会被记录到一个缓存中(当超过缓存大小时会记录到临时文件中),等待该事务提交时直接将缓存刷新到bin_log中<br>bin_log的记录格式有三种(记录执行SQL,记录更新数据,混合模式),在’记录执行SQL’的模式下主从复制不能使用RC模式</p><h3 id="存储引擎文件"><a class="header-anchor" href="#存储引擎文件"></a>存储引擎文件</h3><p>存储引擎文件主要有’表空间文件’,重做日志文件(redo log)</p><h4 id="表空间文件"><a class="header-anchor" href="#表空间文件"></a>表空间文件</h4><p>表空间文件指的是实际存储数据的文件,分为两种类型默认的表空间,这种表空间是共享数据存储的模式,另外一种是独自的表空间,为每一张表单独生产独立的表空间文件存放数据/索引/插入缓冲BITMAP,但是该表其余的数据还是放到默认的表空间中</p><h4 id="重做日志文件"><a class="header-anchor" href="#重做日志文件"></a>重做日志文件</h4><p>重做日志文件是innoDB用来保证数据完整性的关键,默认采用一个重做日志组下面有两个镜像重做日志文件的架构.<br>redo_log是在sql执行过程中不断的进行写入和复制,这里和bin_log有所差异,bin_log是在事务提交后进行的写入.<br>redo_log的记录对象是对每个页的更改的物理记录,redo_log记录的是向前的更新记录.</p><h2 id="MySQL表结构"><a class="header-anchor" href="#MySQL表结构"></a>MySQL表结构</h2><p>MySQL的文件结构是如何数据如何在物理上的结构,MySQL对于数据在逻辑上的结构可以划分为索引组织表,InnoDO的存储结构,行记录结构,页记录结构以及视图等</p><h3 id="数据存储的方式"><a class="header-anchor" href="#数据存储的方式"></a>数据存储的方式</h3><p>数据存储格式可以分为’堆表’/‘索引组织表’</p><ul><li>堆表指的是数据的存放是无序的,是根据空闲磁盘空间来决定存放位置;</li><li>索引组织表指的是在存放数据时是按照主键索引来进行存放的.InnoDB的B+树索引结构就是一种索引组织表的形式.</li></ul><h3 id="InnoDB逻辑存储结构"><a class="header-anchor" href="#InnoDB逻辑存储结构"></a>InnoDB逻辑存储结构</h3><p>InnoDB的逻辑存储结构划分为4级,分别是表空间-段空间-区空间-页空间,页空间上存储的就是一行一行的数据了</p><h3 id="表空间"><a class="header-anchor" href="#表空间"></a>表空间</h3><p>表空间是InnoDB逻辑存储上最上层的操作单位,一个表空间存储了所属该表的全部数据(data,index)</p><h3 id="段空间"><a class="header-anchor" href="#段空间"></a>段空间</h3><p>对表空间内的数据按照类型进行划分,又可以划分为数据段/索引段/回滚段等,这些不同的类型数据,被称为段空间</p><p>------逻辑-物理分割层------</p><h3 id="区空间"><a class="header-anchor" href="#区空间"></a>区空间</h3><p>区空间是由连续的磁盘空间组成,默认区空间大小为1MB,为了保证区空间的连续性还会一次向磁盘申请多个区空间.区空间实际存储了段空间内的数据.</p><h3 id="页空间"><a class="header-anchor" href="#页空间"></a>页空间</h3><p>页空间是InnoDB最小的磁盘管理单位,在InnoDB中每个页的大小为16KB,因此一个区可以存储64个页.页按照类型可以划分为</p><ol><li>数据页</li><li>undo页</li><li>系统页</li><li>事务数据页</li><li>插入缓冲页(BitMap/Free List)</li><li>二进制大对象页</li></ol><h3 id="行"><a class="header-anchor" href="#行"></a>行</h3><p>InnoDB中的数据是按照行来进行存储的,行数据的记录格式按照类型可以分为两类.Compact和Redundant两种类型.</p><ul><li><p>Redundant<br>Redundant类型是为了兼容之前版本而设计的</p></li><li><p>Compact<br>Compact格式是MySQL5.0中引入的,目的是高效的存储数据.</p></li><li><p>数据结构</p></li></ul><table><thead><tr><th>变长字段长度列表</th><th>NULL标志位</th><th>记录头信息</th><th>列数据…</th><th>事务ID</th><th>回滚指针</th></tr></thead><tbody></tbody></table><p>特别要注意’事务ID’和’回滚指针’这两项与隔离级别和事务回滚有关;<br>NULL,在行的数据结构中都不占用任何存储空间,因为在行的数据结构中有NULL标志位来处理NULL</p><ul><li>Varchar类型长度<br>Varchar类型在MySQL中的定义是最大能存储65535个字节,并且是该行所有的Varchar类型长度之和.由于一个页的大小为16KB,因此在Varchar的类型长度实际上是超过一页的大小,这样就会导致一页上不能存储一行数据.这里InnoDB采用了溢出页的方式来进行处理,page上只保留数据头信息,而溢出页上存储溢出的信息(溢出指的是数据大小溢出InnoDB设定的额定大小,而不是page页的大小)</li></ul><h2 id="InnoDB数据页结构"><a class="header-anchor" href="#InnoDB数据页结构"></a>InnoDB数据页结构</h2><p>InnoDB的数据页结构指的是页空间中数据页的结构,主要由数据系统信息和用户记录信息组成</p><ul><li>数据系统结构<br>数据系统结构主要是由文件头/页头/Infimun-Supremum Records/页目录等组成,标记了该块区域的系统信息</li><li>Infimun-Supremum Records指的是一个小于数据主键的区间起始值和终止值.这两个值会在B+树中进行存储</li><li>页目录指的是指的是标记用户数据的相对位置的结构</li></ul><blockquote><p>在进行数据查找时,会先从B+树中查询到数据对应的页,将页加载到内存中后,根据页目录来对用户数据进行二分查找(重点)</p></blockquote><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><ul><li><a href="https://my.oschina.net/xinxingegeya/blog/474895">MySQL聚簇索引&amp;聚集索引&amp;索引组织表</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL体系结构与存储引擎</title>
      <link href="2021/03/12/6.mysql/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>2021/03/12/6.mysql/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要介绍MySql的整体体系结构和存储引擎</p></blockquote><h2 id="体系结构"><a class="header-anchor" href="#体系结构"></a>体系结构</h2><p>概念上<B>数据库</B>是文件的集合,是按照一定的文件模型组织起来存放数据的结构;<B>数据库实列</B>是程序是一个用户进程,是用户对<B>数据库</B>进行操作的软件.</p><p>MySql主要由以下几部分组成</p><ol><li>连接池组件</li><li>管理服务和工具组件</li><li>SQL接口组件</li><li>查询分析器组件</li><li>优化器组件</li><li>缓冲组件</li><li>插件式存储引擎(存储引擎是基于表的 ,而不是基于数据库的)</li><li>物理文件</li></ol><h2 id="存储引擎"><a class="header-anchor" href="#存储引擎"></a>存储引擎</h2><ul><li><p>概述<br>存储引擎是与MySql物理文件进行交互的一种插件,存储引擎的底部是物理存储层,包括二进制日志文件,数据文件,错误文件,慢查询日志,undo/redo日志等</p></li><li><p>select的过程</p></li></ul><p>下图是一次select的过程<br><img src="https://s3.ax1x.com/2021/03/15/6r8Q7q.png" alt="select执行过程"></p><p>从图中得知存储引擎位于是物理文件和程序数据之间</p><ul><li>InnoDB的体系架构</li></ul><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-architecture.html"><img src="https://dev.mysql.com/doc/refman/8.0/en/images/innodb-architecture.png" alt="InnoDB架构"></a></p><ol><li>实列层<br>实列层主要包括’线程’和’内存’两个部分<br>a. 后台线程主要有</li></ol><ul><li>Master Thread<br>主线程主要负责将缓冲池中的数据异步刷新到磁盘中,保证数据的一致性</li><li>I/O Thread<br>I/O Thread 主要是负责AIO(Async IO)请求的回调</li><li>Purge Thread<br>Purge Thread的作用是事物在被提交后undolog就可能不在被使用了,因此需要Purge Thread线程来回收并分配的undo页</li><li>Page Cleaner Thread<br>Page Cleaner Thread的作用是回收分配脏页</li></ul><p>小结:Master Thread和I/O Thread一个负责异步刷新数据一个负责AIO的回调,Purge Thread和Page Cleaner Thread一个负责回收分配undolog一个负责回收分配脏页</p><p>b. 内存</p><ul><li>缓冲池<br>InnoDB存储引擎是基于磁盘存储,其中的数据是按照页的方式进行管理.由于CPU和磁盘速度中的差异因此用缓冲池技术来提高数据库的整体性能<br>缓冲池是一块内存区域,在数据库进行读取页操作时,会首先将从内存中的数据放到缓冲池中,在下一次读取相同页时,会直接读取缓冲池中的页数据.<br>对于数据库中的页的修改,首先会修改缓冲池中的页,然后以一定的频率刷新到磁盘,这种机制被称为CheckPoint<br>缓冲池中的数据页类型分为:</li></ul><ol><li>索引页</li><li>数据页</li><li>undo页</li><li>插入缓冲</li><li>自适应哈希索引</li><li>InnoDB存储的锁信息</li><li>数据字典</li></ol><ul><li><p>LRU list,Freen lst,Flush list<br>数据库中的缓冲池是通过LRU算法来进行管理,但是InnoDB中的LRU算法是经过优化的,将新数据放到列表3/8处</p></li><li><p>重做日志缓冲<br>重做日志首先会放到缓冲区,然后按照一定的频率刷新到日志文件上,有三种情况会刷新重做日志:1.Master Thread每一秒都会将日志缓冲刷新到日志文件,2.每个事务提交时都会将重做日志刷新到文件,3.当重做日志缓冲池剩余空间小于1/2时,会将日志刷新到文件上</p></li><li><p>额外的内存池<br>额外的内存池作为缓冲池的备用,但缓冲池不够的时候,就会从额外的内存池中申请</p></li><li><p>Checkpoint技术<br>Mysql中数据的持久性是通过Write Ahead Log策略来保证,也就是先写日志文件,在修改数据文件.当宕机导致数据丢失时,会通过重做日志来进行数据恢复.<br>如果重做日志太大会导致数据恢复的很慢,因此mysql使用CheckPoint的技术来保证,CheckPoint是将缓冲池中的内存页刷新到磁盘的动作</p></li></ul><h2 id="Master-Thread"><a class="header-anchor" href="#Master-Thread"></a>Master Thread</h2><p>Master Thread具有最高级别的线程优先级,内部有多个循环组成:主循环,后台循环,刷新循环,暂停循环.<br>Master Thread主要分为1s执行一次的操作:</p><ol><li>日志缓冲刷新到磁盘,即使这个事务还没提交</li><li>合并插入缓冲</li><li>最多刷新100个InnoDB的缓冲池中的脏页到磁盘</li><li>如果当前没有用户活动,就切换到backgroud loop<br>10s执行一次的操作:</li><li>刷新100个脏页到磁盘</li><li>合并至多5个插入缓冲</li><li>将日志缓冲刷新到磁盘</li><li>删除无用的Undo页</li><li>刷新100个或者10个脏页</li></ol><h2 id="InnoDB特点"><a class="header-anchor" href="#InnoDB特点"></a>InnoDB特点</h2><ol><li>插入缓冲(Insert Buffer)</li><li>两次写(Double Write)</li><li>自适应哈希索引(Adaptive Hash Index)</li><li>异步IO(Async IO)</li><li>刷新邻接页(Flush Neighbor Page)</li></ol><h2 id="插入缓冲"><a class="header-anchor" href="#插入缓冲"></a>插入缓冲</h2><ol><li>Insert Buffer<br>Insert Buffer是在插入数据时将辅助索引先放到Insert Buffer中,然后在按照一定的频率将Insert Buffer中的数据和辅助索引页的子节点进行合并,这样能够提高非聚集索引的插入性能</li><li>Change Buffer<br>Change Buffer作为Insert Buffer的升级,会将所有对非聚集索引的操作进行缓冲</li><li>Insert Buffer的内部结构<br>Insert Buffer的数据结构是B+树,在Mysql4.1之前每张表都有一颗B+树;在现在的版本中全局只有一颗B+树,负责对所有表的辅助索引进行Insert Buffer,默认为ibdata1<br>Insert Buffer的非叶子节点是由space(待插入记录表的表空间id),offer(偏移量)构成;叶子节点是由space,offer,metadata(操作辅助索引的元数据-顺序,标识,类型)</li><li>merge Insert Buffer的过程<br>在三种情况下,MySql会将Insert Buffer刷新到辅助索引文件中,并且虽然Insert Buffer是有序的,但是在刷新时,是随机选取Insert Buffer中的一个页进行刷新,做这个的目的是为了保证公平性而舍弃顺序性.以下的三种情况会进行Inser Buffer的刷新</li><li>辅助索引页被读取到缓冲池中</li><li>Insert Buffer BitMap记录Insert Buffer可用空间不足时</li><li>Master Thread线程对Insert Buffer的刷新</li></ol><h2 id="两次写"><a class="header-anchor" href="#两次写"></a>两次写</h2><p>两次写指的是当在直接写入某页时发生宕机,会有丢失数据的风险.通过向将脏页的数据转移到内存中的doublewrite buffer中,在将doublewrite中的数据同步写到共享表空间的物理磁盘文件上,第二次才将doublewrite buffer中的文件刷新到数据文件(.ibd)中,这样可以尽量保证数据文件的完整性</p><h2 id="自适应哈希索引"><a class="header-anchor" href="#自适应哈希索引"></a>自适应哈希索引</h2><p>自适应哈希索引指的是连续对热点数据的多次查询后会根据B+树索引生成对应的哈希索引,加快查询性能</p><h2 id="异步IO"><a class="header-anchor" href="#异步IO"></a>异步IO</h2><p>异步IO可以提高操作磁盘的效率,</p><h2 id="刷新邻接页"><a class="header-anchor" href="#刷新邻接页"></a>刷新邻接页</h2><p>刷新邻接页指的是对脏页所在区的页进行检测,发现是脏页一并进行刷新.</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL技术疑问</title>
      <link href="2021/03/10/6.mysql/MySQL%E6%8A%80%E6%9C%AF%E7%96%91%E9%97%AE/"/>
      <url>2021/03/10/6.mysql/MySQL%E6%8A%80%E6%9C%AF%E7%96%91%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录&lt;&lt;MySQL技术内幕-InnoDB存储引擎&gt;&gt;阅读中存在的疑问点</p></blockquote><ul><li>P77 日志文件</li></ul><blockquote><p>如果使用RC隔离级别会出现类似数据丢失更新的现象,从而出现主从数据库上的数据不一致</p></blockquote><p>bin_log的记录格式为’STATENEBT’是,会出现这样的情况为什么喃?</p><p>原因:</p><blockquote><ol><li>bin_log的记录顺序是commit的顺序,而不是执行顺序</li></ol></blockquote><ol start="2"><li>RC中SQL的执行是立即执行的<br>这样如果bin_log记录格式如果是sql,就会出现丢失数据的场景</li></ol><hr><ul><li>P268 锁</li></ul><blockquote><p>InnoDB对于Insert的操作会检查插入记录的下一条记录是否被锁定,如果锁定则不允许操作</p></blockquote><ul><li>P269 解决幻读</li></ul><blockquote><p>在RR模式下通过Next-Key Locking机制来解决幻读,既然MVVC是读取快照,为什么还需要Next-Key Locking机制来解决幻读问题</p></blockquote><p>InnoDB实际上是把读取拆分成两种类型</p><ul><li>快照读<br>通过读取undo log,并且对比版本号得到事务开始时的数据,这种主要是select 操作,对数据加s锁</li><li>当前读<br>当前读指的是通过Next-Key Locking 机制将对数据的读取操作序列化,解决幻读问题</li></ul><hr><ul><li>checkpoint机制</li></ul><blockquote><p>checkpoint机制指的是将内存中的数据刷新到磁盘上的机制,内存中的数据包括<B>数据页</B>、<B>索引页</B>、<B>undo页</B>、<B>插入缓冲 insert buffer</B>、<B>redo log buffer</B></p></blockquote><p>MySQL中内存页淘汰算法比较特殊，采用的是基于LRU-最近最少的算法改进后(3/4插入新值)进行淘汰的，防止一个表的大量更新影响到其他热点数据</p><p><B>show engine innodb status</B>查看innodb engine的状态</p><hr><ul><li>InnoDB存储引擎特点</li></ul><ol><li>插入缓冲(insert buffer)</li></ol><blockquote><p>insert buffer是对非聚集索引页的插入,修改缓冲页就直接认为成功后续线程在专门将page刷新到磁盘中；change buffer是对insert buffer的升级</p></blockquote><ol start="2"><li><p>两次写(Double Write)<br>double write产生的根本原因是由于由于MySql的最小写入单位为16K,而文件系统能保证原子写入的最小单位是4k，这样就造成MySql一次性向文件系统写入16k的数据时可能会发生中断，会污染数据页，通过先写中间层的方式来解决这个问题</p></li><li><p>自适应哈希索引(Adaptive Hash Index)</p></li><li><p>异步IO(Async IO)<br>MySQL中大量使用到异步IO</p></li><li><p>刷新邻接页(Flush Neighbor Page)</p></li></ol><hr><ul><li>bin log的日志格式</li></ul><p><B>STATENEBT</B>模式，记录的是标准的逻辑SQL语句<br><B>ROW</B>模式，记录的是每一行的数据<br><B>MIXED</B>模式混合模式7</p><hr><p>意向锁是表级别的锁，分为<B>意向写锁</B>和<B>意向读锁</B></p><p>Innodb默认支持一致性非锁定读(指的是可以不用等待写锁释放,通过undo log来来获取数据);RC模式与RR模式读取的数据不一样</p><p>行锁有三种类型：</p><ol><li>行上面的X锁</li><li>GAP间隙锁</li><li>Next-Lock:混合模式</li></ol><p>默认的存储引擎RR是通过Next-Lock来实现避免幻读的</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><ul><li><a href="https://www.zhihu.com/question/334408495">知乎MVCC的解答</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础知识(一)</title>
      <link href="2021/03/08/16.%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/1.HTTP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/03/08/16.%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/1.HTTP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1>基础知识</h1><h2 id="计算机网络的类别"><a class="header-anchor" href="#计算机网络的类别"></a>计算机网络的类别</h2><ol><li>广域网 WAN(Wide Area Network),作用范围在几十至几千公里</li><li>城域网 MAN(Metropolitan Area Network),作用范围在五至五十公里</li><li>局域网 LAN(Local Area Network),作用范围在一功能左右</li><li>个人局域网 PAN(Personal Area Network),通常作用范围为10米左右,通过无线连接起来的个人局域网又称为WPAN</li></ol><h2 id="计算机网络的性能指标"><a class="header-anchor" href="#计算机网络的性能指标"></a>计算机网络的性能指标</h2><ol><li>速率:指的是连接在计算机网络上的主机在数字信道上传送数据的速率.通俗来讲就是单位时间内能发送的数据量</li><li>带宽:指的是网络的通信线路所能传送数据的能力.通俗来讲就是网络线路承载数据的宽度</li><li>吞吐量:指的是单位时间内通过某个网络的数据量</li><li>时延:指的是数据通过网络从一端传送到另外一端的时间(总时延=发送时延+传播时延+处理时延+排队时延)</li><li>时延带宽积:指的是传播时延*贷款表示以比特为单位的链路长度</li><li>往返时间RTT:指的是从发送端发送数据开始到发送端接受到接受端的响应为止</li><li>利用率:指的是信道利用率和网络利用率</li></ol><h2 id="计算机网络协议划分"><a class="header-anchor" href="#计算机网络协议划分"></a>计算机网络协议划分</h2><ol><li><p>OSI七层协议<br>7. 应用层<br>6. 表示层<br>5. 会话层<br>4. 运输层<br>3. 网络层<br>2. 数据链路层</p><ol><li>物理层</li></ol></li><li><p>TCP/IP四层协议<br>4. 应用层(TELNET,FTP,SMTP)<br>3. 运输层(TCP/UDP)<br>2. 网际层(IP)</p><ol><li>网络接口层<br>由于TCP/IP协议中的网络接口层是对通信链路的一个抽象因此并无具体实现,因此又折中出了一个五层协议的架构</li></ol></li><li><p>五层协议<br>5. 应用层<br>4. 运输层<br>3. 网络层<br>2. 数据链路层</p><ol><li>物理层</li></ol></li></ol><h2 id="TCP和UDP的异同"><a class="header-anchor" href="#TCP和UDP的异同"></a>TCP和UDP的异同</h2><p>TCP和UDP都是运输层协议,TCP在设计是可靠的(因此有三次握手)</p><h2 id="TCP-IP协议族的沙漏模型"><a class="header-anchor" href="#TCP-IP协议族的沙漏模型"></a>TCP/IP协议族的沙漏模型</h2><p>应用层 :  HTTP   SMTP    DNS  RTP   H.323  SIP<br>\     /       \    /     \      /<br>运输层 :     TCP            UDP        SCTP<br>\             |          /<br>网际层 :                    IP<br>/            |            <br>网络接口层:  接口1          接口2         接口3</p><h2 id="通信方式"><a class="header-anchor" href="#通信方式"></a>通信方式</h2><ol><li>单向通信<br>信号只能沿着一个方向移动</li><li>双向交替通信(半双工通信)<br>单位时间内信号只能沿着一个方向移动</li><li>双向同时通信<br>单位时间内信号可向不同的方向移动</li></ol><h2 id="网际层协议-IP"><a class="header-anchor" href="#网际层协议-IP"></a>网际层协议-IP</h2><p>HTTP是什么?<br>HTTP是一种超文本传输协议(Hypertext Transfer Protocol),主要是由于</p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>延迟队列的实现思路</title>
      <link href="2021/01/20/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/12.%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
      <url>2021/01/20/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/12.%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1>延迟队列的实现思路</h1><h2 id="定义"><a class="header-anchor" href="#定义"></a>定义</h2><blockquote><p>延迟队列指的是元素按照延迟时间进行排序形成并且到时后能自动弹出的有序队列,底层数据结构既可以是数组也可以是链表</p></blockquote><h2 id="适用场景"><a class="header-anchor" href="#适用场景"></a>适用场景</h2><p>按照倒计时触发的业务场景,例如电商网站中的订单未支付自动取消,竞拍,日历待办提醒的场景,以及用定时任务扫表触发的业务场景</p><h2 id="实现原理"><a class="header-anchor" href="#实现原理"></a>实现原理</h2><p>如果让你来设计延时队列,你需要怎么样来设计?<br>先来个基础1.0的设计:要实现延时队列需要两个角色,第一个是存储信息的队列,第二个角色是’计时器’负责监视队列中的消息时候到期</p><p>图示2</p><h2 id="实现方式"><a class="header-anchor" href="#实现方式"></a>实现方式</h2><h3 id="DelayQueue"><a class="header-anchor" href="#DelayQueue"></a>DelayQueue</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.队列的角色</span>    <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelayedTask</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DelayedTask</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayedTask</span><span class="token punctuation">(</span><span class="token number">1_0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_1:"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DelayedTask</span> task5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayedTask</span><span class="token punctuation">(</span><span class="token number">1_5L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_2:"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task1<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.计时器的角色</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DelayedTask</span> task <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span><span class="token function">getRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>源码解析</li></ul><blockquote><p>DelayQueue底层采用的是PriorityQueue,一种提供优先级的队列,poll()方法如下:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//PriorityQueue是线程不安全的,因此需要用lock</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span> first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的延时队列可以解决单个进程下的延迟队列场景,但是无法解决多个应用下的场景,那么如何在实现分布式的延迟队列喃?<br>先从问题分析,我们想要实现的是分布式的延迟队列,并且知道延迟队列是由定时器和队列构成,定时器由客户端实现,那么问题就变成了我们要实现一个分布式的具有优先级的队列结构,聪明的你一定就想到了这不是redis中的zset嘛?对,下面我们来看一下基于redis实现延迟队列的1.0版本</p><h3 id="基于Redis的延迟队列"><a class="header-anchor" href="#基于Redis的延迟队列"></a>基于Redis的延迟队列</h3><blockquote><p>zset定义:排序集合，类似于集合，但每个字符串元素都与一个称为得分的浮点值相关联。 元素总是按它们的分数排序，因此与Sets不同，可以检索一系列元素</p></blockquote><ul><li>zset</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RedissonClient</span> redisClient <span class="token operator">=</span> <span class="token function">getRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RScoredSortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> zset <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token function">getScoredSortedSet</span><span class="token punctuation">(</span><span class="token string">"redisDelayQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token number">20L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token number">15L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> zset<span class="token punctuation">.</span><span class="token function">valueRange</span><span class="token punctuation">(</span><span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedissonClient</span> <span class="token function">getRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RedissonClient</span> client <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> client<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RedissonDelayedTask</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RedissonClient</span> redisClient <span class="token operator">=</span> <span class="token function">getRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> blockingFairQueue <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token function">getBlockingQueue</span><span class="token punctuation">(</span><span class="token string">"RedissonDelayed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RDelayedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> delayedQueue <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token function">getDelayedQueue</span><span class="token punctuation">(</span>blockingFairQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    delayedQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    delayedQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    delayedQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingFairQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Redisson也实现了延迟队列(RedissonDelayedQueue),底层数据结构使用的是zset,list,发布/订阅,并且也不是想我们现在这样通过while和方式来监听变化的,感兴趣的童鞋可以看一下Redisson实现时使用的Lua脚本</p><blockquote><p>目前Redisson基于reids的延迟队列在功能上很完善了作为延迟队列来说已经是满足的了,但是作为一个延时消息队列来说还缺少重试机制,ACK,因此下面介绍两种基于MQ实现延迟队列的方式</p></blockquote><h3 id="基于RabbitMQ的延迟队列"><a class="header-anchor" href="#基于RabbitMQ的延迟队列"></a>基于RabbitMQ的延迟队列</h3><h4 id="基于TTL的实现方式"><a class="header-anchor" href="#基于TTL的实现方式"></a>基于TTL的实现方式</h4><blockquote><p>基于生存时间(TTL)和死信队列(DLX)特性实现的延迟队列;TTL指的是每条消息都有一个生存时间,超过过期时间后消息就会进入一个特殊队列,这个队列就是死信队列(DLX),DLX可以将消息重新投递到指定的队列中,consumer只需要订阅这个队列就可以实现延迟消费的功能</p></blockquote><ul><li>Provider</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>consumer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="基于插件的实现方式"><a class="header-anchor" href="#基于插件的实现方式"></a>基于插件的实现方式</h4><h3 id="基于RocketMQ的延迟队列"><a class="header-anchor" href="#基于RocketMQ的延迟队列"></a>基于RocketMQ的延迟队列</h3><h2 id="限制和扩展"><a class="header-anchor" href="#限制和扩展"></a>限制和扩展</h2><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/343811173">Redisson 延时队列原理详解</a><br><a href="https://blog.csdn.net/u010059975/article/details/104537570">kafka延迟消息原因</a></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常笔记</title>
      <link href="2020/12/27/1.%E6%9D%82%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/27/1.%E6%9D%82%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>日常笔记</h1><blockquote><p>用于记录常用的命令，灵感，待办之类的</p></blockquote><h2 id="docker-command"><a class="header-anchor" href="#docker-command"></a>docker command</h2><ol><li>mysql 启动命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">3306</span>:3306 --name mysql_1 -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -d mysql:5.7.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>mongo 启动命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -itd --name mongo -p <span class="token number">27017</span>:27017 mongo --auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>设置账户</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> //创建用户并授权 db.createUser<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>user: <span class="token string">"axonUser"</span>, pwd: <span class="token string">"123456"</span>, roles <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>role: <span class="token string">"readWrite"</span>, db: <span class="token string">"interviewTest"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //更新用户权限db.grantRolesToUser<span class="token punctuation">(</span><span class="token string">"axonUser"</span>,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>role:<span class="token string">"readWrite"</span>, db:<span class="token string">"axon"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.RabbitMQ 启动命令</p><ul><li>windows cmd</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name rabbitmq -p <span class="token number">5672</span>:5672 -p <span class="token number">15672</span>:15672 -v E:<span class="token punctuation">\</span>dockerfile<span class="token punctuation">\</span>RabbitMQ:/var/lib/rabbitmq --hostname myRabbit -e <span class="token assign-left variable">RABBITMQ_DEFAULT_VHOST</span><span class="token operator">=</span>my_vhost  -e <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>admin -e <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span>admin rabbitmq:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>启动RabbitMQ admin命令</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">docker exec <span class="token operator">-</span>it rabbitmq rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>WSL 切换默认的登录用户,需要在ps管理用户下执行</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu1804.exe config --default-user root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java异步编程实战》笔记</title>
      <link href="2020/12/12/1.%E6%9D%82%E8%AE%B0/java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/12/1.%E6%9D%82%E8%AE%B0/java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>《Java异步编程实战》笔记</h1><h2 id="第一章-认识异步编程"><a class="header-anchor" href="#第一章-认识异步编程"></a>第一章 认识异步编程</h2><p>基础概念和场景介绍。略…</p><h2 id="第二章-显示使用线程和线程池实现异步编程"><a class="header-anchor" href="#第二章-显示使用线程和线程池实现异步编程"></a>第二章 显示使用线程和线程池实现异步编程</h2><p>线程和线程池的使用做了个简介，重点讲了一下线程池的实现原理</p><ul><li>线程池的实现原理<b>ThreadPoolExecutor</b></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Thread</span> wt <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Runnable</span> task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>       w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// allow interrupts</span>       <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//如果当前还有任务</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 判断线程池状态</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">Throwable</span> thrown <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                       <span class="token comment">//执行任务</span>                       task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                       <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                   task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                   w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                   w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意两个地方:1.Thread会被包装成worker对象用<b>HashSet</b>保存;2.Task是用<b>BlockingQueue</b>来进行保存</p></blockquote><h2 id="第三章-基于JDK中的Futrue实现异步编程"><a class="header-anchor" href="#第三章-基于JDK中的Futrue实现异步编程"></a>第三章 基于JDK中的Futrue实现异步编程</h2><h3 id="FutureTask"><a class="header-anchor" href="#FutureTask"></a>FutureTask</h3><ul><li>run()</li><li>get()</li><li>cancel()</li></ul><blockquote><p>注意一下FutureTask的state是用volatile进行修饰，结果outcome是用state的内存屏障技术来保证可见性的</p></blockquote><h3 id="CompletableFuture"><a class="header-anchor" href="#CompletableFuture"></a>CompletableFuture</h3><ul><li>runAsync()</li><li>supplyAsync()</li><li>thenRun()</li><li>thenAccept()</li><li>thenApply()</li><li>whenComplete()</li><li>thenCompose()</li><li>thenCombine()</li><li>allOf()</li><li>anyOf()</li><li>completeExeceptionally() 异常处理</li></ul><blockquote><p>CompletableFuture默认是用ForkJoinPool,这里需要注意下</p></blockquote><h2 id="Spring框架中的异步执行"><a class="header-anchor" href="#Spring框架中的异步执行"></a>Spring框架中的异步执行</h2><h3 id="TaskExecutor"><a class="header-anchor" href="#TaskExecutor"></a>TaskExecutor</h3><p>略…</p><h3 id="Async"><a class="header-anchor" href="#Async"></a>@Async</h3><p>@EnableAsync是通过AsyncConfigurationSelector进行加载，</p><h2 id="基于反应式编程实现异步编程"><a class="header-anchor" href="#基于反应式编程实现异步编程"></a>基于反应式编程实现异步编程</h2><blockquote><p>反应式编程是一种涉及数据流和变化传播的异步编程范式。这意味着可以通过所采用的编程语言轻松的表达静态或动态数据流。</p></blockquote><p>反应式编程主要是强调对数据的处理过程是主动的，是以数据为核心参与对象的过程。传统的编程模型下是以业务流程为核心，通过业务流程将数据串联起来。</p><h3 id="Reactive-Streams规范"><a class="header-anchor" href="#Reactive-Streams规范"></a>Reactive Streams规范</h3><blockquote><p>Reactive Streams规范是提供一个使用非阻塞回压功能对异步流进行处理的标准，也就是定义反应式编程的规范</p></blockquote><h3 id="基于RxJava实现异步编程"><a class="header-anchor" href="#基于RxJava实现异步编程"></a>基于RxJava实现异步编程</h3><p>==RxJava==是Reactive Extensions的java语言实现，具体的使用方法可参考官网</p><h3 id="基于Reactor实现异步编程"><a class="header-anchor" href="#基于Reactor实现异步编程"></a>基于Reactor实现异步编程</h3><p>==Reactor==是另外一个Java语言下的是Reactive实现，目前在webFlux中作为反应式框架进行使用</p><p>这里有一个软件发展的趋势就是传统的编程模型是基于cpu多核技术发展的还不是很好的时候提出来的，已经不太适用于现代多核cpu架构。因此基于现代cpu多核架构和传统软件架构面对的问题，提出了反应式编程模型。这种编程方式也许不是很便于人类理解，但是确拥有更高的资源利用率。如果未来出现一个像spring对于java那样对于反应式编程的框架，反应式编程理念应该会得到更好的发展。</p><h2 id="Web-Servlet的异步非阻塞处理"><a class="header-anchor" href="#Web-Servlet的异步非阻塞处理"></a>Web Servlet的异步非阻塞处理</h2><p>在Servlet3.0中提供了异步处理能力，让请求线程和处理线程不在是1：1的关系了,这里就可以更好的利用服务器的性能。<br>这里有一个问题什么Servlet 3才提出的异步处理能力喃？<br>这是因为servlet是基http1.1的方案，http1.1开始支持http可以保持长连接的形式，hhtp1.1方案是1999年开始<br>在Servlet3.1中提供了非阻塞I/O的处理方式:Web容器中的非阻塞请求处理有助于增加Web容器可同时处理请求的数量，允许我们在ServletInputStream上通过函数setReadListener注册一个监听器，该监听器在发现内核中有数据时才会进行回调处理函数。</p><h3 id="spring-MVC的异步处理能力"><a class="header-anchor" href="#spring-MVC的异步处理能力"></a>spring MVC的异步处理能力</h3><blockquote><p>Spring MVC是围绕前端控制器模式设计，由中央处理器Servlet DispatcheaServlet作为请求处理进行路由分派，实际请求处理工作由可配置处理类进行执行。在Spring MVC中通过调用request.startAsync()将ServletRequest设置为异步模式，这样可以让Servlet在推出的同时，让响应保持打开状态。</p></blockquote><h2 id="Spring-web-Flux"><a class="header-anchor" href="#Spring-web-Flux"></a>Spring web Flux</h2><p>webFlux与spring mvc的对比<br><img src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/spring-mvc-and-webflux-venn.png" alt="webFlux vs spring mvc"></p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.infoworld.com/article/2077995/java-concurrency-asynchronous-processing-support-in-servlet-3-0.html?page=1">infoworld关于servlet 3.0的介绍</a><br><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html">spring官网关于webFlux的文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础概念入门(二)</title>
      <link href="2020/11/29/1.%E6%9D%82%E8%AE%B0/Docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8(%E4%BA%8C)/"/>
      <url>2020/11/29/1.%E6%9D%82%E8%AE%B0/Docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="Dockerfile文件"><a class="header-anchor" href="#Dockerfile文件"></a>Dockerfile文件</h2><blockquote><p>Dockerfile文件是用来构建镜像的文本文件，文本文件中包含了一系列构建镜像所需的指令和说明</p></blockquote><h2 id="java基础环境"><a class="header-anchor" href="#java基础环境"></a>java基础环境</h2><ul><li>Dockerfile</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基础镜像版本</span>FROM java:latest<span class="token comment"># 设置工作目录</span>WORKDIR /app<span class="token comment"># 复制初始文件到工作目录中</span>COPY <span class="token builtin class-name">.</span> /app<span class="token comment"># 设置Java环境变量</span>ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/binENV <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/jreENV <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="token variable">$&#123;JRE_HOME&#125;</span>/lib<span class="token comment"># 编译</span>RUN <span class="token punctuation">[</span><span class="token string">"/usr/lib/jvm/java-8-openjdk-amd64/bin/javac"</span>,<span class="token string">"Docker_java.java"</span><span class="token punctuation">]</span><span class="token comment"># 运行</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"/usr/lib/jvm/java-8-openjdk-amd64/bin/java"</span>, <span class="token string">"Docker_java"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dockerfile文件需要在当前工作目录下编写，Docker_java.java文件也需要在当前工作目录下</p><ul><li>Docker_java.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Docker_java</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Docker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>build命令和启动命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -rm 表示构建完成后删除中间镜像</span><span class="token comment"># -f  表示指定Dockerfile文件,默认为当前目录下的Dockerfile文件 </span><span class="token comment"># -t  表示对镜像打tag</span>docker build --rm -f <span class="token string">"Dockerfile"</span> -t docker_java:0.0.1<span class="token comment">#运行命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>docker run docker_java:0.0.1</code></pre><pre class="line-numbers language-none"><code class="language-none">## mysql环境&gt; 构建一个账号名称为test,密码为test并且自定义初始化sqlmysql容器- Dockerfile&#96;&#96;&#96;bash#基础版本FROM mysql:5.7.22#环境变量ENV TZ&#x3D;Asia&#x2F;Shanghai \    MYSQL_DATABASE&#x3D;test \    MYSQL_USER&#x3D;test \    MYSQL_PASSWORD&#x3D;test \    MYSQL_ROOT_PASSWORD&#x3D;test#将sql目录下的文件全部拷贝到目标文件夹下COPY sql&#x2F;. &#x2F;docker-entrypoint-initdb.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>init.sql</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>test<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>test<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>table_a<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>table_a<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sync_pk<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>hos_code<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>study_iuid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>study_content<span class="token punctuation">`</span> <span class="token keyword">mediumtext</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token punctuation">,</span><span class="token punctuation">`</span>study_state<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>remark<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sync_pk<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_unicode_ci <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build --rm -f <span class="token string">"Dockerfile"</span> -t mysqlc:0.0.1 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>运行命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#与mysql启动一致</span>docker run -itd --name mysql_local mysqlc:0.0.1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优化复杂流程分析和建模思考</title>
      <link href="2020/11/08/1.%E6%9D%82%E8%AE%B0/%E5%9F%BA%E4%BA%8E%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%92%8C%E5%BB%BA%E6%A8%A1%E6%80%9D%E8%80%83/"/>
      <url>2020/11/08/1.%E6%9D%82%E8%AE%B0/%E5%9F%BA%E4%BA%8E%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%92%8C%E5%BB%BA%E6%A8%A1%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>架构的核心挑战是如何处理当下或未来可能出现的快速增长的软件复杂性，因此越是大型系统在架构设计上越是要简单。</p></blockquote><h2 id="软件的复杂度为什么会增加？"><a class="header-anchor" href="#软件的复杂度为什么会增加？"></a>软件的复杂度为什么会增加？</h2><p>先阐述观点在实际开发中软件的复杂性是随着时间愈发陡峭的，复杂度的提升近似于y=x^2的曲线。主要是基于以下几个情况得出的结论：</p><ol><li><B>软件的复杂程度是逐渐迭代出来的</B><br>拿我之前的项目举例，最开始业务需求可能只是围绕商品的一个业务，根据这个业务设计流程，后来慢慢的迭代过程中逐渐把商品相关的属性完善从而又能支撑起开展其他的业务流程。随着业务流程的膨胀和交汇，软件的复杂度会不断的增加。</li><li><B>代码迭代过程中的理解和维护</B><br>软件对应的实体即为代码，在相同的架构下不同的理解会有不同的代码实现。由于大型项目往往是多人进行协作开发，需要统一大家的理解。通俗的说法就是多个人写出来的代码就像一个人写出来的一样，要完成这样的合作往往是很困难的。这里在补充阐述一下，并不是反对有着强烈个人代码风格的方式，主要还是想表达的是同一团队在面对同一项目时对软件的架构、技术、业务理解应该是尽量要<B>趋同<B>的。</li></ol><blockquote><p>业务架构师最重要的工作不是设计软件结构，而是应该通过API、团队设计准则、细节的关注把控来控制软件复杂度的增长。</p></blockquote><h2 id="如何定义软件复杂的维度？"><a class="header-anchor" href="#如何定义软件复杂的维度？"></a>如何定义软件复杂的维度？</h2><p>软件的复杂度可以定义为让人理解和维护修改的困难程度，因此我们可以将软件的复杂程度拆分为两个部分</p><ol><li>软件的认知成本：理解软件的接口、设计和实现上的成本，简单说就是看懂代码的时间成本和脑力成本</li><li>软件的协同成本：修改维护软件时，所需要付出的成本<br>举个例子来说，软件的扩展性不好就是协同成本过高，会导致新增功能时需要进行大量修改，并且修改后还会进一步的增加认知负担</li></ol><h3 id="认知负担"><a class="header-anchor" href="#认知负担"></a>认知负担</h3><ol><li>定义新的概念带来的认知负担，这种负担与所定义的概念与现实模型的关联度相关</li><li>逻辑符合思维习惯的程度</li></ol><ul><li>逻辑是否符合思维习惯的程度，这个因人而异，最好在实际的开发过程中有统一的规范，例如强烈建议使用卫语句、使用Optional等</li><li>模型失配：模型的失配指的是定义的模型与现实世界的业务模型存在较大差异所带来的</li></ul><ol start="3"><li>接口设计不当</li></ol><ul><li><p>需要调用者使用初始化才能正常工作的接口。将初始化的职责放到了调用方，但是调用方在面对复杂的初始化参数时，就需要去了解每个参数所代表的动作和意义，承担了本来属于接口实现所承担的职责。这里可以使用工厂模式来进行处理，在接口工厂类中根据接口提供的场景进行处理</p></li><li><p>一个接口中不同的方法提供了相同的功能</p></li></ul><ol start="4"><li><p>违反开闭原则，一个简单的修改需要在多处中进行更新<br>在业务开发中，往往会为了进度或者害怕新的改动会改变已有代码的逻辑因此去copy-past大量类似的逻辑和功能，这样会导致一个简单的修改需要更多的精力在多处中进行去更新，代码的复杂度也会提高</p></li><li><p>命名 尽量要做到通过的命名就知道变量、方法、类、模块等要<B>做什么</B>，重点在于做什么上面而不是是什么上面。</p></li></ol><h3 id="协同成本"><a class="header-anchor" href="#协同成本"></a>协同成本</h3><blockquote><p>协同成本是新增、修改功能所付出的时间成本和脑力成本。</p></blockquote><ol><li><p>在微服务架构下，模块/服务的切分是和团队对齐的，即&quot;组织架构决定系统架构&quot;,组织架构最佳的划分是按照系统架构来进行的，当组织划分不好时，往往会导致重复的工作。</p></li><li><p>服务间相互依赖，服务间相互依赖主要有两种种形式组和、继承。继承会呈现出更强制的关系，因此也会有更大的协同复杂性。</p></li><li><p>可测试性带来的协同成本。这里指的是由于单元测试不完善需要更完善的集成测试来保证软件的正确性。</p></li><li><p>文档  降低协同成本的一个好方法就是完善文档，包括业务文档、设计文档、接口文档等，但是这部分工作并不会直接产生效益，因此积极性都不是很高。</p></li></ol><h2 id="如何应对软件不断增长的复杂度？"><a class="header-anchor" href="#如何应对软件不断增长的复杂度？"></a>如何应对软件不断增长的复杂度？</h2><p>每一次无意识的代码的改动都会产生依赖/耦合从而增加系统的复杂性，软件的复杂程度恶化到一定程度后就会导致系统不可避免的失败。因此需要我们对复杂度增加采用零容忍的态度。</p><ul><li>软件的复杂度带来的影响往往是滞后的，在看到影响时也许已经过去了很久</li><li>在进行代码review时，每一个额外的复杂度设计在整个系统的角度下都显得微不足道，但是千里之堤以蝼蚁之溃。</li><li>破窗效应Broken window：一个建筑，当有了一个破窗而不及时修补，这个建筑就会被侵入住认为是无人居住的、风雨更容易进来，更多的窗户被人有意打破，很快整个建筑会加速破败。这就是破窗效应，在软件的质量控制上这个效应非常恰当,所以有问题尽快修补。</li></ul><p>零容忍，并不是不让复杂度增长：我们都知道这是不可能的。我们需要的是尽力控制。因为进度而临时打破窗户也能接受，但是要尽快补上。</p><h2 id="基于复杂业务如何分析？"><a class="header-anchor" href="#基于复杂业务如何分析？"></a>基于复杂业务如何分析？</h2><h3 id="业务的差异性"><a class="header-anchor" href="#业务的差异性"></a>业务的差异性</h3><p>if/else是由于业务上不同的场景会有不同的业务逻辑，这样的差异性可以很方便的用if/else实现，但是不符合开闭原则，在扩展时代码会堆砌的越来越庞大。</p><p>如何消除if/else？</p><ul><li><p>多态扩展:利用面向对象的多态特性，实现代码的复用和扩展</p></li><li><p>代码分离:对不同的场景用不同的代码流程来实现业务和代码的隔离</p></li><li><p>多态扩展<br>多态扩展有继承和组合两种方式。继承的话不要使用重载特性，重载特性不是继承父类的方法。组合类似于策略模式，也就是把需要扩展的部分进行抽象、封装成需要被组合的对象。用多态的特性来移除业务的差异性，这样也更符合实体之间的关系。</p></li><li><p>代码分离<br>代码分离，代码的冗余和复用性不好，但是同样会达到业务代码彼此独立的状态</p></li></ul><h3 id="多维分析"><a class="header-anchor" href="#多维分析"></a>多维分析</h3><p>根据我们的分析在面对业务的差异时，我们可以用多态扩展和代码分离来实现，但是什么时候来用多态扩展？什么时候用代码分离楠?对于这个问题我们可以采用<B>矩阵分析法</B></p><p>我们可以用一个矩阵，纵轴代表业务场景、横轴代表步骤，里面的内容代表每一个动作，这样我们就可以得到这样的一个表格</p><table><thead><tr><th>-</th><th>step0</th><th>step1</th><th>step2</th></tr></thead><tbody><tr><td>business0</td><td>1.action0<br>2.action1</td><td>1.action1</td><td>1.action1<br>2.action2</td></tr><tr><td>business1</td><td>同上</td><td>同上</td><td>1.action1</td></tr><tr><td>business2</td><td>无</td><td>无</td><td>1.action1</td></tr></tbody></table><p>通过这样一个矩阵我们就可以分析出business0和business1适用于多态扩展，而business2更加适用于代码分离来进行实现。</p><p>这样的矩阵在OOP里被称为分析矩阵，主要是用来分析业务涉及要素过多、信息量太大的场景。</p><h3 id="流程分解"><a class="header-anchor" href="#流程分解"></a>流程分解</h3><p>流程分解是对业务过程进行详细的分解，然后在使用<B>结构化</B>的方法聚合成一个个step，在将step组合成业务，最后形成一个类似于金字塔形状自上而下的流程认知。</p><h3 id="领域模型"><a class="header-anchor" href="#领域模型"></a>领域模型</h3><p>领域模型指的是模型对象避免使用贫血模式，而应该使用充血模式，让模型具有业务逻辑，从而在复用模型的时候就能复用业务逻辑。充血的模型也更符合现实模型中对象的定义。</p><h2 id="分析矩阵"><a class="header-anchor" href="#分析矩阵"></a>分析矩阵</h2><h3 id="定义"><a class="header-anchor" href="#定义"></a>定义</h3><p>分析矩阵的定义来源于《设计模式解析》第16章,作者通过以下几个方法步骤完成对系统中变化的分析，从而设计出合适的模式</p><blockquote><p>1.找到某种特定情况下最重要的特性，并用矩阵将他们关联起来<br>2.继续处理其他情况，并且按需扩展矩阵<br>3.用新的概念扩展分析矩阵<br>4.在行维度发现规则<br>5.在列维度发现特定情况<br>6.从分析中确定模式<br>7.得到高层设计</p></blockquote><h3 id="案例"><a class="header-anchor" href="#案例"></a>案例</h3><p>最开始需求很简单：只处理美国和加拿大的订单。系统必须进行处理的特性清单如下：</p><ul><li>为美国和加拿大构建一个销售订单系统</li><li>根据所在国家计算运费</li><li>运费还应该以所在国家的货币进行支付</li><li>在美国，税额需按当地计算</li><li>使用美国邮政规则验证地址</li><li>在加拿大使用联邦快递发货时，需要同时缴纳联邦政府销售税和地方销售税</li><li>加拿大邮寄包裹有违禁品邮寄限制</li><li>美国的订单号继承于加拿大订单号规则，又有所改变</li></ul><p>从使用场景我们可以得知，需求分为两种：美国、加拿大，因此我们可以根据需求场景分析得出这样的矩阵</p><table><thead><tr><th>情况</th><th>过程</th></tr></thead><tbody><tr><td>美国</td><td>1.使用美元计费<br>2.使用美国邮政规则校验地址<br>3.按照当地计算税额<br>4.美制加拿大规则订单号规则</td></tr><tr><td>加拿大</td><td>1.使用美元计费<br>2.使用美国邮政规则校验地址<br>3.按照加拿大规定计算销售税4. 违禁品邮寄限制5.加拿大规则订单号规则</td></tr></tbody></table><p>通过这样一个具有详细功能的矩阵，我们可以直接提炼出按照步骤进行分解的矩阵</p><table><thead><tr><th>步骤</th><th>美国</th><th>加拿大</th></tr></thead><tbody><tr><td>货币单位</td><td>美元</td><td>加元</td></tr><tr><td>校验规则</td><td>美国邮政规则</td><td>加拿大邮政规则</td></tr><tr><td>计算税额</td><td>美国税额政策</td><td>加拿大税额政策</td></tr><tr><td>邮寄限制</td><td>未知</td><td>加拿大邮寄限制</td></tr><tr><td>订单号规则</td><td>美制加拿大规则</td><td>加拿大规则</td></tr></tbody></table><p>通过这个矩阵我们发现美国的邮寄限制未知，这样我们可以询问业务专家得到答案。通过这样的矩阵我们还可以分析出</p><table><thead><tr><th>步骤</th><th>美国</th><th>加拿大</th></tr></thead><tbody><tr><td>货币单位</td><td>多态扩展</td><td>多态扩展</td></tr><tr><td>校验规则</td><td>代码分离</td><td>代码分离</td></tr><tr><td>计算税额</td><td>代码分离</td><td>代码分离</td></tr><tr><td>邮寄限制</td><td>代码分离</td><td>代码分离</td></tr><tr><td>订单号规则</td><td>多态扩展</td><td>多态扩展</td></tr></tbody></table><blockquote><p>参考文档</p></blockquote><ul><li><a href="https://developer.aliyun.com/article/770886">警惕软件复杂度困局</a></li><li><a href="https://mp.weixin.qq.com/s/u7geoZNpLtfr_crkXVHjAg">面对复杂业务，if-else coder 如何升级</a></li><li><a href="https://developer.aliyun.com/article/712581">如何写复杂业务代码？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领域建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo SPI的加载机制</title>
      <link href="2020/10/29/8.duboo%E7%AC%94%E8%AE%B0/1.%20Dubbo%20SPI%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>2020/10/29/8.duboo%E7%AC%94%E8%AE%B0/1.%20Dubbo%20SPI%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1>Dubbo SPI的加载机制</h1><p>SPI全称为Service Provider Interface，是一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类。</p><h2 id="SPI示例"><a class="header-anchor" href="#SPI示例"></a>SPI示例</h2><h3 id="Java-SPI示例"><a class="header-anchor" href="#Java-SPI示例"></a>Java SPI示例</h3><ul><li>Robot</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Robot</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>RobotImpl</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bumblebee</span> <span class="token keyword">implements</span> <span class="token class-name">Robot</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, I am Bumblebee."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptimusPrime</span> <span class="token keyword">implements</span> <span class="token class-name">Robot</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, I am Optimus Prime."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>MATA/service</li></ul><pre class="line-numbers language-none"><code class="language-none">com.agmtopy.testcontainers.completableFuture.impl.Bumblebeecom.agmtopy.testcontainers.completableFuture.impl.OptimusPrime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>JavaSpiTest</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Robot</span><span class="token punctuation">></span></span> robots <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Robot</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    robots<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Robot</span><span class="token operator">::</span><span class="token function">sayHello</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dubbo-SPI示例"><a class="header-anchor" href="#Dubbo-SPI示例"></a>Dubbo SPI示例</h3><ul><li>Robot</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SPI</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Robot</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>MATA/dubbo</li></ul><pre class="line-numbers language-none"><code class="language-none">optimusPrime &#x3D; com.agmtopy.testcontainers.completableFuture.impl.Bumblebeebumblebee &#x3D; com.agmtopy.testcontainers.completableFuture.impl.OptimusPrime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《如何高效学习》碎碎念</title>
      <link href="2020/10/19/1.%E6%9D%82%E8%AE%B0/%E3%80%8A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E3%80%8B%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>2020/10/19/1.%E6%9D%82%E8%AE%B0/%E3%80%8A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E3%80%8B%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1>《如何高效学习》碎碎念</h1><p>学习的步骤拆分为</p><ol><li>获取知识</li><li>理解知识</li><li>扩展知识</li><li>纠错</li><li>应用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过实例理解CompletableFuture并发框架</title>
      <link href="2020/10/19/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/15.%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E7%90%86%E8%A7%A3CompletableFuture%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
      <url>2020/10/19/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/15.%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E7%90%86%E8%A7%A3CompletableFuture%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1>通过实例理解CompletableFuture并发框架</h1><p><b>CompletableFuture</b>实现<strong>Future</strong>、<strong>CompletionStage</strong>;<strong>CompletionStage</strong>的定义是作为一个用于异步执行中的处理阶段，适用于lambda表达式计算过程中。<strong>Future</strong>定义是作为异步返回值容器。下面通过一系列实列先来熟悉CompletableFuture能够完成的功能。</p><h2 id="实现功能"><a class="header-anchor" href="#实现功能"></a>实现功能</h2><ol><li>初始化一个完成的CompletableFuture</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 初始化一个完成的CompletableFuture */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> completableFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"完成结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//是否完成</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"completableFuture已经完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//getNow()返回</span>    <span class="token class-name">String</span> returnMsg <span class="token operator">=</span> completableFuture<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"完成结果"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>returnMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"completableFuture.getNow()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建一个简单的异步stage</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建一个简单的异步stage */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//是否是守护线程</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"是否是守护线程:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> done <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future.isDone() = "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对完成的CompletableFuture继续同步进行处理</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 对完成的CompletableFuture继续同步进行处理 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//thenApply如果没有指定执行线程池那么就会在当前线程中执行</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> message <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程为"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回结果为"</span> <span class="token operator">+</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>对完成的CompletableFuture继续异步进行处理(有返回结果)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 对完成的CompletableFuture继续异步进行处理 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//thenApplyAsync默认使用ForkJoinPool.commonPool()线程池</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> message <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程为"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回结果为"</span> <span class="token operator">+</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>异步消费结果(无返回值)</li></ol><ul><li>thenAccept(Consumer&lt;? super T&gt; action)、thenAcceptAsync(Consumer&lt;? super T&gt; action,Executor executor)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 异步消费结果(无返回值) */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>item <span class="token operator">-></span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>计算时出现异常</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 取消&amp;异常处理 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> i1 <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//join()不会显示抛出异常</span>    future<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//get()方法会抛出异常</span>    future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//cancel()方法会取消计算</span>    future<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>BiConsumer同时处理两个stage结果</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * BiConsumer支持对两个Stage的结果进行操作 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> original <span class="token operator">=</span> <span class="token string">"message"</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">//BiConsumer</span>                    <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-></span> result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现原理"><a class="header-anchor" href="#实现原理"></a>实现原理</h2><h3 id="Future接口介绍"><a class="header-anchor" href="#Future接口介绍"></a>Future接口介绍</h3><blockquote><p>JDK5新增了Future接口，用于描述一个异步计算的结果。但是对于结果的获取却是很不方便，只能通过阻塞或者轮询的方式得到任务的结果。</p></blockquote><h3 id="CompletableFuture类介绍"><a class="header-anchor" href="#CompletableFuture类介绍"></a>CompletableFuture类介绍</h3><blockquote><p>CompletableFuture提供了非常强大的 Future 的扩展功能，可以帮助我们简化异步编程的复杂性，并且提供了函数式编程的能力，可以通过回调的方式处理计算结果，也提供了转换和组合 CompletableFuture 的方法。</p></blockquote><blockquote><p>对于阻塞或者轮询方式，依然可以通过 CompletableFuture 类的 CompletionStage和Future接口方式支持。CompletableFuture 类声明了 CompletionStage 接口，CompletionStage 接口实际上提供了同步或异步运行计算的舞台，所以我们可以通过实现多个 CompletionStage 命令，并且将这些命令串联在一起的方式实现多个命令之间的触发。</p></blockquote><h2 id="扩展知识"><a class="header-anchor" href="#扩展知识"></a>扩展知识</h2><h2 id="参考文档"><a class="header-anchor" href="#参考文档"></a>参考文档</h2><p><a href="https://developer.ibm.com/zh/articles/j-cf-of-jdk8/">通过实例理解 JDK8 的 CompletableFuture</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CompletableFuture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mockito使用小结</title>
      <link href="2020/10/13/1.%E6%9D%82%E8%AE%B0/mockito%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
      <url>2020/10/13/1.%E6%9D%82%E8%AE%B0/mockito%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1>mockito使用小结</h1><p>mock框架是测试中必不可少的，它的主要作用是模拟一些在应用中不容易构造或者比较复杂的对象，从而把测试与测试边界以外的对象隔离开。目前市面上流行的mock框架主要有Mockito、JMock、EasyMock、JMock。这几种框架的对比如下</p><h2 id="Mockito使用示例"><a class="header-anchor" href="#Mockito使用示例"></a>Mockito使用示例</h2><ul><li>模拟对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">mockMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//模拟一个MockTestInterface的实例</span>    <span class="token class-name">MockTestInterface</span> mock <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">MockTestInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//未指定方法返回值因此打印null</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模拟方法的返回值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">mockMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//模拟一个MockTestInterface的实例</span>    <span class="token class-name">MockTestInterface</span> mock <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">MockTestInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.mock方式不会执行指定方法</span>    <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">doReturn</span><span class="token punctuation">(</span><span class="token string">"mock method"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"mock method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.stub方式会执行指定方法</span>    <span class="token class-name">MockTestInterface</span> mock1 <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token class-name">MockTestInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mock1<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"mock method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>mock1<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"mock method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模拟方法抛出异常</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">mockMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//模拟一个MockTestInterface的实例</span>    <span class="token class-name">MockTestInterface</span> mock <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">MockTestInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"mock NPE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> mock<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"mock NPE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps:Mock与Stub的区别<br>Mock主要是对不可信赖的代码进行&quot;模拟行为&quot;，Stub主要是将不可信赖的代码片段用&quot;简化&quot;的代码片段进行替代</p><p><a href="https://segmentfault.com/a/1190000010385247">https://segmentfault.com/a/1190000010385247</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mockito </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构--改善既有代码的设计笔记</title>
      <link href="2020/09/22/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
      <url>2020/09/22/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>重构–改善既有代码的设计笔记</h1><ul><li><p>重构是在不改变软件可观察的行为的前提下改善其内部结构</p></li><li><p>坚持持续不断的重构行为来整理代码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础概念入门(一)</title>
      <link href="2020/09/15/1.%E6%9D%82%E8%AE%B0/Docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
      <url>2020/09/15/1.%E6%9D%82%E8%AE%B0/Docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker实战"><a class="header-anchor" href="#Docker实战"></a>Docker实战</h2><h3 id="基础命令"><a class="header-anchor" href="#基础命令"></a>基础命令</h3><ul><li>容器使用</li></ul><table><thead><tr><th>功能</th><th>命令</th><th>参数</th></tr></thead><tbody><tr><td>获取镜像</td><td>docker pull imageName</td><td></td></tr><tr><td>启动镜像(create&amp;start)</td><td>docker run imageName</td><td>-i:交互式 -t:终端 -d:后台运行 -p portId:portId:指定端口</td></tr><tr><td>查看所有镜像</td><td>docker ps -a</td><td></td></tr><tr><td>启动已存在的镜像</td><td>docker start imageId/imageName</td><td></td></tr><tr><td>停止容器</td><td>docker stop imageId</td><td></td></tr><tr><td>重启容器</td><td>docker restart imageId</td><td></td></tr><tr><td>进入容器</td><td>docker attach</td><td>exec imageId</td></tr><tr><td>删除容器</td><td>docker rm -f imageId</td><td></td></tr><tr><td>删除不在使用的镜像</td><td>docker image prune</td><td>-a:全部</td></tr></tbody></table><h4 id="Dockerfile书写原则"><a class="header-anchor" href="#Dockerfile书写原则"></a>Dockerfile书写原则</h4><blockquote><p>Dockerfile是构建docker镜像的一种方式，推荐作为生产环境构建镜像的方式。</p></blockquote><ol><li>单一原则<br>容器的本质是进程，一个容器代表一个进程。因此不同功能的应用应该拆分为不同的容器，每个容器负责单一的业务进程。</li><li>提供注释信息</li><li>保持容器最小化</li><li>合理选择基础镜像<br>容器的核心是应用，因此只要基础镜像能够满足应用的运行环境即可。</li><li>使用.dockerignore文件<br>.dockerignore文件允许我们在构建时忽略一些不需要参与构建的文件，从而提高构建效率。</li><li>尽量使用构建缓存</li></ol><ul><li>每一条Dockerfile指令都会提交一个镜像层，下一条指令都是基于上一条指令进行构建。如果构建时发现构建的镜像层的父镜像层已经存在，且下一条指令使用了相同的指令即命中缓存。</li></ul><ol start="7"><li><p>正确设置时区<br>从Docker Hub拉取的官方操作系统镜像大多数都是UTC时间，如果在容器中需要使用东八区时间，需要进行修改</p></li><li><p>使用国内软件源加快镜像构建速度</p></li><li><p>最小化镜像层数</p></li></ol><h4 id="Dockerfile编写建议"><a class="header-anchor" href="#Dockerfile编写建议"></a>Dockerfile编写建议</h4><ol><li><p>RUN指令在构建时将会生成一个镜像层并且执行RUN指令后面的内容</p></li><li><p>CMD和ENTRYPOINT都是容器运行的命令入口；区别在于ENTRYPOINT指令启动容器时，需要用–entrypoint参数才能覆盖Dockerfile中的ENTRYPONT指令；CMD设置的命令则可以被docker run后面的参数直接覆盖<br>3.CMD/ENTRYPOINT的使用有两种格式；1.json数组格式的exec模式 2.command param格式的shell模式。这两种格式的区别在于启动容器后1号进程的区别。exec模式启动的进程即为容器的1号进程，而shell模式启动的进程不是容器的1号进程。</p></li><li><p>add和copy的区别。add是将外部资源加载到容器中这样会扩大容器体积，copy是将本地文件向容器中拷贝，可以更好的利用构建缓存，有效减小镜像体积。</p></li></ol><ul><li>反面例子</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ADD http://pyropus.ca/software/memtester/old-versions/memtester-4.3.0.tar.gz /tmp/RUN <span class="token function">tar</span> -xvf /tmp/memtester-4.3.0.tar.gz -C /tmpRUN <span class="token function">make</span> -C /tmp/memtester-4.3.0 <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -C /tmp/memtester-4.3.0 <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>替代例子</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RUN <span class="token function">wget</span> -O /tmp/memtester-4.3.0.tar.gz http://pyropus.ca/software/memtester/old-versions/memtester-4.3.0.tar.gz <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> -xvf /tmp/memtester-4.3.0.tar.gz -C /tmp <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -C /tmp/memtester-4.3.0 <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -C /tmp/memtester-4.3.0 <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="基础概念"><a class="header-anchor" href="#基础概念"></a>基础概念</h3><h4 id="Namespace"><a class="header-anchor" href="#Namespace"></a>Namespace</h4><blockquote><p>Docker是使用Linux的Namespace技术实现各种资源隔离；Namespace是Linux内核的一项功能，该功能对内核资源进行分区，使一组进程只能看到一组资源，而另一组进程看到另外一组资源。</p></blockquote><ul><li>Linux提供的Namespace类型</li></ul><table><thead><tr><th>Namespace名称</th><th>作用</th><th>内核版本</th></tr></thead><tbody><tr><td>Mount(mnt)</td><td>隔离挂载点</td><td>2.4.19</td></tr><tr><td>Process ID(pid)</td><td>隔离进程ID</td><td>2.6.24</td></tr><tr><td>Network(net)</td><td>隔离网络设备，端口号等</td><td>2.6.29</td></tr><tr><td>Interprocess Communication (ipc)</td><td>隔离 System V IPC 和 POSIX message queues</td><td>2.6.19</td></tr><tr><td>UTS Namespace(uts)</td><td>隔离主机名和域名</td><td>2.6.19</td></tr><tr><td>User Namespace (user)</td><td>隔离用户和用户组</td><td>3.8</td></tr><tr><td>Control group (cgroup) Namespace</td><td>隔离 Cgroups 根目录</td><td>4.6</td></tr><tr><td>Time Namespace</td><td>隔离系统时间</td><td>5.6</td></tr></tbody></table><ul><li>Namespace功能</li></ul><ol><li>Mount Namespace</li></ol><blockquote><p>Mount Namespace是Linux内核实现的第一个Namespace,可以用来隔离不同的进程或进程组看到的挂载点。通俗地说，就是可以实现在不同的进程中看到不同的挂载目录。</p></blockquote><ol start="2"><li>PID Namespace</li></ol><blockquote><p>PID Namespace的作用是用来隔离进程。在不同的 PID Namespace 中，进程可以拥有相同的 PID 号，利用 PID Namespace 可以实现每个容器的主进程为 1 号进程，而容器内的进程在主机上却拥有不同的PID。</p></blockquote><ol start="3"><li>UTS Namespace</li></ol><blockquote><p>UTS Namespace 主要是用来隔离主机名的，它允许每个 UTS Namespace 拥有一个独立的主机名。</p></blockquote><ol start="4"><li>IPC Namespace</li></ol><blockquote><p>IPC Namespace 主要是用来隔离进程间通信的。例如 PID Namespace 和 IPC Namespace 一起使用可以实现同一 IPC Namespace 内的进程彼此可以通信，不同 IPC Namespace 的进程却不能通信。</p></blockquote><ol start="5"><li>User Namespace</li></ol><blockquote><p>User Namespace 主要是用来隔离用户和用户组的。一个比较典型的应用场景就是在主机上以非 root 用户运行的进程可以在一个单独的 User Namespace 中映射成 root 用户。使用 User Namespace 可以实现进程在容器内拥有 root 权限，而在主机上却只是普通用户。</p></blockquote><ol start="6"><li>Net Namespace</li></ol><blockquote><p>Net Namespace是用来隔离网络设备、IP地址和端口等信息的</p></blockquote><ul><li>小结</li></ul><blockquote><p>当Docker新建一个容器时,会创建这6种Namespace，来进行资源隔离。Namespace是Linux内核提供的特性，该特性可以实现在同一个主机上对<B>进程ID</B>、<B>主机名</B>、用户ID、<B>文件名</B>、<B>网络和进程间通信等资源的隔离</B></p></blockquote><h4 id="cgrops"><a class="header-anchor" href="#cgrops"></a>cgrops</h4><blockquote><p>cgrops是linux内核提供限制进程或进程组使用资源(如CPU、内存、磁盘IO)的功能</p></blockquote><ul><li>cgrops功能</li></ul><ol><li>资源限制</li></ol><blockquote><p>限制资源的使用量，例如我们可以通过限制某个业务的内存上限，从而保护主机其他业务的安全运行。</p></blockquote><ol start="2"><li>优先级控制</li></ol><blockquote><p>不同的组可以有不同的资源（ CPU 、磁盘 IO 等）使用优先级</p></blockquote><ol start="3"><li>审计</li></ol><blockquote><p>计算控制组的资源使用情况</p></blockquote><ol start="4"><li>控制</li></ol><blockquote><p>控制进程的挂起或恢复</p></blockquote><blockquote><p>Docker 创建容器时，Docker 会根据启动容器的参数，在对应的 cgroups 子系统下创建以<B>容器ID</B>为名称的目录, 然后根据容器启动时设置的资源限制参数, 修改对应的 cgroups 子系统资源限制文件, 从而达到资源限制的效果。</p></blockquote><h4 id="Docker组件的构成"><a class="header-anchor" href="#Docker组件的构成"></a>Docker组件的构成</h4><p>Docker整体架构采用C/S架构，主要由客户端/服务端两大部分组成。客户端负责发送指令，服务端负责执行指令。</p><ul><li>Docker组件</li></ul><ol><li>docker</li></ol><blockquote><p>docker是Docker客户端的一个完整实现，docker 组件向服务端发送请求后，服务端根据请求执行具体的动作并将结果返回给 docker，docker 解析服务端的返回结果，并将结果通过命令行标准输出展示给用户。</p></blockquote><ol start="2"><li>dockerd</li></ol><blockquote><p>dockerd 是 Docker 服务端的后台常驻进程，用来接收客户端发送的请求，执行具体的处理任务，处理完成后将结果返回给客户端</p></blockquote><ol start="3"><li>docker-init</li></ol><blockquote><p>docker-init是作为1号进程管理容器内的子进程</p></blockquote><ol start="4"><li>docker-proxy</li></ol><blockquote><p>docker-proxy主要是用来做端口映射。当我们使用 docker run 命令启动容器时，如果使用了 -p 参数，docker-proxy 组件就会把容器内相应的端口映射到主机上来，底层是依赖于 iptables 实现的。</p></blockquote><ol start="5"><li>containerd</li></ol><blockquote><p>containerd负责容器生命周期的管理、镜像的管理、dockerd的请求、管理存储、网络等相关资源。是容器标准化后的产物</p></blockquote><ol start="6"><li>containerd-shim</li></ol><blockquote><p>作为containerd和真正的容器进程的中间层</p></blockquote><ol start="7"><li>runc</li></ol><blockquote><p>runc 是一个标准的 OCI 容器运行时的实现，它是一个命令行工具，可以直接用来创建和运行容器。</p></blockquote><h3 id="数据管理"><a class="header-anchor" href="#数据管理"></a>数据管理</h3><h3 id="网络管理"><a class="header-anchor" href="#网络管理"></a>网络管理</h3><h3 id="容器管理"><a class="header-anchor" href="#容器管理"></a>容器管理</h3><h3 id="镜像管理"><a class="header-anchor" href="#镜像管理"></a>镜像管理</h3>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShardingSphere入门简介</title>
      <link href="2020/09/03/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/24.ShardingSpherez%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
      <url>2020/09/03/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/24.ShardingSpherez%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="ShardingSphere入门简介"><a class="header-anchor" href="#ShardingSphere入门简介"></a>ShardingSphere入门简介</h2><h3 id="概览"><a class="header-anchor" href="#概览"></a>概览</h3><blockquote><p>ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><h4 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h4><p>数据分片拆分方式</p><ul><li><p>垂直拆分<br><b>垂直拆分</b>指的是专库专用，将不同业务的表拆分到对应的库中。微服务架构下已基本实现了垂直拆分。</p></li><li><p>水平拆分<br><b>水平拆分</b>指的是逻辑上相同的数据通过根据某种规则将数据分散存储到指定的数据节点中。</p></li></ul><p>产品组成</p><ul><li><p><b>Sharding-JDBC</b><br>Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p></li><li><p><b>Sharding-Proxy</b><br>Sharding-Proxy定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。</p></li><li><p><b>Sharding-Sidecar</b><br>Sharding-Sidecar定位为Kubernetes的云原生数据库代理，以Sidecar的形式代理所有对数据库的访问，是想作为DB层面的数据网格。(规划中)</p></li></ul><h4 id="专有名词"><a class="header-anchor" href="#专有名词"></a>专有名词</h4><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>逻辑表</td><td>水平拆分的数据库（表）的相同逻辑和数据结构表的总称</td></tr><tr><td>真实表</td><td>在分片的数据库中真实存在的物理表</td></tr><tr><td>数据节点</td><td>数据分片的最小单位,由数据源名称和数据表组成(shema.tableName)</td></tr><tr><td>绑定表</td><td>绑定表是shardingSphere中特有的概念，指的是分片规则一致的主表和子表。如果指定互为绑定表，在进行联表查询时将不会出现笛卡尔积</td></tr><tr><td>广播表</td><td>广播表类似于mycat中的全局表,适用于作为字典</td></tr><tr><td>精确分片算法</td><td>用于处理使用单一键作为分片键的=与IN进行分片的场景</td></tr><tr><td>范围分片算法</td><td>用于处理使用单一键作为分片键的BETWEEN AND、&gt;、&lt;、&gt;=、&lt;=进行分片的场景</td></tr><tr><td>复合分片算法</td><td>用于处理使用多键作为分片键进行分片的场景</td></tr><tr><td>Hint分片算法</td><td>用于处理使用Hint行分片的场景(使用外部规则进行分片)</td></tr></tbody></table><h4 id="功能列表"><a class="header-anchor" href="#功能列表"></a>功能列表</h4><ul><li><p><b>数据分片</b></p><ol><li>分库 &amp; 分表</li><li>读写分离</li><li>分片策略定制化</li><li>无中心化分布式主键</li></ol></li><li><p><b>分布式事务</b></p><ol><li>标准化事务接口</li><li>XA强一致事务</li><li>柔性事务</li></ol></li><li><p><b>数据库治理</b></p><ol><li>配置动态化</li><li>编排 &amp; 治理</li><li>数据脱敏</li><li>可视化链路追踪</li></ol></li></ul><h3 id="sharding-jdbc"><a class="header-anchor" href="#sharding-jdbc"></a>sharding-jdbc</h3><h4 id="功能列表-v2"><a class="header-anchor" href="#功能列表-v2"></a>功能列表</h4><pre><code>1. 数据分片2. 读写分离3. 强制路由4. 数据脱敏</code></pre><h4 id="数据分片配置"><a class="header-anchor" href="#数据分片配置"></a>数据分片配置</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8080  tomcat:    uri-encoding: utf-8spring:  application:    name: shardingsphere-example  jpa:    properties:      hibernate:        enable_lazy_load_no_trans: true  shardingsphere:    datasource:      names: ds0,ds1      ds0:        type: com.zaxxer.hikari.HikariDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        jdbcUrl: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ds0?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT        username: root        password: 111111      ds1:        type: com.zaxxer.hikari.HikariDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        jdbcUrl: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ds1?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT        username: root        password: 111111      sharding:        default-database-strategy: # 分库规则          inline:            sharding-column: vender_id            algorithm-expression: ds$&#123;vender_id % 2&#125;        tables:          t_user:  #t_user表            key-generator-column-name: id  #主键            actual-data-nodes: ds$&#123;0..1&#125;.t_user$&#123;0..1&#125;    #真实数据节点            databaseStrategy: # 分库策略              inline:                sharding-column: vender_id # 分库键                algorithm-expression: ds$&#123;vender_id % 2&#125;            tableStrategy: #分表策略              inline: #行表达式                shardingColumn: vender_id                algorithmExpression: t_user$&#123;vender_id % 2&#125;    sharding: #读写分离配置      master-slave-rules:        ms_ds0:          masterDataSourceName: ds0 # 主库          slaveDataSourceNames:            - ds0_slave0 #从库            - ds0_slave1          loadBalanceAlgorithmType: ROUND_ROBIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jdbc不支持的操作"><a class="header-anchor" href="#jdbc不支持的操作"></a>jdbc不支持的操作</h4><ol><li>不支持存储过程，函数，游标的操作</li><li>不支持联表删除</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> TABLE_XXX1<span class="token punctuation">,</span> TABLE_xxx2 <span class="token keyword">FROM</span> TABLE_XXX1 <span class="token keyword">JOIN</span> TABLE_XXX2<span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> TABLE_XXX1<span class="token punctuation">,</span> TABLE_xxx2 <span class="token keyword">USING</span> TABLE_XXX1 <span class="token keyword">JOIN</span> TABLE_XXX2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>不建议使用子查询(4.x版本对子查询的优化不太好)</li></ol><h3 id="sharding-proxy"><a class="header-anchor" href="#sharding-proxy"></a>sharding-proxy</h3><h4 id="功能列表-v3"><a class="header-anchor" href="#功能列表-v3"></a>功能列表</h4><pre><code>1. sharding-jdbc提供的功能2. 权限控制3. DB高可用管理</code></pre><h4 id="数据分片配置-v2"><a class="header-anchor" href="#数据分片配置-v2"></a>数据分片配置</h4><ul><li>server.yaml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">authentication</span><span class="token punctuation">:</span><span class="token key atrule">users</span><span class="token punctuation">:</span><span class="token key atrule">root</span><span class="token punctuation">:</span>     <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">111111</span><span class="token key atrule">sharding</span><span class="token punctuation">:</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> sharding     <span class="token key atrule">authorizedSchemas</span><span class="token punctuation">:</span> sharding_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>config-sharding.yaml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> sharding_db<span class="token key atrule">dataSources</span><span class="token punctuation">:</span><span class="token key atrule">ds0</span><span class="token punctuation">:</span><span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/ds0<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span><span class="token key atrule">username</span><span class="token punctuation">:</span> root<span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">111111</span><span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span><span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span><span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span><span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token key atrule">ds1</span><span class="token punctuation">:</span><span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/ds1<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span><span class="token key atrule">username</span><span class="token punctuation">:</span> root<span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">111111</span><span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span><span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span><span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span><span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token key atrule">shardingRule</span><span class="token punctuation">:</span><span class="token key atrule">tables</span><span class="token punctuation">:</span><span class="token key atrule">t_order</span><span class="token punctuation">:</span>    <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds$<span class="token punctuation">&#123;</span>0..1<span class="token punctuation">&#125;</span>.t_user    <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>    <span class="token key atrule">inline</span><span class="token punctuation">:</span>        <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> vender_id        <span class="token key atrule">algorithmExpression</span><span class="token punctuation">:</span> ds$<span class="token punctuation">&#123;</span>vender_id % 2<span class="token punctuation">&#125;</span>    <span class="token key atrule">keyGenerator</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> SNOWFLAKE    <span class="token key atrule">column</span><span class="token punctuation">:</span> order_id<span class="token key atrule">defaultDatabaseStrategy</span><span class="token punctuation">:</span><span class="token key atrule">inline</span><span class="token punctuation">:</span>    <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> id    <span class="token key atrule">algorithmExpression</span><span class="token punctuation">:</span> ds$<span class="token punctuation">&#123;</span>id % 2<span class="token punctuation">&#125;</span><span class="token key atrule">defaultTableStrategy</span><span class="token punctuation">:</span>none<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h4><ol><li>在部署sharding-proxy时需要将mysql driver在lib下</li><li>不建议使用子查询(4.x版本对子查询的优化不太好)</li><li>配置文件请以官网为准(5.x版本与4.x版本改动较大)</li></ol><h3 id="client与proxy对比"><a class="header-anchor" href="#client与proxy对比"></a>client与proxy对比</h3><h4 id="功能对比"><a class="header-anchor" href="#功能对比"></a>功能对比</h4><table><thead><tr><th>/</th><th>Sharding-JDBC</th><th>Sharding-Proxy</th></tr></thead><tbody><tr><td>数据库连接</td><td>任意</td><td>MySql</td></tr><tr><td>连接消耗数</td><td>高</td><td>低</td></tr><tr><td>异构语言</td><td>仅java</td><td>任意</td></tr><tr><td>性能</td><td>损耗低</td><td>损耗略高</td></tr><tr><td>无中心化</td><td>是</td><td>否</td></tr><tr><td>静态入口</td><td>无</td><td>有</td></tr></tbody></table><h4 id="性能对比"><a class="header-anchor" href="#性能对比"></a>性能对比</h4><p>Sharding-JDBC与Sharding-Proxy保持相同的数据库、数据库连接配置、后端应用下进行测试</p><ul><li><p>单表插入<br><img src="https://s1.ax1x.com/2020/09/10/wY071U.png" alt="wY071U.png"></p></li><li><p>单表查询<br><img src="https://s1.ax1x.com/2020/09/10/wY0f7n.png" alt="wY0f7n.png"></p></li><li><p>结论<br>从耗时上比较单表插入的性能从高到低依次是Sharding-JDBC、JDBC、Sharding-Proxy<br>从耗时上比较单表查询的性能从高到低依次是Sharding-JDBC、JDBC、Sharding-Proxy</p></li></ul><h3 id="扩展部分"><a class="header-anchor" href="#扩展部分"></a>扩展部分</h3><h4 id="源码分析"><a class="header-anchor" href="#源码分析"></a>源码分析</h4><ul><li>Sharding-JDBC的数据分片的执行过程</li></ul><p><img src="https://s1.ax1x.com/2020/09/06/wmlLC9.png" alt="wmlLC9.png"></p><p>ShardingRouter.<strong>route()<strong>方法作为路由的核心，主要是返回路由对象</strong>SQLRouteResult</strong>,SQLRouteResult保存路由信息<br><img src="https://s1.ax1x.com/2020/05/19/Y4Fupq.png" alt="Y4Fupq.png"></p><p><strong>RouteResult</strong>对象会被返回到<strong>ShardingPreparedStatement</strong>中，这个类继承于<strong>java.sql.Statement</strong>,Statement是定义数据库进行交互并返回结果的接口</p><ul><li>ShardingPreparedStatement扩展的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ShardingPreparedStatement</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractShardingPreparedStatementAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//分片连接</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ShardingConnection</span> connection<span class="token punctuation">;</span>        <span class="token comment">//执行sql</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">;</span>        <span class="token comment">//分片引擎</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PreparedQueryShardingEngine</span> shardingEngine<span class="token punctuation">;</span>        <span class="token comment">//执行器</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PreparedStatementExecutor</span> preparedStatementExecutor<span class="token punctuation">;</span>        <span class="token comment">//批处理执行器</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BatchPreparedStatementExecutor</span> batchPreparedStatementExecutor<span class="token punctuation">;</span>        <span class="token comment">//sql路由器</span>    <span class="token keyword">private</span> <span class="token class-name">SQLRouteResult</span> sqlRouteResult<span class="token punctuation">;</span>        <span class="token comment">//结果集</span>    <span class="token keyword">private</span> <span class="token class-name">ResultSet</span> currentResultSet<span class="token punctuation">;</span>    <span class="token comment">//实现executeQuery、executeUpdate、execute、getGeneratedKeys等方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="execute-方法进行具体的执行过程"><a class="header-anchor" href="#execute-方法进行具体的执行过程"></a>execute()方法进行具体的执行过程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//清除环境</span>        <span class="token function">clearPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//进行分片环境设置</span>        <span class="token function">shard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化预处理执行器</span>        <span class="token function">initPreparedStatementExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行</span>        <span class="token keyword">return</span> preparedStatementExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>initPreparedStatementExecutor()方法初始化预处理执行</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initPreparedStatementExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化执行器</span>    preparedStatementExecutor<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>sqlRouteResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置语句参数</span>    <span class="token function">setParametersForStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">replayMethodForStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**preparedStatementExecutor.execute()**方法是具体执行的方法</p><p><img src="https://s1.ax1x.com/2020/05/20/Y7XsIA.png" alt="Y7XsIA.png"></p><p>1处将待执行sql封装成为回调对象，2处**executeCallback(executeCallback)**执行回调对象</p><ul><li>executeCallback在回调中执行sql</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Boolean</span> <span class="token function">executeSQL</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ConnectionMode</span> connectionMode<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>executeCallback()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> sqlExecuteTemplate<span class="token punctuation">.</span><span class="token function">executeGroup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> executeGroups<span class="token punctuation">,</span> executeCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">refreshMetaDataIfNeeded</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getRuntimeContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sqlStatementContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过<strong>sqlExecuteTemplate.executeGroup</strong>执行方法，会将执行动作传递到执行引擎<strong>ShardingExecuteEngine</strong>的<strong>groupExecute</strong>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token function">groupExecute</span><span class="token punctuation">(</span>    <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroups<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> firstCallback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> callback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> serial<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputGroups<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> serial <span class="token operator">?</span> <span class="token function">serialExecute</span><span class="token punctuation">(</span>inputGroups<span class="token punctuation">,</span> firstCallback<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">parallelExecute</span><span class="token punctuation">(</span>inputGroups<span class="token punctuation">,</span> firstCallback<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里<strong>同步执行方法</strong>和<strong>异步执行方法</strong>，并且将第一个任务交给当前线程进行处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token function">parallelExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroups<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> firstCallback<span class="token punctuation">,</span>                                       <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> callback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroupsIterator <span class="token operator">=</span> inputGroups<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ShardingExecuteGroup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span></span> firstInputs <span class="token operator">=</span> inputGroupsIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListenableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> restResultFutures <span class="token operator">=</span> <span class="token function">asyncGroupExecute</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>inputGroupsIterator<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果firstCallback有值就让当前线程进行执行，如果没值就返回线程池执行结果</span>    <span class="token keyword">return</span> <span class="token function">getGroupResults</span><span class="token punctuation">(</span><span class="token function">syncGroupExecute</span><span class="token punctuation">(</span>firstInputs<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token operator">==</span> firstCallback <span class="token operator">?</span> callback <span class="token operator">:</span> firstCallback<span class="token punctuation">)</span><span class="token punctuation">,</span> restResultFutures<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码很细心，不但使用到了当前线程来执行第一个任务，并且线程池也使用的是Guava提供的可回调的线程池<strong>ListeningExecutorService</strong>,可参考<a href="/2020/05/20/1.%E6%9D%82%E8%AE%B0/Guava%E7%9A%84%E4%BD%BF%E7%94%A8/#more">Guava的使用</a></p><p>在执行sql时候又会回到当初创建回调函数的地方进行执行回调方法。</p><h3 id="参考文献"><a class="header-anchor" href="#参考文献"></a>参考文献</h3><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://shardingsphere.apache.org/">ShardingSphere官网</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShardingSphere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常碎碎念</title>
      <link href="2020/08/23/1.%E6%9D%82%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>2020/08/23/1.%E6%9D%82%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="碎碎念"><a class="header-anchor" href="#碎碎念"></a>碎碎念</h2><ol><li>TimerTask</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">RefreshTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reflesh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">reflesh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 拉去权限数据</span>    <span class="token comment">// 更新缓存数据</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>TimerTask在执行时，如果抛出异常不进行捕获就直接终止，建议使用ScheduledThreadPoolExecutor来替代</p></blockquote><ol start="2"><li>mycat全局表插入的时抛出索引重复<br>现象是mycat在插入时，抛出了索引重复但是再次查询时，确有数据<br>原因是因为mycat在查询时候只会随机查询一个分库中的数据，由于不同分库的主键序列不一样，导致每次插入时，id不一样，随后又通过id来进行删除，这样只会删除一个表的数据，导致数据未被删除的库再次插入时抛出索引重复。</li></ol><ul><li>mycat全局表随机选择库</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAliveRandomDataNode</span><span class="token punctuation">(</span><span class="token class-name">TableConfig</span> tc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> randomDns <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>tc<span class="token punctuation">.</span><span class="token function">getDataNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MycatConfig</span> mycatConfig <span class="token operator">=</span> <span class="token class-name">MycatServer</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mycatConfig <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将dataNodes随机排列</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>randomDns<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//省略...满足条件选取第一个dataNode</span><span class="token punctuation">&#125;</span><span class="token comment">// all fail return default</span><span class="token keyword">return</span> tc<span class="token punctuation">.</span><span class="token function">getRandomDataNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对重复数据的不同处理在1.6.x上对于重复数据是直接抛出异常，最新的版本则是返回修改值</li></ul><ol start="3"><li>查询端口占用情况</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 端口占用情况</span><span class="token function">netstat</span> -nap <span class="token operator">|</span><span class="token function">grep</span> <span class="token number">2181</span><span class="token comment"># 端口连接数</span><span class="token function">netstat</span> -na <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">2181</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shardingSphere理论基础</title>
      <link href="2020/08/20/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/23.shardingSphere%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
      <url>2020/08/20/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/23.shardingSphere%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>shardingSphere理论基础</h1><h2 id="理论"><a class="header-anchor" href="#理论"></a>理论</h2><p>shardingSpgere实现JDBC规范，并在此基础上进行扩展</p><h2 id="核心概念"><a class="header-anchor" href="#核心概念"></a>核心概念</h2><p>数据分片按照拆分的方式分为水平拆分和垂直拆分</p><ul><li>垂直拆分</li></ul><blockquote><p>垂直拆分指的是专库专用，将不同业务的表拆分到对应的库中。微服务架构下已基本实现垂直拆分</p></blockquote><ul><li>水平拆分</li></ul><blockquote><p>水平拆分指的是通过根据某种规则将数据放到指定的数据节点中，数据节点是由库和表组合而成的</p></blockquote><h3 id="shardingSphere中的基本概念"><a class="header-anchor" href="#shardingSphere中的基本概念"></a>shardingSphere中的基本概念</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>逻辑表</td><td>在代码逻辑上对拆分表的总称</td></tr><tr><td>真实表</td><td>在分片的数据库中真实存在的物理表</td></tr><tr><td>数据节点</td><td>数据分片的最小单位,由数据源名称和数据表组成(shema.tableName)</td></tr><tr><td>绑定表</td><td>绑定表是shardingSphere中特有的概念，指的是分片规则一致的主表和子表。如果指定互为绑定表，在进行联表查询时将不会出现笛卡尔积</td></tr><tr><td>广播表</td><td>广播表类似于mycat中的全局表,适用于作为字典表</td></tr></tbody></table><ul><li>shardingSphere支持的分片策略</li></ul><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>精确分片算法</td><td>用于处理使用单一键作为分片键的=与IN进行分片的场景</td></tr><tr><td>范围分片算法</td><td>用于处理使用单一键作为分片键的BETWEEN AND、&gt;、&lt;、&gt;=、&lt;=进行分片的场景</td></tr><tr><td>复合分片算法</td><td>用于处理使用多键作为分片键进行分片的场景</td></tr><tr><td>Hint分片算法</td><td>用于处理使用Hint行分片的场景(使用外部数据进行分片)</td></tr></tbody></table><h3 id="JDBC规范"><a class="header-anchor" href="#JDBC规范"></a>JDBC规范</h3><ul><li>DataSource</li></ul><blockquote><p>DataSource 在 JDBC 规范中代表的是一种数据源，核心作用是获取数据库连接对象 Connection。可以直接通过 DriverManager 获取 Connection</p></blockquote><ul><li>Connection</li></ul><blockquote><p>DataSource 的目的是获取 Connection 对象，我们可以把 Connection 理解为一种会话（Session）机制。Connection 代表一个数据库连接，负责完成与数据库之间的通信。所有 SQL 的执行都是在某个特定 Connection 环境中进行的，同时它还提供了一组重载方法，分别用于创建 Statement 和 PreparedStatement。</p></blockquote><ul><li>Statement</li></ul><blockquote><p>JDBC 规范中的 Statement 存在两种类型，一种是普通的 Statement，一种是支持预编译的 PreparedStatement</p></blockquote><p>ps: PreparedStatement具体做了什么？</p><blockquote><p>预编译指的是数据库的编译器会对sql进行提前编译，然后将预编译的结果缓存到数据库中。这样下次执行时就可以只用替换参数调用预编译的sql语句，从而提高sql的执行效率</p></blockquote><ul><li>ResultSet</li></ul><blockquote><p>代表sql的执行结果</p></blockquote><ul><li>基于JDBC规范的流程图</li></ul><p>Driver -&gt; 创建DataSource -&gt; 获取Connection -&gt; 创建Statement -&gt; 执行SQL语句 -&gt; 处理ResultSet -&gt; 关闭资源对象</p><ul><li>shardingshere基于适配器模式的JDBC重写实现方案</li></ul><p>shardingshere通过继承jdbc预留的Wrapper接口，然后在wrapper中执行jdbc的增强。</p><h2 id="功能"><a class="header-anchor" href="#功能"></a>功能</h2><p>shardingSphere功能上可以划分为四大部分，<B>基础设施</B>、<B>分片引擎</B>、<B>分布式事务</B>、<B>治理与集成</B></p><h3 id="基础设施层"><a class="header-anchor" href="#基础设施层"></a>基础设施层</h3><p>基础设施层包含<B>微内核架构</B>、<B>分布式主键</B></p><h3 id="分片引擎"><a class="header-anchor" href="#分片引擎"></a>分片引擎</h3><p>分片引擎包括<B>数据分片</B>、<B>读写分离</B></p><h3 id="分布式事务"><a class="header-anchor" href="#分布式事务"></a>分布式事务</h3><p>分布式事务包括<B>标准化事务处理接口</B>、<B>强一致性事务与柔性事务</B></p><h3 id="集成与治理"><a class="header-anchor" href="#集成与治理"></a>集成与治理</h3><p>集成与治理包括<B>数据脱敏</B>、<B>配置中心</B>、<B>注册中心</B>、<B>链路跟踪</B>、<B>系统集成</B></p><h2 id="业务集成"><a class="header-anchor" href="#业务集成"></a>业务集成</h2><h3 id="jdbc集成"><a class="header-anchor" href="#jdbc集成"></a>jdbc集成</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建分片规则配置类</span>    <span class="token class-name">ShardingRuleConfiguration</span> shardingRuleConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShardingRuleConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建分表规则配置类</span>    <span class="token class-name">TableRuleConfiguration</span> tableRuleConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableRuleConfiguration</span><span class="token punctuation">(</span><span class="token string">"t_user"</span><span class="token punctuation">,</span> <span class="token string">"ds$&#123;0..1&#125;.t_user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建分布式主键生成配置类</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"worker.id"</span><span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">KeyGeneratorConfiguration</span> keyGeneratorConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyGeneratorConfiguration</span><span class="token punctuation">(</span><span class="token string">"SNOWFLAKE"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    tableRuleConfig<span class="token punctuation">.</span><span class="token function">setKeyGeneratorConfig</span><span class="token punctuation">(</span>keyGeneratorConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    shardingRuleConfig<span class="token punctuation">.</span><span class="token function">getTableRuleConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tableRuleConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//分库规则</span>    shardingRuleConfig<span class="token punctuation">.</span><span class="token function">setDefaultDatabaseShardingStrategyConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InlineShardingStrategyConfiguration</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"ds$&#123;id%2&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建具体的DataSource</span>    <span class="token keyword">return</span> <span class="token class-name">ShardingDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token function">createDataSourceMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shardingRuleConfig<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="orm框架集成"><a class="header-anchor" href="#orm框架集成"></a>orm框架集成</h3><h4 id="jpa框架"><a class="header-anchor" href="#jpa框架"></a>jpa框架</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">shardingsphere:    datasource:      names: ds0,ds1      ds0:        type: com.zaxxer.hikari.HikariDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        jdbcUrl: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ds0?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT        username: root        password: ******      ds1:        type: com.zaxxer.hikari.HikariDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        jdbcUrl: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ds1?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT        username: root        password: ******      sharding:        default-database-strategy: # 分库规则          inline:            sharding-column: vender_id            algorithm-expression: ds$&#123;vender_id % 2&#125;        tables:          t_user:  #t_user表            key-generator-column-name: id  #主键            actual-data-nodes: ds$&#123;0..1&#125;.t_user$&#123;0..1&#125;    #真实数据节点            databaseStrategy: # 分库策略              inline:                sharding-column: vender_id # 分库键                algorithm-expression: ds$&#123;vender_id % 2&#125;            tableStrategy: #分表策略              inline: #行表达式                shardingColumn: vender_id                algorithmExpression: t_user$&#123;vender_id % 2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="javaConfig"><a class="header-anchor" href="#javaConfig"></a>javaConfig</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getShardingDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ShardingRuleConfiguration</span> shardingRuleConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShardingRuleConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置分库分表策略</span>        shardingRuleConfig<span class="token punctuation">.</span><span class="token function">getTableRuleConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getOrderTableRuleConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shardingRuleConfig<span class="token punctuation">.</span><span class="token function">getTableRuleConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getOrderItemTableRuleConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置绑定表</span>        shardingRuleConfig<span class="token punctuation">.</span><span class="token function">getBindingTableGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"t_order, t_order_item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置广播表</span>        shardingRuleConfig<span class="token punctuation">.</span><span class="token function">getBroadcastTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"t_config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置分库默认策略</span>        shardingRuleConfig<span class="token punctuation">.</span><span class="token function">setDefaultDatabaseShardingStrategyConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InlineShardingStrategyConfiguration</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token string">"ds$&#123;user_id % 2&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置分表默认策略</span>        shardingRuleConfig<span class="token punctuation">.</span><span class="token function">setDefaultTableShardingStrategyConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardShardingStrategyConfiguration</span><span class="token punctuation">(</span><span class="token string">"order_id"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ShardingDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token function">createDataSourceMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shardingRuleConfig<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shardingSphere的配置"><a class="header-anchor" href="#shardingSphere的配置"></a>shardingSphere的配置</h2><h3 id="行内表达式"><a class="header-anchor" href="#行内表达式"></a>行内表达式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ds<span class="token variable">$&#123;0..1&#125;</span>.user<span class="token variable">$&#123;1..1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>行内表达式是用来作为shardingSphere的配置信息的一种表达方式。</p><p>${begin…end} 标识的是从begin到end的一个区间</p><p>多个${expression}可以用点号来形成组合关系表达式</p><h3 id="核心配置项"><a class="header-anchor" href="#核心配置项"></a>核心配置项</h3><blockquote><p>shardingSphere的核心功能就是分库分表，核心功能是依赖配置的。掌握如何使用shardingsphere就是掌握如何进行配置。</p></blockquote><h4 id="ShardingRuleConfiguration"><a class="header-anchor" href="#ShardingRuleConfiguration"></a>ShardingRuleConfiguration</h4>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShardingSphere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序设计中的基石:数组</title>
      <link href="2020/08/08/15.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%9F%B3-%E6%95%B0%E7%BB%84/"/>
      <url>2020/08/08/15.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%9F%B3-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1>程序设计中的基石:数组</h1><h2 id="数组的定义"><a class="header-anchor" href="#数组的定义"></a>数组的定义</h2><blockquote><p>数组可以被定义为是<B>一组被保存在连续存储空间中，并且具有相同类型的数据元素集合</B></p></blockquote><p>由于数组位于内存中一段连续的空间中，因此通过索引去读取元素的时间复杂度是0(1);由于插入和删除均会移动其他的相邻元素，因此时间复杂度为o(n);</p><h2 id="数组在redis中的使用"><a class="header-anchor" href="#数组在redis中的使用"></a>数组在redis中的使用</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于testcontainers的集成测试方案</title>
      <link href="2020/07/31/1.%E6%9D%82%E8%AE%B0/%E5%9F%BA%E4%BA%8Etestcontainers%E7%9A%84%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/"/>
      <url>2020/07/31/1.%E6%9D%82%E8%AE%B0/%E5%9F%BA%E4%BA%8Etestcontainers%E7%9A%84%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1>基于testcontainers的集成测试方案</h1><blockquote><p>Testcontainers是一个Java库，支持JUnit测试，它提供常见数据库，Selenium Web浏览器或可以在Docker容器中运行的任何其他东西的轻量级，一次性的实例。</p></blockquote><p><B>testcontainers</B>官网为https://www.testcontainers.org/</p><h2 id="基础工程"><a class="header-anchor" href="#基础工程"></a>基础工程</h2><ol><li>docker环境</li><li>springBoot工程</li></ol><h3 id="docker环境"><a class="header-anchor" href="#docker环境"></a>docker环境</h3><blockquote><p><a href="https://download.docker.com/win/stable/Docker%20Desktop%20Installer.exe">https://download.docker.com/win/stable/Docker Desktop Installer.exe</a><br>下载Docker Desktop Installer.exe进行安装Docker</p></blockquote><ul><li>查看Docker版本<br><img src="https://s1.ax1x.com/2020/08/01/a3z3Md.png" alt="a3z3Md.png"></li><li>Docker 服务启动/关闭命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动docker服务</span>Net start com.docker.service<span class="token comment"># 停止docker服务</span>Net stop com.docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="springBoot应用"><a class="header-anchor" href="#springBoot应用"></a>springBoot应用</h3><blockquote><p><a href="https://github.com/agmtopy/testcontainers-simple">https://github.com/agmtopy/testcontainers-simple</a></p></blockquote><h2 id="redis"><a class="header-anchor" href="#redis"></a>redis</h2><ul><li>RedisTestContainersTest.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Testcontainers</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTestContainersTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">RedisCommands</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> redisCommands<span class="token punctuation">;</span>    <span class="token comment">/**     * 初始化redis 容器     */</span>    <span class="token annotation punctuation">@Container</span>    <span class="token keyword">public</span> <span class="token class-name">GenericContainer</span> redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericContainer</span><span class="token punctuation">(</span><span class="token string">"redis:5.0.3-alpine"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withExposedPorts</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeforeEach</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> address <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> port <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">getFirstMappedPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化redis客户端</span>        redisCommands <span class="token operator">=</span> <span class="token class-name">RedisClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"redis://%s:%d/0"</span><span class="token punctuation">,</span> address<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimplePutAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisCommands<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> retrieved <span class="token operator">=</span> redisCommands<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"retrieved : "</span> <span class="token operator">+</span> retrieved<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">,</span> retrieved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql"><a class="header-anchor" href="#mysql"></a>mysql</h2><ul><li>MysqlTestContainersTest</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * mysql 容器测试 */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>        classes <span class="token operator">=</span> <span class="token class-name">MysqlTestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        properties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"spring.profiles.active=test"</span><span class="token punctuation">,</span>                <span class="token string">"embedded.mysql.install.enabled=true"</span><span class="token punctuation">,</span>                <span class="token string">"embedded.mysql.init-script-path=initScript.sql"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlTestContainersTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">;</span>    <span class="token comment">/**     * jdbcTemplate     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">propertiesAreAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"embedded.mysql.port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"embedded.mysql.host"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"embedded.mysql.schema"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"embedded.mysql.user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"embedded.mysql.password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"embedded.mysql.init-script-path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldInitDBForMySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select count(first_name) from users where first_name = 'Sam' "</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="kafka"><a class="header-anchor" href="#kafka"></a>kafka</h2><ul><li></li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.testcontainers.org/">testcontainers官网</a><br><a href="https://github.com/testcontainers/testcontainers-java/">testcontainers项目地址</a><br><a href="https://github.com/testcontainers/testcontainers-spring-boot">testcontainers-spring-boot</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门基础二</title>
      <link href="2020/07/29/10.netty%E7%AC%94%E8%AE%B0/2.Netty%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
      <url>2020/07/29/10.netty%E7%AC%94%E8%AE%B0/2.Netty%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1>Netty入门基础二</h1><p>在上一篇文章中主要介绍了Netty是从何而来以及概念和组件，下面咱们来看一下如何实现一个简单的例子</p><p>分析Netty实例主要是为了展示服务器端的<B>业务逻辑</B>和<B>引导代码</B>两部分<br>服务端的业务逻辑处理主要分为两个部分一部分是对于<B>channel</B>的事件进行处理，另外一部分是对<B>业务数据</B>的处理<br>主要以RocketMQ中的<a href="https://github.com/apache/rocketmq/blob/master/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java">NettyRemotingServer</a>为主</p><h3 id="引导代码"><a class="header-anchor" href="#引导代码"></a>引导代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServerBootstrap</span> childHandler <span class="token operator">=</span>    <span class="token comment">//1. 设置EventLoopGroup</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupBoss<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupSelector<span class="token punctuation">)</span>        <span class="token comment">//2. 设置channel处理类型</span>        <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token function">useEpoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">EpollServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> <span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token comment">//3. 设置用于监听socket的属性</span>        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_KEEPALIVE<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token comment">//4. 设置创建socket后再创建的socket</span>        <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_SNDBUF<span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketSndBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_RCVBUF<span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketRcvBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//5. 设置链接地址</span>        <span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//6. 设置业务处理 Channel</span>        <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>defaultEventExecutorGroup<span class="token punctuation">,</span> HANDSHAKE_HANDLER_NAME<span class="token punctuation">,</span> handshakeHandler<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>defaultEventExecutorGroup<span class="token punctuation">,</span>                        encoder<span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">NettyDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerChannelMaxIdleTimeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        connectionManageHandler<span class="token punctuation">,</span>                        serverHandler                    <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引导代码主要是分为以下几个步骤</p><ol><li>设置EventLoopGroup</li><li>设置Channel处理类型</li><li>设置监听socket的属性</li><li>设置地址端口</li><li>设置业务处理的Channel</li></ol><h3 id="业务逻辑"><a class="header-anchor" href="#业务逻辑"></a>业务逻辑</h3><p>业务处理逻辑是由<B>ChannelInitializer</B>实现的，分别是添加了两个处理策略分别是</p><ul><li><p>HandshakeHandler handshakeHandler</p></li><li><p>NettyServerHandler serverHandler</p></li></ul><p>这两个策略都是继承于<B>SimpleChannelInboundHandler</B>,<br>HandshakeHandler只是处理入站链接是否需要TSL加密处理的，因此相关参数也比较简单<br>NettyServerHandler是真正的业务处理类,因此跟随了很多执行的策略配置参数等</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置业务处理策略</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>defaultEventExecutorGroup<span class="token punctuation">,</span>    encoder<span class="token punctuation">,</span><span class="token comment">//设置解码器</span>    <span class="token keyword">new</span> <span class="token class-name">NettyDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//设置编码器</span>    <span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerChannelMaxIdleTimeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    connectionManageHandler<span class="token punctuation">,</span><span class="token comment">//设置双工处理策略</span>    serverHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面来分析以下SimpleChannelInboundHandler的设计</p><h2 id="源码分析"><a class="header-anchor" href="#源码分析"></a>源码分析</h2><h3 id="SimpleChannelInboundHandler"><a class="header-anchor" href="#SimpleChannelInboundHandler"></a>SimpleChannelInboundHandler</h3><p>从上面可以看到业务的处理类都继承于<B>SimpleChannelInboundHandler</B><br><img src="https://i.loli.net/2021/11/18/GmHgT5OzsdwFfLk.jpg" alt="SimpleChannelInboundHandler的继承关系"></p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门基础一</title>
      <link href="2020/07/29/10.netty%E7%AC%94%E8%AE%B0/1.Netty%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
      <url>2020/07/29/10.netty%E7%AC%94%E8%AE%B0/1.Netty%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1>Netty入门基础</h1><h2 id="Netty是什么？"><a class="header-anchor" href="#Netty是什么？"></a>Netty是什么？</h2><blockquote><p>Netty 是一个异步事件驱动的网络应用框架，用于快速开发可维护的高性能服务器和客户端。</p></blockquote><p>Netty针对java nio做了封装和改进</p><h2 id="简单实例"><a class="header-anchor" href="#简单实例"></a>简单实例</h2><h3 id="socket"><a class="header-anchor" href="#socket"></a>socket</h3><ul><li>SocketServerDemo</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> socketDemo <span class="token operator">=</span> <span class="token function">SocketServerDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    socketDemo<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> SocketServerDemo <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9178</span><span class="token punctuation">)</span>        <span class="token comment">//accept()方法是阻塞式的,直到有请求进来建立连接</span>        <span class="token keyword">val</span> clientSocket <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> input <span class="token operator">=</span> <span class="token function">BufferedReader</span><span class="token punctuation">(</span><span class="token function">InputStreamReader</span><span class="token punctuation">(</span>clientSocket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> output <span class="token operator">=</span> <span class="token function">PrintWriter</span><span class="token punctuation">(</span>clientSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> request<span class="token operator">:</span> String<span class="token operator">?</span>        <span class="token keyword">var</span> response<span class="token operator">:</span> String<span class="token operator">?</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            request <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span>            <span class="token punctuation">&#125;</span>            response <span class="token operator">=</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>            output<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"响应: <span class="token interpolation variable">$request</span>"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SocketClientDemo</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">SocketClientDemo</span><span class="token punctuation">(</span>ip<span class="token operator">:</span> String<span class="token punctuation">,</span> port<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> client<span class="token operator">:</span> Socket <span class="token operator">=</span> <span class="token function">Socket</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> output<span class="token operator">:</span> PrintWriter <span class="token operator">=</span> <span class="token function">PrintWriter</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> input<span class="token operator">:</span> BufferedReader <span class="token operator">=</span> <span class="token function">BufferedReader</span><span class="token punctuation">(</span><span class="token function">InputStreamReader</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">/**     * 发送消息     */</span>    <span class="token keyword">fun</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">&#123;</span>        output<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 关闭input流     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">stopConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> socketClient <span class="token operator">=</span> <span class="token function">SocketClientDemo</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9178</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>socketClient<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    socketClient<span class="token punctuation">.</span><span class="token function">stopConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过SocketClientDemo是客户端向指定ip/port发起请求,SocketServerDemo是服务端接收请求并进行处理,具体的执行过程是</p><ul><li>SocketServers上的accept()方法会一直<B>阻塞</B>到一个连接的建立,然后在返回一个新的socket用于客户端和服务器之间的通信</li><li>BufferedReader和PrintWriter都继承与Socket,BufferedReader是从字符输入流中读取文本,PrintWriter是对文本格式化打印到输出流中</li><li>readLine()方法是一个阻塞方法,跳出阻塞的方法是读取到一个换行符或回车符为止</li></ul><p>传统的socket编程有一下几个缺点:</p><ol><li>服务端大量创建线程等待响应</li><li>内存占用问题</li><li>线程上下文的切换问题<br>这几个问题其实都是由于一个线程只能处理一个响应导致的,那么有没有一个线程可以处理多个响应的方法嘛?<br>答案是有<B>NIO</B>的解决处理方案</li></ol><h3 id="原生NIO"><a class="header-anchor" href="#原生NIO"></a>原生NIO</h3><p>NIO原指(New Input/Output)的英文缩写,但是由于这个API也已经出现的很久了不在New,现在也可以指的是非阻塞式(Non-blocking I/O)的IO<br>NIO的出现是依赖于操作系统底层的I/O多路复用的技术而来,epoll()可以参考《Scalable Event Multiplexing: epoll vs. kqueue》<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h3 id="Netty实例"><a class="header-anchor" href="#Netty实例"></a>Netty实例</h3><ul><li>NettyServer</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 初始化Bootstrap/boosGroup/workerGroup</span>    <span class="token keyword">val</span> serverBootstrap <span class="token operator">=</span> <span class="token function">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> boosGroup <span class="token operator">=</span> <span class="token function">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> workerGroup <span class="token operator">=</span> <span class="token function">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//2.设置前置条件</span>    serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>boosGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> ChannelInitializer<span class="token operator">&lt;</span>NioSocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>ch<span class="token operator">:</span> NioSocketChannel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token function">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> SimpleChannelInboundHandler<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> ChannelHandlerContext<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端打印<span class="token interpolation variable">$msg</span>"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">//3. 绑定端口</span>        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">9178</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>NettyClient</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 初始化bootstrap/group</span>    <span class="token keyword">val</span> bootstrap <span class="token operator">=</span> <span class="token function">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> group <span class="token operator">=</span> <span class="token function">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//2. 前置准备阶段</span>    bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> ChannelInitializer<span class="token operator">&lt;</span>Channel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>Exception<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>ch<span class="token operator">:</span> Channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token function">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//3. 设置Channel的网络连接</span>    <span class="token keyword">val</span> channel<span class="token operator">:</span> Channel <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9178</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//4. 发送数据</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": hello world!"</span><span class="token punctuation">)</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NettyServer的启动流程</p><ul><li>初始化Bootstrap/boosGroup/workerGroup</li><li>设置前置条件</li><li>绑定端口</li></ul><p>NettyClient的启动流程</p><ul><li>初始化bootstrap/group</li><li>前置准备阶段</li><li>设置Channel的网络连接信息</li><li>发送数据</li></ul><p>可以看到在NettyServer/NettyClient中都会有<B>Bootstrap</B>和<B>NioEventLoopGroup</B><br>NettyServer端中NioEventLoopGroup还分为<B>boos</B>和<B>worker</B><br>NettyServer端中的还会设置<B>ChildHandler</B>的相关内容之后会讲到</p><h2 id="Netty组件"><a class="header-anchor" href="#Netty组件"></a>Netty组件</h2><p>Netty的组件主要是分为<B>channel</B>、<B>回调</B>、<B>future</B>、<B>事件和ChannelHandler</B></p><ul><li><p>channel<br><B>channel</B>是数据的载体，可以把数据看做人，channel类比为车辆</p></li><li><p>回调<br>回调指的是Netty的一些网络动作会触发接口<B>ChannelHandler</B>的实现，例如通道建立连接时会触发的channelActive()方法等</p></li><li><p>Future<br>Future指的是操作完成后的结果类似于JUC中的future，Netty中也设计了一个顶层接口<B>ChannelFuture</B></p></li><li><p>事件和ChannelHandler<br>Netty事件是由动作触发的主要有</p><ul><li>连接已激活/失效</li><li>数据读取</li><li>用户事件</li><li>错误事件</li><li>打开/关闭远程节点连接</li><li>将数据写到channel</li></ul></li></ul><p><img src="https://i.loli.net/2021/11/18/kxJHG9MUN4nXypF.jpg" alt="事件模型"></p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>Netty是对NIO的封装和抽象，在操作对象上抽象出<B>Future</B>、<B>回调</B>、<B>ChannelHandler</B>，在操作行为上抽象出<B>选择器</B>、<B>事件</B>、<B>EventLoop</B>等概念</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.baeldung.com/a-guide-to-java-sockets">java socket指南</a><br><a href="https://segmentfault.com/q/1010000018753423">channelRead与channelReadComplete进行对比</a></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://long-zhou.github.io/2012/12/21/epoll-vs-kqueue.html">Scalable Event Multiplexing: epoll vs. kqueue</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leaf美团点评分布式ID生成系统</title>
      <link href="2020/07/12/1.%E6%9D%82%E8%AE%B0/Leaf%E7%BE%8E%E5%9B%A2%E7%82%B9%E8%AF%84%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%A0%94/"/>
      <url>2020/07/12/1.%E6%9D%82%E8%AE%B0/Leaf%E7%BE%8E%E5%9B%A2%E7%82%B9%E8%AF%84%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h1>Leaf-美团点评分布式ID生成系统</h1><p>leaf作为一个分布式id生成系统，代码简洁且高效，理论指导部分为<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">Leaf——美团点评分布式ID生成系统</a>,工程实践为https://github.com/Meituan-Dianping/Leaf</p><h2 id="理论"><a class="header-anchor" href="#理论"></a>理论</h2><p>leaf提供了三种方式的分布式id生成方案：</p><ol><li>始终为0</li><li>号段模式</li><li>雪花算法模式</li></ol><p>号段模式通过提前获取号段来优化算法<br>雪花算法通过等待或超时异常的方式来处理时钟回拨问题</p><h2 id="代码分析"><a class="header-anchor" href="#代码分析"></a>代码分析</h2><ul><li>SegmentIDGenImpl号段模式实现</li></ul><ol><li>对号段进行初始化</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SegmentBuffer</span> buffer <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">isInitOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//用synchronize锁住即将进行初始化从buffer</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//再次校验资源是否符合</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">isInitOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                      <span class="token comment">//初始化号段</span>                      <span class="token function">updateSegmentFromDb</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Init buffer. Update leafkey &#123;&#125; &#123;&#125; from db"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      buffer<span class="token punctuation">.</span><span class="token function">setInitOk</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Init buffer &#123;&#125; exception"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//反之从号段中获取</span>      <span class="token keyword">return</span> <span class="token function">getIdFromSegmentBuffer</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>获取id</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">getIdFromSegmentBuffer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SegmentBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//自旋</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buffer<span class="token punctuation">.</span><span class="token function">rLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">final</span> <span class="token class-name">Segment</span> segment <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//判断是否占用下一个号段</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">isNextReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">getIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.9</span> <span class="token operator">*</span> segment<span class="token punctuation">.</span><span class="token function">getStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">.</span><span class="token function">getThreadRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//异步开启占用下一号段</span>                    service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Segment</span> next <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>buffer<span class="token punctuation">.</span><span class="token function">nextPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token keyword">boolean</span> updateOk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                <span class="token function">updateSegmentFromDb</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>                                updateOk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update segment &#123;&#125; from db &#123;&#125;"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" updateSegmentFromDb exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>updateOk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    buffer<span class="token punctuation">.</span><span class="token function">wLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    buffer<span class="token punctuation">.</span><span class="token function">setNextReady</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    buffer<span class="token punctuation">.</span><span class="token function">getThreadRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    buffer<span class="token punctuation">.</span><span class="token function">wLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                    buffer<span class="token punctuation">.</span><span class="token function">getThreadRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//获取值segment.getValue是线程安全的AtomicLong</span>                <span class="token keyword">long</span> value <span class="token operator">=</span> segment<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> segment<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">rLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//等待，再次获取</span>            <span class="token function">waitAndSleep</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">wLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">final</span> <span class="token class-name">Segment</span> segment <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> value <span class="token operator">=</span> segment<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> segment<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">isNextReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    buffer<span class="token punctuation">.</span><span class="token function">switchPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">setNextReady</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Both two segments in &#123;&#125; are not ready!"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>EXCEPTION_ID_TWO_SEGMENTS_ARE_NULL<span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">wLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>异步从数据库中获取号段</li></ol><ul><li>SnowflakeIDGenImpl雪花算法实现</li></ul><ol><li>初始化</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * @param zkAddress zk地址     * @param port      snowflake监听端口     * @param twepoch   起始的时间戳     */</span>    <span class="token keyword">public</span> <span class="token class-name">SnowflakeIDGenImpl</span><span class="token punctuation">(</span><span class="token class-name">String</span> zkAddress<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">long</span> twepoch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>twepoch <span class="token operator">=</span> twepoch<span class="token punctuation">;</span>        <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span><span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> twepoch<span class="token punctuation">,</span> <span class="token string">"Snowflake not support twepoch gt currentTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取第一个网卡的ip地址</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token class-name">Utils</span><span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SnowflakeZookeeperHolder</span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeZookeeperHolder</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> zkAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"twepoch:&#123;&#125; ,ip:&#123;&#125; ,zkAddress:&#123;&#125; port:&#123;&#125;"</span><span class="token punctuation">,</span> twepoch<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> zkAddress<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向zk注册机器和临时节点</span>        <span class="token keyword">boolean</span> initFlag <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            workerId <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getWorkerID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"START SUCCESS USE ZK WORKERID-&#123;&#125;"</span><span class="token punctuation">,</span> workerId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>initFlag<span class="token punctuation">,</span> <span class="token string">"Snowflake Id Gen is not init ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>workerId <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> workerId <span class="token operator">&lt;=</span> maxWorkerId<span class="token punctuation">,</span> <span class="token string">"workerID must gte 0 and lte 1023"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取id</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Result</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//处理时钟回拨</span>            <span class="token keyword">long</span> offset <span class="token operator">=</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">;</span><span class="token comment">//时钟回拨超过5就进行等待</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">wait</span><span class="token punctuation">(</span>offset <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//可响应中断的</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"wait interrupted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//seq 为0的时候表示是下一毫秒时间开始对seq做随机</span>                sequence <span class="token operator">=</span> RANDOM<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//如果时间相等内部就进行等待</span>                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是新的ms开始</span>            sequence <span class="token operator">=</span> RANDOM<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>        <span class="token comment">//计算id</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token operator">|</span> sequence<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>系统业务监控的思考</title>
      <link href="2020/07/06/1.%E6%9D%82%E8%AE%B0/%E7%B3%BB%E7%BB%9F%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A7%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>2020/07/06/1.%E6%9D%82%E8%AE%B0/%E7%B3%BB%E7%BB%9F%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A7%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统业务监控，主要的目的是为了让内部人员可以更清楚当前系统的业务运行状态。它和系统运行级的监控分别代表的一个是业务维度的监控、一个是系统资源维度的监控，关注的点不一样。业务监控复杂的点在于监控策略与业务强关联并且数据准确性要求较高。以下根据大佬们的思考整理出的笔记</p></blockquote><h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2><blockquote><p>需要设计一个可扩展并且能够快速实现能支持业务任务使用决策的业务监控系统</p></blockquote><h3 id="范围"><a class="header-anchor" href="#范围"></a>范围</h3><p>设定该监控系统适用范围为saas化金融行业低频业务属性下的景。想要通过该系统实现：</p><ol><li>监控业务数据并且对业务异常进行告警</li><li>对业务数据进行汇总形成标准化的对接开发平台</li></ol><h3 id="定义"><a class="header-anchor" href="#定义"></a>定义</h3><ul><li>专有名称<br>…</li></ul><h3 id="现状"><a class="header-anchor" href="#现状"></a>现状</h3><p>…</p><h2 id="设计思路"><a class="header-anchor" href="#设计思路"></a>设计思路</h2><ol><li>将底层数据结构与业务规则剥离开，类似于桥接模式的设计</li></ol><h2 id="详细设计"><a class="header-anchor" href="#详细设计"></a>详细设计</h2><h3 id="总体概览"><a class="header-anchor" href="#总体概览"></a>总体概览</h3><h3 id="业务一"><a class="header-anchor" href="#业务一"></a>业务一</h3><p>介绍业务的功能</p><ol><li>输入</li></ol><ul><li>业务的输入参数</li></ul><ol start="2"><li>输出</li></ol><ul><li>业务的输出参数</li></ul><ol start="3"><li>业务流</li></ol><p>业务流程，内部处理逻辑，非核心业务的可以省略；这里可以用流程图来描述</p><ol start="4"><li>其它</li></ol><p>可以写一下注意事项</p><h3 id="存储设计"><a class="header-anchor" href="#存储设计"></a>存储设计</h3><p>这里存储主要在数据库上面（这部分根据重点，有的项目重点在缓存上，有些在文件上），数据库建议这里写清楚：数据库的建表语句和核心查询SQL。</p><h3 id="降级与预案"><a class="header-anchor" href="#降级与预案"></a>降级与预案</h3><p>这部分主要描述，当我们的正常业务不可用、使用超出系统限制的时候，会如何反应。这部分可以分场景（分情况）来描述，讲清楚即可。</p><h3 id="部署与运维"><a class="header-anchor" href="#部署与运维"></a>部署与运维</h3><p>一般情况下可以省略。如果涉及到跨系统调用、中间件，这里建议有一个部署图，并描述清楚，哪些是水平扩容、哪些是主备方式。</p><h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2><h3 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h3><p>补充材料可以描述，我们在做调研的过程中，涉及到的一些参考资料（可以是书、文章、论文）</p><h3 id="其他资料"><a class="header-anchor" href="#其他资料"></a>[其他资料]</h3><p>另外，有一些不方便在前面描写的，也可以在这里写一写，比如：错误编号</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 业务监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式中的一致性paxos算法以及其实现zab协议</title>
      <link href="2020/06/23/1.%E6%9D%82%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7paxos%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0zab%E5%8D%8F%E8%AE%AE/"/>
      <url>2020/06/23/1.%E6%9D%82%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7paxos%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0zab%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1>分布式中的一致性paxos算法以及其实现zab协议</h1><p>分布式最重要的问题就是如何解决，不同节点中数据的一致性。paxos算法就是最重要的解决这个问题的理论。</p><h2 id="paxos基础"><a class="header-anchor" href="#paxos基础"></a>paxos基础</h2><h3 id="Quorum机制"><a class="header-anchor" href="#Quorum机制"></a>Quorum机制</h3><blockquote><p>Quorum机制是表示在分布式系统中，只要大于总数-被修改数时，就能读到修改值</p></blockquote><p>Quorum是分布式系统中的一种机制，用来保证数据冗余和最终一致性的投票算法。Quorum机制不是一个强一致性的，无法保证每个节点都能读取到最新的数据，需要一个类似于版本号的服务来确定获取到的数据是最新的。</p><h3 id="paxos算法中定义的参与者角色"><a class="header-anchor" href="#paxos算法中定义的参与者角色"></a>paxos算法中定义的参与者角色</h3><ul><li>proposer 提案者</li><li>acceptor 批准者</li><li>learner 学习者</li></ul><h3 id="paxos算法的流程"><a class="header-anchor" href="#paxos算法的流程"></a>paxos算法的流程</h3><ol><li><p>准备阶段<br>proposer提案者向acceptor批准者发送一个当前提案者最大的ProposallID,acceptor批准者收到ProposallID后，将与自己的maxId进行比较，这样会产生三种结果</p><ol><li>回复数量中大于一半的节点返回的都是空，提案者直接向批准者发送<strong>更改</strong></li><li>回复数量中大于一半的节点返回的不是空，提案者直接向批准者发送<strong>自己最大的proposallID</strong>和<strong>更改</strong></li><li>回复数量中小于一半的节点，提案者重新进入准备阶段</li></ol></li><li><p>选举阶段</p></li></ol><p>proposer提案者向acceptor批准者发送一个<B>(proposallId,变更)</B>，acceptor接受到之后会比较maxId是否进行更新操作，并将结果返回给提案者。这样又产生了三种结果：<br>1. 大于一半的节点返回更新成功，进行全局广播写入成功,学习者进行更改<br>2. 小于一半的节点时时，重新进入准备阶段<br>3. 当收到一条提交失败时，说明有其他的提交者进行了提交，因此重新进入准备阶段</p><h3 id="paxos算法的常见问题"><a class="header-anchor" href="#paxos算法的常见问题"></a>paxos算法的常见问题</h3><ol><li>proposalId有什么作用？</li></ol><blockquote><p>通过类似于版本号的proposalId,将当前更改和版本进行关联，版本号大的可以替代版本号小的更改</p></blockquote><h2 id="Zab算法"><a class="header-anchor" href="#Zab算法"></a>Zab算法</h2><p>Zab协议是zk用来保证分布式事务最终一致性的的paxos算法的工程实践，其支持崩溃恢复</p><p>zab协议的具体实现可以分为以下两个部分：<br>pk</p><ul><li>消息广播阶段</li></ul><blockquote><p>Leader节点接受更改，再通知从节点，最后进行commit</p></blockquote><ul><li>崩溃恢复阶段</li></ul><blockquote><p>当Leader节点宕机，会进入崩溃恢复阶段，重新进行Leader选举</p></blockquote><h3 id="Zxid"><a class="header-anchor" href="#Zxid"></a>Zxid</h3><p><strong>Zxid</strong>是zab协议中的一个事务编号，由64位数字组成，其中低32位是一个简单的单调递增计数器，高32位表示leader节点的唯一任职周期。</p><h3 id="zab的具体流程"><a class="header-anchor" href="#zab的具体流程"></a>zab的具体流程</h3><h4 id="消息广播阶段"><a class="header-anchor" href="#消息广播阶段"></a>消息广播阶段</h4><p>消息广播阶段主要是分为</p><ol><li><strong>leader</strong>节点将操作分配一个zid，封装成一个事务，放到对应的follower节点对应的队列中</li><li>发送队列中的消息到对应的follower节点，返回相应的ACK消息到leader节点</li><li>leader节点根据follower节点返回的消息进行操作，过半进行<strong>广播事务的提交</strong></li></ol><h4 id="崩溃恢复阶段"><a class="header-anchor" href="#崩溃恢复阶段"></a>崩溃恢复阶段</h4><p>可能导致进入崩溃恢复阶段的情况有：</p><ol><li>初始化集群</li><li>leader崩溃</li><li>leader失去半数以上的机器</li></ol><p>zk中的节点一共有三种状态</p><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>following</td><td>从属节点</td></tr><tr><td>leading</td><td>leader节点，负责协调</td></tr><tr><td>election/looking</td><td>处于候选状态</td></tr></tbody></table><ul><li>选举的规则<br>候选节点首先在第一次投票中先将自己投为leander，然后将消息广播出去。其他的候选节点接受到消息后进行选举处理。<br>选举处理就是：</li></ul><ol><li>首先选举 epoch 最大的</li><li>如果 epoch 相等，则选 zxid 最大的</li><li>若 epoch 和 zxid 都相等，则选择 server id 最大的，就是配置 zoo.cfg 中的 myid</li><li>最后得出最终结果，改变各个节点的状态。选举结束。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paxos算法 </tag>
            
            <tag> zab协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《java8实战》读书笔记</title>
      <link href="2020/06/20/1.%E6%9D%82%E8%AE%B0/%E3%80%8Ajava8%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>2020/06/20/1.%E6%9D%82%E8%AE%B0/%E3%80%8Ajava8%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>《java8实战》读书笔记</h1><p>主要是关于java8的一些笔记。</p><h2 id="基础"><a class="header-anchor" href="#基础"></a>基础</h2><h3 id="java8中设计的三个编程概念"><a class="header-anchor" href="#java8中设计的三个编程概念"></a>java8中设计的三个编程概念</h3><ol><li><strong>流处理</strong></li><li><strong>函数传递</strong></li><li>并行与共享的可变数据</li></ol><h3 id="函数传递"><a class="header-anchor" href="#函数传递"></a>函数传递</h3><blockquote><p>行为参数化(函数传递)就是可以帮助你处理频繁变更的需求的一种软件开发模式</p></blockquote><ul><li>例1:用Comparator来排序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ls <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Comparator进行排序</span>ls<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i1<span class="token punctuation">,</span><span class="token class-name">Integer</span> i2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token operator">-</span>i1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例2:用Runable执行代码块</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ls <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Comparator进行排序</span>ls<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i1<span class="token punctuation">,</span><span class="token class-name">Integer</span> i2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token operator">-</span>i1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lambda表达式"><a class="header-anchor" href="#lambda表达式"></a>lambda表达式</h3><p>主要记录一下<strong>anyMatch</strong>、<strong>allMatch</strong>、<strong>noneMatch</strong>、<strong>findAny</strong></p><ul><li><strong>anyMatch</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> intList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//全部大于</span><span class="token keyword">if</span><span class="token punctuation">(</span>intList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-></span> item <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ls集合存在大于4的数字!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//存在大于</span><span class="token keyword">if</span><span class="token punctuation">(</span>intList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ls集合存在大于5的数字!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>findAny</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> intList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>findAny</strong>这里有一个需要注意的是返回的是steam流中的某一个元素，并不一定是第一个元素。在串行的情况下可能返回的是第一个元素，但是不保证并行的情况下仍然是第一个元素。</p><h3 id="Optional"><a class="header-anchor" href="#Optional"></a>Optional</h3><blockquote><p>Optional<T>类（java.util.Optional）是一个容器类，代表一个值存在或不存在。</p></blockquote><ul><li><p>isPresent<br>表示如果元素存在返回true，反之返回false</p></li><li><p>ifPresent<br>表示如果元素存在执行方法,不存在不执行</p></li><li><p>get<br>特别要注意一下，在不存在值的情况下会抛出异常</p></li><li><p>orElse()<br>当值不存在时，返回默认值</p></li></ul><h3 id="reduce操作"><a class="header-anchor" href="#reduce操作"></a>reduce操作</h3><blockquote><p>合并操作</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> reduceSumls <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一种写法</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sum <span class="token operator">=</span> reduceSumls<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> a<span class="token punctuation">,</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种写法</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sum <span class="token operator">=</span> reduceSumls<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reduceSum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gradle的安装与使用</title>
      <link href="2020/06/16/1.%E6%9D%82%E8%AE%B0/gradle%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>2020/06/16/1.%E6%9D%82%E8%AE%B0/gradle%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>gradle的安装与使用</h1><blockquote><p>由于新的项目大多是使用gradle进行依赖管理，因此在这里将其用法做一下总结</p></blockquote><h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2><p>主要步骤是：</p><ol><li>下载安装包</li><li>配置环境变量</li><li>查看版本号</li></ol><blockquote><p>gradle -v</p></blockquote><ul><li>显示对应版本号表示安装成功<br><img src="https://s1.ax1x.com/2020/06/16/NkXXFA.png" alt="NkXXFA.png"></li></ul><h2 id="基础知识"><a class="header-anchor" href="#基础知识"></a>基础知识</h2><p>gradle是一个基于Ant和Maven的理念的项目自动化构建工具。基于Groovy的特定领域语言（DSL）来声明项目设置。</p><h3 id="gradle与maven的对比"><a class="header-anchor" href="#gradle与maven的对比"></a>gradle与maven的对比</h3><ol><li>灵活性更高</li><li>性能更好</li><li>依赖管理</li></ol><h3 id="gradle构建生命周期"><a class="header-anchor" href="#gradle构建生命周期"></a>gradle构建生命周期</h3><p>gradle构建系统的生命周期可以分为：<strong>初始化</strong>、<strong>配置</strong>、<strong>运行</strong>三个阶段</p><p><img src="https://s1.ax1x.com/2020/06/20/NQ6IOg.png" alt="NQ6IOg.png"></p><ol><li>初始化阶段<br>此阶段读取根目录下的<strong>setting.gradle</strong>中的include信息，来决定构建哪些工程。以spring为例</li></ol><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">## 省略若干项目include &quot;spring-websocket&quot;include &quot;spring-framework-bom&quot;&#x2F;&#x2F; Exposes gradle buildSrc for IDE supportinclude &quot;buildSrc&quot;rootProject.children.find&#123; it.name &#x3D;&#x3D; &quot;buildSrc&quot; &#125;.name &#x3D; &quot;spring-build-src&quot;rootProject.name &#x3D; &quot;spring&quot;rootProject.children.each &#123;project -&gt;project.buildFileName &#x3D; &quot;$&#123;project.name&#125;.gradle&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>配置阶段<br>此阶段主要解析每个项目中的<strong>build.gradle</strong>配置文件、<strong>处理依赖关系</strong>、<strong>执行顺序</strong><br>以<strong>spring beans</strong>和<strong>spring-core</strong>两个项目为例</li></ol><ul><li><strong>spring-beans</strong>的gradle文件</li></ul><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">&#x2F;&#x2F;本项目的描述description &#x3D; &quot;Spring Beans&quot;&#x2F;&#x2F;插件apply plugin: &quot;groovy&quot;&#x2F;&#x2F;依赖关系dependencies &#123;    &#x2F;&#x2F;依赖同一个项目下的spring-core模块compile(project(&quot;:spring-core&quot;))    &#x2F;&#x2F;&quot;javax.inject:javax.inject:1&quot;等同与pom文件    &#x2F;&#x2F;&lt;dependency&gt;    &#x2F;&#x2F; &lt;groupId&gt;javax.inject&lt;&#x2F;groupId&gt;    &#x2F;&#x2F; &lt;artifactId&gt;javax.inject&lt;&#x2F;artifactId&gt;    &#x2F;&#x2F; &lt;version&gt;1&lt;&#x2F;version&gt;    &#x2F;&#x2F; &lt;scope&gt;compile&lt;&#x2F;scope&gt;    &#x2F;&#x2F;&lt;&#x2F;dependency&gt;optional(&quot;javax.inject:javax.inject:1&quot;)optional(&quot;org.yaml:snakeyaml:1.20&quot;)    optional(&quot;org.codehaus.groovy:groovy-all:$&#123;groovyVersion&#125;&quot;)optional(&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;kotlinVersion&#125;&quot;)optional(&quot;org.jetbrains.kotlin:kotlin-stdlib:$&#123;kotlinVersion&#125;&quot;)    &#x2F;&#x2F;只会在测试期间存在testCompile(&quot;org.apache.tomcat.embed:tomcat-embed-core:$&#123;tomcatVersion&#125;&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>spring-core</strong>的gradle文件</li></ul><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">dependencies &#123;    &#x2F;&#x2F;省略...cglib(&quot;cglib:cglib:$&#123;cglibVersion&#125;@jar&quot;)objenesis(&quot;org.objenesis:objenesis:$&#123;objenesisVersion&#125;@jar&quot;)jarjar(&quot;com.googlecode.jarjar:jarjar:1.3&quot;)    &#x2F;&#x2F;省略...compile(files(cglibRepackJar))compile(project(&quot;:spring-jcl&quot;))optional(&quot;io.netty:netty-buffer&quot;)testCompile(&quot;com.fasterxml.woodstox:woodstox-core:5.0.3&quot;) &#123;exclude group: &quot;stax&quot;, module: &quot;stax-api&quot;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>运行阶段</li></ol><blockquote><p>根据Gradle命令传递过来的任务名称，执行相关依赖任务。此阶段真正构建项目并执行项目下的各个任务。Gradle就会将这个任务链上的所有任务全部按依赖顺序执行一遍。</p></blockquote><h3 id="gradle插件"><a class="header-anchor" href="#gradle插件"></a>gradle插件</h3><h3 id="task的概念"><a class="header-anchor" href="#task的概念"></a>task的概念</h3><p><strong>gradle</strong>是通过task任务的模型进行驱动开发的，在一个gradle工程中将不同的构建工作打散成不同的task。task脚本采用Groovy语言进行编写。</p><ul><li>task定义示例</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">task helloword &#123;    println &#39;hello word!&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>task依赖示例</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;&#x2F;task显式调用 task task1 &#123;       println &#39;hello word!&#39; &#125; task task2 &#123;     println &#39;hello task2!&#39; &#125; task1.dependsOn task2 &#x2F;&#x2F;task内依赖 task task3(dependsOn: task2) &#123;     println &#39;hello task3!&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跳过依赖</li></ul><pre class="line-numbers language-Gradle" data-language="Gradle"><code class="language-Gradle">compile.doFirst &#123;    &#x2F;&#x2F; Here you would put arbitrary conditions in real life.    &#x2F;&#x2F; But this is used in an integration test so we want defined behavior.    if (true) &#123; throw new StopExecutionException() &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Gradle申明依赖"><a class="header-anchor" href="#Gradle申明依赖"></a>Gradle申明依赖</h3><h3 id="配置远程仓库"><a class="header-anchor" href="#配置远程仓库"></a>配置远程仓库</h3><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">repositories &#123;   maven &#123;      url &quot;http:&#x2F;&#x2F;repo.mycompany.com&#x2F;maven2&quot;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础命令"><a class="header-anchor" href="#基础命令"></a>基础命令</h2><ul><li>build 编译命令</li></ul><blockquote><p>./gradlew build --scan</p></blockquote><p>表示编译项目并上传相应的编译数据到云端进行分析，本地分析的命令是</p><blockquote><p>./gradlew clean app:assembleDebug --profile<br>该命令会在<strong>build/report</strong>中生成对应的报告</p></blockquote><ul><li>gradle  build</li></ul><blockquote><p>gradle  build<br> 编译（编译过程中会进行单元测试）</p></blockquote><ul><li>gradle test</li></ul><blockquote><p>gradle test <br> 单元测试</p></blockquote><ul><li>gradle test</li></ul><blockquote><p>gradle build -x test <br> 编译时跳过单元测试</p></blockquote><ul><li>gradle run</li></ul><blockquote><p>gradle run <br> 直接运行项目</p></blockquote><ul><li>gradle clean</li></ul><blockquote><p>gradle clean 清空所有编译、打包生成的文件(即：清空build目录)</p></blockquote><h2 id="build-gradle模板"><a class="header-anchor" href="#build-gradle模板"></a>build.gradle模板</h2><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;&#x2F; 创建Java项目插件，提供了所有构建和测试Java程序所需项目结构apply plugin: &#39;java&#39;&#x2F;&#x2F; 引入Maven插件，以便Gradle可以引用Maven仓库的Jar包apply plugin: &#39;maven&#39;&#x2F;&#x2F; 进行打包插件apply plugin: &#39;war&#39;&#x2F;&#x2F; Web项目服务器插件,此处配置后，不需再单独配置Web服务器apply plugin: &#39;jetty&#39;&#x2F;&#x2F; Web项目开发插件apply plugin: &#39;eclipse&#39;group &#x3D; &quot;com.suneee&quot;&#x2F;&#x2F; 指定编译*.java文件的JDK版本sourceCompatibility &#x3D; 1.8version &#x3D; &#39;1.0&#39;&#x2F;&#x2F; Web项目示例工程jar &#123;    manifest &#123;        attributes &#39;Implementation-Title&#39;: &#39;Gradle Quickstart&#39;, &#39;Implementation-Version&#39;: version        &#x2F;&#x2F; 题外话：Java项目，此处可以用来配置程序入口点        &#x2F;&#x2F; attributes &#39;Main-Class&#39;:&#39;com.suneee.**&#39;    &#125;&#125;&#x2F;&#x2F; 默认情况，Gradle没有定义任何资源库repositories &#123;    &#x2F;&#x2F; 使用Maven的中央存储库    mavenCentral()    &#x2F;&#x2F; 使用Maven的本地存储库    mavenLocal()&#125;&#x2F;&#x2F; 增加自定义的库repositories &#123;    flatDir&#123;            &#x2F;&#x2F; 项目目录下的lib文件夹            dirs &#39;lib&#39;         &#125;&#125;&#x2F;&#x2F; 解决Gradle编译时出现： 编码GBK的不可映射字符[compileJava, compileTestJava]*.options*.encoding &#x3D; &#39;UTF-8&#39;&#x2F;&#x2F; 解决项目Jar包依赖问题dependencies &#123;    &#x2F;&#x2F; 编译时，加入项目目录下lib文件    compile fileTree(dir:&#39;lib&#39;,include:&#39;*.jar&#39;)    compile &#39;c3p0:c3p0:0.9.1.2&#39;    compile &#39;mysql:mysql-connector-java:5.1.31&#39;     compile &#39;org.springframework.data:spring-data-redis:1.3.4.RELEASE&#39;    compile group: &#39;com.google.code.gson&#39;, name: &#39;gson&#39;, version: &#39;2.7&#39;    compile group: &#39;commons-collections&#39;, name: &#39;commons-collections&#39;, version: &#39;3.2&#39;    testCompile &quot;org.springframework:spring-test:4.1.0.RELEASE&quot;    testCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.+&#39;    compile &#39;com.alibaba:dubbo:2.8.4a&#39;    compile &#39;org.apache.zookeeper:zookeeper:3.4.8&#39;    compile &#39;com.101tec:zkclient:0.8&#39;    compile &#39;log4j:log4j:1.2.17&#39;    compile group: &#39;javax.activation&#39;, name: &#39;activation&#39;, version: &#39;1.1.1&#39;    compile group: &#39;javax.mail&#39;, name: &#39;mail&#39;, version: &#39;1.4.7&#39;    compile group: &#39;org.quartz-scheduler&#39;, name: &#39;quartz&#39;, version: &#39;1.7.2&#39;    compile group: &#39;aspectj&#39;, name: &#39;aspectjweaver&#39;, version: &#39;1.5.4&#39;    compile group: &#39;org.hibernate&#39;, name: &#39;hibernate-core&#39;, version: &#39;5.1.0.Final&#39;    compile group: &#39;org.hibernate&#39;, name: &#39;hibernate-entitymanager&#39;, version: &#39;5.1.0.Final&#39;    compile group: &#39;org.springframework&#39;, name: &#39;spring-orm&#39;, version: &#39;4.2.4.RELEASE&#39;    &#125;test &#123;    systemProperties &#39;property&#39;: &#39;value&#39;&#125;&#x2F;&#x2F; 发布项目导出的Jar包到指定仓库uploadArchives &#123;    repositories &#123;       flatDir &#123;           dirs &#39;repos&#39;       &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><ul><li>查看task</li></ul><blockquote><p>gradle task</p></blockquote><ul><li>编译-编译过程中会进行单元测试</li></ul><blockquote><p>gradle build</p></blockquote><ul><li>单元测试</li></ul><blockquote><p>gradle test</p></blockquote><ul><li>编译时跳过单元测试</li></ul><blockquote><p>gradle build -x test</p></blockquote><ul><li>直接远行项目</li></ul><blockquote><p>gradle run</p></blockquote><ul><li>清空build文件</li></ul><blockquote><p>gradle clean</p></blockquote><ul><li>安装jar到maven仓库</li></ul><blockquote><p>gradle install</p></blockquote><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://gradle.org/release-candidate/">官方下载地址</a><br><a href="https://www.cnblogs.com/shaloo/p/6096277.html">Gradle学习笔记</a><br><a href="https://www.cnblogs.com/NyanKoSenSei/p/11458953.html">Gradle的安装与配置</a><br><a href="https://www.cnblogs.com/lucas1024/p/9533566.html">【入门】Gradle的基本使用、在IDEA中的配置、常用命令</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> 编译工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共前缀_LeetCode08</title>
      <link href="2020/06/14/13.LeetCode/8.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
      <url>2020/06/14/13.LeetCode/8.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h1>最长公共前缀_LeetCode08</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p><ul><li>示例 1:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]输出: &quot;fl&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例 2:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]输出: &quot;&quot;解释: 输入不存在公共前缀。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><b>说明:</b></p><blockquote><p>所有输入只包含小写字母 a-z 。</p></blockquote><h2 id="解题思路"><a class="header-anchor" href="#解题思路"></a>解题思路</h2><ul><li>根据字符串数组中的每一个字符串依次比较前缀是否相同，从而得到最长公共前缀的长度。</li></ul><h2 id="代码"><a class="header-anchor" href="#代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.先找到最短字符串</span>        <span class="token keyword">int</span> minLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                minLength <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minLength <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> minLength <span class="token operator">></span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                minLength <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minLength <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//2.根据最短的字符串来进行依次循环判断</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Character</span> currentChar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>currentChar <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    currentChar <span class="token operator">=</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>currentChar<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                lastIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lastIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="官方思路"><a class="header-anchor" href="#官方思路"></a>官方思路</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prefix <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方解题思路有很多种，这里展示第一种感觉十分巧妙。</p><ol><li>获取到数组中的第一个字符串</li><li>第一个字符串和第二个字符串相互比较，通过<strong>indexOf</strong>得出用第一个字符串作为前缀是否满足。从而得到第一个字符串和第二个字符串的公共前缀字符串</li><li>在将第三个字符串拿来和公共字符串前缀作为对比，从而得到这次计算以后的公共字符串</li></ol><p><img src="https://s1.ax1x.com/2020/06/14/tzNyfx.png" alt="tzNyfx.png"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础知识</title>
      <link href="2020/06/12/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/7.mysql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2020/06/12/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/7.mysql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1>mysql基础知识</h1><p>收藏于<strong>三太子敖丙</strong>的<a href="https://mp.weixin.qq.com/s/NDL1Q6nqdPq5oMBWSpq4ug">数据库基础知识</a><br>这个公众号的原创文章非常不错，值得推荐</p><ul><li>mysql的执行流程<br><img src="https://s1.ax1x.com/2020/06/11/tHCWtA.md.png" alt="tHCWtA.png"></li></ul><p>主要分为一下几个流程:</p><ul><li>连接器</li><li>查询缓存</li><li>分析器</li><li>优化器</li><li>执行器</li><li>执行引擎</li></ul><h2 id="连接器"><a class="header-anchor" href="#连接器"></a>连接器</h2><p>连接器是负责和客户端建立连接、获取权限、维持和管理连接的。TCP连接成功之后，我们的连接是处于空闲状态的，可以通过来查看连接状态</p><blockquote><p>show processlist<br><img src="https://s1.ax1x.com/2020/06/11/tbZsEV.png" alt="tbZsEV.png"></p></blockquote><p>也可以查看服务端设置的超时过期时间</p><blockquote><p>SHOW VARIABLES LIKE ‘%timeout%’;<br><img src="https://s1.ax1x.com/2020/06/11/tbZbCD.png" alt="tbZbCD.png"></p></blockquote><p><strong>interactive_timeout</strong>为连接超时时间,默认是28800秒也就是8个小时</p><h2 id="查询缓存"><a class="header-anchor" href="#查询缓存"></a>查询缓存</h2><p>mysql中的缓存是按照key-value的形式在内存中开辟一块专门的内存区域来维护缓存数据;查询的时候先用sql字符串去缓存中查询，如果能命中就直接返回结果，如果不能命中就执行后面的操作。</p><p>mysql缓存只要关联表的结构或数据发生改变时，都会清空缓存中的数据</p><ul><li>适用场景</li></ul><blockquote><p>适用于写少读多的场景，例如字典表等</p></blockquote><p>ps:由于缓存的存在，可能会导致第一次查询后的执行时间和第一次不一样，可以用<strong>SQL_NO_CACHE</strong>来取消查询缓存</p><blockquote><p>SELECT SQL_NO_CACHE * FROM t_user ORDER BY id DESC;</p></blockquote><h2 id="语法分析"><a class="header-anchor" href="#语法分析"></a>语法分析</h2><p>语法分析主要是将客户端传入的字符串进行sql语法层面的解析</p><h2 id="优化器"><a class="header-anchor" href="#优化器"></a>优化器</h2><p>优化器主要是分析在查询时，那个索引作为最优索引,然后按照一定原则来得到它认为的目标SQL在当前情形下最有效的<strong>执行路径</strong>,优化器的目的是为了<strong>得到</strong>目标SQL的<strong>执行计划</strong>。</p><ul><li><p><strong>指定索引字段</strong></p></li><li><p>force index(idx_name)</p></li></ul><blockquote><p>强制指定用传入的索引字段</p></blockquote><ul><li>ignore index(idx_name)</li></ul><blockquote><p>强制指定忽略传入的索引字段</p></blockquote><ul><li>use index(idx_name)</li></ul><blockquote><p>推荐使用传入的索引字段,最后由mysql决定是不是用该索引</p></blockquote><blockquote><p>use index : 是建议MySQL去使用这个索引.最后到底是用不用, 还是由MySQL来决定.<br> 如果MySQL还是觉得全表扫描来得快, 那即使是有索引, 它还是会使用全表扫描。<br>force index : 是强制MySQL去使用这个索引. 如果用不上, 就全表. 如果能用上, 就一定会使用该索引.</p></blockquote><h2 id="执行器"><a class="header-anchor" href="#执行器"></a>执行器</h2><p>执行计划，就是一条SQL语句，在数据库中实际执行的时候，一步步的分别都做了什么。可以通过<strong>explain</strong>查看执行计划<br>具体每个字段的含义可以看参考文章</p><h2 id="执行引擎"><a class="header-anchor" href="#执行引擎"></a>执行引擎</h2><p>mysql软件的架构设计是上层步骤相同，底层执行引擎可以有多个选择，常用的执行引擎有<strong>InnoDB</strong>、<strong>MyISAM</strong>。<br>不同的执行引擎会产生不同的存储格式以及文件。</p><p><img src="https://segmentfault.com/img/bVbvl5j?w=1721&amp;h=1056" alt="执行引擎区别"></p><ul><li>InnoDB与MyISAM的区别</li></ul><table><thead><tr><th>-</th><th>索引方式</th><th>默认引擎版本</th><th>简述</th></tr></thead><tbody><tr><td>MyISAM引擎</td><td>非聚集索引方式</td><td>5.5版本之前</td><td>性能极佳，但却不支持事务处理（transaction）</td></tr><tr><td>INNODB引擎</td><td>聚集索引方式</td><td>5.5版本</td><td>和MyISAM相比，它支持ACID兼容的事务</td></tr></tbody></table><p><strong>执行引擎</strong>是最后具体实施执行计划的模块，根据不同的数据表所需要的数据特性不同，因此实际进行实施时会产生不同的文件以及不同的执行方式，把这些放在一起就是不同的执行引擎。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/20797475/mysql-force-index-vs-use-index">mysql-force-index-vs-use-index</a><br><a href="https://emacsist.github.io/emacsist.github.io/2016/07/15/mysql%E4%B8%ADuse-index-%E5%92%8C-force-index/">MySQL中USE INDEX 和 FORCE INDEX</a><br><a href="https://blog.csdn.net/weixin_43740552/article/details/102623930">mysql use index、ignore index、force index用法</a><br><a href="http://gxg353.blog.sohu.com/232999339.html">MySQL的show global variables like “%timeout%”</a></p><p><a href="https://blog.csdn.net/weixin_41558728/article/details/81704916">Mysql查看执行计划</a></p>]]></content>
      
      
      <categories>
          
          <category> 文章收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK类加载机制</title>
      <link href="2020/06/10/12.JVM/3.JDK%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>2020/06/10/12.JVM/3.JDK%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1>jdk的类加载机制</h1><h2 id="类加载的过程"><a class="header-anchor" href="#类加载的过程"></a>类加载的过程</h2><p><a href="https://imgchr.com/i/t7kEid"><img src="https://s1.ax1x.com/2020/06/10/t7kEid.png" alt="t7kEid.png"></a></p><p>类加载主要分为：</p><p><strong>加载</strong> -&gt; <strong>验证</strong> -&gt; <strong>准备</strong> -&gt; <strong>解析</strong> -&gt; <strong>初始化</strong></p><ul><li>加载</li></ul><blockquote><p>加载的主要作用是将外部的 .class 文件，加载到 Java 的方法区内</p></blockquote><ul><li>验证</li></ul><blockquote><p>验证class文件，是否符合jvm虚拟机的规范</p></blockquote><ul><li>准备</li></ul><blockquote><p>类变量分配内存，并将其初始化为默认值</p></blockquote><p><img src="https://s1.ax1x.com/2020/06/10/t7mcSH.png" alt="t7mcSH.png"></p><p>类变量在准备阶段就进行了初始化，但是在方法内部定义的变量不会在准备阶段进行初始化，因此ide提示局部变量未进行</p><ul><li>解析<br>解析是将符号引用替换为直接引用的过程。符号引用是一种定义，可以是任何字面上的含义，而直接引用就是直接指向目标的指针、相对偏移量。主要分为以下几个步骤：</li><li>类或接口的解析</li><li>类方法解析</li><li>接口方法解析</li><li>字段解析</li></ul><p>几个经常发生的异常，就与这个阶段有关</p><ul><li>java.lang.NoSuchFieldError 根据继承关系从下往上，找不到相关字段时的报错</li><li>java.lang.IllegalAccessError 字段或者方法，访问权限不具备时的错误</li><li>java.lang.NoSuchMethodError 找不到相关方法时的错误</li></ul><p>解析过程保证了相互引用的完整性，把继承与组合推进到运行时</p><ul><li>初始化<br>先来看一端代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>b = b + 1;由于b + 1中b中是变量，在静态代码块中无法引用</p></blockquote><ul><li><p><strong>static 语句块，只能访问到定义在 static 语句块之前的变量</strong></p></li><li><p><strong>JVM 会保证在子类的初始化方法执行之前，父类的初始化方法已经执行完毕</strong></p></li></ul><h2 id="类加载器"><a class="header-anchor" href="#类加载器"></a>类加载器</h2><p>类加载器所做的事情就将class文件进行解析，加载到jvm的方法区；主要分为<strong>Bootstrap ClassLoader</strong>、<strong>Extention ClassLoader</strong>、<strong>App ClassLoader</strong>、<strong>Custom ClassLoader</strong></p><ul><li><p>Bootstrap ClassLoader<br>用于加载<strong>加载核心类库</strong>也就是 rt.jar、resources.jar、charsets.jar等</p></li><li><p>Extention ClassLoader<br>扩展类加载器，主要用于加载lib/ext目录下的jar包和.class文件</p></li><li><p>App ClassLoader<br>这是我们写的 Java 类的默认加载器，有时候也叫作 System ClassLoader。一般用来加载 classpath 下的其他所有 jar 包和 .class 文件，我们写的代码，会首先尝试使用这个类加载器进行加载</p></li><li><p>Custom ClassLoader<br>自定义加载器，支持一些个性化的扩展功能。</p></li></ul><h2 id="双亲委派加载机制"><a class="header-anchor" href="#双亲委派加载机制"></a>双亲委派加载机制</h2><p>双亲委派机制的意思是除了顶层的启动类加载器以外，其余的类加载器，在加载之前，都会委派给它的父加载器进行加载。这样一层层向上传递，直到祖先们都无法胜任，它才会真正的加载。</p><p>ps:这样做的目的主要是解决同一个jvm中只能加载同一个类一次</p><h2 id="自定义加载器"><a class="header-anchor" href="#自定义加载器"></a>自定义加载器</h2><ul><li>tomcat的类加载机制</li></ul><p><strong>WebAppClassLoader</strong>的类加载器优先加载。等它加载不到的时候，再交给上层的 ClassLoader 进行加载。这个加载器用来隔绝不同应用的 .class 文件，比如你的两个应用，可能会依赖同一个第三方的不同版本，它们是相互没有影响的。</p><ul><li>SPI机制</li></ul><pre class="line-numbers language-none"><code class="language-none">SPI 实际上是“基于接口的编程＋策略模式＋配置文件”组合实现的动态加载机制，主要使用 java.util.ServiceLoader 类进行动态装载。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>spi机制的实现是基于让线程的上下文类加载器去加载ServiceLoader，由于当前线程上下文类加载器是基于App ClassLoader的，因此并不违反双亲加载机制。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入学习Java线程池</title>
      <link href="2020/06/09/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/6.%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>2020/06/09/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/6.%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1>深入学习Java线程池</h1><p>转载自:</p><pre class="line-numbers language-none"><code class="language-none">原文链接： stackify 翻译： ImportNew.com - 一杯哈希不加盐译文链接： http:&#x2F;&#x2F;www.importnew.com&#x2F;29212.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="导语"><a class="header-anchor" href="#导语"></a>导语</h2><p>线程池是多线程编程中的核心概念，简单来说就是一组可以执行任务的空闲线程。<br>首先，我们了解一下多线程框架模型，明白为什么需要线程池。</p><p>线程是在一个进程中可以执行一系列指令的执行环境，或称运行程序。多线程编程指的是用多个线程并行执行多个任务。当然，JVM 对多线程有良好的支持。</p><p><strong>PS:进程可以简单的理解为程序，线程可以理解为进程下实际做事的小兵甲乙丙丁</strong></p><p>尽管这带来了诸多优势，首当其冲的就是程序性能提高，但多线程编程也有缺点 —— 增加了代码复杂度、同步问题、非预期结果和增加创建线程的开销。</p><p><strong>在这篇文章中，我们来了解一下如何使用 Java 线程池来缓解这些问题。</strong></p><h2 id="java线程池"><a class="header-anchor" href="#java线程池"></a>java线程池</h2><p>Java 通过 executor 对象来实现自己的线程池模型。可以使用 executor 接口或其他线程池的实现，它们都允许细粒度的控制。</p><p>java.util.concurrent 包中有以下接口：</p><ul><li>Executor —— 执行任务的简单接口</li><li>ExecutorService —— 一个较复杂的接口，包含额外方法来管理任务和 executor 本身</li><li>ScheduledExecutorService —— 扩展自 ExecutorService，增加了执行任务的调度方法</li></ul><p>除了这些接口，这个包中也提供了 Executors 类直接获取实现了这些接口的 executor 实例。一般来说，一个Java线程池包含以下部分：</p><ul><li>工作线程的池子，负责管理线程</li><li>线程工厂，负责创建新线程</li><li>等待执行的任务队列</li></ul><p>在下面的章节，让我们仔细看一看Java类和接口如何为线程池提供支持。</p><h3 id="Executors-类和-Executor-接口"><a class="header-anchor" href="#Executors-类和-Executor-接口"></a>Executors 类和 Executor 接口</h3><p>Executors 类包含工厂方法创建不同类型的线程池，Executor是个简单的线程池接口，只有一个execute() 方法。<br>我们通过一个例子来结合使用这两个类(接口)，首先创建一个单线程的线程池，然后用它执行一个简单的语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Executor</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Single thread pool test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意语句写成了lambda表达式，会被自动推断成Runnable类型。<br>如果有工作线程可用，execute() 方法将执行语句，否则就把Runnable任务放进队列，等待线程可用。</p><p>基本上，executor 代替了显式创建和管理线程。</p><p>Executors 类里的工厂方法可以创建很多类型的线程池：</p><ul><li>newSingleThreadExecutor()：包含单个线程和无界队列的线程池，同一时间只能执行一个任务</li><li>newFixedThreadPool()：包含固定数量线程并共享无界队列的线程池；当所有线程处于工作状态，有新任务提交时，任务在队列中等待，直到一个线程变为可用状态</li><li>newCachedThreadPool()：只有需要时创建新线程的线程池</li><li>newWorkStealingThreadPool()：基于工作窃取（work-stealing）算法的线程池，后面章节详细说明</li></ul><p>ps:**newWorkStealingThreadPool()**的源代码是这样的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span>        <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>defaultForkJoinWorkerThreadFactory<span class="token punctuation">,</span>            <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Runtime.getRuntime().availableProcessors()返回的是机器的<strong>逻辑处理器数量</strong><br>默认的<strong>newWorkStealingPool</strong>会返回一个期望并行度为当前逻辑处理器数量的Fork/Join线程池</p></blockquote><p><strong>接下来，让我们看一下 ExecutorService 接口提供了哪些新功能？</strong></p><ul><li>ExecutorService</li></ul><p>创建 ExecutorService 方式之一便是通过 Excutors 类的工厂方法</p><blockquote><p>ExecutorService executor = Executors.newFixedThreadPool(10);</p></blockquote><p>除了execute()方法，接口也定义了相似的submit()方法，这个方法可以返回一个Future对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> callableTask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//业务操作</span>    <span class="token keyword">return</span> <span class="token number">0.02d</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>callableTask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否执行完毕</span><span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的例子可以看到Future接口可以返回Callable类型任务的结果，而且能显示任务的执行状态。</p><p>当没有任务等待执行时，ExecutorService并不会自动销毁，所以你可以使用shutdown()或shutdownNow()来显式关闭它。</p><blockquote><p>executor.shutdown();</p></blockquote><p><strong>ScheduledExecutorService</strong></p><p>这是ExecutorService的一个子接口，增加了调度任务的方法</p><blockquote><p>ScheduledExecutorService executor = Executors.newScheduledThreadPool(10);</p></blockquote><p>schedule() 方法的参数指定执行的方法、延时和 TimeUnit</p><blockquote><p>Future<Double> future = executor.schedule(callableTask, 2, TimeUnit.MILLISECONDS);</p></blockquote><p>另外，这个接口定义了其他两个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">xecutor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fixed Rate Scheduled"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>executor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fixed Delay Scheduled"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>scheduleAtFixedRate() 方法延时 2 毫秒执行任务，然后每 2 秒重复一次。相似的，scheduleWithFixedDelay() 方法延时 2毫秒后执行第一次，然后在上一次执行完成 2 秒后再次重复执行。</p><p>在下面的章节，我们来看一下 ExecutorService 接口的两个实现：ThreadPoolExecutor 和ForkJoinPool。</p><p>ps:ScheduledExecutorService具有延迟功能的线程池</p><p><strong>ThreadPoolExecutor</strong><br>这个线程池的实现增加了配置参数的能力。创建 ThreadPoolExecutor 对象最方便的方式就是通过Executors 工厂方法：</p><blockquote><p>ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(10);</p></blockquote><p>这种情况下，线程池按照默认值预配置了参数。线程数量由以下参数控制：</p><ul><li>corePoolSize 和 maximumPoolSize：表示线程数量的范围</li><li>keepAliveTime：决定了额外线程存活时间</li></ul><p>我们深入了解一下这些参数如何使用。<br>当一个任务被提交时，如果执行中的线程数量小于 corePoolSize，一个新的线程被创建。如果运行的线程数量大于 corePoolSize，但小于 maximumPoolSize，并且任务队列已满时，依然会创建新的线程。如果多于 corePoolSize 的线程空闲时间超过 keepAliveTime，它们会被终止。<br>上面那个例子中，newFixedThreadPool() 方法创建的线程池，corePoolSize=maximumPoolSize=10 并且 keepAliveTime 为 0 秒。<br>如果你使用 newCachedThreadPool() 方法，创建的线程池 maximumPoolSize 为Integer.MAX_VALUE，并且 keepAliveTime 为 60 秒。</p><blockquote><p>ThreadPoolExecutor cachedPoolExecutor = (ThreadPoolExecutor) Executors.newCachedThreadPool();</p></blockquote><p>The parameters can also be set through a constructor or through setter methods:<br>这些参数也可以通过构造函数或setter方法设置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>executor<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ThreadPoolExecutor 的一个子类便是 ScheduledThreadPoolExecutor，它实现了ScheduledExecutorService 接口。你可以通过 newScheduledThreadPool() 工厂方法来创建这种类型的线程池。</p><blockquote><p>ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(5);</p></blockquote><p>上面语句创建了一个线程池，corePoolSize 为 5，maximumPoolSize 无限制，keepAliveTime 为 0 秒。</p><p><strong>ForkJoinPool</strong></p><p>另一个线程池的实现是 ForkJoinPool 类。它实现了 ExecutorService 接口，并且是 Java 7 中 fork/join 框架的重要组件。</p><p><strong>fork/join 框架基于“工作窃取算法”。简而言之，意思就是执行完任务的线程可以从其他运行中的线程“窃取”工作。</strong></p><p><strong>ForkJoinPool 适用于任务创建子任务的情况，或者外部客户端创建大量小任务到线程池。</strong></p><p>这种线程池的工作流程如下：</p><ul><li>创建 ForkJoinTask 子类</li><li>根据某种条件将任务切分成子任务</li><li>调用执行任务</li><li>将任务结果合并</li><li>实例化对象并添加到池中</li></ul><p>创建一个<strong>ForkJoinTask</strong>，你可以选择<strong>RecursiveAction</strong>或<strong>RecursiveTask</strong>这两个子类，后者有返回值。<br>我们来实现一个继承<strong>RecursiveTask</strong>的类，计算阶乘，并把任务根据阈值划分成子任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactorialTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> THRESHOLD <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>     <span class="token comment">// standard constructors</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">BigInteger</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">>=</span> THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">ForkJoinTask</span><span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token function">createSubtasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ForkJoinTask</span><span class="token operator">::</span><span class="token function">join</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span>ONE<span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token operator">::</span><span class="token function">multiply</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">calculate</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类需要实现的主要方法就是重写 compute() 方法，用于合并每个子任务的结果。</p><p>具体划分任务逻辑在 createSubtasks() 方法中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FactorialTask</span><span class="token punctuation">></span></span> <span class="token function">createSubtasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FactorialTask</span><span class="token punctuation">></span></span> dividedTasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    dividedTasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FactorialTask</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dividedTasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FactorialTask</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dividedTasks<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，calculate() 方法包含一定范围内的乘数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">BigInteger</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> n<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span>ONE<span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token operator">::</span><span class="token function">multiply</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，任务可以添加到线程池：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ForkJoinPool</span> pool <span class="token operator">=</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span><span class="token function">commonPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> result <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FactorialTask</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>ThreadPoolExecutor 与 ForkJoinPool 对比</strong></p><p>初看上去，似乎 fork/join 框架带来性能提升。但是这取决于你所解决问题的类型。<br>当选择线程池时，非常重要的一点是牢记创建、管理线程以及线程间切换执行会带来的开销。</p><ul><li><p><strong>ThreadPoolExecutor可以控制线程数量和每个线程执行的任务,这很适合你需要在不同的线程上执行少量巨大的任务</strong></p></li><li><p><strong>相比较而言，ForkJoinPool 基于线程从其他线程“窃取”任务。正因如此，当任务可以分割成小任务时可以提高效率。</strong></p></li></ul><p>为了实现工作窃取算法，fork/join 框架使用两种队列：</p><ul><li>包含所有任务的主要队列</li><li>每个线程的任务队列</li></ul><pre class="line-numbers language-none"><code class="language-none">当线程执行完自己任务队列中的任务，它们试图从其他队列获取任务。为了使这一过程更加高效，线程任务队列使用双端队列（double ended queue）数据结构，一端与线程交互，另一端用于“窃取”任务。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来自The H Developer的图很好的表现出了这一过程：</p><p><img src="https://s1.ax1x.com/2020/06/09/t5ffI0.png" alt="t5ffI0.png"></p><p>和这种模型相比，ThreadPoolExecutor 只使用一个主要队列。<br>最后要注意的一点 ForkJoinPool 只适用于任务可以创建子任务。否则它和 ThreadPoolExecutor没区别，甚至开销更大。</p><p><strong>ps:每个工作线程都维持着一个双端的任务队列，当一个工作线程执行完成对应工作队列中的任务时，会去其他线程对应的任务队列尾端去获取待执行的任务来进行执行。</strong></p><h3 id="总结"><a class="header-anchor" href="#总结"></a>总结</h3><p>线程池有很大优势，简单来说就是可以将任务的执行从线程的创建和管理中分离。另外，如果使用得当，它们可以极大提高应用的性能。<br>如果你学会充分利用线程池，Java 生态系统好处便是其中有很多成熟稳定的线程池实现。</p><h2 id="收藏笔记"><a class="header-anchor" href="#收藏笔记"></a>收藏笔记</h2><p>展示了由<strong>Executors</strong>提供的几种常用的线程池：</p><ol><li>ScheduledExecutorService</li><li>ThreadPoolExecutor</li><li>ForkJoinPool</li></ol><p>前两种都是基于<strong>ThreadPoolExecutor</strong>的封装，最后一种是基于<strong>ForkJoinPool</strong>的封装。</p><p><strong>ThreadPoolExecutor</strong>适合于执行少量耗时的任务，线程数可估。</p><p><strong>ForkJoinPool</strong>适合于可分解的任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> t<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ForkJoinWorkerThread</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ForkJoinWorkerThread</span><span class="token punctuation">)</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span>workQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>common<span class="token punctuation">.</span><span class="token function">externalPush</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RecursiveTask 提交任务时如果提交线程是ForkJoinWorkerThread就向线程所属于的任务队列进行提交;<br>如果不是就说明是业务线程第一次向ForkJoinThreadPool提交任务，就调用ForkJoinPool的通用线程池进行任务的提交</p><ul><li>初始化<strong>ForkJoinPool.common</strong><br><img src="https://s1.ax1x.com/2020/06/10/tTxzF0.png" alt="tTxzF0.png"></li></ul><blockquote><p>4个逻辑处理器-1，得到forkJoin的并行度为3</p></blockquote><p>CPU逻辑核数（CPU线程数，Thread）：通过超线程技术，能将一个物理核分成多个逻辑核<br>一般情况，一颗物理CPU可以有多个物理内核，加上intel的超线程技术（HT, Hyper-Threading）能够把一个物理处理器（核心，内核）在软件层变成两个逻辑处理器，可以使处理器在某一时刻，同步并行处理更多指令和数据（即有多个线程并行工作）。</p><p>逻辑核心数指的就是线程数</p>]]></content>
      
      
      <categories>
          
          <category> 文章收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper的相关思考</title>
      <link href="2020/06/08/1.%E6%9D%82%E8%AE%B0/Zookeeper%E7%9A%84%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83/"/>
      <url>2020/06/08/1.%E6%9D%82%E8%AE%B0/Zookeeper%E7%9A%84%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1>Zookeeper的相关思考</h1><p>相信大部分同学第一次接触到ZooKeeper(后文中简称为zk)都是和Dubbo一起接触到的，在Dubbo开源时将阿里内部的注册中心进行剥离，用zk作为服务发现的注册中心进行使用的。在大规模的微服务化一段时间后，有越来越多的声音提醒我们zk并不适用于作为服务发现的注册中心进行使用。从下面三个问题出发，探寻一下zk为什么不适用作为注册中心。</p><ol><li>zk是什么，以及由来和想要解决的问题？</li><li>zk为什么不适用作为注册中心？</li><li>zk迁移eurka的方案</li></ol><h2 id="zk的由来"><a class="header-anchor" href="#zk的由来"></a>zk的由来</h2><ul><li>维基百科的简介</li></ul><blockquote><p>Apache ZooKeeper是Apache软件基金会的一个软件项目，它为大型分布式计算提供开源的分布式配置服务、同步服务和命名注册。ZooKeeper曾经是Hadoop的一个子项目，但现在是一个独立的顶级项目。</p></blockquote><ul><li>zk的由来</li></ul><p>下面这段内容摘自《从Paxos到Zookeeper 》 ，本文中很多的名词介绍也来自本书。</p><pre class="line-numbers language-none"><code class="language-none">Zookeeper 最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以，雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于“ZooKeeper”这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目),雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 RaghuRamakrishnan 开玩笑地说：“在这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧一一一因为各个以动物命名的分布式组件放在一起，雅虎的整个分布式系统看上去就像一个大型的动物园了而 Zookeeper 正好要用来进行分布式环境的协调一一于是，Zookeeper 的名字也就由此诞生了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>zk的诞生是为了解决在分布式环境下不同系统之间进行分布式协调的场景。在分布式环境下需要将同一个系统分布式化后对外提供出像一个系统一样的服务，这样就需要引入分布式协调工具，将这种原来是由应用系统解决的事情剥离开的工具。因此zk就诞生了。</p><p>总的来说，zk提供了一个可靠的分布式的工具，可以对外提供一下几种功能(API中的方法):</p><ol><li>创建节点</li><li>读节点数据</li><li>更新节点数据</li><li>删除节点</li><li>监控节点变化</li></ol><ul><li>zk解决的问题</li></ul><ol><li>元数据配置：kafka中存储元数据</li><li>注册中心：应用于充当注册中心</li><li>作为分布式锁：Curator分布式锁</li></ol><h2 id="zk不适用作为注册中心"><a class="header-anchor" href="#zk不适用作为注册中心"></a>zk不适用作为注册中心</h2><p>网上大部分都在说zk不适合作为注册中心其根据主要是<a href="https://medium.com/knerd/eureka-why-you-shouldnt-use-zookeeper-for-service-discovery-4932c5c7e764"> Eureka! Why You Shouldn’t Use ZooKeeper for Service Discovery</a>一文，分析其原因主要是说zk是基于cp的，而注册中心的业务更适用于ap。</p><p>下面根据<a href="https://yq.aliyun.com/articles/601745?scm=20140722.184.2.173">阿里巴巴为什么不用 ZooKeeper 做服务发现</a>一文整理而来</p><h3 id="数据的一致性需求分析"><a class="header-anchor" href="#数据的一致性需求分析"></a>数据的一致性需求分析</h3><p>注册中心最本质的功能就是一个Query函数Si = F(service-name),以service-name作为查询参数，返回服务对应的地址；</p><blockquote><p>如果注册中心满足ap的情况：<br>每次返回的结果都不一样，这样会导致不同的服务提供者接收到的流量都不一样，在短时间内流量的不一致会因为多次调用根据大数理论这点流量差异会被抹消掉。</p></blockquote><blockquote><p>如果注册中心是基于cp的情况：<br>在不保证可用性的情况下，如果一个zk节点与leader节点失联的情况下为了保证zk中数据的一致性，该节点不会对外提供服务。<br>对于和该zk节点在同一分区中的服务来说，由于zk的异常导致本身业务也不能进行同区调用是不能接受的。<strong>可以说在实践中，注册中心不能因为自身的任何原因破坏服务之间本身的可连通性，这是注册中心设计应该遵循的铁律！</strong></p></blockquote><blockquote><p>在 CAP 的权衡中，注册中心的可用性比数据强一致性更宝贵，所以整体设计更应该偏向 AP，而非 CP，数据不一致在可接受范围，而P下舍弃A却完全违反了注册中心不能因为自身的任何原因破坏服务本身的可连通性的原则。</p></blockquote><p>ps:总的来说就是注册中心在面临CAP的问题上，可以接受数据的不一致，但是不能接受业务的不可用。</p><h3 id="服务规模、容量、服务联通性"><a class="header-anchor" href="#服务规模、容量、服务联通性"></a>服务规模、容量、服务联通性</h3><p>从服务的规模、容量、服务联通性来分析</p><p>由于zk为了保证数据的一致性，因此在进行写入的时候必须又Leader发起，在向其他节点分发写入操作，因此写入操作不能进行横向扩展。这样就无法解决zk的服务规模增长问题，或者将注册节点根据业务进行划分，不同的业务注册到不同的zk上去，但是注册中心作为基础服务，不能由于自身的限制去影响业务，让业务按照业务服务进行划分。</p><h3 id="注册中心需要持久存储和事务日志"><a class="header-anchor" href="#注册中心需要持久存储和事务日志"></a>注册中心需要持久存储和事务日志</h3><p>注册中心需要进行持久化存储和事务日志嘛？我认为是需要的，但是不用像zk一样把每一次变更的日志记录下来。<br>例如：</p><ol><li><p>serviceA=》{ip1:0001,ip1:0002}</p></li><li><p>serviceA=》{ip1:0001}</p></li><li><p>serviceA=》{ip1:0001,ip1:0002}</p></li></ol><p>这样的ABA的持久化连续记录，对于服务的调用方来说并没有什么意义，服务调用发起方更关注的是其要调用的服务的实时的地址列表和实时健康状态，每次发起调用时，并不关心要调用的服务的历史服务地址列表、过去的健康状态。</p><p>需要进行持久化记录的应该是服务的元数据信息：服务的版本，分组，所在的数据中心，权重，鉴权策略信息，service label等</p><h3 id="Service-Health-Check"><a class="header-anchor" href="#Service-Health-Check"></a>Service Health Check</h3><p>使用zk作为服务注册中心时，服务的健康监测是用Zookeeper的Seesion机制可以理解为绑定TCP长连接的监测。这种监测只是能证明client的网络通路是畅通的，并不能代变服务是可用。</p><p>健康检测的一大基本设计原则就是尽可能真实的反馈服务本身的真实健康状态，否则一个不敢被服务调用者相信的健康状态判定结果还不如没有健康检测。</p><h3 id="注册中心的容灾考虑"><a class="header-anchor" href="#注册中心的容灾考虑"></a>注册中心的容灾考虑</h3><p><strong>在实践中，注册中心不能因为自身的任何原因破坏服务之间本身的可连通性</strong>，这句话说的是就算zk服务宕机的情况下也不能影响已有服务的功能。zk的client端并没有提供这样的功能，dubbo使用zk作为注册中心时候的时候，是在dubbo消费者缓存了生产者的地址。</p><h3 id="阿里对于zk的总结"><a class="header-anchor" href="#阿里对于zk的总结"></a>阿里对于zk的总结</h3><p><strong>The King Of Coordination for Big Data!</strong></p><pre class="line-numbers language-none"><code class="language-none">在粗粒度分布式锁，分布式选主，主备高可用切换等不需要高TPS 支持的场景下有不可替代的作用，而这些需求往往多集中在大数据、离线任务等相关的业务领域，因为大数据领域，讲究分割数据集，并且大部分时间分任务多进程&#x2F;线程并行处理这些数据集，但是总是有一些点上需要将这些任务和进程统一协调，这时候就是 ZooKeeper 发挥巨大作用的用武之地。但是在交易场景交易链路上，在主业务数据存取，大规模服务发现、大规模健康监测等方面有天然的短板，应该竭力避免在这些场景下引入 ZooKeeper，在阿里巴巴的生产实践中，应用对ZooKeeper申请使用的时候要进行严格的场景、容量、SLA需求的评估。所以可以使用 ZooKeeper，但是大数据请向左，而交易则向右，分布式协调向左，服务发现向右。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a class="header-anchor" href="#总结"></a>总结</h3><p>zk在业务领域作为服务发现的注册中心是越来越不适用了，在以前没有专门的工具的情况下，一个可靠、易用的工具就是作为服务发现的最好选择，但是在当下zk作为注册中心确显得不合适宜。目前注册中心的选择有很多</p><ul><li><a href="http://www.heartthinkdo.com/?p=1933">Eureka</a></li><li><a href="https://nacos.io/zh-cn/index.html">Nacos</a></li><li><a href="https://github.com/etcd-io/etcd">etcd</a></li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/ailiuzhe/p/11678043.html">ZooKeeper的详细介绍以及底层原理</a><br><a href="https://zhuanlan.zhihu.com/p/69114539?utm_source=wechat_session">为什么需要 Zookeeper</a><br><a href="https://zhuanlan.zhihu.com/p/134549250">腾讯 ZooKeeper 源码和实践揭秘</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗马数字转整数_LeetCode07</title>
      <link href="2020/06/03/13.LeetCode/7.%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0-LeetCode07/"/>
      <url>2020/06/03/13.LeetCode/7.%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0-LeetCode07/</url>
      
        <content type="html"><![CDATA[<h1>罗马数字转整数</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><pre class="line-numbers language-none"><code class="language-none">罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。字符          数值I             1V             5X             10L             50C             100D             500M             1000例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例 1:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: &quot;III&quot;输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例 2:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: &quot;IV&quot;输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例 3:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: &quot;IX&quot;输出: 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例 4:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: &quot;LVIII&quot;输出: 58解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>示例 5:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: &quot;MCMXCIV&quot;输出: 1994解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解题思路"><a class="header-anchor" href="#解题思路"></a>解题思路</h2><blockquote><p>这道题目类似于用key去查询对应的value的过程，按照既定的规则去判断</p></blockquote><h2 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution_07</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> tempMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> tempMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"V"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"IV"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"IX"</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"XL"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"XC"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CD"</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CM"</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doSolution</span><span class="token punctuation">(</span><span class="token string">"III"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doSolution</span><span class="token punctuation">(</span><span class="token string">"IV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doSolution</span><span class="token punctuation">(</span><span class="token string">"IX"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doSolution</span><span class="token punctuation">(</span><span class="token string">"LVIII"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doSolution</span><span class="token punctuation">(</span><span class="token string">"MCMXCIV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Solution_07</span><span class="token punctuation">.</span><span class="token function">doSolution</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">doSolution</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> tempMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> tempMap1<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> tempMap1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> tempStr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tempMap1<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>tempStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> tempMap1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tempStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">doSolution</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> tempMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">doSolution</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><p><img src="https://s1.ax1x.com/2020/06/04/tDFSu4.png" alt="tDFSu4.png"></p><h2 id="官方解题"><a class="header-anchor" href="#官方解题"></a>官方解题</h2><p>在官方解题思路中还看到一种解法，很好。因此记录下来</p><p><img src="https://s1.ax1x.com/2020/06/04/tDFdVs.png" alt="tDFdVs.png"></p><ul><li>代码实现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution_07_01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token string">"III"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token string">"IV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token string">"IX"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token string">"LVIII"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token string">"MCMXCIV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tempInt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tempInt <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                tempInt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span><span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> tempInt <span class="token operator">+</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">'I'</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'V'</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'X'</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'L'</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'C'</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'D'</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行耗时虽然有所提高但是内存占用依旧很高，看来递归的方法处理问题会消耗大量的内存。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC之AQS分析</title>
      <link href="2020/06/03/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/5.JUC%E4%B9%8BAQS%E5%88%86%E6%9E%90/"/>
      <url>2020/06/03/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/5.JUC%E4%B9%8BAQS%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>JUC之AQS分析</h1><p>转载自:<a href="https://mp.weixin.qq.com/s/-swOI_4_cxP5BBSD9wd0lA">【死磕Java并发】—–J.U.C之AQS</a></p><blockquote><p>讲述AQS(<strong>AbstractQueuedSynchronizer</strong>)的核心代码的文章，AQS的文章可参考<B><a href="%5C2020%5C05%5C22%5C2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%5C13.%E5%AF%B9AQS%E7%9A%84%E5%88%86%E6%9E%90">对AQS的分析</a></B>一文</p></blockquote><h2 id="AQS简介"><a class="header-anchor" href="#AQS简介"></a>AQS简介</h2><p>java的内置锁一直都是备受争议的，在JDK 1.6之前，synchronized这个重量级锁其性能一直都是较为低下，虽然在1.6后，进行大量的锁优化策略,但是与Lock相比synchronized还是存在一些缺陷的：虽然synchronized提供了便捷性的隐式获取锁释放锁机制（基于JVM机制），但是它却缺少了获取锁与释放锁的可操作性，可中断、超时获取锁，且它为独占式在高并发场景下性能大打折扣。</p><p>在介绍Lock之前，我们需要先熟悉一个非常重要的组件，掌握了该组件JUC包下面很多问题都不在是问题了。该组件就是AQS。</p><p>AQS：<strong>AbstractQueuedSynchronizer</strong>，即<strong>队列同步器</strong>。它是构建锁或者其他同步组件的基础框架（如ReentrantLock、ReentrantReadWriteLock、Semaphore等），JUC并发包的作者（Doug Lea）期望它能够成为实现大部分同步需求的基础。它是JUC并发包中的核心基础组件。</p><p>AQS解决了子类实现同步器时涉及当的大量细节问题，例如获取同步状态、FIFO同步队列。基于AQS来构建同步器可以带来很多好处。它不仅能够极大地减少实现工作，而且也不必处理在多个位置上发生的竞争问题。</p><p>在基于AQS构建的同步器中，只能在一个时刻发生阻塞，从而降低上下文切换的开销，提高了吞吐量。同时在设计AQS时充分考虑了可伸缩行，因此J.U.C中所有基于AQS构建的同步器均可以获得这个优势。</p><p>AQS的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。</p><p>AQS使用一个int类型的成员变量state来表示同步状态，当state&gt;0时表示已经获取了锁，当state = 0时表示释放了锁。它提供了三个方法（getState()、setState(int newState)、compareAndSetState(int expect,int update)）来对同步状态state进行操作，当然AQS可以确保对state的操作是安全的。</p><p>（PS:<strong>state</strong>在不同的工具中代变着不同的语义，可以是代变获取锁、到达的线程数、信号量等）</p><p>AQS通过内置的FIFO同步队列来完成资源获取线程的排队工作，如果当前线程获取同步状态失败（锁）时，AQS则会将当前线程以及等待状态等信息构造成一个节点（Node）并将其加入同步队列，同时会阻塞当前线程，当同步状态释放时，则会把节点中的线程唤醒，使其再次尝试获取同步状态。</p><p>（PS:AQS内部的队列实现了线程的等待和唤醒，相当于帮助使用者屏蔽了线程操作的工作）</p><h2 id="AQS提供的方法"><a class="header-anchor" href="#AQS提供的方法"></a>AQS提供的方法</h2><ul><li>getState()：返回同步状态的当前值；</li><li>setState(int newState)：设置当前同步状态；</li><li>compareAndSetState(int expect, int update)：使用CAS设置当前状态，该方法能够保证状态设置的原子性；</li><li>tryAcquire(int arg)：独占式获取同步状态，获取同步状态成功后，其他线程需要等待该线程释放同步状态才能获取同步状态</li><li>tryRelease(int arg)：独占式释放同步状态；</li><li>tryAcquireShared(int arg)：共享式获取同步状态，返回值大于等于0则表示获取成功，否则获取失败；</li><li>tryReleaseShared(int arg)：共享式释放同步状态；</li><li>isHeldExclusively()：当前同步器是否在独占式模式下被线程占用，一般该方法表示是否被当前线程所独占；</li><li>acquire(int arg)：独占式获取同步状态，如果当前线程获取同步状态成功，则由该方法返回，否则，将会进入同步队列等待，该方法将会调用可重写的tryAcquire(int arg)方法；</li><li>acquireInterruptibly(int arg)：与acquire(int arg)相同，但是该方法响应中断，当前线程为获取到同步状态而进入到同步队列中，如果当前线程被中断，则该方法会抛出InterruptedException异常并返回；</li><li>tryAcquireNanos(int arg,long nanos)：超时获取同步状态，如果当前线程在nanos时间内没有获取到同步状态，那么将会返回false，已经获取则返回true</li><li>acquireShared(int arg)：共享式获取同步状态，如果当前线程未获取到同步状态，将会进入同步队列等待，与独占式的主要区别是在同一时刻可以有多个线程获取到同步状态；</li><li>acquireSharedInterruptibly(int arg)：共享式获取同步状态，响应中断；</li><li>tryAcquireSharedNanos(int arg, long nanosTimeout)：共享式获取同步状态，增加超时限制；</li><li>release(int arg)：独占式释放同步状态，该方法会在释放同步状态之后，将同步队列中第一个节点包含的线程唤醒；</li><li>releaseShared(int arg)：共享式释放同步状态；</li></ul><h3 id="CLH同步队列"><a class="header-anchor" href="#CLH同步队列"></a>CLH同步队列</h3><p>CLH同步队列是一个<strong>FIFO双向队列</strong>，AQS依赖它来完成同步状态的管理，当前线程如果获取同步状态失败时，AQS则会将当前线程已经等待状态等信息构造成一个节点（Node）并将其加入到CLH同步队列，同时会<strong>阻塞当前线程</strong>，当同步状态释放时，会把首节点唤醒（公平锁），使其再次尝试获取同步状态。</p><p>在CLH同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、状态（waitStatus）、前驱节点（prev）、后继节点（next），其定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 共享 */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 独占 */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> EXCLUSIVE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 因为超时或者中断，节点会被设置为取消状态，被取消的节点时不会参与到竞争中的，他会一直保持取消状态不会转变为其他状态；     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 后继节点的线程处于等待状态，而当前节点的线程如果释放了同步状态或者被取消，将会通知后继节点，使后继节点的线程得以运行     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 节点在等待队列中，节点线程等待在Condition上，当其他线程对Condition调用了signal()后，改节点将会从等待队列中转移到同步队列中，加入到同步状态的获取中     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 表示下一次共享式同步状态获取将会无条件地传播下去     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">/** 等待状态 */</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>    <span class="token comment">/** 前驱节点 */</span>    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>    <span class="token comment">/** 后继节点 */</span>    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token comment">/** 获取同步状态的线程 */</span>    <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>    <span class="token class-name">Node</span> nextWaiter<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span> <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NullPointerException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> p <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">,</span> <span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> mode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">,</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> waitStatus<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CLH同步队列结构图如下：</p><p><img src="https://s1.ax1x.com/2020/06/03/tdb0ds.png" alt="tdb0ds.png"></p><h3 id="入列"><a class="header-anchor" href="#入列"></a>入列</h3><p>学了数据结构的我们，CLH队列入列是再简单不过了，无非就是</p><ol><li>tail指向新节点、</li><li>新节点的prev指向当前最后的节点，</li><li>当前最后一个节点的next指向新节点。<br>代码我们可以看看addWaiter(Node node)方法：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//新建Node</span>     <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//快速尝试添加尾节点</span>     <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>         <span class="token comment">//CAS设置尾节点</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>             <span class="token keyword">return</span> node<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">//多次尝试</span>     <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> node<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>addWaiter(Node node)先通过快速尝试设置尾节点，如果失败，则调用enq(Node node)方法设置尾节点<br>(PS: 如果当前尾节点存在就通过CAS机制设置当前尾节点的next节点为新节点)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//多次尝试，直到成功为止</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token comment">//tail不存在，设置为首节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//设置为尾节点</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面代码中，两个方法都是通过一个CAS方法compareAndSetTail(Node expect, Node update)来设置尾节点，该方法可以确保节点是线程安全添加的。在enq(Node node)方法中，AQS通过“死循环”的方式来保证节点可以正确添加，只有成功添加后，当前线程才会从该方法返回，否则会一直执行下去。<br>(PS：通过“自旋”的方式设置尾节点)</p><h3 id="出列"><a class="header-anchor" href="#出列"></a>出列</h3><p>CLH同步队列遵循FIFO，首节点的线程释放同步状态后，将会唤醒它的后继节点（next），而后继节点将会在获取同步状态成功时将自己设置为首节点，这个过程非常简单，head执行该节点并断开原首节点的next和当前节点的prev即可，注意在这个过程是不需要使用CAS来保证的，因为只有一个线程能够成功获取到同步状态。</p><h2 id="同步状态的获取与释放"><a class="header-anchor" href="#同步状态的获取与释放"></a>同步状态的获取与释放</h2><p>在前面提到过，AQS是构建Java同步组件的基础，我们期待它能够成为实现大部分同步需求的基础。<strong>AQS的设计模式</strong>采用的<strong>模板方法模式</strong>，子类通过继承的方式，实现它的抽象方法来管理同步状态，对于子类而言它并没有太多的活要做，AQS提供了大量的模板方法来实现同步，主要是分为三类：<strong>独占式获取和释放同步状态</strong>、<strong>共享式获取和释放同步状态</strong>、<strong>查询同步队列中的等待线程情况</strong>。自定义子类使用AQS提供的模板方法就可以实现自己的同步语义。</p><h3 id="独占式"><a class="header-anchor" href="#独占式"></a>独占式</h3><blockquote><p>独占式，同一时刻仅有一个线程持有同步状态。</p></blockquote><p><strong>独占式同步状态获取</strong><br>acquire(int arg)方法为AQS提供的模板方法，该方法为独占式获取同步状态，但是该方法对中断不敏感，也就是说由于线程获取同步状态失败加入到CLH同步队列中，后续对线程进行中断操作时，线程不会从同步队列中移除。代码如下：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各个方法定义如下：</p><ul><li>tryAcquire：</li></ul><blockquote><p>去尝试获取锁，获取成功则设置锁状态并返回true，否则返回false。该方法自定义同步组件自己实现，该方法必须要保证线程安全的获取同步状态。</p></blockquote><ul><li>addWaiter</li></ul><blockquote><p>如果tryAcquire返回FALSE（获取同步状态失败），则调用该方法将当前线程加入到CLH同步队列尾部。</p></blockquote><ul><li>acquireQueued</li></ul><blockquote><p>当前线程会根据公平性原则来进行阻塞等待（自旋）,直到获取锁为止；并且返回当前线程在等待过程中有没有中断过。</p></blockquote><ul><li>selfInterrupt</li></ul><blockquote><p>产生一个中断。</p></blockquote><p><strong>acquireQueued方法</strong>为一个自旋的过程，也就是说当前线程（Node）进入同步队列后，就会进入一个自旋的过程，每个节点都会自省地观察，当条件满足，获取到同步状态后，就可以从这个自旋过程中退出，否则会一直执行下去。</p><p>如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//中断标志</span>            <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">/*             * 自旋过程，其实就是一个死循环而已             */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//当前线程的前驱节点</span>                <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//当前线程的前驱节点是头结点，且同步状态成功</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//获取失败，线程等待--具体后面介绍</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码中可以看到，当前线程会一直尝试获取同步状态，当然前提是只有其前驱节点为头结点才能够尝试获取同步状态，理由：</p><ul><li><p>保持FIFO同步队列原则。</p></li><li><p>头节点释放同步状态后，将会唤醒其后继节点，后继节点被唤醒后需要检查自己是否为头节点。</p></li></ul><p>(PS：只有在前置节点是头节点的情况下，才会检查同步状态)</p><p>acquire(int arg)方法流程图如下：</p><p><img src="https://s1.ax1x.com/2020/06/03/tdxrB8.jpg" alt="tdxrB8.jpg"></p><h3 id="独占式获取响应中断"><a class="header-anchor" href="#独占式获取响应中断"></a>独占式获取响应中断</h3><p>AQS提供了acquire(int arg)方法以供独占式获取同步状态，但是该方法对中断不响应，对线程进行中断操作后，该线程会依然位于CLH同步队列中等待着获取同步状态。为了响应中断，AQS提供了acquireInterruptibly(int arg)方法，该方法在等待获取同步状态时，如果当前线程被中断了，会立刻响应中断抛出异常InterruptedException。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先校验该线程是否已经中断了，如果是则抛出InterruptedException，否则执行tryAcquire(int arg)方法获取同步状态，如果获取成功，则直接返回，否则执行doAcquireInterruptibly(int arg)。doAcquireInterruptibly(int arg)定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doAcquireInterruptibly(int arg)方法与acquire(int arg)方法仅有两个差别。</p><p>1.方法声明抛出InterruptedException异常。</p><p>2.在中断方法处不再是使用interrupted标志，而是直接抛出InterruptedException异常。</p><h3 id="独占式超时获取"><a class="header-anchor" href="#独占式超时获取"></a>独占式超时获取</h3><p>AQS除了提供上面两个方法外，还提供了一个增强版的方法：tryAcquireNanos(int arg,long nanos)。该方法为acquireInterruptibly方法的进一步增强，它除了响应中断外，还有超时控制。即如果当前线程没有在指定时间内获取同步状态，则会返回false，否则返回true。如下：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token function">doAcquireNanos</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tryAcquireNanos(int arg, long nanosTimeout)方法超时获取最终是在doAcquireNanos(int arg, long nanosTimeout)中实现的，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">doAcquireNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//nanosTimeout &lt;= 0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//超时时间</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanosTimeout<span class="token punctuation">;</span>        <span class="token comment">//新增Node节点</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//自旋</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取同步状态成功</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">/*                 * 获取失败，做超时、中断判断                 */</span>                <span class="token comment">//重新计算需要休眠的时间</span>                nanosTimeout <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//已经超时，返回false</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment">//如果没有超时，则等待nanosTimeout纳秒</span>                <span class="token comment">//注：该线程会直接从LockSupport.parkNanos中返回，</span>                <span class="token comment">//LockSupport为JUC提供的一个阻塞和唤醒的工具类，后面做详细介绍</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        nanosTimeout <span class="token operator">></span> spinForTimeoutThreshold<span class="token punctuation">)</span>                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//线程是否已经中断了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对超时控制，程序首先记录唤醒时间deadline ，deadline = System.nanoTime() + nanosTimeout（时间间隔）。如果获取同步状态失败，则需要计算出需要休眠的时间间隔nanosTimeout（= deadline - System.nanoTime()），如果nanosTimeout &lt;= 0 表示已经超时了，返回false，如果大于spinForTimeoutThreshold（1000L）则需要休眠nanosTimeout ，如果nanosTimeout &lt;= spinForTimeoutThreshold ，就不需要休眠了，直接进入快速自旋的过程。原因在于 spinForTimeoutThreshold 已经非常小了，非常短的时间等待无法做到十分精确，如果这时再次进行超时等待，相反会让nanosTimeout 的超时从整体上面表现得不是那么精确，所以在超时非常短的场景中，AQS会进行无条件的快速自旋。</p><p>(PS:自旋的设计技巧在较短的时间内采用自旋，在还剩较长的时间内采用休眠的方式)</p><p><img src="https://s1.ax1x.com/2020/06/03/twptNF.png" alt="twptNF.png"></p><h3 id="独占式同步状态释放"><a class="header-anchor" href="#独占式同步状态释放"></a>独占式同步状态释放</h3><p>当线程获取同步状态后，执行完相应逻辑后就需要释放同步状态。AQS提供了<strong>release(int arg)方法</strong>释放同步状态：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法同样是先调用自定义同步器自定义的tryRelease(int arg)方法来释放同步状态，释放成功后，会调用unparkSuccessor(Node node)方法唤醒后继节点（如何唤醒LZ后面介绍）。</p><p>这里稍微总结下：</p> <pre class="line-numbers language-none"><code class="language-none">在AQS中维护着一个FIFO的同步队列，当线程获取同步状态失败后，则会加入到这个CLH同步队列的对尾并一直保持着自旋。在CLH同步队列中的线程在自旋时会判断其前驱节点是否为首节点，如果为首节点则不断尝试获取同步状态，获取成功则退出CLH同步队列。当线程执行完逻辑后，会释放同步状态，释放后会唤醒其后继节点。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="共享式"><a class="header-anchor" href="#共享式"></a>共享式</h3><p>共享式与独占式的最主要区别在于同一时刻独占式只能有一个线程获取同步状态，而共享式在同一时刻可以有多个线程获取同步状态。例如读操作可以有多个线程同时进行，而写操作同一时刻只能有一个线程进行写操作，其他操作都会被阻塞。</p><h4 id="共享式同步状态获取"><a class="header-anchor" href="#共享式同步状态获取"></a>共享式同步状态获取</h4><p>AQS提供acquireShared(int arg)方法共享式获取同步状态：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">//获取失败，自旋获取同步状态</span>        <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面程序可以看出，方法首先是调用tryAcquireShared(int arg)方法尝试获取同步状态，如果获取失败则调用doAcquireShared(int arg)自旋方式获取同步状态，共享式获取同步状态的标志是返回 &gt;= 0 的值表示获取成功。自选式获取同步状态如下：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span>共享式节点    <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//前驱节点</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果其前驱节点，获取同步状态</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//尝试获取同步</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span>                        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tryAcquireShared(int arg)方法尝试获取同步状态，返回值为int，当其 &gt;= 0 时，表示能够获取到同步状态，这个时候就可以从自旋过程中退出。</p><p>acquireShared(int arg)方法不响应中断，与独占式相似，AQS也提供了响应中断、超时的方法，分别是：acquireSharedInterruptibly(int arg)、tryAcquireSharedNanos(int arg,long nanos)，这里就不做解释了。</p><h4 id="共享式同步状态释放"><a class="header-anchor" href="#共享式同步状态释放"></a>共享式同步状态释放</h4><p>获取同步状态后，需要调用release(int arg)方法释放同步状态，方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为可能会存在多个线程同时进行释放同步状态资源，所以需要确保同步状态安全地成功释放，一般都是通过<strong>CAS</strong>和<strong>循环</strong>来完成的。</p><h3 id="阻塞和唤醒线程"><a class="header-anchor" href="#阻塞和唤醒线程"></a>阻塞和唤醒线程</h3><p>在线程获取同步状态时如果获取失败，则加入CLH同步队列，通过通过自旋的方式不断获取同步状态，但是在自旋的过程中则需要判断当前线程是否需要阻塞，其主要方法在acquireQueued()：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过这段代码我们可以看到，在获取同步状态失败后，线程并不是立马进行阻塞，需要检查该线程的状态，检查状态的方法为 shouldParkAfterFailedAcquire(Node pred, Node node) 方法，该方法主要靠前驱节点判断当前线程是否应该被阻塞，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//前驱节点</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment">//状态为signal，表示当前线程处于等待状态，直接放回true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//前驱节点状态 > 0 ，则为Cancelled,表明该节点已经超时或者被中断了，需要从同步队列中取消</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">//前驱节点状态为Condition、propagate</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码主要检查当前线程是否需要被阻塞，具体规则如下：</p><ol><li>如果当前线程的前驱节点状态为SINNAL，则表明当前线程需要被阻塞，调用unpark()方法唤醒，直接返回true，当前线程阻塞</li><li>如果当前线程的前驱节点状态为CANCELLED（ws &gt; 0），则表明该线程的前驱节点已经等待超时或者被中断了，则需要从CLH队列中将该前驱节点删除掉，直到回溯到前驱节点状态 &lt;= 0 ，返回false</li><li>如果前驱节点非SINNAL，非CANCELLED，则通过CAS的方式将其前驱节点设置为SINNAL，返回false<br>如果 shouldParkAfterFailedAcquire(Node pred, Node node) 方法返回true，则调用parkAndCheckInterrupt()方法阻塞当前线程：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>parkAndCheckInterrupt() 方法主要是把当前线程挂起，从而阻塞住线程的调用栈，同时返回当前线程的中断状态。其内部则是调用LockSupport工具类的park()方法来阻塞该方法。</p><p>当线程释放同步状态后，则需要唤醒该线程的后继节点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">//唤醒后继节点</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用unparkSuccessor(Node node)唤醒后继节点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//当前节点状态</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment">//当前状态 &lt; 0 则设置为 0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当前节点的后继节点</span>    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">//后继节点为null或者其状态 > 0 (超时或者被中断了)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//从tail节点来找可用节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//唤醒后继节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能会存在当前线程的后继节点为null，超时、被中断的情况，如果遇到这种情况了，则需要跳过该节点，但是为何是从tail尾节点开始，而不是从node.next开始呢？原因在于node.next仍然可能会存在null或者取消了，所以采用tail回溯办法找第一个可用的线程。最后调用LockSupport的unpark(Thread thread)方法唤醒该线程。</p><h2 id="LockSupport"><a class="header-anchor" href="#LockSupport"></a>LockSupport</h2><p>从上面我可以看到，当需要阻塞或者唤醒一个线程的时候，AQS都是使用LockSupport这个工具类来完成的。</p><blockquote><p>LockSupport是用来创建锁和其他同步类的基本线程阻塞原语</p></blockquote><p>每个使用LockSupport的线程都会与一个许可关联，如果该许可可用，并且可在进程中使用，则调用park()将会立即返回，否则可能阻塞。如果许可尚不可用，则可以调用 unpark 使其可用。但是注意许可不可重入，也就是说只能调用一次park()方法，否则会一直阻塞。</p><p>LockSupport定义了一系列以park开头的方法来阻塞当前线程，unpark(Thread thread)方法来唤醒一个被阻塞的线程。如下：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>park()</td><td>阻塞当前线程，如果调用unpark(Thread thread)方法或者线程被中断，才会从park()方法中返回</td></tr><tr><td>park(Object blocker)</td><td>为了线程调度，在许可可用之前禁用当前线程</td></tr><tr><td>parkNanos(long nanos)</td><td>为了线程调度禁用当前线程，最多等待指定的时间，除非许可可用</td></tr><tr><td>parkNanos(Object blocker,long nanos)</td><td>为了线程调度，在许可可用之前禁用当前线程，最多等待nanos秒</td></tr><tr><td>parkUntil(long deadline)</td><td>为了线程调度，在指定时间内禁用当前线程，除非许可可用</td></tr><tr><td>parkUntil(Object blocker,long deadline)</td><td>为了线程调度，在指定的时间前禁用当前线程，除非许可可用</td></tr><tr><td>unpark(Thread thread)</td><td>如果给定的线程的许可尚不可用，则使其可用</td></tr></tbody></table><p>park(Object blocker)方法的blocker参数，主要是用来标识当前线程在等待的对象，该对象主要用于问题排查和系统监控。</p><p>park方法和unpark(Thread thread)都是成对出现的，同时unpark必须要在park执行之后执行，当然并不是说没有不调用unpark线程就会一直阻塞，park有一个方法，它带了时间戳（parkNanos(long nanos)：为了线程调度禁用当前线程，最多等待指定的等待时间，除非许可可用）。</p><p>park()方法的源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>unpark(Thread thread)方法源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         UNSAFE<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从上面可以看出，其内部的实现都是通过UNSAFE（sun.misc.Unsafe UNSAFE）来实现的，其定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两个都是native本地方法。Unsafe 是一个比较危险的类，主要是用于执行低级别、不安全的方法集合。尽管这个类和所有的方法都是公开的（public），但是这个类的使用仍然受限，你无法在自己的java程序中直接使用该类，因为只有授信的代码才能获得该类的实例。</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p><strong>AQS</strong>作为其他JUC工具类的底层工具类，用<strong>state</strong>和<strong>双向队列</strong>的数据结构来分别表示资源的状态和线程的操作。提供常用的扩展方法<strong>独占式获取和释放同步状态</strong>、<strong>共享式获取和释放同步状态</strong>、<strong>查询同步队列中的等待线程情况</strong></p>]]></content>
      
      
      <categories>
          
          <category> 文章收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J.U.C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的异常传播机制</title>
      <link href="2020/06/02/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/4.Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/"/>
      <url>2020/06/02/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/4.Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1>Java中的异常传播机制</h1><p>转载自:<a href="https://mp.weixin.qq.com/s/0NS5Iy1FL-9o1MiJIGI9RQ">Java中的异常传播</a></p><blockquote><p>讲述java中底层异常的类型以及如何进行处理</p></blockquote><p>为了方便讲解，这里我准备了一小段异常示例代码，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">remainder</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DiviByZeroException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> dividend <span class="token operator">%</span> divisor<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DiviByZeroException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DiviByZeroException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">remainder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiviByZeroException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，我们声明了一个remainder函数，它接收两个int类型参数，dividend参数表示被除数，divisor参数表示除数，函数里面返回dividend/divisor的计算结果，其实就是一个求余数的过程。我们都知道这里可能会抛出除以零的异常，这里我们捕获了ArithmeticException异常，然后将ArithmeticException这个运行时异常转化成DivideByZeroException检查性异常，最后抛出这个检查性异常。这里DivideByZeroException是我们自定义的异常，它继承自Exception，故它是一个检查性异常。</p><p>然后我们需要通过javac命令对这个ExceptionTest测试类进行编译以获取到它的class字节码文件，这里就不演示了，我想大家都会。有了字节码文件，下一步我们需要查看它的字节码内容，这里我们可以通过javap命令来查看，具体操作命令如下所示：</p><blockquote><p>javap -c -v -l ExceptionTest.class</p></blockquote><p>然后在命令行窗口里就会返回我们想要的字节码内容，如下图所示：</p><p><img src="https://s1.ax1x.com/2020/06/03/td0Rbj.png" alt="td0Rbj.png"></p><p>不过，这里我推荐你使用JBE(Java Bytecode Editor即Java字节码编辑器)工具，因为它使用起来更方便。JBE的下载地址如下所示：</p><p>(PS：我用的是Idea中的<strong>Show Bytecode</strong>)</p>]]></content>
      
      
      <categories>
          
          <category> 文章收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数_LeetCode06</title>
      <link href="2020/06/01/13.LeetCode/6.%E5%9B%9E%E6%96%87%E6%95%B0-LeetCode06/"/>
      <url>2020/06/01/13.LeetCode/6.%E5%9B%9E%E6%96%87%E6%95%B0-LeetCode06/</url>
      
        <content type="html"><![CDATA[<h1>回文数</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul><li>示例 1:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: 121输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例 2:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: -121输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例 3:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: 10输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路"><a class="header-anchor" href="#思路"></a>思路</h2><p>设计一个head索引和一个尾索引，遍历整个数组如果开始开始索引大于等于尾索引说明是回文。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> firstIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>firstIndex <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>firstIndex<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                firstIndex<span class="token operator">++</span><span class="token punctuation">;</span>                lastIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>firstIndex <span class="token operator">==</span> lastIndex <span class="token operator">||</span> firstIndex <span class="token operator">></span> lastIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>回文串的解法可以采用额外的空间进行判断</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux运维人员最常用150个命令汇总</title>
      <link href="2020/06/01/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/3.Linux%E8%BF%90%E7%BB%B4%E4%BA%BA%E5%91%98%E6%9C%80%E5%B8%B8%E7%94%A8150%E4%B8%AA%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
      <url>2020/06/01/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/3.Linux%E8%BF%90%E7%BB%B4%E4%BA%BA%E5%91%98%E6%9C%80%E5%B8%B8%E7%94%A8150%E4%B8%AA%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1>Linux运维人员最常用150个命令汇总</h1><p>转载自:<a href="https://www.cnblogs.com/bananaaa/p/7774467.html">Linux运维人员最常用150个命令汇总</a></p><blockquote><p>linux下最常用的150个命令，感觉有点多啊！</p></blockquote><h2 id="线上查询及帮助命令"><a class="header-anchor" href="#线上查询及帮助命令"></a>线上查询及帮助命令</h2><table><tr><td>命令</td><td>功能说明</td></tr><tr><td>man</td><td>Debian/Ubuntu 下安装man中文版<br> sudo apt install manpages-zh</td></tr>    <tr><td>help</td><td>查看Linux内置命令的帮助，比如'cd'命令</td></tr></table><h2 id="文件和目录操作命令"><a class="header-anchor" href="#文件和目录操作命令"></a>文件和目录操作命令</h2><table><tr><td>命令</td><td>功能说明</td></tr>    <tr><td>ls</td><td>全拼list，功能是列出目录的内容及其内容属性信息</td></tr>    <tr><td>cd</td><td>全拼change directory，功能是从当前工作目录切换到指定的工作目录</td></tr>    <tr><td>cp</td><td>全拼copy，其功能为复制文件或目录</td></tr>    <tr><td>find</td><td>查找的意思，用于查找目录及目录下的文件</td></tr>    <tr><td>mkdir</td><td>全拼 make directories，其功能是创建目录</td></tr>    <tr><td>mv</td><td>全拼 move，其功能是移动或重命名文件</td></tr>    <tr><td>pwd</td><td>全拼 print working directory，其功能是显示当前工作目录的绝对路径</td></tr>    <tr><td>rename</td><td>用于重命名文件</td></tr>    <tr><td>rm</td><td>全拼remove，其功能是删除一个或多个文件或目录</td></tr>    <tr><td>rmdir</td><td>全拼remove empty directories，功能是删除空目录</td></tr>    <tr><td>touch</td><td>创建新的空文件或改变已有文件的时间戳属性</td></tr>    <tr><td>tree</td><td>功能是以树形结构显示目录下的内容</td></tr>    <tr><td>basename</td><td>显示文件名或目录名</td></tr>    <tr><td>dirname</td><td>显示文件或目录路径</td></tr>    <tr><td>chattr</td><td>改变文件的扩展属性</td></tr>    <tr><td>lsattr</td><td>查看文件扩展属性</td></tr>    <tr><td>file</td><td>显示文件的类型</td></tr>    <tr><td>md5sum</td><td>计算和校验文件的 MD5 值</td></tr></table><h2 id="查看文件及内容处理命令"><a class="header-anchor" href="#查看文件及内容处理命令"></a>查看文件及内容处理命令</h2><table><tr><td>命令</td><td>功能说明</td></tr>    <tr><td>cat</td><td>全拼 concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中</td></tr>    <tr><td>tac</td><td>tac 是 cat 的反向拼写，因此命令的功能为反向显示文件内容</td></tr>    <tr><td>more</td><td>分页显示文件内容</td></tr>    <tr><td>less</td><td>分页显示文件内容</td></tr>    <tr><td>head</td><td>显示文件内容的头部</td></tr>    <tr><td>tail</td><td>显示文件内容的头部</td></tr>    <tr><td>cut</td><td>将文件的每一行按指定分隔符分割并输出</td></tr>    <tr><td>split</td><td>分割文件为不同的小片段</td></tr>    <tr><td>paste</td><td>按行合并文件内容</td></tr>    <tr><td>sort</td><td>对文件的文本内容排序</td></tr>    <tr><td>uniq</td><td>去除重复行。oldboy</td></tr>    <tr><td>wc</td><td>统计文件的行数、单词数或字节数</td></tr>    <tr><td>iconv</td><td>转换文件的编码格式</td></tr>    <tr><td>dos2unix</td><td>将 DOS 格式文件转换成 UNIX 格式</td></tr>    <tr><td>diff</td><td>全拼difference，比较文件的差异，常用于文本文件</td></tr>    <tr><td>vimdiff</td><td>命令行可视化文件比较工具，常用于文本文件</td></tr>    <tr><td>rev</td><td>反向输出文件内容</td></tr>    <tr><td>grep/egrep</td><td>过滤字符串</td></tr>    <tr><td>join</td><td>按两个文件的相同字段合并</td></tr>    <tr><td>tr</td><td>替换或删除字符</td></tr>    <tr><td>vi/vim</td><td>命令行文本编辑器</td></tr></table><h2 id="文件压缩及解压缩命令"><a class="header-anchor" href="#文件压缩及解压缩命令"></a>文件压缩及解压缩命令</h2><table><tr><td>命令</td><td>功能说明</td></tr>    <tr><td>tar</td><td>打包压缩</td></tr>    <tr><td>unzip</td><td>解压文件</td></tr>    <tr><td>gzip</td><td>gzip 压缩工具</td></tr>    <tr><td>zip</td><td>zip 压缩工具</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> 文章收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转_LeetCode05</title>
      <link href="2020/05/31/13.LeetCode/5.%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-LeetCode05/"/>
      <url>2020/05/31/13.LeetCode/5.%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-LeetCode05/</url>
      
        <content type="html"><![CDATA[<h1>整数反转</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><ul><li>示例1:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: 123输出: 321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例2:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: -123输出: -321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例3:</li></ul><pre class="line-numbers language-none"><code class="language-none">输入: 120输出: 21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="解题思路"><a class="header-anchor" href="#解题思路"></a>解题思路</h2><blockquote><p><strong>%10</strong>模除可以得到数字的最后一位;<strong>/10</strong>可以得到数字的前n位</p></blockquote><p>根据前面两个原理，可以将给定的数字依次进行模除运算得到最后一位，然后根据上一次的结果在进行<strong>乘</strong>10操作后相加得到新的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lastNum <span class="token operator">=</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rev<span class="token operator">></span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">||</span>rev<span class="token operator">==</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> lastNum <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rev<span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">||</span>rev<span class="token operator">==</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> lastNum <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        rev <span class="token operator">=</span> rev<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> lastNum<span class="token punctuation">;</span>        x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> rev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8 中的Streams API详解</title>
      <link href="2020/05/30/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/2.Java8%20%E4%B8%AD%E7%9A%84Streams%20API%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/05/30/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/2.Java8%20%E4%B8%AD%E7%9A%84Streams%20API%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>Java8 中的Streams API详解</h1><p>转载自:<a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/?from=timeline">Java8 中的Streams API详解</a></p><blockquote><p>Streams 的背景，以及 Java 8 中的使用详解</p></blockquote><h2 id="为什么需要-Stream"><a class="header-anchor" href="#为什么需要-Stream"></a>为什么需要 Stream</h2><p>Stream 作为 Java 8 的一大亮点，它与 <a href="http://java.io">java.io</a> 包里的 InputStream 和 OutputStream 是完全不同的概念。它也不同于 StAX 对 XML 解析的 Stream，也不是 Amazon Kinesis 对大数据实时处理的 Stream。Java 8 中的 Stream 是对<strong>集合（Collection）对象功能的增强</strong>，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供<strong>串行</strong>和<strong>并行</strong>两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java 8 中首次出现的 java.util.stream 是一个函数式语言+多核时代综合影响的产物。</p><h3 id="什么是聚合操作"><a class="header-anchor" href="#什么是聚合操作"></a>什么是聚合操作</h3><p>在传统的 J2EE 应用中，Java 代码经常不得不依赖于关系型数据库的聚合操作来完成诸如：</p><ul><li>客户每月平均消费金额</li><li>最昂贵的在售商品</li><li>本周完成的有效订单（排除了无效的）</li><li>取十个数据样本作为首页推荐<br>这类的操作。<br>但在当今这个数据大爆炸的时代，在数据来源多样化、数据海量化的今天，很多时候不得不脱离 RDBMS，或者以底层返回的数据为基础进行更上层的数据统计。而 Java 的集合 API 中，仅仅有极少量的辅助型方法，更多的时候是程序员需要用 Iterator 来遍历集合，完成相关的聚合应用逻辑。这是一种远不够高效、笨拙的方法。在 Java 7 中，如果要发现 type 为 grocery 的所有交易，然后返回以交易值降序排序好的交易 ID 集合，我们需要这样写：</li></ul><p>清单 1. Java 7 的排序、取值实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">></span></span> groceryTransactions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arraylist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> t<span class="token operator">:</span> transactions<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Transaction</span><span class="token punctuation">.</span>GROCERY<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    groceryTransactions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>groceryTransactions<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> t1<span class="token punctuation">,</span> <span class="token class-name">Transaction</span> t2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> t2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> transactionIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> t<span class="token operator">:</span> groceryTransactions<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    transactionsIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在 Java8 使用 Stream，代码更加简洁易读；而且使用并发模式，程序执行速度更快。</p><p>清单2. Java8的排序、取值实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> transactionsIds <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">filter</span><span class="token punctuation">(</span>t <span class="token operator">-></span> t<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Transaction</span><span class="token punctuation">.</span>GROCERY<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Stream-总览"><a class="header-anchor" href="#Stream-总览"></a>Stream 总览</h2><h3 id="什么是流"><a class="header-anchor" href="#什么是流"></a>什么是流</h3><p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p><p>Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p><p>而和迭代器又不同的是，Stream 可以并行化操作，<strong>迭代器</strong>只能<strong>命令式地</strong>、<strong>串行化操作</strong>。顾名思义，当使用串行方式去遍历时，每个item读完后再读下一个item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。Java 的并行 API 演变历程基本如下：</p><ol><li>1.0-1.4 中的 java.lang.Thread</li><li>5.0 中的 java.util.concurrent</li><li>6.0 中的 Phasers 等</li><li>7.0 中的 Fork/Join 框架</li><li>8.0 中的 Lambda</li></ol><p>Stream 的另外一大特点是，数据源本身可以是无限的。</p><h3 id="流的构成"><a class="header-anchor" href="#流的构成"></a>流的构成</h3><p>当我们使用一个流的时候，通常包括三个基本步骤：</p><p>获取一个数据源（source）→ 数据转换→执行操作获取想要的结果，<strong>每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象</strong>（可以有多次转换），这就允许对其操作可以像链条一样排列，变成一个管道，如下图所示。<br>图 1. 流管道 (Stream Pipeline) 的构成</p><p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/img001.png" alt="Stream"></p><p>有多种方式生成 Stream Source：</p><ul><li>从 Collection 和数组<ul><li>Collection.stream()</li><li>Collection.parallelStream()</li><li>Arrays.stream(T array) or Stream.of()</li></ul></li><li>从BufferedReader<ul><li>java.io.BufferedReader.lines()</li></ul></li><li>静态工厂<ul><li>java.util.stream.IntStream.range()</li><li>java.nio.file.Files.walk()</li></ul></li><li>自己构建<ul><li>java.util.Spliterator</li></ul></li><li>其它<ul><li>Random.ints()</li><li>BitSet.stream()</li><li>Pattern.splitAsStream(java.lang.CharSequence)</li><li>JarFile.stream()</li></ul></li></ul><p>流的操作类型分为两种：</p><ul><li><strong>Intermediate</strong>：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是<strong>打开流</strong>，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</li><li><strong>Terminal</strong>：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</li></ul><p>在对于一个 Stream 进行多次转换操作 (Intermediate 操作)，每次都对 Stream 的每个元素进行转换，而且是执行多次，这样时间复杂度就是 N（转换次数）个 for 循环里把所有操作都做掉的总和吗？其实不是这样的，转换操作都是 lazy 的，多个转换操作只会在 Terminal 操作的时候融合起来，一次循环完成。我们可以这样简单的理解，<strong>Stream 里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，在 Terminal 操作的时候循环 Stream 对应的集合，然后对每个元素执行所有的函数。</strong></p><blockquote><p>ps: 只会循环一次，然后每个元素执行所有的函数</p></blockquote><p>还有一种操作被称为<strong>short-circuiting</strong>用以指：</p><ul><li>对于一个 intermediate 操作，如果它接受的是一个无限大（infinite/unbounded）的 Stream，但返回一个有限的新 Stream。</li><li>对于一个 terminal 操作，如果它接受的是一个无限大的 Stream，但能在有限的时间计算出结果。</li></ul><p>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件。<br>清单 3. 一个流操作的示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> widgets<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>w <span class="token operator">-></span> w<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RED<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>w <span class="token operator">-></span> w<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>stream() 获取当前小物件的 source，filter 和 mapToInt 为 intermediate 操作，进行数据筛选和转换，最后一个 sum() 为 terminal 操作，对符合条件的全部小物件作重量求和。</p><h2 id="流的使用详解"><a class="header-anchor" href="#流的使用详解"></a>流的使用详解</h2><p>简单说，对Stream的使用就是实现一个filter-map-reduce过程，产生一个最终结果，或者导致一个副作用（side effect）。</p><h3 id="流的构造与转换"><a class="header-anchor" href="#流的构造与转换"></a>流的构造与转换</h3><p>下面提供最常见的几种构造 Stream 的样例。<br>清单 4. 构造流的几种常见方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. Individual values</span><span class="token class-name">Stream</span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. Arrays</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. Collections</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，对于基本数值型，目前有三种对应的包装类型 Stream：<br>IntStream、LongStream、DoubleStream。当然我们也可以用 Stream<Integer>、Stream<Long> &gt;、Stream<Double>，但是 boxing 和 unboxing 会很耗时，所以特别为这三种基本数值型提供了对应的 Stream。</p><p>Java 8 中还没有提供其它数值型 Stream，因为这将导致扩增的内容较多。而常规的数值型聚合运算可以通过上面三种 Stream 进行。</p><p>清单5. 数值流的构造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>清单6. 流转换为其它数据结构</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. Array</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArray1 <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. Collection</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span> set1 <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stack</span> stack1 <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. String</span><span class="token class-name">String</span> str <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个 Stream 只可以使用一次，上面的代码为了简洁而重复使用了数次。</p><h3 id="流的操作"><a class="header-anchor" href="#流的操作"></a>流的操作</h3><p>接下来，当把一个数据结构包装成 Stream 后，就要开始对里面的元素进行各类操作了。常见的操作可以归类如下。</p><ul><li><p>Intermediate：(中间)<br>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p></li><li><p>Terminal: (终点)<br>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p></li><li><p>Short-circuiting：<br>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</p></li></ul><p>我们下面看一下 Stream 的比较典型用法。</p><h4 id="map-flatMap"><a class="header-anchor" href="#map-flatMap"></a>map/flatMap</h4><p>我们先来看 map。如果你熟悉 scala 这类函数式语言，对这个方法应该很了解，它的作用就是把 input Stream 的每一个元素，映射成 output Stream 的另外一个元素。</p><ul><li>清单7. 转换大写</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> output <span class="token operator">=</span> wordList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>清单8. 平方数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> nums <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> squareNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">-></span> n <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这段代码生成一个整数 list 的平方数 {1, 4, 9, 16}。</p><p>从上面例子可以看出，map 生成的是个 1:1 映射，每个输入元素，都按照规则转换成为另外一个元素。还有一些场景，是一对多映射关系的，这时需要 flatMap。</p><ul><li>清单9. 一对多</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> outputStream <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>childList<span class="token punctuation">)</span> <span class="token operator">-></span> childList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flatMap 把 input Stream 中的层级结构扁平化，就是将最底层元素抽出来放到一起，最终 output 的新 Stream 里面已经没有 List 了，都是直接的数字。</p><h4 id="filter"><a class="header-anchor" href="#filter"></a>filter</h4><p>filter对原始Stream进行某项测试，通过测试的元素被留下来生成一个新 Stream。</p><ul><li>清单10. 留下偶数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sixNums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evens <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>sixNums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">-></span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>经过条件“被 2 整除”的 filter，剩下的数字为 {2, 4, 6}。</p><ul><li>清单11. 把单词挑出来</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> output <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>line <span class="token operator">-></span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>REGEXP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>word <span class="token operator">-></span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码首先把每行的单词用 flatMap 整理到新的 Stream，然后保留长度不为 0 的，就是整篇文章中的全部单词了。</p><h4 id="forEach"><a class="header-anchor" href="#forEach"></a>forEach</h4><p>forEach 方法接收一个 Lambda 表达式，然后在 Stream 的每一个元素上执行该表达式。</p><ul><li>清单 12. 打印姓名（forEach 和 pre-java8 的对比）</li></ul><p>// Java 8</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">roster <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Person<span class="token punctuation">.</span>Sex</span><span class="token punctuation">.</span>MALE<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Pre-Java 8</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Person</span> p <span class="token operator">:</span> roster<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Person<span class="token punctuation">.</span>Sex</span><span class="token punctuation">.</span>MALE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对一个人员集合遍历，找出男性并打印姓名。可以看出来，forEach 是为 Lambda 而设计的，保持了最紧凑的风格。而且 Lambda 表达式本身是可以重用的，非常方便。当需要为多核系统优化时，可以 parallelStream().forEach()，只是此时原有元素的次序没法保证，并行的情况下将改变串行时操作的行为，此时 forEach 本身的实现不需要调整，而 Java8 以前的 for 循环 code 可能需要加入额外的多线程逻辑。</p><p>但一般认为，forEach 和常规 for 循环的差异不涉及到性能，它们仅仅是函数式风格与传统 Java 风格的差别。</p><p>另外一点需要注意，forEach 是 terminal 操作，因此它执行后，Stream 的元素就被“消费”掉了，你无法对一个 Stream 进行两次 terminal 运算。下面的代码是错误的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">-></span> <span class="token function">doOneThing</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">-></span> <span class="token function">doAnotherThing</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相反，具有相似功能的 intermediate 操作<strong>peek</strong>可以达到上述目的。如下是出现在该 api javadoc 上的一个示例。</p><ul><li>清单13. peek 对每个元素执行操作并返回一个新的 Stream</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filtered value: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mapped value: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="findFirst"><a class="header-anchor" href="#findFirst"></a>findFirst</h4><p>这是一个 termimal 兼 short-circuiting 操作，它总是返回 Stream 的第一个元素，或者空。</p><p>这里比较重点的是它的返回值类型：Optional。这也是一个模仿 Scala 语言中的概念，作为一个容器，它可能含有某值，或者不包含。使用它的目的是尽可能避免 NullPointerException。</p><ul><li>清单14. Optional 的两个用例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> strA <span class="token operator">=</span> <span class="token string">" abcd "</span><span class="token punctuation">,</span> strB <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>strA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getLength</span><span class="token punctuation">(</span>strA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getLength</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Java 8</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Pre-Java 8</span><span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Java 8</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Pre-Java 8</span><span class="token comment">// return if (text != null) ? text.length() : -1;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在更复杂的 if (xx != null) 的情况中，使用 Optional 代码的可读性更好，而且它提供的是编译时检查，能极大的降低 NPE 这种 Runtime Exception 对程序的影响，或者迫使程序员更早的在编码阶段处理空值问题，而不是留到运行时再发现和调试。</p><p>Stream 中的 <strong>findAny</strong>、<strong>max/min</strong>、<strong>reduce</strong>等方法等返回 Optional 值。还有例如 **IntStream.average()**返回 OptionalDouble 等等。</p><h4 id="reduce"><a class="header-anchor" href="#reduce"></a>reduce</h4><p>这个方法的主要作用是把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce。例如 Stream 的 sum 就相当于<br>Integer sum = integers.reduce(0, (a, b) -&gt; a+b); 或 Integer sum = integers.reduce(0, Integer::sum);</p><p>也有没有起始值的情况，这时会把 Stream 的前面两个元素组合起来，返回的是 Optional。</p><ul><li>清单15. reduce 的用例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符串连接，concat = "ABCD"</span><span class="token class-name">String</span> concat <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">concat</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 求最小值，minValue = -3.0</span><span class="token keyword">double</span> minValue <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 求和，sumValue = 10, 有起始值</span><span class="token keyword">int</span> sumValue <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求和，sumValue = 10, 无起始值</span>sumValue <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 过滤，字符串连接，concat = "ace"</span>concat <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"Z"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">concat</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码例如第一个示例的 reduce()，第一个参数（空白字符）即为起始值，第二个参数（String::concat）为 BinaryOperator。这类有起始值的 reduce() 都返回具体的对象。而对于第四个示例没有起始值的 reduce()，由于可能没有足够的元素，返回的是 Optional，请留意这个区别。</p><h4 id="limit-skip"><a class="header-anchor" href="#limit-skip"></a>limit/skip</h4><p>limit 返回 Stream 的前面 n 个元素；skip 则是扔掉前 n 个元素（它是由一个叫 subStream 的方法改名而来）。</p><ul><li>清单16. limit 和 skip 对运行次数的影响</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLimitAndSkip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> personList2 <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personList2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">name1name2name3name4name5name6name7name8name9name10[name4, name5, name6, name7, name8, name9, name10]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个有 10，000 个元素的 Stream，但在 short-circuiting 操作 limit 和 skip 的作用下，管道中 map 操作指定的 getName() 方法的执行次数为 limit 所限定的 10 次，而最终返回结果在跳过前 3 个元素后只有后面 7 个返回。</p><p>有一种情况是 limit/skip 无法达到 short-circuiting 目的的，就是把它们放在 Stream 的排序操作后，原因跟 sorted 这个 intermediate 操作有关：此时系统并不知道 Stream 排序后的次序如何，所以 sorted 中的操作看上去就像完全没有被 limit 或者 skip 一样。</p><ul><li>清单17. limit 和 skip 对 sorted 后的运行次数无影响</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList2 <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-></span> p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personList2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的示例对清单 13 做了微调，首先对 5 个元素的 Stream 排序，然后进行 limit 操作。输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">name2name1name3name2name4name3name5name4[stream.StreamDW$Person@816f27d, stream.StreamDW$Person@87aac27]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即虽然最后的返回元素数量是 2，但整个管道中的 sorted 表达式执行次数没有像前面例子相应减少。</p><p>最后有一点需要注意的是，对一个 parallel 的 Steam 管道来说，如果其元素是有序的，那么 limit 操作的成本会比较大，因为它的返回对象必须是前 n 个也有一样次序的元素。取而代之的策略是取消元素间的次序，或者不要用 parallel Stream。</p><h4 id="sorted"><a class="header-anchor" href="#sorted"></a>sorted</h4><p>对 Stream 的排序通过 sorted 进行，它比数组的排序更强之处在于你可以首先对 Stream 进行各类 map、filter、limit、skip 甚至 distinct 来减少元素数量后，再排序，这能帮助程序明显缩短执行时间。我们对清单 14 进行优化：</p><ul><li>清单18. 优化：排序前进行 limit 和 skip</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList2 <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-></span> p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personList2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果会简单很多：</p><pre class="line-numbers language-none"><code class="language-none">name2name1[stream.StreamDW$Person@6ce253f1, stream.StreamDW$Person@53d8d10a]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然，这种优化是有 business logic 上的局限性的：即不要求排序后再取值。</p><h4 id="min-max-distinc"><a class="header-anchor" href="#min-max-distinc"></a>min/max/distinc</h4><p>min 和 max 的功能也可以通过对 Stream 元素先排序，再 findFirst 来实现，但前者的性能会更好，为 O(n)，而 sorted 的成本是 O(n log n)。同时它们作为特殊的 reduce 方法被独立出来也是因为求最大最小值是很常见的操作。</p><ul><li>清单19. 找出最长一行的长度</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"c:\\SUService.log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> longest <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>longest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的例子则使用 distinct 来找出不重复的单词。</p><ul><li>清单20. 找出全文的单词，转小写，并排序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> words <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">flatMap</span><span class="token punctuation">(</span>line <span class="token operator">-></span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">filter</span><span class="token punctuation">(</span>word <span class="token operator">-></span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toLowerCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Match"><a class="header-anchor" href="#Match"></a>Match</h4><p>Stream 有三个 match 方法，从语义上说：</p><ul><li>allMatch：Stream 中全部元素符合传入的 predicate，返回 true</li><li>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true</li><li>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</li></ul><p>它们都不是要遍历全部元素才能返回结果。例如 allMatch 只要一个元素不满足条件，就 skip 剩下的所有元素，返回 false。对清单 13 中的 Person 类稍做修改，加入一个 age 属性和 getAge 方法。</p><ul><li>清单21. 使用 Match</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isAllAdult <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">allMatch</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All are adult? "</span> <span class="token operator">+</span> isAllAdult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isThereAnyChild <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">anyMatch</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Any child? "</span> <span class="token operator">+</span> isThereAnyChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">All are adult? falseAny child? true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="进阶：自己生成流"><a class="header-anchor" href="#进阶：自己生成流"></a>进阶：自己生成流</h3><h4 id="Stream-generate"><a class="header-anchor" href="#Stream-generate"></a>Stream.generate</h4><p>通过实现 Supplier 接口，你可以自己来控制流的生成。这种情形通常用于随机数、常量的 Stream，或者需要前后元素间维持着某种状态信息的 Stream。把 Supplier 实例传递给 Stream.generate() 生成的 Stream，默认是串行（相对 parallel 而言）但无序的（相对 ordered 而言）。由于它是无限的，在管道中，必须利用 limit 之类的操作限制 Stream 大小。</p><ul><li>清单22. 生成 10 个随机整数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Random</span> seed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> random <span class="token operator">=</span> seed<span class="token operator">::</span><span class="token function">nextInt</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Another way</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Stream.generate() 还接受自己实现的 Supplier。例如在构造海量测试数据的时候，用某种自动的规则给每一个变量赋值；或者依据公式计算 Stream 的每个元素值。这些都是维持状态信息的情形。</p><ul><li>清单23. 自实现 Supplier</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PersonSupplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">PersonSupplier</span> <span class="token keyword">implements</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token string">"StormTestUser"</span> <span class="token operator">+</span> index<span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">StormTestUser1, 9StormTestUser2, 12StormTestUser3, 88StormTestUser4, 51StormTestUser5, 22StormTestUser6, 28StormTestUser7, 81StormTestUser8, 51StormTestUser9, 4StormTestUser10, 76<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Stream-iterate"><a class="header-anchor" href="#Stream-iterate"></a>Stream.iterate</h4><p>iterate 跟 reduce 操作很像，接受一个种子值，和一个 UnaryOperator（例如 f）。然后种子值成为 Stream 的第一个元素，f(seed) 为第二个，f(f(seed)) 第三个，以此类推。</p><ul><li>清单24. 生成一个等差数列</li></ul><blockquote><p>Stream.iterate(0, n -&gt; n + 3).limit(10). forEach(x -&gt; System.out.print(x + &quot; &quot;));</p></blockquote><p>输出结果：</p><blockquote><p>0 3 6 9 12 15 18 21 24 27</p></blockquote><p>与 Stream.generate 相仿，在 iterate 时候管道必须有 limit 这样的操作来限制 Stream 大小。</p><h3 id="进阶：用-Collectors-来进行-reduction-操作"><a class="header-anchor" href="#进阶：用-Collectors-来进行-reduction-操作"></a>进阶：用 Collectors 来进行 reduction 操作</h3><p>java.util.stream.Collectors 类的主要作用就是辅助进行各类有用的 reduction 操作，例如转变输出为 Collection，把 Stream 元素进行归组。</p><h4 id="groupingBy-partitioningBy"><a class="header-anchor" href="#groupingBy-partitioningBy"></a>groupingBy/partitioningBy</h4><ul><li>清单25. 按照年龄归组</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span><span class="token punctuation">></span></span> personGroups <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PersonSupplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> personGroups<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span><span class="token punctuation">></span></span> persons <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age "</span> <span class="token operator">+</span> persons<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> persons<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 code，首先生成 100 人的信息，然后按照年龄归组，相同年龄的人放到同一个 list 中，可以看到如下的输出</p><pre class="line-numbers language-none"><code class="language-none">Age 0 &#x3D; 2Age 1 &#x3D; 2Age 5 &#x3D; 2Age 8 &#x3D; 1Age 9 &#x3D; 1Age 11 &#x3D; 2……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>清单26. 按照未成年人和成年人归组</li></ul><pre class="line-numbers language-none"><code class="language-none">Map&lt;Boolean, List&lt;Person&gt;&gt; children &#x3D; Stream.generate(new PersonSupplier()). limit(100). collect(Collectors.partitioningBy(p -&gt; p.getAge() &lt; 18));System.out.println(&quot;Children number: &quot; + children.get(true).size());System.out.println(&quot;Adult number: &quot; + children.get(false).size());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">Children number: 23 Adult number: 77<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在使用条件“年龄小于 18”进行分组后可以看到，不到 18 岁的未成年人是一组，成年人是另外一组。partitioningBy 其实是一种特殊的 groupingBy，它依照条件测试的是否两种结果来构造返回的数据结构，get(true) 和 get(false) 能即为全部的元素对象。</p><h2 id="结束语"><a class="header-anchor" href="#结束语"></a>结束语</h2><p>总之，Stream 的特性可以归纳为：</p><ul><li>不是数据结构</li><li>它没有内部存储，它只是用操作管道从 source（数据结构、数组、generator function、IO channel）抓取数据。</li><li>它也绝不修改自己所封装的底层数据结构的数据。例如 Stream 的 filter 操作会产生一个不包含被过滤元素的新 Stream，而不是从 source 删除那些元素。</li><li>所有 Stream 的操作必须以 lambda 表达式为参数</li><li>不支持索引访问</li><li>你可以请求第一个元素，但无法请求第二个，第三个，或最后一个。不过请参阅下一项。</li><li>很容易生成数组或者 List</li><li>惰性化</li><li>很多 Stream 操作是向后延迟的，一直到它弄清楚了最后需要多少数据才会开始。</li><li>Intermediate 操作永远是惰性化的。</li><li>并行能力</li><li>当一个 Stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行进行的。</li><li>可以是无限的<ul><li>集合有固定大小，Stream 则不必。limit(n) 和 findFirst() 这类的 short-circuiting 操作可以对无限的 Stream 进行运算并很快完成。</li></ul></li></ul><h2 id="收藏笔记"><a class="header-anchor" href="#收藏笔记"></a>收藏笔记</h2><p>stream流在开发中可以提高开发效率，这篇文章将stream从何而来到如何使用都讲解的很清楚。总结一下stream的用法</p><h3 id="构造Stream"><a class="header-anchor" href="#构造Stream"></a>构造Stream</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Stream</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Arrays</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Collections</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> ls<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际开发中我们一般是<strong>Collections</strong>的方式使用的比较多</p><h3 id="操作流"><a class="header-anchor" href="#操作流"></a>操作流</h3><ul><li><strong>map/flapMap</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Stream</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>map</strong>操作对每一个元素进行操作然后返回一个类型</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//flapMap</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> stream2<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>item <span class="token operator">-></span> item<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>flatMap</strong>操作对一个集合元素进行操作，然后返回操作结果。</p></blockquote><ul><li><strong>filter</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//filter 过滤操作</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream4 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream4<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>对每一个元素进行过滤，过滤成功的才返回Stream流中</p></blockquote><ul><li><strong>forEach</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//forEach</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream5 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream5<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>forEach</strong>遍历循环后stream流就被&quot;消费&quot;掉了，不会在返回到Straem</p></blockquote><ul><li><strong>peek</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//peek</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream6 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream7 <span class="token operator">=</span>stream6<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>peek</strong>遍历循环后，元素会返回stream中</p></blockquote><ul><li><strong>findFirst</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//findFirst</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream8 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> optionalInteger <span class="token operator">=</span> stream8<span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>findFirst</strong>获取Stream流中的第一个元素，返回的是<strong>Optional<T></strong></p></blockquote><ul><li><strong>reduce</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//元素合并</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">concat</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置初始值来进行合并</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> minNum <span class="token operator">=</span> stream1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Reduce 原意：减少，缩小</p></li><li><p>根据指定的计算模型将Stream中的值计算得到一个最终结果</p></li><li><p><strong>limit/skip</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>limit</strong>返回Stream的前面n个元素；<strong>skip</strong>则是扔掉前 n 个元素（它是由一个叫subStream的方法改名而来）。</p></blockquote><ul><li><strong>sorted</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>sorted</strong>对流进行排序</p></blockquote><ul><li><strong>min/max/distinct</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//min</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optionalMin <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalMin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//max</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optionalMax <span class="token operator">=</span> stream1<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalMax<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//distinct</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream2<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">min获取stream流中最小的元素max获取stream流中最大的元素distinct对元素进行去重<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>Match</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//allMatch全部元素符合传入的函数就返回true</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> allMatchFlag <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>item <span class="token operator">-></span> item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allMatchFlag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//anyMatch只要有一个元素符合传入的函数就返回true</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> anyMatchFlag <span class="token operator">=</span> stream1<span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>item <span class="token operator">-></span> item <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyMatchFlag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//noneMatch没有元素符合传入的函数就返回true</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> noneMatchFlag <span class="token operator">=</span> stream2<span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>item <span class="token operator">-></span> item <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneMatchFlag<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文章收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx日志分析及性能排查</title>
      <link href="2020/05/30/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/1.Nginx%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5/"/>
      <url>2020/05/30/14.%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/1.Nginx%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%8F%8A%E6%80%A7%E8%83%BD%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1>Nginx 日志分析及性能排查</h1><p>转载自:<a href="https://mp.weixin.qq.com/s/A1ufVgi3VFuSGRh4Ju5puA">Nginx 日志分析及性能排查</a></p><blockquote><p>作者：-外星人-<br><br><a href="http://my.oschina.net/362228416/blog/844713">my.oschina.net/362228416/blog/844713</a></p></blockquote><p>最近一直在做性能排查，思路就是根据分析Nginx日志，得到响应耗时的url、以及请求时间，再得到这段时间的请求量，并发量，分析是并发的原因，还是本身就比较慢，如果是应用本身的原因，只需要找到对应的代码，然后进行优化就好了<br>我找到的几个原因，基本就是后端sql运行的比较多，单次访问看不出来，但是人比较多的时候就比较慢了，人少的时候20-200毫秒，人多的时候，200-6000毫秒，优化之后基本保持在几十毫秒，优化策略就是减少不必要的sql，加上缓存，基本解决了卡顿的问题，顺便把这次用的一系列命令记录下来，当个总结吧<br>如果需要得到请求处理的时间，需要在nginx log 里面加上$request_time，下面是我的log_format<br>nginx.conf</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '            '$status $body_bytes_sent $request_body "$http_referer" '            '"$http_user_agent" "$http_x_forwarded_for" "$request_time"';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改之后重启nginx，查看nginx log的时候，就能看到nginx处理请求所花的时间了，这个时间基本就是后端所花的时间，所以可以根据这个字段来得到响应慢的请求</p><p>以下是就是我用到的一些命令了</p><ul><li>获取pv数</li></ul><blockquote><p>$ cat /usr/local/nginx/logs/access.log | wc -l</p></blockquote><ul><li>获取ip数</li></ul><blockquote><p>$ cat /usr/local/nginx/logs/access.log | awk ‘{print $1}’ | sort -k1 -r | uniq | wc -l</p></blockquote><ul><li>获取最耗时的请求时间、url、耗时，前10名, 可以修改后面的数字获取更多，不加则获取全部</li></ul><blockquote><p>$ cat /usr/local/class/logs/access.log | awk ‘{print $4,$7,$NF}’ | awk -F ‘&quot;’ ‘{print $1,$2,$3}’ | sort -k3 -rn | head -10</p></blockquote><ul><li>获取某一时刻的请求数量，可以把秒去掉得到分钟的数据，把分钟去掉得到小时的数据，以此类推</li></ul><blockquote><p>$ cat /usr/local/class/logs/access.log | grep 2017:13:28:55 | wc -l</p></blockquote><ul><li>获取每分钟的请求数量，输出成csv文件，然后用excel打开，可以生成柱状图</li></ul><blockquote><p>$ cat /usr/local/class/logs/access.log  | awk ‘{print substr($4,14,5)}’ | uniq -c | awk ‘{print $2&quot;,&quot;$1}’ &gt; access.csv</p></blockquote><p>上面的图是用excel生成的，也可以用命令行工具gnuplot生成png，我也试了一下，没什么问题，直接以编程的形式得到报表，去掉人工操作部分，很方便，但是有一点就是x轴数据比较多的时候，不能像excel一样自动稀释数据，所以我还是喜欢用excel来生成</p><p>其实用来用去也就是那么几个命令:</p><p>cat：输入文件内容</p><p>grep：过滤文本</p><p>‘sort’：排序</p><p>‘uniq’：去重</p><p>‘awk’：文本处理</p><p>命令组合使用，单个命令可以使用多次，来达到多重过滤的效果，前面一个命令的输出就是后一个命令的输入，流式处理，只要学会这个命令，有多看似复杂的东西，都变得异常简单。</p><p>上面介绍的都是命令，下面再介绍一个直接输出html的，其实就是利用go-access来分析nginx日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /usr/local/nginx/logs/access.log <span class="token operator">|</span> docker run --rm -i diyan/goaccess   --time-format<span class="token operator">=</span><span class="token string">'%H:%M:%S'</span>   --date-format<span class="token operator">=</span><span class="token string">'%d/%b/%Y'</span>   --log-format<span class="token operator">=</span><span class="token string">'%h %^[%d:%t %^] "%r" %s %b "%R" "%u"'</span> <span class="token operator">></span> index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>go-access是以docker容器的形式运行的，只要你安装了docker，就能直接运行，免安装很方便</p><p>以上脚本，配合日志每天的日志分割，然后在crontab里面配置一下自动运行脚本，可生成每一天的nginx报表，网站情况一幕了然，当然这里也有缺点，因为不实时</p><p>想要统计实时数据，可以使用ngxtop 来查看，安装起来也很简单</p><blockquote><p>$ pip install ngxtop</p></blockquote><p>运行的话，先进到nginx目录，然后再运行，-c 指定配置文件，-t 刷新频率，单位为秒</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /usr/local/nginx$ ngxtop -c conf/nginx.conf -t <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这种实时的方式，还需要ssh远程登录，不太方便，还可以使用lua来进行实时统计，然后写一个界面把数据展示出来，通过lua-nginx-module，nginx/tengine 都可以用，如果直接安装openresty的话，就方便了，内嵌了lua，不需要重新编译nginx了</p><h2 id="收藏笔记"><a class="header-anchor" href="#收藏笔记"></a>收藏笔记</h2><p>日志分析现在主流的方案是采用ELK,但是这篇文章使用<strong>awk</strong>进行日志分割以及一些其他的文本处理技巧。</p><ul><li>显示行号</li></ul><blockquote><p>$ cat /usr/local/nginx/logs/access.log | wc -l</p></blockquote><ul><li><p>wc -l 显示行号<br><img src="https://s1.ax1x.com/2020/05/30/tQU9G8.png" alt="tQU9G8.png"></p></li><li><p>获取第一列-排序-去重-计数<br>$ cat /usr/local/nginx/logs/access.log | awk ‘{print $1}’ | sort -k1 -r | uniq | wc -l</p></li><li><p>awk ‘{print $1}’ 输出第一列<br><img src="https://s1.ax1x.com/2020/05/30/tQwGZj.png" alt="tQwGZj.png"></p></li><li><p>sort -k1 -r<br><img src="https://s1.ax1x.com/2020/05/30/tQwRW6.png" alt="tQwRW6.png"></p></li></ul><blockquote><p>k 1表示以第一列作为排序<br>r 表示倒序</p></blockquote><ul><li><p>uniq 去重<br><img src="https://s1.ax1x.com/2020/05/30/tQ0JXD.png" alt="tQ0JXD.png"></p></li><li><p>awk ‘{print $1,$2,$NF}’<br><img src="https://s1.ax1x.com/2020/05/30/tQ0j41.png" alt="tQ0j41.png"><br>表示打印第一列和第二列以及最后一列(<strong>$NF</strong>)</p></li><li><p>head -5<br>表示取前五条</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找两个正序数组的中位数</title>
      <link href="2020/05/29/13.LeetCode/4.%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0_LeetCode05/"/>
      <url>2020/05/29/13.LeetCode/4.%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0_LeetCode05/</url>
      
        <content type="html"><![CDATA[<h1>寻找两个正序数组的中位数</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><p>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。<br>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><ul><li>示例 1:</li></ul><pre class="line-numbers language-none"><code class="language-none">nums1 &#x3D; [1, 3]nums2 &#x3D; [2]则中位数是 2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>示例 2:</li></ul><pre class="line-numbers language-none"><code class="language-none">nums1 &#x3D; [1, 2]nums2 &#x3D; [3, 4]则中位数是 (2 + 3)&#x2F;2 &#x3D; 2.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="分析"><a class="header-anchor" href="#分析"></a>分析</h2><p>最开始我的想法是利用TreeMap来实现数组有序，得到有序数组之后可以获取到中位数。但是TreeMap的底层是k-v结构导致不能保存重复的元素。</p><p>根据官方的解题思路采用的是先算出两个数组的长度然后得到合并后的数组长度，然后根据合并后数组的长度可以得到中位数的位置index。然后遍历两个数组得到中位数的值。</p><h2 id="代码"><a class="header-anchor" href="#代码"></a>代码</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领域驱动设计_2</title>
      <link href="2020/05/28/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-2/"/>
      <url>2020/05/28/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-2/</url>
      
        <content type="html"><![CDATA[<h1>领域驱动设计入门流程</h1><p>主要是从围绕组织的业务模型定位到编码域模型的过程。</p><h2 id="基础流程"><a class="header-anchor" href="#基础流程"></a>基础流程</h2><ul><li>对齐：业务模型对齐需求</li><li>发现：对领域实现可视化和协作</li><li>解耦：将领域分为子域</li><li>连接：将子域形成为一种松耦合架构</li><li>战略：专攻业务差异化的核心子域</li><li>组织：按照有界上下文组织团队</li><li>定义：定义每个有界上下文的角色和职责</li><li>编码：使用战术模式实现有界上下文</li></ul><h2 id="基础划分"><a class="header-anchor" href="#基础划分"></a>基础划分</h2><p>领域驱动设计将软件系统的设计分为两个部分：战略设计和战术设计。在战略设计层面提出域、子域、限界上下文等概念;在战术设计层<br>面提出了实体、值对象、领域服务、领域事件、聚合、工厂、资源等重要概念</p><p>战略设计部分指导我们如何按照领域驱动的模型将一个复杂系统进行拆分；战术设计部分指导我们将拆分出来的模块落地以及落地过程<br>中应遵循的原则。</p><p>领域驱动设计在微服务时代大行其道的主要原因是因为领域设计的战略部分将将系统划分为不同的’域’，这与微服务架构体系中将一个<br>单体应用拆分为不同的微服务解决的是同一个问题。<br>'域’解决的是空间问题;限定上下文解决的是解决空间方案(ps:可以将域理解成为一个具体的车间，限定上下文可以理解为车间中进行某<br>一步生产活动的生产资料)</p><h2 id="传统的分层架构"><a class="header-anchor" href="#传统的分层架构"></a>传统的分层架构</h2><hr><h2 id="终端显示层-开放接口"><a class="header-anchor" href="#终端显示层-开放接口"></a>|  终端显示层  | 开放接口 |</h2><table><thead><tr><th>web层</th></tr></thead><tbody><tr><td>service</td></tr></tbody></table><hr><pre><code>           |  manager层</code></pre><hr><table><thead><tr><th>DAO层</th></tr></thead><tbody><tr><td>DB</td></tr></tbody></table><p>在传统分层架构中</p><ul><li><p>service层<br>业务逻辑服务层:承担的是具体的业务逻辑服务</p></li><li><p>manager层<br>通用业务处理层,承担的是</p></li><li><p>对第三方接口进行封装,预处理返回结果及转换异常信息</p></li><li><p>对service层中的通用能力的下沉(ps:也就是说将通用的service中的能力下沉到manager层)</p></li><li><p>与DAO层的封装,对DAO层的组合复用(ps:可以将事务放到manager层来控制)</p></li></ul><p>缺陷或不足：</p><ol><li>service层和manager层在实际开发中没有明显的特征，容易将manager层演化成为一个特殊的业务属性淡化的service层</li></ol><p>根据六边形架构的指导思想，将一个实际的应用划分为四层：<br>1.用户接口层：负责用户展现相关的逻辑<br>2.应用层：将一个用例进行流程编排(将接口用例分成若干步骤，但是不负责每步的具体实施)(ps:定义流程接口)<br>3.领域层：负责实现核心的领域逻辑(业务逻辑)<br>4.基础设施层：所以依赖的具体实现</p><p>倒置的分层架构</p><h2 id="领域模型的特定"><a class="header-anchor" href="#领域模型的特定"></a>领域模型的特定</h2><ol><li>对业务领域进行建模</li></ol><ul><li>细粒度的类，易于扩展和复用</li><li>可应对复杂的业务逻辑</li><li>需要经验才能掌握</li></ul><ol start="2"><li>简单领域模型<ul><li>几乎和数据库实体一一对应</li></ul></li><li>复杂领域模型</li></ol><ul><li>使用继承、组合、设计模式各种手段</li></ul><blockquote><p>在整个软件开发的周期中尽量使用领域名称来进行沟通、在代码中尽量让命名贴近于领域对象。</p></blockquote><h2 id="DDD分层架构"><a class="header-anchor" href="#DDD分层架构"></a>DDD分层架构</h2><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>用户界面/展示层</td><td>负责向用户展现信息以及解释用户命令</td></tr><tr><td>应用层</td><td>很薄的一层，用来协调应用的活动。不包含业务代码逻辑，不保留业务对象状态，但应保留应用任务进度状态</td></tr><tr><td>领域层</td><td>本层包含关于领域的所有信息，是业务软件的核心所在，在这里保留业务对象的状态和行为。</td></tr><tr><td>基础设施层</td><td>作为底层基础层，提供其他层的基础功能，例如持久化、通用功能等</td></tr></tbody></table><h3 id="领域层"><a class="header-anchor" href="#领域层"></a>领域层</h3><ul><li><p>实体</p><ol><li>对象不是由属性定义的，而值标识定义的</li><li>对象内容的变化不会影响标志符(ps:可以理解为对象内容的变化本身就是对象的一种合理行为)</li><li>持久化不会影响标志</li><li>实体属性的选择</li></ol><blockquote><p>实体对象属性应是标识、查找、匹配对象的最基本特征;只添加哪些对实体这个概念至关重要的<B>行为</B>和<B>属性</B></p></blockquote></li><li><p>值标识(可以理解为id)</p><ol><li>对象是根据值来确定的</li><li>可以在不同的实体中使用</li><li>值对象通常是不可变的</li></ol></li><li><p>领域服务</p><ol><li>领域服务指的是就是实体的某种行为</li></ol></li><li><p>特征</p><ol><li>服务执行的操作涉及一个领域概念，这个概念通常不属于一个实体或对象</li><li>被执行的操作涉及到领域中的其他对象</li><li>操作是无状态的</li></ol></li><li><p>聚合的特定</p><ol><li>根对象具有值标识</li><li>外部对象不能直接调用根对象的内部引用对象</li></ol><blockquote><p>聚合的定义有点像是门面模式，将内部功能封装起来</p></blockquote></li></ul><h2 id="领域对象的管理"><a class="header-anchor" href="#领域对象的管理"></a>领域对象的管理</h2><blockquote><p>创建管理领域对象的生命周期是一个复杂且敏感的功能，介绍3个模式来进行分解</p></blockquote><p><B>聚合模式</B></p><ul><li>聚合是一个用来定义对象<B>所有权</B>和<B>边界</B>的领域模式。工厂和资源库是另外的两个设计模式，用来帮助我们处理对象的创建和存储问题</li></ul><p>由于模型间的相互关系依赖，导致实例与实例存在相互引用，在这种情况下很难梳理清楚一个领域对象的关系。<br>什么是聚合模式？</p><blockquote><p>通过一个实体根对象持有聚合对象的引用，聚合对象之间可以相互依赖。对外只暴露实体根对象，形成以实体根对象为核心内聚的领域对象</p></blockquote><p>聚合是如何保持数据一致性和强化不变量的呢？</p><blockquote><p>因为其他对象只能持有对根对象的引用，这意味着它们不能直接变更聚合内的其他的对象。它们所能做的就是对根做变更，或者让请求根来执行某些动作</p></blockquote><p><B>工厂模式</B></p><blockquote><p>领域模式中重点强调使用工厂模式来创建复杂对象</p></blockquote><ul><li>工厂被用来封装对象创建所必需的知识，它们对创建聚合特别有用。当聚合的根被创建后，所有聚合包含的对象将随之创建，所有的不变量得到了强化。</li></ul><p>因此，为复杂对象和聚合创建实例的职责，应该转交给一个单独的对象。虽然这个对象本身在领域模型中没有职责，但它仍是领域设计的一部分。提供一个接口来封装所有复杂的组装过程，客户不需要引用正在初始化的对象所对应的具体类。将整个聚合当作一个单元来创建，强化它们的不变量。</p><p>一个聚合包含了一系列密切相关的对象。根的构建与聚合内的其他对象的创建是相关的。会有一些逻辑一同放到聚合中，这些逻辑并不天然属于任何一个对象，因为它总是跟其他对象的构建有关。看起来比较合适的做法是，使用一个专用的工厂类来负责创建整个聚合，在这个工厂类中将包含应该为聚合强化的规则、约束和不变量。这个对象会保持简单，并将完成特定的目的，不会使复杂的构建逻辑混乱不堪。</p><p>ps:也就是有对象创建工厂来专门负责聚合对象的创建工作，将对象的聚合关系的创建全部放到对象创建工厂中去</p><p>不使用工厂使用实体构造器的条件</p><ol><li>构造过程并不复杂。</li><li>一个对象的创建不涉及到其他对象的创建，可以将所有需要的属性传递给构<br>造器</li><li>客户对实现很感兴趣，可能希望选择使用策略（Strategy）模式。</li><li>类是特定的类型，不存在到层级，所以不用在一系列的具体实现中进行选<br>择。</li></ol><p>第三点，客户端对实体的创建很感兴趣，也就是说对象的创建非常依赖于客户端的行为，此时可以考虑使用策略模式。工厂也可以达到这样的效果，但是需要有标识符传入</p><p><B>资源库</B></p><blockquote><p>资源库：访问实体的工具，位于领域层和基础实施层之间。作用是通过基础设施层的工具先领域层输出实体对象。</p></blockquote><p>资源库与工厂的区别：资源库关注的是如何将已存在的实体重新载入到领域层中；工厂关心的是如何创建一个新的实体对象。两者一个关注的是已有对象一个关注的是如何创建新对象。</p><h3 id="面向深层理解的重构"><a class="header-anchor" href="#面向深层理解的重构"></a>面向深层理解的重构</h3><ol><li>持续重构</li><li>关注核心模型</li></ol><h3 id="模型的一致性"><a class="header-anchor" href="#模型的一致性"></a>模型的一致性</h3><ol><li>边界上下文</li><li>持续集成</li><li>上下文映射</li><li>共享内核</li><li>客户-供应商</li><li>顺从者</li><li>防崩溃层</li><li>隔离通道</li><li>开发主机服务</li><li>提炼</li></ol>]]></content>
      
      
      <categories>
          
          <category> 领域驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领域驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领域驱动设计(简介)</title>
      <link href="2020/05/28/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-1/"/>
      <url>2020/05/28/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-1/</url>
      
        <content type="html"><![CDATA[<h1>领域驱动设计(简介)</h1><p>在微服务下根据不同业务进行划分从而产生专注服务于特定业务的不同系统。不同系统之间相互配合从而完成整体业务功能。在根据业务进行划分时候，目前我们大部分人采用的是数据模型驱动开发的模式，在这种模式下业务和数据之间的流转其实是通过biz层处理的。这样的模型结构将业务的流转放到了biz层中和系统进行强耦合，然而在现实生活中业务的不确定性和易变性导致我们需要不断的修改数据模型和biz层。一段时间迭代后biz层和数据模型通过不同的需求迭代导致必须要通过功能去查看代码从而还原业务。在这样的情况下，领域驱动这种方式就很适合现在的开发流程。以下大部分是根据www.jdon.com中的一系列领域驱动设计的文章沉淀下来。<a href="http://xn--jdon-u74hg61t.com">感谢jdon.com</a></p><h2 id="领域驱动设计是什么？"><a class="header-anchor" href="#领域驱动设计是什么？"></a>领域驱动设计是什么？</h2><blockquote><p>领域驱动设计（英语：Domain-driven design，缩写 DDD）是一种通过将实现连接到持续进化的模型来满足复杂需求的软件开发方法。</p></blockquote><p>领域驱动设计的前提是：</p><ol><li>把项目的主要重点放在核心领域（core domain）和域逻辑;</li><li>把复杂的设计放在有界域（bounded context）的模型上;</li><li>发起一个创造性的合作之间的技术和域界专家以迭代地完善的概念模式，解决特定领域的问题</li></ol><h2 id="领域驱动设计的由来"><a class="header-anchor" href="#领域驱动设计的由来"></a>领域驱动设计的由来</h2><p>服务器后端架构发展主要分为三个阶段：</p><ol><li>UI+DataBase的两层架构</li><li>UI+Service+DataBase的多层SOA架构</li><li>DDD+SOA服务的事件驱动架构<br>架构的升级是由于对后端技术的需求倒逼导致的，从最开始的静态网站到Ajax技术为代变的动态网站，再到现在的微服务架构。不断的迭代的需求引领这工程实践向DDD的模式。</li></ol><h3 id="领域取属设计能做什么？"><a class="header-anchor" href="#领域取属设计能做什么？"></a>领域取属设计能做什么？</h3><p>领域驱动设计主要是用<strong>领域模型</strong>去描述业务，传统的J2EE和Spring+持久化层等事务性编程模型是基于数据去实现的也就只会关心数据的结构，从而导致业务对象(DTO/BO)等只存在get/set方法。</p><p>以下是jdon的经典比喻：</p><blockquote><p>以比赛Match为案例，比赛有“开始”和“结束”等业务行为，但是传统经典的方式是将“开始”和“结束”行为放在比赛的服务Service中，而不是放在比赛对象本身之中。我们不能因为用了计算机，用了数据库，用了框架，业务模型反而被技术框架给绑架;</p></blockquote><blockquote><p>提倡充血模型，实际就是让过去被肢解被黑crack的业务模型回归正常，当然这也会被一些先入为主或被洗过脑的程序员看成反而不正常，这更是极大可悲之处。看到领域模型代码，就看到业务需求，没有翻译没有转换，保证软件真正实现“拷贝不走样”。</p></blockquote><blockquote><p>DDD最大的好处是：接触到需求第一步就是考虑领域模型，而不是将其切割成数据和行为，然后数据用数据库实现，行为使用服务实现，最后造成需求的首肢分离。DDD让你首先考虑的是业务语言，而不是数据。重点不同导致编程世界观不同。</p></blockquote><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>我理解的意思是领域驱动模型是向让我们按照业务来进行建模，而不是业务最后产生的数据来进行数据建模。数据建模会让我们的业务被隐藏在service中，业务产生的结果是我们得到的数据。用领域模型达到的效果就是模型即代表业务，也就是看到模型就能知道业务，从业务出发，然后用行为和数据去完成业务的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 领域驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领域驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复字符的最长子串—LeetCode03</title>
      <link href="2020/05/27/13.LeetCode/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E2%80%94LeetCode03/"/>
      <url>2020/05/27/13.LeetCode/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E2%80%94LeetCode03/</url>
      
        <content type="html"><![CDATA[<h1>无重复字符的最长子串</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><p>给定一个字符串，请你找出其中不含有重复字符的最长子串的长度</p><blockquote><p>示例 1:</p></blockquote><pre class="line-numbers language-none"><code class="language-none">输入: &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>示例 2:</p></blockquote><pre class="line-numbers language-none"><code class="language-none">输入: &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是&quot;b&quot;，所以其长度为 1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>示例 3:</p></blockquote><pre class="line-numbers language-none"><code class="language-none">输入: &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。    请注意，你的答案必须是子串的长度，&quot;pwke&quot; 是一个子序列，不是子串。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析"><a class="header-anchor" href="#分析"></a>分析</h2><p>最开始想到的解法就是用str.substring(0,str.length-2)和str.substring(str.length-2,str.length-2)去判断前一个是否存在后一个元素中的值。如果存在递归，说明后一个元素重复。后一个元素重复也不能证明出什么结论，并且递归的去判断并不能推导出最长的子串。<br><img src="https://s1.ax1x.com/2020/05/27/tE2Qv4.jpg" alt="tE2Qv4.jpg"></p><h2 id="官方思路"><a class="header-anchor" href="#官方思路"></a>官方思路</h2><blockquote><p>如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！这里的原因在于，假设我们选择字符串中的第 k个字符作为起始位置，并且得到了不包含重复字符的最长子串的结束位置为 kr。那么当我们选择第 k+1 个字符作为起始位置时，首先从k+1到 r_kr的字符显然是不重复的，并且由于少了原本的第 kk 个字符，我们可以尝试继续增大 r_kr，直到右侧出现了重复字符为止。</p></blockquote><p>用图来表示就是：</p><p><img src="https://s1.ax1x.com/2020/05/27/tEWggS.jpg" alt="tEWggS.jpg"></p><h2 id="代码示例"><a class="header-anchor" href="#代码示例"></a>代码示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//表示最长子串的长度</span>        <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//索引</span>        <span class="token keyword">int</span> firstIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//firstIndex、lastIndex都必须小于字符串长度</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>firstIndex <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lastIndex<span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//获取lastIndex指向的字符</span>            <span class="token class-name">Character</span> key <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断字符是否存在map中</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//存在map中表明key元素已经和前面的字符串重复</span>                <span class="token class-name">Character</span> rKey <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>firstIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//移除当前字符串中的第一个元素</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>rKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//起始点+1</span>                firstIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//如果不存在就将元素放到map中</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//lastIndex继续向前</span>                lastIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//最后如果本次得到的子串长度大于maxLength就进行替代</span>            maxLength <span class="token operator">=</span> lastIndex <span class="token operator">-</span>firstIndex<span class="token operator">></span>maxLength<span class="token operator">?</span>lastIndex<span class="token operator">-</span>firstIndex<span class="token operator">:</span>maxLength<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>无重复字符的最大子串问题主要用到了一个查找范围中的技巧<strong>滑动窗口</strong>的概念，将一个范围作为一个窗口，如果下一个元素不存在与这个范围中就加入这个窗口，如果下一个元素存在这个范围中就将这个窗口的范围从前递减的减少直到排除了这个元素。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数相加--LeetCode02</title>
      <link href="2020/05/27/13.LeetCode/2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-LeetCode02/"/>
      <url>2020/05/27/13.LeetCode/2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-LeetCode02/</url>
      
        <content type="html"><![CDATA[<h1>两数向加</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><ul><li>示例：</li></ul><pre class="line-numbers language-none"><code class="language-none">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 &#x3D; 807<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="分析"><a class="header-anchor" href="#分析"></a>分析</h2><p>最开始按照题目要求我自己思考的想法是<br>第一步：先得到数字<br>第二步：数字相加<br>第三步：将和转化成ListNode的数据结构</p><h3 id="递归数字解法"><a class="header-anchor" href="#递归数字解法"></a>递归数字解法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//client方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BigInteger</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token function">buildNum</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token function">buildNum</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">buildNote</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 将链表转化成数字 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildNum</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">buildNum</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 将数字转化成列表**/</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">buildNote</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> currentNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> i <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        currentNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        currentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">buildNote</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        currentNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> currentNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实验结果</li></ul><p>抛出<strong>BigInteger</strong>不能识别异常，应该是评测程序不能使用相关的引用类。就代表着不能使用数值之和的解法。</p><h3 id="移位相加解法"><a class="header-anchor" href="#移位相加解法"></a>移位相加解法</h3><ul><li>代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化一个新的链表</span>        <span class="token class-name">ListNode</span> rsNote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化时将当前节点设置成为rsNode</span>        <span class="token class-name">ListNode</span> currNode <span class="token operator">=</span> rsNote<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pNode <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> qNode <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token comment">//表示是否有进位</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">||</span> qNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//当前循环中的node</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>pNode<span class="token operator">?</span>pNode<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>qNode<span class="token operator">?</span>qNode<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>carry<span class="token punctuation">;</span>            <span class="token comment">//当前进位</span>            carry <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment">//构建出当前node节点</span>            currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将下一次使用到的当前节点设置成为此次循环得到的的下一个节点</span>            currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">//遍历列表中的下一个元素</span>            pNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!=</span>pNode<span class="token operator">?</span>pNode<span class="token punctuation">.</span>next<span class="token operator">:</span>pNode<span class="token punctuation">;</span>            qNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!=</span>qNode<span class="token operator">?</span>qNode<span class="token punctuation">.</span>next<span class="token operator">:</span>qNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最后处理最后一个进位数值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> rsNote<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用到的数学原理就只是逢十进位。先设置一个标志位<strong>carry</strong>，然后计算当前位置的值模除10从而得到当前位置的值。<br>这里使用了一个技巧，在对这种尾节点进行递增时使用了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">currNode<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用图来表示<br><img src="https://s1.ax1x.com/2020/05/27/tkiMSU.png" alt="tkiMSU.png"></p><p>不断的将当前节点顺着链表向下移动，并且给每一个next节点进行赋值。这种方法比递归所占用的空间较小。</p><h2 id="总结："><a class="header-anchor" href="#总结："></a>总结：</h2><p>两数向加问题本质上还是要去解决进位问题而不是进行数值计算，这种进位问题应该还可以继续进行优化。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和_LeetCode01</title>
      <link href="2020/05/26/13.LeetCode/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-LeetCode01/"/>
      <url>2020/05/26/13.LeetCode/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-LeetCode01/</url>
      
        <content type="html"><![CDATA[<h1>两数之和_LeetCode01</h1><h2 id="题目"><a class="header-anchor" href="#题目"></a>题目</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>示例:<br>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h2 id="分析"><a class="header-anchor" href="#分析"></a>分析</h2><p>第一个版本中我只是用到了一个最基本的冒泡的方式遍历了数组进行的查询，目前代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果<br><img src="https://s1.ax1x.com/2020/05/26/tPS9bT.png" alt="tPS9bT.png"></li></ul><p>第二个版本思路本来是想先将不可能的数进行一次排除后再进行求和，后来发现存在可为负数的情况。因此这种方案失败。最后推荐一种官方给出的解题思路<strong>一次Hash法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> difference <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>difference<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>difference<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果<br><img src="https://s1.ax1x.com/2020/05/26/tPPwXn.png" alt="tPPwXn.png"></li></ul><p>这种方法最最主要的特定是利用了HashMap中的key只能映射一个元素。通过这样的特性使得在一次遍历中可以去map中寻找是否存在差值。这是一种空间加hash来换取时间的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程的取消与关闭</title>
      <link href="2020/05/24/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/14.%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8F%96%E6%B6%88%E4%B8%8E%E5%85%B3%E9%97%AD/"/>
      <url>2020/05/24/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/14.%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8F%96%E6%B6%88%E4%B8%8E%E5%85%B3%E9%97%AD/</url>
      
        <content type="html"><![CDATA[<h1>线程的取消与关闭</h1><p>在看《java并发编程实战》中的线程的取消和关闭中看到两个例子比较有趣，因此记录下来。</p><h2 id="程序目的"><a class="header-anchor" href="#程序目的"></a>程序目的</h2><blockquote><p>想通过某种动作来达到取消某个特定线程的执行，从而达到中断改线程的目的</p></blockquote><h2 id="自定义标志位来控制线程的中断"><a class="header-anchor" href="#自定义标志位来控制线程的中断"></a>自定义标志位来控制线程的中断</h2><p>书中先展示了一种反例，通过自定义标志位来控制线程的中断</p><ul><li>product</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * flag标志是否暂停生产     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 可阻塞的队列     */</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span> queue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 启动生产者     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">BigInteger</span> p <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span>ZERO<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p  <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">nextProbablePrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":生产->"</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":生产停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">":发生中断异常..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 取消生产     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":暂停"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过volatile修饰flag标志位来控制生产者线程的取消</p><ul><li>main</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Producer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    producer<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"生产者线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>producer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><p><img src="https://s1.ax1x.com/2020/05/24/tSHM5T.png" alt="tSHM5T.png"></p><blockquote><p>thread threadId</p></blockquote><p><img src="https://s1.ax1x.com/2020/05/24/tSvZfP.png" alt="tSvZfP.png"></p><p>通过Arthas观察线程的执行情况,<strong>生产者线程</strong>状态为waiting,可以看到生产者线程在等待阻塞队列释放空间。由于生产者线程会一直等待阻塞队列的释放，所以并不能达到中断生产者线程的效果。</p><h2 id="使用中断来进行取消"><a class="header-anchor" href="#使用中断来进行取消"></a>使用中断来进行取消</h2><ul><li>product</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ProducerInterrupt</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 可阻塞的队列     */</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span> queue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProducerInterrupt</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 启动生产者     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">BigInteger</span> p <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span>ZERO<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p  <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">nextProbablePrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":生产->"</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":生产停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">":发生中断异常..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ProducerInterrupt</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerInterrupt</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t1 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    producer<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"生产者线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：<br><img src="https://s1.ax1x.com/2020/05/24/tpS00g.png" alt="tpS00g.png"></p><p>总结：<br>在使用自定义的标志位来进行线程的取消操作时，要格外注意是否有会阻塞运行线程的操作。当存在有阻塞运行线程的操作时，会阻塞判断标志位的操作。</p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> final </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AbstractQueuedSynchronizer的源码分析</title>
      <link href="2020/05/22/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/13.AbstractQueuedSynchronizer%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2020/05/22/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/13.AbstractQueuedSynchronizer%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>AbstractQueuedSynchronizer的源码分析</h1><p><strong>AQS</strong>的全称是<strong>AbstractQueuedSynchronizer</strong>，AQS提供了一个以FIFO的队列，通过定义一系列阻塞线程的操作为<strong>ReentrantLock</strong>、<strong>ReentrantReadWriteLock</strong>、<strong>Semaphore</strong>、<strong>CountDownLatch</strong>提供了底层框架支持。</p><h2 id=""><a class="header-anchor" href="#"></a></h2><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结:</h2>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guava的使用</title>
      <link href="2020/05/20/1.%E6%9D%82%E8%AE%B0/Guava%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/05/20/1.%E6%9D%82%E8%AE%B0/Guava%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>Guava的使用</h1><h2 id="线程池的使用"><a class="header-anchor" href="#线程池的使用"></a>线程池的使用</h2><blockquote><p>ListenableFuture是基于装饰器模式实现的</p></blockquote><ul><li>示例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> nameFormat <span class="token operator">=</span> <span class="token string">"thread_factory_%d"</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadFactory</span> shardingThreadFactory <span class="token operator">=</span> <span class="token class-name">ShardingThreadFactoryBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>nameFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> delegate <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span>shardingThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到装饰器的线程池</span>        <span class="token class-name">ListeningExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">MoreExecutors</span><span class="token punctuation">.</span><span class="token function">listeningDecorator</span><span class="token punctuation">(</span>delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"线程:"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">",休眠3s"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册回调函数</span>        future<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程:"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行回调函数得到返回值为:"</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span>shardingThreadFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sharding-jdbc的查询过程分析</title>
      <link href="2020/05/18/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/22.sharding-jdbc%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
      <url>2020/05/18/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/22.sharding-jdbc%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>sharding-jdbc的查询过程分析</h1><p>上一章简单的说了一下sharding-jdbc的使用方法，这一章分析一下sharding-jdbc进行数据分片的原理</p><h2 id="概念"><a class="header-anchor" href="#概念"></a>概念</h2><p><strong>数据分片</strong>指的是数据按照某个维度将单一数据库的数据分散到多个数据库或多个数据表中达到已提升性能瓶颈已经可用性的效果。数据分片主要分为<strong>水平分片</strong>、<strong>垂直分片</strong>。</p><h3 id="水平分片"><a class="header-anchor" href="#水平分片"></a>水平分片</h3><p><strong>水平分片</strong>指的是根据某种规则将数据分散到多个库或多个表中，每个分片包含数据的一部分</p><h3 id="垂直分片"><a class="header-anchor" href="#垂直分片"></a>垂直分片</h3><p><strong>垂直分片</strong>指的是按照业务来进行划分专库专用，每个表都放到专门的库中</p><h2 id="内核剖析"><a class="header-anchor" href="#内核剖析"></a>内核剖析</h2><ul><li>核心流程</li></ul><blockquote><p>SQL解析 =&gt; 执行器优化 =&gt; SQL路由 =&gt; SQL改写 =&gt; SQL执行 =&gt; 结果归并</p></blockquote><p><img src="https://s1.ax1x.com/2020/05/19/Y49lon.png" alt="Y49lon.png"></p><ol><li><strong>SQL解析</strong>主要是通过sql解析器对sql进行理解</li><li><strong>执行器优化</strong>主要是合并和优化分片条件</li><li><strong>SQL路由</strong>根据路由策略生成路由路径</li><li><strong>SQL改写</strong>将sql改写为真实数据库可以执行的语句</li><li><strong>SQL执行</strong>通过多线程异步执行</li><li><strong>结果并归</strong>将多个结果集进行合并返回</li></ol><h2 id="代码分析"><a class="header-anchor" href="#代码分析"></a>代码分析</h2><h3 id="ShardingRouter核心分析"><a class="header-anchor" href="#ShardingRouter核心分析"></a>ShardingRouter核心分析</h3><p>ShardingRouter.<strong>route()<strong>方法作为路由的核心，主要是返回路由对象</strong>SQLRouteResult</strong>，这个对象保存路由信息。<br><img src="https://s1.ax1x.com/2020/05/19/Y4Fupq.png" alt="Y4Fupq.png"></p><p><strong>RouteResult</strong>对象最终被返回到<strong>ShardingPreparedStatement</strong>。这个类继承于<strong>java.sql.Statement</strong>,Statement定义了与数据库进行交互并返回结果的接口。</p><ul><li>ShardingPreparedStatement</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ShardingPreparedStatement</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractShardingPreparedStatementAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//分片连接</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ShardingConnection</span> connection<span class="token punctuation">;</span>        <span class="token comment">//执行sql</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">;</span>        <span class="token comment">//分片引擎</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PreparedQueryShardingEngine</span> shardingEngine<span class="token punctuation">;</span>        <span class="token comment">//执行器</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PreparedStatementExecutor</span> preparedStatementExecutor<span class="token punctuation">;</span>        <span class="token comment">//批处理执行器</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BatchPreparedStatementExecutor</span> batchPreparedStatementExecutor<span class="token punctuation">;</span>        <span class="token comment">//sql路由器</span>    <span class="token keyword">private</span> <span class="token class-name">SQLRouteResult</span> sqlRouteResult<span class="token punctuation">;</span>        <span class="token comment">//结果集</span>    <span class="token keyword">private</span> <span class="token class-name">ResultSet</span> currentResultSet<span class="token punctuation">;</span>    <span class="token comment">//实现executeQuery、executeUpdate、execute、getGeneratedKeys等方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="execute-方法"><a class="header-anchor" href="#execute-方法"></a>execute()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//清除环境</span>        <span class="token function">clearPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//进行分片环境设置</span>        <span class="token function">shard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化预处理执行器</span>        <span class="token function">initPreparedStatementExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行</span>        <span class="token keyword">return</span> preparedStatementExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>shard()<strong>方法已经在上面进行了分析，我们继续分析一下</strong>initPreparedStatementExecutor</strong>方法</p><ul><li>initPreparedStatementExecutor</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initPreparedStatementExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化执行器</span>    preparedStatementExecutor<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>sqlRouteResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置语句参数</span>    <span class="token function">setParametersForStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">replayMethodForStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**preparedStatementExecutor.execute()**方法是具体执行的方法</p><p><img src="https://s1.ax1x.com/2020/05/20/Y7XsIA.png" alt="Y7XsIA.png"></p><p>1处将待执行sql封装成为回调对象，2处**executeCallback(executeCallback)**执行回调对象</p><ul><li>executeCallback在回调中执行sql</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Boolean</span> <span class="token function">executeSQL</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ConnectionMode</span> connectionMode<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>executeCallback()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> sqlExecuteTemplate<span class="token punctuation">.</span><span class="token function">executeGroup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> executeGroups<span class="token punctuation">,</span> executeCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">refreshMetaDataIfNeeded</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getRuntimeContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sqlStatementContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过<strong>sqlExecuteTemplate.executeGroup</strong>执行方法，会将执行动作传递到执行引擎<strong>ShardingExecuteEngine</strong>的<strong>groupExecute</strong>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token function">groupExecute</span><span class="token punctuation">(</span>    <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroups<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> firstCallback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> callback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> serial<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputGroups<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> serial <span class="token operator">?</span> <span class="token function">serialExecute</span><span class="token punctuation">(</span>inputGroups<span class="token punctuation">,</span> firstCallback<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">parallelExecute</span><span class="token punctuation">(</span>inputGroups<span class="token punctuation">,</span> firstCallback<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里<strong>同步执行方法</strong>和<strong>异步执行方法</strong>，并且将第一个任务交给当前线程进行处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token function">parallelExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroups<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> firstCallback<span class="token punctuation">,</span>                                       <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> callback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroupsIterator <span class="token operator">=</span> inputGroups<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ShardingExecuteGroup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span></span> firstInputs <span class="token operator">=</span> inputGroupsIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListenableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> restResultFutures <span class="token operator">=</span> <span class="token function">asyncGroupExecute</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>inputGroupsIterator<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果firstCallback有值就让当前线程进行执行，如果没值就返回线程池执行结果</span>    <span class="token keyword">return</span> <span class="token function">getGroupResults</span><span class="token punctuation">(</span><span class="token function">syncGroupExecute</span><span class="token punctuation">(</span>firstInputs<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token operator">==</span> firstCallback <span class="token operator">?</span> callback <span class="token operator">:</span> firstCallback<span class="token punctuation">)</span><span class="token punctuation">,</span> restResultFutures<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码很细心，不但使用到了当前线程来执行第一个任务，并且线程池也使用的是Guava提供的可回调的线程池<strong>ListeningExecutorService</strong>,可参考<a href="/2020/05/20/1.%E6%9D%82%E8%AE%B0/Guava%E7%9A%84%E4%BD%BF%E7%94%A8/#more">Guava的使用</a></p><p>在执行sql时候又会回到当初创建回调函数的地方进行执行回调方法。</p><p>总结：<br>sharding-jdbc在执行sql的时候首先要获取分库的配置生成<strong>statement</strong>,然后构造回调函数，将回调函数放到线程池中去执行得到结果并执行回调函数合并结果返回，接下来重点介绍一下sharding-jdbc的详细用法。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShardingSphere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构下分布式事务的思考</title>
      <link href="2020/05/14/1.%E6%9D%82%E8%AE%B0/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>2020/05/14/1.%E6%9D%82%E8%AE%B0/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1>微服务架构下分布式事务的思考</h1><h2 id="从本地事务到分布式事务的演变"><a class="header-anchor" href="#从本地事务到分布式事务的演变"></a>从本地事务到分布式事务的演变</h2><h3 id="分布式事务是什么？"><a class="header-anchor" href="#分布式事务是什么？"></a>分布式事务是什么？</h3><p>事务是什么？</p><h3 id="二阶段提交"><a class="header-anchor" href="#二阶段提交"></a>二阶段提交</h3><p>有一个协调者分别在准备和执行阶段对参与者发送命令和进行事务处理的逻辑</p><h3 id="三阶段"><a class="header-anchor" href="#三阶段"></a>三阶段</h3><p>三阶段是作为二阶段的一种改良策略，优化改良了超时等待的问题和预处理阶段，通过协调者在不同的阶段中判断相应的命令<br>三阶段分为：预处理、准备、执行。预处理阶段主要是解决，二阶段在准备阶段之前没有筛选过参与者的问题，尽量保证了准备阶段的参与者都是存在的或有意义的。</p><h2 id="最终一致性解决方案"><a class="header-anchor" href="#最终一致性解决方案"></a>最终一致性解决方案</h2><h3 id="CAP"><a class="header-anchor" href="#CAP"></a>CAP</h3><blockquote><p>可参考分布式思考一文</p></blockquote><p>CAP理论补充，cap理论是建立在</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫码登录的原理</title>
      <link href="2020/05/10/1.%E6%9D%82%E8%AE%B0/%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>2020/05/10/1.%E6%9D%82%E8%AE%B0/%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sharding-jdbc分库分表实践</title>
      <link href="2020/05/06/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/21.sharding-jdbc%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%AE%9E%E8%B7%B5/"/>
      <url>2020/05/06/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/21.sharding-jdbc%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1>sharding-jdbc分库分表实践</h1><p>在项目中大量的使用到sharding-jdbc，今天将它的实践用法做一个总结。<br>总结前先提几个问题:</p><ol><li>为什么要用sharding-jdbc？</li><li>如何使用？</li><li>有什么注意事项？</li><li>同类型的框架对比？<br>让我们带着问题去开始了解sharding-jdbc。</li></ol><h2 id="基础知识"><a class="header-anchor" href="#基础知识"></a>基础知识</h2><p><strong>sharding-jdbc</strong>是定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><ul><li>roadmap</li></ul><p><img src="https://shardingsphere.apache.org/document/current/img/roadmap_cn.png" alt="shardingsphere"></p><ul><li>Sharding-Proxy</li></ul><p><img src="https://shardingsphere.apache.org/document/current/img/shardingsphere-proxy_v2.png" alt="Sharding-Proxy"></p><ul><li>支持的功能</li></ul><p><img src="https://s1.ax1x.com/2020/05/06/YVJ5PH.png" alt="YVJ5PH.png"></p><h2 id="快速入门"><a class="header-anchor" href="#快速入门"></a>快速入门</h2><h3 id="maven依赖"><a class="header-anchor" href="#maven依赖"></a>maven依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;latest.release.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="规则配置"><a class="header-anchor" href="#规则配置"></a>规则配置</h3><blockquote><p>Sharding-JDBC可以通过Java，YAML，Spring命名空间和Spring Boot Starter四种方式配置，开发者可根据场景选择适合的配置方式。详情请参见配置手册。</p></blockquote><h3 id="创建DataSource"><a class="header-anchor" href="#创建DataSource"></a>创建DataSource</h3><blockquote><p>通过ShardingDataSourceFactory工厂和规则配置对象获取ShardingDataSource，ShardingDataSource实现自JDBC的标准接口DataSource。然后即可通过DataSource选择使用原生JDBC开发，或者使用JPA, MyBatis等ORM工具。</p></blockquote><h3 id="演示实例"><a class="header-anchor" href="#演示实例"></a>演示实例</h3><ul><li>用springBoot Starter+mysql方式演示</li></ul><ol><li>pom文件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sharding.jdbc.version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sharding.jdbc.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;sharding.jdbc.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- for spring namespace --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-namespace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;sharding.jdbc.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>分库分表配置规则(基于yml文件)</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  shardingsphere:    datasource:      names: ds0,ds1      # 数据源ds0      ds0:        type: com.alibaba.druid.pool.DruidDataSource        driver-class-name: com.mysql.jdbc.Driver        url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ds0?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT        username: root        password: 111111      # 数据源ds1      ds1:        type: com.alibaba.druid.pool.DruidDataSource        driver-class-name: com.mysql.jdbc.Driver        url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ds1?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT        username: root        password: 111111    sharding:      default-database-strategy: # 分库规则        inline:          sharding-column: vender_id          algorithm-expression: ds$&#123;vender_id % 2&#125;      tables:        t_user:  #t_user表          key-generator-column-name: id  #主键          actual-data-nodes: ds$&#123;0..1&#125;.t_user    #真实数据节点          database-strategy: # 分库策略            inline:              sharding-column: vender_id # 分库键              algorithm-expression: ds$&#123;vender_id % 2&#125;#          tableStrategy: #分表策略#            inline: #行表达式#              shardingColumn: vender_id#              algorithmExpression: t_user$&#123;vender_id % 2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建DataSource</li></ol><blockquote><p>由于引入使用了<strong>SpringBoot Mybatis</strong>因此会自动装配相应的<strong>DataSource</strong></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- SpringBoot Mybatis 依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果在不同的库中有相同的表，但是未设置分库策略的话会随机使用一个连接进行查询(这一点可以在下一章中分析原因)</p></blockquote><h2 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h2><p>sharding-jdbc官网上的示例地址已经不是跳转的那个单独的演示项目地址了，已经被合并到主项目中。直接下载主项目时候如果是window会提示文件名称太长，官网已经给了解决方案</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.longpaths <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>以上只是粗略的将<strong>sharding-jdbc</strong>介绍了一下，下一篇文章我们来分析一下<strong>sharding-jdbc</strong>的原理。</p><ul><li>参考资料</li></ul><p><a href="https://dbaplus.cn/news-11-1854-1.html">方案虽好，成本先行：数据库Sharding+Proxy实践解析</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShardingSphere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="2020/05/06/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/05/06/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>设计模式之观察者模式</h1><blockquote><p>观察者模式的定义是一个一对多的依赖关系，让一个或多个观察者对象监控一个主题对象。当主题对象在状态上发生变化时，能够通知所有依赖此主题的观察者对象，使这些观察者对象能够处理此次更新</p></blockquote><h2 id="参与对象"><a class="header-anchor" href="#参与对象"></a>参与对象</h2><ul><li>Subject</li><li>Observer</li><li>Client</li></ul><h3 id="Subject"><a class="header-anchor" href="#Subject"></a>Subject</h3><blockquote><p>主题对象主体是基于被观察者，并且在内部保存一个或多个被观察者的处理对象</p></blockquote><h3 id="Observer"><a class="header-anchor" href="#Observer"></a>Observer</h3><blockquote><p>Observer对象是抽象出来对事件进行处理的对象</p></blockquote><h3 id="client"><a class="header-anchor" href="#client"></a>client</h3><blockquote><p>客户端对象的作用是触发事件的发生，并且将观察者注册到被观察者中</p></blockquote><h2 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h2><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li></ul><h2 id="基本的观察者模式"><a class="header-anchor" href="#基本的观察者模式"></a>基本的观察者模式</h2><ul><li>Subject</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">></span></span> observerList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAllObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        observerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyAllObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observerList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Observer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始执行ObserverImpl..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始执行ObserverImpl2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>client</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverClient</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Observer</span> observer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObserverImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Observer</span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObserverImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Guava中的观察者模式-EventBus"><a class="header-anchor" href="#Guava中的观察者模式-EventBus"></a>Guava中的观察者模式(EventBus)</h2><ul><li>Observer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行事件..."</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Subject</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EventListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Subscribe</span>    <span class="token annotation punctuation">@AllowConcurrentEvents</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Event1</span> event1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->异步消费订阅事件,接收到:"</span> <span class="token operator">+</span> event1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Subscribe</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Event2</span> event2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->同步消费订阅事件,接收到:"</span> <span class="token operator">+</span> event2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Subscribe</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">DeadEvent</span> deadEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->订阅错误的事件,接收到:"</span> <span class="token operator">+</span> deadEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>client</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">EventBus</span> ebSyc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册监听器</span>ebSyc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行相应事件</span>ebSyc<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>观察者模式适用于一个事件的发生会启动多个事件的响应。如果在源事件中依次调用启动关联事件的，这样每次增加关联事件都会在源事件中进行同步修改。一个动作可能会影响多个关联动作的场景适用于观察者模式，例如在一个系统中业务执行完毕后会触发下游多个业务的场景(电商中的订单付款成功就会触发下游物流、商品、财务等多个系统)</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾回收</title>
      <link href="2020/05/05/12.JVM/2.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
      <url>2020/05/05/12.JVM/2.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h1>jvm的垃圾回收机制</h1><p>由于jvm将所有对象都保存在<strong>堆</strong>内存中，因此及时腾出堆内存中无用的空间就至关重要了，jvm通过内存回收的方式对堆内存进行<strong>回收</strong>和<strong>整理</strong><br>回想咱们打扫家务的步骤是不是第一步要将脏东西找出来丢掉，第二步将剩余有用的东西整理码放好。jvm中进行内存回收的步骤也差不多分为<strong>标记</strong>、<strong>清除</strong>、<strong>整理</strong>。根据不同的特点设计出不同的回收算法。</p><h2 id="GC回收算法"><a class="header-anchor" href="#GC回收算法"></a>GC回收算法</h2><ul><li>复制算法</li></ul><blockquote><p>通过复制一个镜像内存空间，每次进行回收时就将有用的对象复制到镜像内存空间中。</p></blockquote><ul><li>标记-清除</li></ul><blockquote><p>将垃圾对象直接镜像删除</p></blockquote><ul><li>标记-整理</li></ul><blockquote><p>在标记-清除后增加一个步骤<strong>整理</strong></p></blockquote><h2 id="分代机制"><a class="header-anchor" href="#分代机制"></a>分代机制</h2><p>由于堆中的对象大部分是朝生夕灭的，因此将堆内存从逻辑上划分为不同的区域。在根据不同的区域用不同的GC算法。</p><ul><li>年轻代</li></ul><blockquote><p>年轻代的特点是存储的对象大部分都是朝生夕灭，因此将年轻代中的数据按照1：1：8 = survivor:survivor:Eden的比例进行划分</p></blockquote><ul><li>老年代</li></ul><h2 id="GC回收器"><a class="header-anchor" href="#GC回收器"></a>GC回收器</h2><h3 id="年轻代的回收器"><a class="header-anchor" href="#年轻代的回收器"></a>年轻代的回收器</h3><ol><li>Serial垃圾回收器</li></ol><blockquote><p>单线程的GC回收器</p></blockquote><ol start="2"><li>PerNew垃圾回收器</li></ol><blockquote><p>多线程的GC回收器，注重于减少停顿时间</p></blockquote><ol start="3"><li>Parallel Scavenge垃圾回收器</li></ol><blockquote><p>多线程版本的垃圾回收器，注重于CPU的吞吐量</p></blockquote><h3 id="老年代垃圾回收器"><a class="header-anchor" href="#老年代垃圾回收器"></a>老年代垃圾回收器</h3><ol><li><p>Serial Old垃圾回收器</p></li><li><p>Parallel Old</p></li><li><p>CMS</p></li></ol><h2 id="CMS垃圾回收器"><a class="header-anchor" href="#CMS垃圾回收器"></a>CMS垃圾回收器</h2><p>CMS垃圾回收器比其他垃圾回收器优化的地方在于并发，可以并发的和应用程序的线程同时进行。</p><h3 id="执行步骤"><a class="header-anchor" href="#执行步骤"></a>执行步骤</h3><ul><li>初始阶段(STW)</li><li>并发标记(并发)</li><li>重新标记(STW)</li><li>并发清理(并发)</li></ul><blockquote><p>由于CMS垃圾回收方式没有内存整理这一步骤，因此在老年代到达阀值的时候会进行full GC，此时会重新整理内存</p></blockquote><h2 id="G1垃圾回收器"><a class="header-anchor" href="#G1垃圾回收器"></a>G1垃圾回收器</h2><p>G1垃圾回收器是指定最小停顿时间，通过尽可能的到达停顿时间来完成GC的一种垃圾回收算法。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final的不变性设计</title>
      <link href="2020/05/04/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/12.final%E7%9A%84%E4%B8%8D%E5%8F%98%E6%80%A7%E8%AE%BE%E8%AE%A1/"/>
      <url>2020/05/04/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/12.final%E7%9A%84%E4%B8%8D%E5%8F%98%E6%80%A7%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1>final的不变性设计</h1><h2 id="final的作用"><a class="header-anchor" href="#final的作用"></a>final的作用</h2><p>final是用来修饰不变性关系的，表示一种不可改变的关系。可以用来修饰<strong>变量</strong>、<strong>方法</strong>、<strong>类</strong></p><h2 id="修饰变量"><a class="header-anchor" href="#修饰变量"></a>修饰变量</h2><p>fianl修饰变量表示一旦赋值关系被初始化就不能被修改了；final只会保证这个变量的引用不可变，而对象本身的内容依然是可变的。</p><p>这样设计的目的是：</p><ul><li>设计的角度</li></ul><blockquote><p>是对于不能修改变量的值需要进行final进行修饰</p></blockquote><ul><li>线程的角度</li></ul><blockquote><p>final修饰的变量在语意就是不变的，因此就是天生线程安全的</p></blockquote><h2 id="空白final"><a class="header-anchor" href="#空白final"></a>空白final</h2><p><strong>空白final</strong>将对final的赋值延迟了，从而增加了程序的灵活性</p><h2 id="final修饰方法"><a class="header-anchor" href="#final修饰方法"></a>final修饰方法</h2><p><strong>final</strong>修饰方法表示方法不能被继承，其中构造方法不能被final修饰</p><h2 id="final修饰类"><a class="header-anchor" href="#final修饰类"></a>final修饰类</h2><p>final修饰类表示这个类不能被继承，在使用final时，一定要写为什么该类一定要被final进行修饰的原因。</p><h2 id="string为什么被设计成final类型的？"><a class="header-anchor" href="#string为什么被设计成final类型的？"></a>string为什么被设计成final类型的？</h2><h3 id="如何实现的？"><a class="header-anchor" href="#如何实现的？"></a>如何实现的？</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Stable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过<strong>final修饰类</strong>和<strong>final修饰byte[]</strong> 来保证的</p></blockquote><h4 id="final带来的好处？"><a class="header-anchor" href="#final带来的好处？"></a>final带来的好处？</h4><blockquote><p>由于字符串在程序中是最常出现的，因此在jvm的规范中划定来一片区域作为字符串缓冲区<strong>常量池</strong>，也是由于这个特点，在字符串缓冲区内的引用关系被设计成不可变的。</p></blockquote><blockquote><p>可以优先作为Map的key进行使用，因为map的key需要进行hash运算，如果可变就会导致将value放到其他位置上。</p></blockquote><p><img src="https://s1.ax1x.com/2020/05/02/JjJ4hj.png" alt="JjJ4hj.png"></p><blockquote><p>线程安全，由于字符串的特点是公用的，因此在很多地方都会用到，因此采用final设计成为不可变的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> final </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM基础原理</title>
      <link href="2020/05/04/12.JVM/1.JVM%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
      <url>2020/05/04/12.JVM/1.JVM%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1>JVM基础原理</h1><h2 id="jvm基础"><a class="header-anchor" href="#jvm基础"></a>jvm基础</h2><h3 id="jvm是什么？"><a class="header-anchor" href="#jvm是什么？"></a>jvm是什么？</h3><p>jvm是运行在操作系统上的执行.class文件的虚拟机</p><h3 id="jvm与操作系统的关系？"><a class="header-anchor" href="#jvm与操作系统的关系？"></a>jvm与操作系统的关系？</h3><p>相同点都是可以执行对应的程序<br>不同点是jvm是可执行class文件与操作系统中间的一层（ps：某人说过计算机世界中的问题如果一个中间层不能解决就再加一个☺️）</p><h3 id="jvm、jdk、jre之间的关系？"><a class="header-anchor" href="#jvm、jdk、jre之间的关系？"></a>jvm、jdk、jre之间的关系？</h3><ul><li>jdk&gt;jre&gt;jvm&gt;操作系统</li></ul><p><img src="https://s1.ax1x.com/2020/05/02/JjvW4I.png" alt="JjvW4I.png"></p><h3 id="java虚拟机规范与Java语言规范之间的关系？"><a class="header-anchor" href="#java虚拟机规范与Java语言规范之间的关系？"></a>java虚拟机规范与Java语言规范之间的关系？</h3><p>java虚拟机规范是定义执行.class文件的虚拟机的规范；<br>java语言规范是定义java文件的规范</p><h2 id="jvm中的内存划分"><a class="header-anchor" href="#jvm中的内存划分"></a>jvm中的内存划分</h2><p>java比c等系列的语言引以为豪的就是引入来自动内存管理机制，不让使用者在关心内存的管理。</p><ul><li>内存划分</li></ul><p><img src="https://s1.ax1x.com/2020/05/02/Jvwl01.png" alt="Jvwl01.png"></p><ol><li>堆区</li><li>栈区（本地方法栈、java虚拟机栈）</li><li>程序计数器</li><li>本地内存（元空间、直接内存）</li></ol><h2 id="堆区"><a class="header-anchor" href="#堆区"></a>堆区</h2><p>堆是一个由线程之间共享的内存区域。基本类型的对象会中栈上进行分配，而普通类型的对象会栈堆上进行分配。由于栈是线程独立的，因此就不存在并发问题</p><h2 id="栈区"><a class="header-anchor" href="#栈区"></a>栈区</h2><ul><li>虚拟机栈</li></ul><p>Java虚拟机栈是基于<strong>线程</strong>级别的，每个线程都拥有<strong>独立</strong>都虚拟机栈。虚拟机栈的作用是存储<strong>栈帧</strong>，<strong>栈帧</strong>的作用是是保存每个线程当前运行方法的状态或值。</p><p>栈值中分为：</p><ul><li>局部变量表（用于存放方法参数和方法内定义的局部变量）</li><li>操作数栈（存放方法运行期间的操作数或结果）</li><li>动态连接（方法调用过程中的动态连接）</li><li>方法返回地址</li></ul><h2 id="程序计数器"><a class="header-anchor" href="#程序计数器"></a>程序计数器</h2><p>程序计数器是用来标记当前线程正在执行的程序运行到哪了一行。</p><h2 id="元数据空间"><a class="header-anchor" href="#元数据空间"></a>元数据空间</h2><p><strong>元数据空间</strong>是JDK8中划分出来的，用于替代JDK7已经之前的<strong>Perm区(永久代)</strong>。<br><strong>元数据空间</strong>存储<strong>class信息</strong>、<strong>常量池</strong>、<strong>方法数据</strong>、<strong>方法代码</strong>等等</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>jvm中运行的参数是在<strong>栈</strong>上的信息，栈上保存的引用指向的是<strong>堆</strong>中的对象，<strong>类信息</strong>、<strong>常量</strong>等信息则是放在元数据空间中。</p><h1>类的加载机制</h1><h2 id="流程"><a class="header-anchor" href="#流程"></a>流程</h2><blockquote><p>加载 &gt; 验证 &gt; 准备 &gt; 解析 &gt; 初始化</p></blockquote><p><cint>执行时机早于<int>,因为<cint>在装载到元数据区时就进行执行。</p><h2 id="类加载器"><a class="header-anchor" href="#类加载器"></a>类加载器</h2><ul><li>Bootstrap ClassLoader</li></ul><blockquote><p>最底层的类加载器，用于加载java底层类的类加载器</p></blockquote><ul><li>Extention ClassLoader</li></ul><blockquote><p>扩展类的类加载器，用于加载lib/ext下的文件</p></blockquote><ul><li>App ClassLoader</li></ul><blockquote><p>应用加载器，用于加载<strong>classPath</strong>下的文件</p></blockquote><ul><li>Custom ClassLoader</li></ul><blockquote><p>自定义的类加载器</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo常见问题归纳</title>
      <link href="2020/04/24/8.duboo%E7%AC%94%E8%AE%B0/99.dubbo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/"/>
      <url>2020/04/24/8.duboo%E7%AC%94%E8%AE%B0/99.dubbo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<h1>dubbo常见问题归纳</h1><ol><li>dubbo的可选的配置方式？<br>官网上给出了四种方式分别是<strong>xml配置</strong>、<strong>属性配置</strong>、<strong>注解配置</strong>、<strong>API配置</strong></li></ol><blockquote><p>xml配置:通过使用xml配置文件的方式<br>通过加载classPath路径下的dubbo.properties文件<br>使用注解的配置方式<br>api的方式（通过@PropertySource加载指定配置文件）</p></blockquote><ol start="2"><li>配置文件的覆盖关系</li></ol><ul><li>细大于粗</li><li>消大于提</li></ul><blockquote><p>细粒度的配置优先级大于粗粒度的优先级，例如方法级优先级大于接口级，接口级大于全局配置<br>消费者端的配置优先级大于生产者</p></blockquote><ol start="3"><li>dubbo的分层设计<br>大体上分为三个大层：</li><li>Bussiness</li><li>RPC</li><li>Remoting</li></ol><p>3.1 Bussiness</p><ul><li>service 业务层</li></ul><blockquote><p>service接口层，提供给服务提供者和消费者进行实现</p></blockquote><p>3.2 RPC</p><blockquote><p>config配置层,加载dubbo的配置信息<br>proxy代理层，对bussiness层生成代理对象<br>registry注册层，负责服务的注册和发现<br>cluster路由层，对同一个服务多个实例进行路由<br>monitor监控层，可以对rpc接口的调用次数和时间进行监控<br>protocol远程调用层，用于封装RPC调用</p></blockquote><p>3.3 Remoting</p><blockquote><p>exchange信息交换层，封装请求的响应模式，异步转同步<br>transport网络传输层,抽象出网络通信方案<br>seriallze序列化层</p></blockquote><ol start="4"><li>dubbo的调用流程</li></ol><ul><li>Provider</li><li>第0步： 启动service服务</li><li>第1步： 将服务注册到注册中心</li><li>Consumer</li><li>第2步： 向注册中心获取服务列表并保持连接以获取最新的服务列表（还会将服务列表保存在本地）</li><li>invoke</li><li>第3步: Consumer通过服务端负载均衡后向Provider发起远程异步调用</li><li>第4步: provide接受到请求后执行，并且将执行结果返回</li><li>monitor</li><li>第5步: provide/consumer会将调用信息发送给monitor进行统计</li></ul><ol start="5"><li>dubbo调用链？</li></ol>]]></content>
      
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库事务浅析</title>
      <link href="2020/02/29/6.mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%B5%85%E6%9E%90/"/>
      <url>2020/02/29/6.mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>数据库事务理解</h1><p>数据库事务是一种本地的刚性事务，特点是必须支持’ACID’四个特性</p><h2 id="ACID理论"><a class="header-anchor" href="#ACID理论"></a><strong>ACID</strong>理论</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>原子性(Atomicity)</td><td>指的是在事务是最小的不可分割的执行单元，事务内的操作要么都<B>成功</B>，要么都<B>失败</B></td></tr><tr><td>一致性(Consistency)</td><td>指的是在事务执行前后数据上的完整性保存一致，不会因为数据库事务的执行结果(成功/失败)而改变数据在业务模型上的完整性</td></tr><tr><td>隔离性(isolation)</td><td>指的是每个事务都有单独的操作空间，不能在事务期间相互影响</td></tr><tr><td>持久性(Durability)</td><td>指的是事务完成后对数据库的改变是以落盘结束的</td></tr></tbody></table><h2 id="数据库的隔离级别"><a class="header-anchor" href="#数据库的隔离级别"></a>数据库的隔离级别</h2><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>Read Uncommitted(未提交读)</td><td>能够读取到其他事务尚未提交的数据</td></tr><tr><td>Read committed(读取已提交内容)</td><td>只能读取事务已提交的数据，</td></tr><tr><td>Repeatable Read(可重读)</td><td>指的是在同一个事务中任意时间节点读取到的内容一致</td></tr><tr><td>Serializable(串行化)</td><td>指的是事务是以串行化执行</td></tr></tbody></table><h2 id="事务异常"><a class="header-anchor" href="#事务异常"></a>事务异常</h2><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>脏读（Dirty Read）</td><td>指的是读到了未提交的数据</td></tr><tr><td>不可重复读（Not Repeatable Read）</td><td>指的是在一个事务的过程中，前后读取到的数据行不一致</td></tr><tr><td>幻读</td><td>指的是在一个事务中读取到的数据行不一致</td></tr></tbody></table><ul><li>不可重复读指的是对数据的<strong>删除</strong>、<strong>更新</strong>操作</li><li>幻读指的是对数据的<strong>inster</strong>操作</li></ul><h2 id="数据库的隔离级别-v2"><a class="header-anchor" href="#数据库的隔离级别-v2"></a>数据库的隔离级别</h2><ul><li>√为会发生，×为不会发生</li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted（未提交读）</td><td>√</td><td>√</td><td>√</td></tr><tr><td>read committed（提交读）</td><td>x</td><td>√</td><td>√</td></tr><tr><td>repeatable read（可重复读）</td><td>x</td><td>x</td><td>√</td></tr><tr><td>serialization（可串行化）</td><td>x</td><td>x</td><td>x</td></tr></tbody></table><h2 id="mysql实际操作"><a class="header-anchor" href="#mysql实际操作"></a>mysql实际操作</h2><ul><li>初始化语句</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>num<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mysql8之前版本</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>mysql8</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询结果<br><img src="https://s2.ax1x.com/2020/03/01/3c8EEq.png" alt="查询结果"></li></ul><p>mysql的默认事务是<strong>REPEATABLE-READ</strong>-<B>可重复读</B></p><h3 id="脏读"><a class="header-anchor" href="#脏读"></a>脏读</h3><ul><li>设置隔离级别为<strong>读未提交</strong>(read uncommitted)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>A事务</strong></p><ul><li>查询数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>结果</li></ul><p><img src="https://s2.ax1x.com/2020/03/01/3cOI29.png" alt="查询结果"></p><p><strong>B事务</strong></p><ul><li>插入数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token punctuation">;</span><span class="token keyword">INSERT</span> test <span class="token keyword">VALUE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>A事务</strong></p><ul><li>查询数据</li></ul><p><img src="https://s2.ax1x.com/2020/03/01/3gxwH1.png" alt="查询结果"></p><p><strong>此时就读取到了未提交的数据</strong></p><p><strong>B事务</strong></p><ul><li>回滚事务</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>A事务</strong></p><ul><li>查询数据<br><img src="https://s2.ax1x.com/2020/03/01/32Kr5T.png" alt="查询结果"></li></ul><h3 id="不可重复读"><a class="header-anchor" href="#不可重复读"></a>不可重复读</h3><ul><li>结果<br><img src="https://s2.ax1x.com/2020/03/01/32lyPf.png" alt="查询结果"></li></ul><p>线程不能读取到其他线程尚未提交的数据</p><h3 id="可重复读"><a class="header-anchor" href="#可重复读"></a>可重复读</h3><p><img src="https://s2.ax1x.com/2020/03/01/321bkt.png" alt="可重复读查询结果"></p><p>上图展示了在同一个事务中读取不管B事务是否提交，A事务读取的数据都是一样的。</p><ul><li>幻读展示<br><img src="https://s2.ax1x.com/2020/03/01/32tbkj.png" alt="可重复读查询结果"></li></ul><p>可重复读的隔离级别虽然保证了在同一个事务中，前后读取数据一致，当时在插入时，由于是<strong>表级锁</strong>因此数据会等待之前的事务提交完成后再执行，因此出现异常。</p><blockquote><p>参考文档</p></blockquote><ul><li><a href="https://blog.csdn.net/Vincent2014Linux/article/details/89669762">快速理解脏读，不可重复读，幻读</a></li><li><a href="https://blog.csdn.net/qq_22115231/article/details/80767069">数据库的四种事物隔离级别</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git多环境配置</title>
      <link href="2020/02/21/1.%E6%9D%82%E8%AE%B0/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>2020/02/21/1.%E6%9D%82%E8%AE%B0/git%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>疫情期间，需要在家远程办公，因此需要在电脑上配置两套git环境分别是github、gitlab的。在配置过程中遇到了一些阻碍，特此记录下来。</p><h3 id="步骤一：生成SSH-Key"><a class="header-anchor" href="#步骤一：生成SSH-Key"></a>步骤一：生成SSH-Key</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"email@xx.com"</span> -f ~/.ssh/id_rsa <span class="token comment">#(或gitlab_rsa)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中email@xx.com为github或gitlab注册的邮箱<br>id_rsa或gitlab_rsa为生成key文件的名称，默认为id_rsa，使用别名时需要进行步骤三</p><ul><li>分别生成github和gitla的SSH-key</li></ul><h3 id="步骤二：设置Server端公钥"><a class="header-anchor" href="#步骤二：设置Server端公钥"></a>步骤二：设置Server端公钥</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub <span class="token comment">#(或gitlab_rsa)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将获取到的公钥设置到git服务端，也可以用编辑器打开~/.ssh/id_rsa.pub(或gitlab_rsa)将值复制设置到git服务端</p><h3 id="步骤三：添加私钥"><a class="header-anchor" href="#步骤三：添加私钥"></a>步骤三：添加私钥</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-add ~/.ssh/id_rsa <span class="token comment">#(或gitlab_rsa)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分别添加不同环境的私钥</p><h3 id="步骤三：配置多环境的config"><a class="header-anchor" href="#步骤三：配置多环境的config"></a>步骤三：配置多环境的config</h3><p>在.ssh/下创建config文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># github</span>Host github.com    HostName github.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa<span class="token comment"># gitlab</span>Host gitlab.com    HostName gitlab.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/gitlab_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤四：测试"><a class="header-anchor" href="#步骤四：测试"></a>步骤四：测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用命令进行测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hi userName<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的提示表示成功</p><h3 id="异常处理"><a class="header-anchor" href="#异常处理"></a>异常处理</h3><ul><li><a href="mailto:git@github.com">git@github.com</a>: Permission denied (publickey).<br>1.是否修改过github.com的host<br>2.是否添加私钥</li></ul><h3 id="参考"><a class="header-anchor" href="#参考"></a>参考</h3><p><a href="https://my.oschina.net/stefanzhlg/blog/529403">git 配置多个SSH-Key</a><br><a href="https://www.cnblogs.com/lxwphp/p/7884700.html">解决Permission denied (publickey).</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arthas初探--安装初步适用</title>
      <link href="2019/07/29/1.%E6%9D%82%E8%AE%B0/Arthas%E5%88%9D%E6%8E%A2-%E5%AE%89%E8%A3%85%E5%88%9D%E6%AD%A5%E9%80%82%E7%94%A8/"/>
      <url>2019/07/29/1.%E6%9D%82%E8%AE%B0/Arthas%E5%88%9D%E6%8E%A2-%E5%AE%89%E8%A3%85%E5%88%9D%E6%AD%A5%E9%80%82%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>Arthas初探–安装初步适用</h1><p>由于在项目中遇到一种情况，某段代码在进行单元测试和在tomcat容器中运行的性能相差数百倍，因此需要分析在不同环境下某个方法执行的具体时间，从而确定问题。Arthas可以做到无侵入的监控应用远行情况。</p><h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2><p>githup项目地址：<strong><a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></strong><br>文档地址：<strong><a href="https://alibaba.github.io/arthas/">https://alibaba.github.io/arthas/</a></strong></p><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://alibaba.github.io/arthas/arthas-boot.jarjava -jar arthas-boot.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>linux下直接执行，window下载文件后执行</p><p><img src="https://img-blog.csdnimg.cn/20190630153613103.png" alt="在这里插入图片描述"><br>执行完成后，显示当前path中指定的JDK中正在运行的java进程<br>输入相应序号,进入sh命令，表示已连接成功<br><img src="https://img-blog.csdnimg.cn/2019063015385964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAwMjk0Mzc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="初步使用"><a class="header-anchor" href="#初步使用"></a>初步使用</h2><p>Arthas命令初步使用，大概分为5类：</p><h3 id="基础命令"><a class="header-anchor" href="#基础命令"></a>基础命令</h3><ul><li>help——查看命令帮助信息</li><li>cat——打印文件内容，和linux里的cat命令类似</li><li>pwd——返回当前的工作目录，和linux命令类似</li><li>cls——清空当前屏幕区域</li><li>session——查看当前会话的信息</li><li>reset——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</li><li>version——输出当前目标 Java 进程所加载的 Arthas 版本号</li><li>history——打印命令历史</li><li>quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</li><li>shutdown——关闭 Arthas 服务端，所有 Arthas 客户端全部退出</li><li>keymap——Arthas快捷键列表及自定义快捷键</li></ul><h3 id="jvm相关"><a class="header-anchor" href="#jvm相关"></a>jvm相关</h3><ul><li>dashboard——当前系统的实时数据面板</li><li>thread——查看当前 JVM 的线程堆栈信息</li><li>jvm——查看当前 JVM 的信息</li><li>sysprop——查看和修改JVM的系统属性</li><li>sysenv——查看JVM的环境变量</li><li>getstatic——查看类的静态属性</li><li>New! ognl——执行ognl表达式</li><li>New! mbean——查看 Mbean 的信息</li></ul><h3 id="class-classloader相关"><a class="header-anchor" href="#class-classloader相关"></a>class/classloader相关</h3><ul><li>sc——查看JVM已加载的类信息</li><li>sm——查看已加载类的方法信息</li><li>jad——反编译指定已加载类的源码</li><li>mc——内存编绎器，内存编绎.java文件为.class文件</li><li>redefine——加载外部的.class文件，redefine到JVM里</li><li>dump——dump 已加载类的 byte code 到特定目录</li><li>classloader——查看classloader的继承树，urls，类加载信息，使用classloader去getResource</li></ul><h3 id="monitor-watch-trace相关"><a class="header-anchor" href="#monitor-watch-trace相关"></a>monitor/watch/trace相关</h3><p>请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 shutdown 或将增强过的类执行 reset 命令。</p><ul><li>monitor——方法执行监控</li><li>watch——方法执行数据观测</li><li>trace——方法内部调用路径，并输出方法路径上的每个节点上耗时</li><li>stack——输出当前方法被调用的调用路径</li><li>tt——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</li></ul><h3 id="options"><a class="header-anchor" href="#options"></a>options</h3><ul><li>options——查看或设置Arthas全局开关</li></ul><h2 id="使用实列"><a class="header-anchor" href="#使用实列"></a>使用实列</h2><ul><li><p>trace 分析每个方法的具体执行时间<br><img src="https://img-blog.csdnimg.cn/20190630154629460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAwMjk0Mzc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过图示表明调用MongoTemplate.executeFindMultiInternal()方法时，最耗时的方法是在doWith()方法，总共执行10000次，耗时==252.3064ms==,最少一次调用耗时==0.0132ms==，最大一次耗时==38.4329ms==，分析原因还是在于数据量太大，MongoTemplate通过循环遍历出结果在进行序列化。</p></li><li><p>jad 反编译代码工具</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jad com.sankuai.inf.leaf.common.ZeroIDGen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/07/28/aVeudO.png" alt="aVeudO.png"></p><ul><li>watch 查看输入参数与输出参数</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">watch</span> com.sankuai.inf.leaf.server.service.SegmentService getId <span class="token string">'&#123;params, target, returnObj&#125;'</span> -x <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>params</strong>表示入参，<strong>target</strong>表示当前的类，<strong>returnObj</strong>表示返回值</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/28/aVmDAO.png" alt="aVmDAO.png"></p><ul><li>stack 查看被调用的路径(向上)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stack com.sankuai.inf.leaf.server.service.SegmentService getId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/07/28/aVKIUK.png" alt="aVKIUK.png"></p><ul><li>sc 查看JVM已加载的类信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sc -d com.sankuai.inf.leaf.server.service.SegmentService getId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/07/28/aVMArn.png" alt="aVMArn.png"></p><ul><li>thread 分析死锁</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">thread b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/04/29/JHNalT.png" alt="JHNalT.png"></p><p><img src="https://s1.ax1x.com/2020/04/30/JHUuNR.png" alt="JHUuNR.png"></p><p>可以看出当前线程正在等待<strong>ReentrantLock$NonfairSync@118f1fb4</strong>，而持有这个对象的线程又在等待当前线程释放，从而形成死锁!</p><ul><li>thread 分析CPU占用</li></ul><p><img src="https://s1.ax1x.com/2020/04/30/JH0HQx.png" alt="JH0HQx.png"></p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>先放一张官方的总结大图<br><a href="https://imgchr.com/i/JHBSfA"><img src="https://s1.ax1x.com/2020/04/30/JHBSfA.png" alt="JHBSfA.png"></a></p><p>总结：Arthas是一个很优秀的java诊断工具，无论是安装还是使用都很简洁，并且使用文档全面、清晰明了，值得好好研究一番。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> arthas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务理解</title>
      <link href="2019/06/28/1.%E6%9D%82%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%80%9D%E8%80%83/"/>
      <url>2019/06/28/1.%E6%9D%82%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1>分布式事务理解</h1><p>分布式事务是为了解决在微服务架构下，业务数据在跨进程执行时，需要保证业务的事务性。<br>分布式事务框架主要有<strong>Seata</strong>、<strong>atomikos</strong>、<strong>TX-LCN</strong>。其他方式处理我目前已知的有通过mq的方式(待研究);</p><h2 id="基本原理"><a class="header-anchor" href="#基本原理"></a>基本原理</h2><ul><li>CAP定理</li><li>BASE理论</li><li>ACID理论</li></ul><h3 id="CAP理论"><a class="header-anchor" href="#CAP理论"></a>CAP理论</h3><p>CAP理论指的是在一个分布式系统中无法同时满足Consistency(一致性)、Availability(可用性)、Partition tolerance(分区容错性)</p><ul><li>一致性(Consistency)指的是同一时间，任意节点下的数据都是一样的</li><li>可用性(Availability)指的是同一时间，任意节点均可访问</li><li>分区容错性(Partition tolerance)指的是数据没有在一定的时间内完成数据的一致性</li></ul><p>由于现有网络架构，<strong>分区容错性</strong>一定存在。因此实际系统中只能存在AP或CP两种情况。</p><h3 id="BASE理论"><a class="header-anchor" href="#BASE理论"></a>BASE理论</h3><p>BASE理论指的是Basically Available（基本可用）、Soft-state（ 软状态/柔性事务）、Eventual Consistency（最终一致性）。是根据CAP理论演化而来的，适合于对数据一致性要求不那么高的系统。</p><ul><li>Basically Available（基本可用）指的是允许系统在出现故障的适合保证核心业务允许而损失一些可用性</li><li>Soft-state（ 软状态/柔性事务）指的是允许系统存在数据不一致的中间状态</li><li>Eventual Consistency（最终一致性）指的是系统中的所有数据副本经过一定时间后，最终能够达到一致的状态，不需要实时保证系统数据的强一致性。</li></ul><h2 id="柔性事务"><a class="header-anchor" href="#柔性事务"></a>柔性事务</h2><p>柔性事务指的是数据库中的事务满足BASE理论而不是ACID理论的事务。<br>主要有一下四种：</p><ul><li>AT模式</li><li>TCC模式</li><li>Saga模式</li><li>XA模式</li></ul><h3 id="2阶段提交"><a class="header-anchor" href="#2阶段提交"></a>2阶段提交</h3><p>协调者:</p><ol><li>让参与者进行执行事务</li></ol><p>参与者:<br>2. 执行事务,将结果返回协调者</p><p>协调者:<br>3. 根据结果，向参与者发送commit或roback命令</p><ul><li>二阶段提交的问题是</li></ul><ol><li>参与者长时间lock资源</li><li>协调者存在单点问题</li><li>commit可能不成功</li></ol><h3 id="3阶段提交"><a class="header-anchor" href="#3阶段提交"></a>3阶段提交</h3><p>3阶段提交相比于2阶段提交多了以下几个改进</p><ol><li>允许超时取消</li><li>增加预提交阶段</li></ol><h3 id="AT模式"><a class="header-anchor" href="#AT模式"></a>AT模式</h3><p><strong>AT模式</strong>主要分为两个步骤：</p><ol><li>事务发起者执行业务sql、保存<strong>after image</strong>、<strong>before image</strong>、生成行级锁</li><li>根据协调者判断事务是否提交还是回滚</li></ol><h3 id="TCC模式"><a class="header-anchor" href="#TCC模式"></a>TCC模式</h3><p><strong>TCC模式</strong>主要分为两个步骤：</p><ol><li>try 做资源检查</li><li>1 Confirm 提交资源</li><li>2 Cancel 回滚资源</li></ol><p>TCC模式需要将业务代码改造成符合TCC模式的三个方法，对业务有侵入。<br>由于TCC模式不需要行级锁，因此并发性较高。</p><h3 id="Saga模式"><a class="header-anchor" href="#Saga模式"></a>Saga模式</h3><p><strong>Saga模式</strong>指的是通过冲正补偿服务来实现事务的，适用的场景是业务流程长且需要保证事务最终一致性的业务系统。</p><h3 id="XA模式"><a class="header-anchor" href="#XA模式"></a>XA模式</h3><p><strong>XA模式</strong>指的是一阶段预提交，并将提交结果反馈给==协调者==，协调者收到全部参与者的结果后，同一执行提交或回滚。</p><blockquote><p>参考文档</p></blockquote><ul><li><a href="https://www.jianshu.com/p/917cb4bdaa03">由Seata看分布式事务取舍</a></li><li><a href="https://seata.io/zh-cn/">seata官网</a></li><li><a href="https://www.jianshu.com/p/73beee3c70e9">分布式事务解决方案框架(LCN)</a></li><li><a href="https://www.codingapi.com/docs/txlcn-lesson01/">分布式事务从0到1-认识分布式事务</a></li><li><a href="http://thesecretlivesofdata.com/raft/">raft算法</a></li><li><a href="https://www.cnblogs.com/jajian/p/10014145.html">终于有人把“TCC分布式事务”实现原理讲明白了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq的存储原理</title>
      <link href="2019/04/01/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/11.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/"/>
      <url>2019/04/01/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/11.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1>rocketmq的存储原理</h1><p>rocketmq的存储设计主要是分为三个文件：</p><ol><li><strong>comitLog文件</strong>，该文件是用来顺序存放所有的消息</li><li><strong>consumeQueue文件</strong>，该文件是用来保存每一个消费队列的消费信息的</li><li><strong>IndexFile</strong>文件，该文件是用来加速消息的检索性能，根据消息的属性快速从<strong>comitLog</strong>获取信息的</li></ol><h2 id="消息如何实现存储的？"><a class="header-anchor" href="#消息如何实现存储的？"></a>消息如何实现存储的？</h2><p><strong>commitLog</strong>是消息存储的文件，是一个容量为1G的文件。该文件以文件中的第一个文件在<strong>broker</strong>中的偏移量作为文件名称。<br>在mq内部用<strong>MappedFileQueue</strong>来表示<strong>store/commitLog</strong>这个文件夹;用<strong>MappedFile</strong>来表示单个<strong>commitLong</strong>文件。</p><ul><li><p>commitLog内部数据-有数据时<br><img src="https://s1.ax1x.com/2020/04/02/GtBXlQ.png" alt="GtBXlQ.png"></p></li><li><p>commitLog内部数据-无数据时为空字符<br><img src="https://s1.ax1x.com/2020/04/02/GtBcFK.png" alt="GtBcFK.png"></p></li></ul><h2 id="写入commitLog文件"><a class="header-anchor" href="#写入commitLog文件"></a>写入<strong>commitLog</strong>文件</h2><p>写入<strong>commitLog</strong>文件的过程分为以下几个步骤：</p><ol><li>对消息进行处理(消息预处理、延时消息处理)<br>包括消息的预处理(set一些属性值)、处理延时消息(隐藏真实topic放入延时队列的topic中)</li><li>获取到当前正在激活的文件<br>这一步指的是，获取到当前正在使用的文件并转化成为<strong>MappedFile</strong>文件</li><li>获取到文件锁<br>获取到文件锁，保证文件在写入时是独占的</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">PutMessageLock</span> putMessageLock<span class="token punctuation">;</span>putMessageLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>将消息追加到文件<strong>MappedFile</strong>中</li><li>执行刷盘操作</li><li>执行同步操作</li></ol><ul><li>时序图</li></ul><p><img src="https://s1.ax1x.com/2020/04/03/GtRo0e.jpg" alt="GtRo0e.jpg"></p><h3 id="appendMessage-追加文件的方法"><a class="header-anchor" href="#appendMessage-追加文件的方法"></a>appendMessage() - 追加文件的方法</h3><p>mq追击<strong>commitLog</strong>是用**MappedFile.appendMessagesInner()**方法来实现的，主要有以下几个部分组成</p><ol><li>获取到当前写入的偏移量</li><li>创建内存共享区(<strong>slice()</strong>)</li><li>bulidMessage(构建msg对象)</li><li>特殊处理事务性消息</li><li>序列化消息</li><li>获取当前消息的偏移量</li><li>将数据写入<strong>ByteBuffer</strong>中，完成写入操作</li></ol><h3 id="刷盘操作-handleDiskFlush"><a class="header-anchor" href="#刷盘操作-handleDiskFlush"></a>刷盘操作() - <strong>handleDiskFlush</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDiskFlush</span><span class="token punctuation">(</span><span class="token class-name">AppendMessageResult</span> result<span class="token punctuation">,</span> <span class="token class-name">PutMessageResult</span> putMessageResult<span class="token punctuation">,</span> <span class="token class-name">MessageExt</span> messageExt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 同步刷新</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FlushDiskType</span><span class="token punctuation">.</span>SYNC_FLUSH <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushDiskType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">GroupCommitService</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GroupCommitService</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService<span class="token punctuation">;</span>            <span class="token comment">//等待刷新失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">isWaitStoreMsgOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//省略代码</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//执行刷新方法</span>                service<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 异步刷新</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//执行事务消息的刷新</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransientStorePoolEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flushCommitLogService<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//执行异步消息的刷新</span>                commitLogService<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时序图<br><img src="https://s1.ax1x.com/2020/04/04/G061xI.png" alt="G061xI.png"></li></ul><p>从图中可以看出</p><ol><li>同步刷盘的策略<br>在<strong>1.1 putRequest</strong>方法中调用刷盘方法，然后等待<strong>1.2 future</strong>方法返回结果</li></ol><ul><li>putRequest</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">putRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">GroupCommitRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestsWrite<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestsWrite<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasNotified<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        waitPoint<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// notify</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>putRequest</strong>将<strong>GroupCommitRequest</strong>add进*<strong>GroupCommitService.list</strong>的集合中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//采用读list和写list分离的策略</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GroupCommitRequest</span> req <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 下一个文件中也可能有一条消息，因此要多刷新两次</span>                <span class="token keyword">boolean</span> flushOK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>flushOK<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flushOK <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getFlushedWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> req<span class="token punctuation">.</span><span class="token function">getNextOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flushOK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                req<span class="token punctuation">.</span><span class="token function">wakeupCustomer</span><span class="token punctuation">(</span>flushOK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//flush</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> flushLeastPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name">MappedFile</span> mappedFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findMappedFileByOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flushedWhere<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flushedWhere <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> tmpTimeStamp <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> offset <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span>flushLeastPages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> where <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">;</span>        result <span class="token operator">=</span> where <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flushedWhere<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flushedWhere <span class="token operator">=</span> where<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> flushLeastPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>storeTimestamp <span class="token operator">=</span> tmpTimeStamp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//mappedByteBuffer.force</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> flushLeastPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isAbleToFlush</span><span class="token punctuation">(</span>flushLeastPages<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">getReadPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//We only append data to fileChannel or mappedByteBuffer, never both.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>writeBuffer <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error occurred when force data to disk."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>flushedPosition<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"in flush, hold failed, flush offset = "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flushedPosition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>flushedPosition<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">getReadPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFlushedPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到同步刷盘的步骤是</p><p>i. <strong>GroupCommitService.doCommit()</strong><br>ii. <strong>mappedFile.flush()</strong><br>iii. <strong>mappedByteBuffer.force()</strong></p><blockquote><p>同步刷盘的简单描述就是，消息生产者在消息服务端将消息内容追加到内存映射文件中（内存）后，需要同步将内存的内容立刻刷写到磁盘。通过调用内存映射文件（MappedByteBuffer的force方法）可将内存中的数据写入磁盘。</p></blockquote><ol start="2"><li>异步有缓冲区刷盘的策略是执行<strong>1.4 flushCommitLogService.wakeup</strong>没有临时缓冲区</li><li>异步无缓冲区刷盘的策略是执行<strong>1.5 commitLogService.wakeup</strong>有临时缓冲区</li></ol><p>分析一下异步刷盘的方法有两种：<br>一种是启用<strong>transientStorePoolEnable</strong>这种会先将数据写到堆外内存上，在由堆外内存写到<strong>PageCache</strong>，然后在有<strong>PageCache</strong>刷盘到磁盘上。</p><p>一种是消息直接追加到与物理文件直接映射的内存中，然后刷写到磁盘中</p><h3 id="刷盘的总结"><a class="header-anchor" href="#刷盘的总结"></a>刷盘的总结</h3><ol><li><p>同步刷盘依次是<strong>GroupCommitService.doCommit</strong> -&gt; <strong>mappedFile.flush()</strong> -&gt;<strong>mappedByteBuffer.force()</strong></p></li><li><p>异步刷盘又分为<br>2.1 有缓冲区：消息先进入文件缓冲区，在文件缓冲区等待2s后在进入内存映射区 -&gt;最后内存映射刷入磁盘<br>2.2 无缓冲区：消息直接进入内存映射区 -&gt; 最后刷入磁盘文件中</p></li></ol><h2 id="rocketmq的内存映射"><a class="header-anchor" href="#rocketmq的内存映射"></a>rocketmq的内存映射</h2><p><strong>MappedFile</strong>文件是rockedmq内存映射文件的具体表现，先看一下如何查找</p><h3 id="查找MappedFile的方法"><a class="header-anchor" href="#查找MappedFile的方法"></a>查找<strong>MappedFile</strong>的方法</h3><ul><li>通过时间戳来进行查找</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MappedFile</span> <span class="token function">getMappedFileByTime</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取到全部MappedFile文件</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mfs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">copyMappedFiles</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mfs<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mfs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">MappedFile</span> mappedFile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedFile</span><span class="token punctuation">)</span> mfs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//根据传入的时间戳，查询第一个更新时间大于传入时间戳的文件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedFile<span class="token punctuation">.</span><span class="token function">getLastModifiedTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mappedFile<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">MappedFile</span><span class="token punctuation">)</span> mfs<span class="token punctuation">[</span>mfs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据偏移量来查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>offset <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>firstMappedFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MappedFile</span> targetFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        targetFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFiles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断根据offset计算出来的index是否有对应的文件</span>    <span class="token comment">//因为MappedFile文件可能被修改，因此要再次检查一遍文件的offset是否符合</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetFile <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> offset <span class="token operator">>=</span> targetFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> offset <span class="token operator">&lt;</span> targetFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> targetFile<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果不符合就需要遍历循环一次</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MappedFile</span> tmpMappedFile <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFiles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">>=</span> tmpMappedFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> offset <span class="token operator">&lt;</span> tmpMappedFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> tmpMappedFile<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MappFile文件的作用"><a class="header-anchor" href="#MappFile文件的作用"></a>MappFile文件的作用</h3><p>提交数据的方法主要有<strong>commit</strong>、<strong>commit0</strong>，commit()主要是调用<strong>commit0（）</strong></p><ul><li><strong>commit0</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">commit0</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> commitLeastPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> writePos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wrotePosition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lastCommittedPosition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>committedPosition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>writePos <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>committedPosition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> writeBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            byteBuffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>lastCommittedPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>            byteBuffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>writePos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关键代码</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>lastCommittedPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>committedPosition<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>writePos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error occurred when commit data to FileChannel."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>commit0</strong></p><ol><li>首先创建writeBuffer的共享缓存区，然后将新创建的position回退到上一次提交的位置（committedPosition），设置limit为wrotePosition（当前最大有效数据指针）</li><li>把commitedPosition到wrotePosition的数据复制（写入）到File Channel中，然后更新committedPosition指针为wrotePosition。</li></ol><p>commit的作用就是将Mapped File#-writeBuffer中的数据提交到文件通道FileChannel中。</p><blockquote><p>ByteBuffer使用技巧：slice（）方法创建一个共享缓存区，与原先的ByteBuffer共享内存但维护一套独立的指针（position、mark、limit）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq顺序消息的分析</title>
      <link href="2019/03/31/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/10.rocketmq%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF%E7%9A%84%E5%88%86%E6%9E%90/"/>
      <url>2019/03/31/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/10.rocketmq%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF%E7%9A%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>rocketmq顺序消息的分析</h1><p>顺序消息是指的是一组需要有序的消息集合，在同一参照系下才有意义。rocketmq的顺序消息主要是分为两个方面：</p><ol><li>product保证将一组有序的消息发送到同一个messageQueue下</li><li>consumer消费时保证同一时刻一个消费组下只有一个线程在消费消息</li></ol><ul><li>范围</li></ul><ol><li>分区顺序：单个messagequeue中的消息是有序的</li><li>全局顺序：单个Topic中的消息都是有序的</li></ol><h2 id="原理"><a class="header-anchor" href="#原理"></a>原理</h2><h3 id="发送时是如何保证顺序的？"><a class="header-anchor" href="#发送时是如何保证顺序的？"></a>发送时是如何保证顺序的？</h3><p>发送时是通过<strong>MessageQueueSelector</strong>在生产者一端保证顺序的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">></span></span> mqs<span class="token punctuation">,</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>finalI<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MessageQueueSelector.select</strong>的执行时间是在<strong>DefaultMQProducerImpl.send</strong>时，会调用传入的MessageQueueSelector并执行select方法获取到messageQueue队列进行传值</p><p>ps.普通消息调用时候不会手动选择messageQueue，而是通过**selectOneMessageQueue()**方法进行选择的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> index <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">%</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> lastBrokerName <span class="token operator">||</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> mq<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心代码就是简单的轮询</p><h2 id="消息存储时是如何保证顺序的？"><a class="header-anchor" href="#消息存储时是如何保证顺序的？"></a>消息存储时是如何保证顺序的？</h2><p>Broker将消息按照发送顺序写入Commitlog中，从而保证了消息的写入有序</p><h2 id="消费端有序是如何保证的？"><a class="header-anchor" href="#消费端有序是如何保证的？"></a>消费端有序是如何保证的？</h2><p>首先消费端有序必须使用<strong>MessageListenerOrderly</strong>来监听消息的拉取事件。</p><p>通过三把锁来保证消息消费的有序：</p><ol><li><strong>messageQueueLock</strong>用来保证同一个时刻只有一个线程能访问messageQueue</li></ol><p><img src="https://s1.ax1x.com/2020/04/01/GlwV41.png" alt="GlwV41.png"></p><ol start="2"><li><p><strong>Broker</strong>设置锁，用于在同一个消费组同一个时刻只能有一个消费者能进行访问</p></li><li><p><strong>processQueue.lock</strong> 必须设置锁了才能进行消费，用于将1，2步骤的结构进行check生成最终的结果</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq的通信协议分析</title>
      <link href="2019/03/29/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/9.rocketmq%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
      <url>2019/03/29/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/9.rocketmq%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>rocketmq的通信协议分析</h1><p>rocketmq底层的通信是放在<strong>org.apache.rocketmq.remoting</strong>包下的，主要有<strong>RPCHook</strong>、<strong>RemotingServer</strong>、<strong>RemotingClient</strong>、<strong>RemotingUtil</strong>、<strong>RemotingHelper</strong>等接口和类组成</p><h2 id="RemotingCommand协议"><a class="header-anchor" href="#RemotingCommand协议"></a>RemotingCommand协议</h2><p><strong>RemotingCommand</strong>是rocketmq定义的远程通信协议</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//请求头statrt</span><span class="token comment">//请求类型</span><span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span><span class="token comment">//语言模式是java</span><span class="token keyword">private</span> <span class="token class-name">LanguageCode</span> language <span class="token operator">=</span> <span class="token class-name">LanguageCode</span><span class="token punctuation">.</span>JAVA<span class="token punctuation">;</span><span class="token comment">//版本号</span><span class="token keyword">private</span> <span class="token keyword">int</span> version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//请求id</span><span class="token keyword">private</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> requestId<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> remark<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> extFields<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">CommandCustomHeader</span> customHeader<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SerializeType</span> serializeTypeCurrentRPC <span class="token operator">=</span> serializeTypeConfigInThisServer<span class="token punctuation">;</span><span class="token comment">//消息体</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>协议在请求头中定义了请求请求类型、语言、版本号、请求id等信息；将消息体定义在**byte[]**数组中。</p><h3 id="decode解码方法"><a class="header-anchor" href="#decode解码方法"></a>decode解码方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//该方法会将网络中加载的字节数组封装成为通用的RemotingCommand类型</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RemotingCommand</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> byteBuffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//总长度</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//请求头长度</span>        <span class="token keyword">int</span> oriHeaderLen <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> headerLength <span class="token operator">=</span> <span class="token function">getHeaderLength</span><span class="token punctuation">(</span>oriHeaderLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> headerData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>headerLength<span class="token punctuation">]</span><span class="token punctuation">;</span>        byteBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>headerData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RemotingCommand</span> cmd <span class="token operator">=</span> <span class="token function">headerDecode</span><span class="token punctuation">(</span>headerData<span class="token punctuation">,</span> <span class="token function">getProtocolType</span><span class="token punctuation">(</span>oriHeaderLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消息体的长度等于总长度减去4(标记报文长度的数字) - 请求头长度</span>        <span class="token keyword">int</span> bodyLength <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">-</span> headerLength<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bodyData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bodyLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bodyData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>bodyLength<span class="token punctuation">]</span><span class="token punctuation">;</span>            byteBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cmd<span class="token punctuation">.</span>body <span class="token operator">=</span> bodyData<span class="token punctuation">;</span>        <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NettyRemotingAbstract"><a class="header-anchor" href="#NettyRemotingAbstract"></a>NettyRemotingAbstract</h2><h3 id="invokeSyncImpl-发送请求"><a class="header-anchor" href="#invokeSyncImpl-发送请求"></a>invokeSyncImpl 发送请求</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">invokeSyncImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span>       <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span>       <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingSendRequestException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTimeoutException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//获得本次请求号</span>       <span class="token keyword">final</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">final</span> <span class="token class-name">ResponseFuture</span> responseFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseFuture</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> opaque<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//通过请求号标记当前请求正在执行中</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>responseTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>opaque<span class="token punctuation">,</span> responseFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> addr <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//将数据写入achnnel并执行刷新</span>           channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> f<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">//对操作结果的处理</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       responseFuture<span class="token punctuation">.</span><span class="token function">setSendRequestOK</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">return</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                       responseFuture<span class="token punctuation">.</span><span class="token function">setSendRequestOK</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   <span class="token comment">//移除请求</span>                   responseTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>                   responseFuture<span class="token punctuation">.</span><span class="token function">setCause</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   responseFuture<span class="token punctuation">.</span><span class="token function">putResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"send a request command to channel &lt;"</span> <span class="token operator">+</span> addr <span class="token operator">+</span> <span class="token string">"> failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//同步等待返回结果</span>           <span class="token class-name">RemotingCommand</span> responseCommand <span class="token operator">=</span> responseFuture<span class="token punctuation">.</span><span class="token function">waitResponse</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> responseCommand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//请求失败处理....</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> responseCommand<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>responseTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>invokeSyncImpl</strong>是<strong>NettyRemotingAbstract</strong>提供的同步请求的方法，从上面的代码可以看出。在发送请求后会等待<strong>timeoutMillis</strong>，默认是3s。</p><h2 id="NettyRemotingServer"><a class="header-anchor" href="#NettyRemotingServer"></a>NettyRemotingServer</h2><h3 id="start-方法"><a class="header-anchor" href="#start-方法"></a>start()方法</h3><p>**NettyRemotingServer.start()**方法是创建一个netty服务端</p><ul><li>调用方</li></ul><p><img src="https://s1.ax1x.com/2020/03/29/GVXWJU.png" alt="GVXWJU.png"></p><ul><li>执行过程</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化事件执行器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultEventExecutorGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventExecutorGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化各种handler</span>        <span class="token function">prepareSharableHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerBootstrap</span> childHandler <span class="token operator">=</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupBoss<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupSelector<span class="token punctuation">)</span>                <span class="token comment">//判断是否使用Epoll(linux环境使用Epoll)</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token function">useEpoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">EpollServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> <span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_KEEPALIVE<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_SNDBUF<span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketSndBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_RCVBUF<span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketRcvBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>defaultEventExecutorGroup<span class="token punctuation">,</span> HANDSHAKE_HANDLER_NAME<span class="token punctuation">,</span> handshakeHandler<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>defaultEventExecutorGroup<span class="token punctuation">,</span>                                encoder<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">NettyDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token comment">//设置心跳检查</span>                                <span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerChannelMaxIdleTimeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                connectionManageHandler<span class="token punctuation">,</span>                                serverHandler                            <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">isServerPooledByteBufAllocatorEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            childHandler<span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>ALLOCATOR<span class="token punctuation">,</span> <span class="token class-name">PooledByteBufAllocator</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ChannelFuture</span> sync <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">InetSocketAddress</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">)</span> sync<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"this.serverBootstrap.bind().sync() InterruptedException"</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>channelEventListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>nettyEventExecutor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//每隔1s扫描一次异步调用是否超时</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scanResponseTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"时间[%s]-线程[%s]执行NameServer扫描连接表"</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"scanResponseTable exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务主要是用Netty来做的，这一块还需要学习完成Netty后重写理解一下。<br>目前看懂的就是linux环境下使用的是Epoll,其他环境使用的是NioServerSocketChannel</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境排查问题的思路</title>
      <link href="2019/03/29/21.linux/Linux%E7%8E%AF%E5%A2%83%E6%8E%92%E6%9F%A5%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
      <url>2019/03/29/21.linux/Linux%E7%8E%AF%E5%A2%83%E6%8E%92%E6%9F%A5%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1>Linux环境排查问题的工具和思路</h1><p>将工作中使用到的在Linux下进行排查问题的工具和思路进行一个总结，主要从<strong>CPU</strong>、<strong>内存</strong>、<strong>I/O</strong>、<strong>网络</strong>、<strong>JVM</strong>这五个方面来进行。</p><h2 id="CPU部分"><a class="header-anchor" href="#CPU部分"></a><strong>CPU</strong>部分</h2><h3 id="CPU的性能指标"><a class="header-anchor" href="#CPU的性能指标"></a>CPU的性能指标</h3><ul><li>图示<br><a href="https://imgchr.com/i/JoptbV"><img src="https://s1.ax1x.com/2020/04/29/JoptbV.png" alt="JoptbV.png"></a></li></ul><h3 id="CPU的性能分析工具"><a class="header-anchor" href="#CPU的性能分析工具"></a>CPU的性能分析工具</h3><table><thead><tr><th>性能指标</th><th>性能工具</th><th>描述</th></tr></thead><tbody><tr><td>系统CPU使用率</td><td>top、vmstat、mpstat、sar、/proc/stat</td><td>top、vmstat、mpstat作为实时的监控数据;sar可记录历史;/proc/stat</td></tr><tr><td>进程CPU使用率</td><td>top、ps、pidstat、htop、atop</td><td>top和ps可以按照cpu使用率进行查看;pidstat展示实际运行的进程;htop和atop可以以不同颜色进行展示</td></tr><tr><td>平均负载</td><td>uptime、top、/proc/loadavg</td><td>uptime简洁、top全面、/proc/loadavg提供监控数据</td></tr><tr><td>系统上下文切换</td><td>vmstat</td><td>提供系统级的上下文切换次数</td></tr><tr><td>进程上下文切换</td><td>pidstat</td><td>提供进程级的上下文切换次数</td></tr><tr><td>软中断</td><td>top、/proc/softirqs、mpstat</td><td></td></tr><tr><td>硬中断</td><td>vmstat、/proc/interrupts</td><td>vmstat提供总的中断次数、/proc/interrupts提供在每个cpu上的中断次数</td></tr><tr><td>网络</td><td>dstat、sar、tcpdump</td><td>dstat和sar提供总的网络接收情况和发送情况、tcpdump是提供动态抓取正在进行的网络通信</td></tr><tr><td>I/O</td><td>dstat、sar</td><td>都是提供整体的I/O情况</td></tr></tbody></table><h3 id="CPU的分析步骤"><a class="header-anchor" href="#CPU的分析步骤"></a>CPU的分析步骤</h3><blockquote><p><strong>top</strong> -&gt; <strong>vmstat</strong> -&gt; <strong>pidstat</strong> -&gt;进程分析工具</p></blockquote><p>总的思路就是根据<strong>top</strong>获取到系统当前的一个状态，根据当前的状态在进行对应的分析</p><h2 id="内存"><a class="header-anchor" href="#内存"></a>内存</h2><h3 id="内存分析工具"><a class="header-anchor" href="#内存分析工具"></a>内存分析工具</h3><table><thead><tr><th>性能指标</th><th>性能工具</th><th>描述</th></tr></thead><tbody><tr><td>系统已用、可用、剩余内存</td><td>free、vmstat、/proc/meminfo</td><td>获取内存信息</td></tr><tr><td>进程虚拟内存、常驻内存、共享内存</td><td>ps、top</td><td></td></tr><tr><td>进程内存分布</td><td>pmap</td><td></td></tr></tbody></table><h3 id="内存分析流程"><a class="header-anchor" href="#内存分析流程"></a>内存分析流程</h3><blockquote><p><strong>free</strong> -&gt; <strong>vmstat和sar</strong> -&gt; 确定内存问题</p></blockquote><h3 id="实例"><a class="header-anchor" href="#实例"></a>实例</h3><ul><li>htop<br><a href="https://imgchr.com/i/Jo9FaT"><img src="https://s1.ax1x.com/2020/04/29/Jo9FaT.png" alt="Jo9FaT.png"></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> arthas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ主从同步机制分析</title>
      <link href="2019/03/28/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/8.RocketMQ%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
      <url>2019/03/28/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/8.RocketMQ%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>RocketMQ主从同步机制分析</h1><p><strong>Broker</strong>分为<strong>Slave</strong>、<strong>Master</strong>两种角色，因此Slave会从master中同步<strong>信息</strong>、<strong>topicConfig</strong>、<strong>ConsumerOffer</strong>、<strong>DelayOffset</strong>、<strong>SubscriptionGroupConfig</strong>等信息</p><h2 id="启动同步"><a class="header-anchor" href="#启动同步"></a>启动同步</h2><ul><li>handleSlaveSynchronize</li></ul><p><img src="https://s1.ax1x.com/2020/03/28/GAqiCj.png" alt="GAqiCj.png"></p><p><strong>handleSlaveSynchronize</strong>是处理Slave Broker同步Marster的方法，分别在三个地方有调用：</p><ol><li>BrokerController.start()中调用</li><li>该节点变成Marster节点时会调用</li><li>该节点变成Slaver节点时会调用</li></ol><h2 id="主要方法"><a class="header-anchor" href="#主要方法"></a>主要方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncTopicConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncConsumerOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncDelayOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncSubscriptionGroupConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="syncTopicConfig"><a class="header-anchor" href="#syncTopicConfig"></a>syncTopicConfig</h2><p><strong>syncTopicConfig</strong>主要是同步<strong>topicConfig</strong>信息，主要步骤如下：<br><img src="https://s1.ax1x.com/2020/03/28/GEV9de.png" alt="GEV9de.png"></p><h2 id="syncConsumerOffset"><a class="header-anchor" href="#syncConsumerOffset"></a>syncConsumerOffset</h2><p><strong>syncConsumerOffset</strong>为同步offset数据不进行判断直接覆盖，这样做是因为offset在主从结点进行切换时允许丢失部分offset信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">syncConsumerOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> masterAddrBak <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>masterAddr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>masterAddrBak <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>masterAddrBak<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ConsumerOffsetSerializeWrapper</span> offsetWrapper <span class="token operator">=</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerOuterAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllConsumerOffset</span><span class="token punctuation">(</span>masterAddrBak<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//直接进行替换</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getConsumerOffsetManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOffsetTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>offsetWrapper<span class="token punctuation">.</span><span class="token function">getOffsetTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getConsumerOffsetManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Update slave consumer offset from master, &#123;&#125;"</span><span class="token punctuation">,</span> masterAddrBak<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"SyncConsumerOffset Exception, &#123;&#125;"</span><span class="token punctuation">,</span> masterAddrBak<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="syncDelayOffset"><a class="header-anchor" href="#syncDelayOffset"></a>syncDelayOffset</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">syncDelayOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> masterAddrBak <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>masterAddr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>masterAddrBak <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>masterAddrBak<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">String</span> delayOffset <span class="token operator">=</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerOuterAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllDelayOffset</span><span class="token punctuation">(</span>masterAddrBak<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>delayOffset <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">String</span> fileName <span class="token operator">=</span>                      <span class="token class-name">StorePathConfigHelper</span><span class="token punctuation">.</span><span class="token function">getDelayOffsetStorePath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController                          <span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStorePathRootDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                      <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">string2File</span><span class="token punctuation">(</span>delayOffset<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Persist file Exception, &#123;&#125;"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心代码就是从Broker中获取到死信队列的offset,然后将此offset记录下来</p><h2 id="syncSubscriptionGroupConfig"><a class="header-anchor" href="#syncSubscriptionGroupConfig"></a>syncSubscriptionGroupConfig</h2><p>这个同步类似于Topic的同步机制，需要用版本号严格控制</p><h2 id="同步消息体"><a class="header-anchor" href="#同步消息体"></a>同步消息体</h2><p>同步消息是M/S架构中最重要的功能，主要执行代码放在<strong>rocketmq-store</strong>中</p><ul><li>模块引用<br><img src="https://s1.ax1x.com/2020/03/29/GEnEtg.png" alt="GEnEtg.png"></li></ul><h3 id="Broker启动"><a class="header-anchor" href="#Broker启动"></a>Broker启动</h3><p>在Broker启动时会先判断当前Broker是什么类型的节点，如果是Slave类型的节点会设置<strong>masterAddr</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateMasterHAServerAddrPeriodically <span class="token operator">&amp;&amp;</span> registerBrokerResult<span class="token punctuation">.</span><span class="token function">getHaServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">updateHaMasterAddress</span><span class="token punctuation">(</span>registerBrokerResult<span class="token punctuation">.</span><span class="token function">getHaServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token keyword">this</span><span class="token punctuation">.</span>haService<span class="token punctuation">.</span><span class="token function">updateMasterAddress</span><span class="token punctuation">(</span>newAddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Slave连接Master"><a class="header-anchor" href="#Slave连接Master"></a>Slave连接Master</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">connectMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClosedChannelException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> socketChannel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> addr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>masterAddress<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//根据Master地址注册一个TCP连接</span>            <span class="token class-name">SocketAddress</span> socketAddress <span class="token operator">=</span> <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">string2SocketAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>socketAddress <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//开启channel</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel <span class="token operator">=</span> <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>socketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//添加selector</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentReportedOffset <span class="token operator">=</span> <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMaxPhyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastWriteTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Master响应Slave"><a class="header-anchor" href="#Master响应Slave"></a>Master响应Slave</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beginAccept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>serverSocketChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReuseAddress</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socketAddressListen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Master注册完成一个Tcp通道，连接成功后双方通过不断对比offset来进行同步</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq常见问题</title>
      <link href="2019/03/27/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/99.rocketmq%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>2019/03/27/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/99.rocketmq%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1>rocketmq常见问题</h1><h2 id="RocketMQ由哪些角色组成？"><a class="header-anchor" href="#RocketMQ由哪些角色组成？"></a>RocketMQ由哪些角色组成？</h2><p>由<strong>NameSrv</strong>、<strong>Broker</strong>、<strong>Consumer</strong>、<strong>Producer</strong>组成</p><h2 id="RocketMQ的整体流程？"><a class="header-anchor" href="#RocketMQ的整体流程？"></a>RocketMQ的整体流程？</h2><ol><li><strong>NameSrv</strong>首先启动</li><li><strong>Broker</strong>启动后向NameSrv进行注册，并对外提供服务</li><li><strong>producer</strong>向<strong>NameSrv</strong>查询向<strong>Topic</strong>提供写服务的<strong>Broker</strong>进行写入</li><li><strong>consumer</strong>向<strong>NameSrv</strong>查询向<strong>Topic</strong>提供写服务的<strong>Broker</strong>进行消费</li></ol><blockquote><p>与<strong>NameSrv</strong>都是保持长连接的形式,<strong>Broker</strong>是定时发送心跳包(ip:端口、Topic信息)</p></blockquote><h2 id="Namesrv的了解？"><a class="header-anchor" href="#Namesrv的了解？"></a>Namesrv的了解？</h2><p>RocketMQ的<strong>NameSrv</strong>是提供给其他参与者的分布式协调服务，由于每台NameSrv都保存的是全量信息，因此支持横向扩展</p><h2 id="如何配置NameSrv地址到生产者和消费者？"><a class="header-anchor" href="#如何配置NameSrv地址到生产者和消费者？"></a>如何配置NameSrv地址到生产者和消费者？</h2><ol><li>setNamesrvAddr()</li><li>java启动参数</li><li><strong>NAMESRV_ADDR</strong></li><li>HTTP站点解析</li></ol><h2 id="说说对Broker的理解"><a class="header-anchor" href="#说说对Broker的理解"></a>说说对<strong>Broker</strong>的理解</h2><p><strong>Broker</strong>将网络和存储等核心功能封装起来，对外提供了存/取消息的功能。<br>内部通过大量使用线程池，将消息的处理设计成为异步形式的，提高了性能。</p><ol><li>通过消息顺序写，建立索引随机读的方式</li><li>根据MessageQueue进行负载</li><li>支持主从部署</li><li>高可靠是用同步刷盘机制来保证的</li></ol><h2 id="Broker如何实现存储的？"><a class="header-anchor" href="#Broker如何实现存储的？"></a><strong>Broker</strong>如何实现存储的？</h2><p>逻辑上划分业务数据、系统数据<br>业务数据分别为<strong>CommitLog</strong>、<strong>index</strong>、<strong>ConsumerQueue</strong>、<strong>config</strong>(topic信息、filter等信息)<br>系统数据分别为abort、lock</p><p>收到请求后将请求封装成为正确的消息格式，然后找到commitlog文件，写入文件后更新index文件</p><h2 id="producer的理解"><a class="header-anchor" href="#producer的理解"></a><strong>producer</strong>的理解</h2><ol><li>通过NameSrv获取到<strong>Broker-Topic</strong>数据</li><li>生产者端可以进行负载</li><li>有三种发送方式（同步，异步，单向）</li></ol><h2 id="comsumer的理解"><a class="header-anchor" href="#comsumer的理解"></a><strong>comsumer</strong>的理解</h2><ol><li>两种消费模式：集群和广播</li><li>获取消息的模式：推送和拉取</li></ol><h2 id="如何实现消息的重发？"><a class="header-anchor" href="#如何实现消息的重发？"></a>如何实现消息的重发？</h2><p>consumer端重置offset</p><h2 id="顺序消息是什么？"><a class="header-anchor" href="#顺序消息是什么？"></a>顺序消息是什么？</h2><p>顺序消息分为<strong>普通顺序消息</strong>和<strong>全局顺序消息</strong>，全局顺序消息是普通顺序消息下只有一个messageQueue的特例。<br>1.生产者端将消息有序的发送到MessageQueue<br>2.消费端保证一个消费组组内只有一个线程在进行消费(ConsumerOrderLister)</p><h2 id="顺序消息在扩容时如何保证不停写的情况下扩容？"><a class="header-anchor" href="#顺序消息在扩容时如何保证不停写的情况下扩容？"></a>顺序消息在扩容时如何保证不停写的情况下扩容？</h2><ol><li>保证key指定到原messageQueue</li><li>消费完旧队列在消费新队列</li></ol><h2 id="什么是定时消息？"><a class="header-anchor" href="#什么是定时消息？"></a>什么是定时消息？</h2><p>RocketMQ中提供了18个级别的定时消息，从<strong>1s</strong> -&gt; <strong>2h</strong><br>原理是：延时消息在发送到broker后会被存储到特定的延迟队列中,broker根据不同的延时级别创建不同的定时任务来根据延迟消费进度来从对应的延迟队列中拉去消息。然后根据延迟队列中的信息还原到真实的topic中。</p><h2 id="什么是重试消息？"><a class="header-anchor" href="#什么是重试消息？"></a>什么是重试消息？</h2><p>重试消息指的是消息在消费失败后提供的一种重试机制，消费失败的消息会被发回Broker的延迟队列中<br>主要流程：</p><ol><li>consumerGroup消费失败后发送到broker</li><li>broker收到消息后将消息放到延迟消息队列中，到期后向consumer发送拉取请求</li><li>consumer重新消费消息，并将topice替换为原始的topic</li></ol><h2 id="多次消费失败后这么处理"><a class="header-anchor" href="#多次消费失败后这么处理"></a>多次消费失败后这么处理?</h2><p>rocketmq多次消费失败后进入死信队列，应用可以订阅死信队列进行告警。</p><h2 id="RocketMQ的事务消息？"><a class="header-anchor" href="#RocketMQ的事务消息？"></a>RocketMQ的事务消息？</h2><p>RocketMQ的事务消息是保证一方的本地事务和消息发送状态的状态是一个原子类型的操作，通过是基于base理论的，因此适用于长事务的场景</p><h2 id="RocketMQ如何实现高可用？"><a class="header-anchor" href="#RocketMQ如何实现高可用？"></a>RocketMQ如何实现高可用？</h2><ol><li>NameSrv无状态的多节点部署</li><li>broker可以用master-salve部署（2m-2s-async）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQClientInstance类分析</title>
      <link href="2019/03/27/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/7.MQClientInstance%E7%B1%BBf%E5%88%86%E6%9E%90/"/>
      <url>2019/03/27/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/7.MQClientInstance%E7%B1%BBf%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>MQClientInstance类分析</h1><p><strong>MQClientInstance</strong>是位于<strong>org.apache.rocketmq.client.impl.factory</strong>下的一个为producer和consumer提供统一和<strong>Broker</strong>进行交互的底层工具类；</p><h2 id="创建"><a class="header-anchor" href="#创建"></a>创建</h2><ul><li>MQClientManager</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MQClientInstance</span> <span class="token function">getOrCreateMQClientInstance</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ClientConfig</span> clientConfig<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> clientId <span class="token operator">=</span> clientConfig<span class="token punctuation">.</span><span class="token function">buildMQClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断当前client是否有过实例对象，有就取</span>        <span class="token class-name">MQClientInstance</span> instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">MQClientInstance</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">.</span><span class="token function">cloneClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>factoryIndexGenerator<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientId<span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MQClientInstance</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>clientId<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                instance <span class="token operator">=</span> prev<span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Returned Previous MQClientInstance for clientId:[&#123;&#125;]"</span><span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Created new MQClientInstance for clientId:[&#123;&#125;]"</span><span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MQClientInstance</strong>的创建是通过<strong>MQClientManager</strong>来进行创建和管理的，通过将实例和<strong>MQClientInstance</strong>放入一个<strong>ConcurrentHashMap</strong>中。默认情况下每个进程内共享同一个MQClientInstance对象连接一个集群，如果要设置多个集群需要手动指定实例名称。</p><p><img src="https://s1.ax1x.com/2020/03/28/GFEx1K.png" alt="GFEx1K.png"></p><h2 id="start-方法"><a class="header-anchor" href="#start-方法"></a>start()方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断服务状态</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> CREATE_JUST<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>创建服务                    <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span>START_FAILED<span class="token punctuation">;</span>                    <span class="token comment">// 如果未指定Namesrv地址,尝试从远程服务器中获取地址</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig<span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientAPIImpl<span class="token punctuation">.</span><span class="token function">fetchNameServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// Start request-response channel</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientAPIImpl<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 启动各种定时任务</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 启动拉去消息服务</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>pullMessageService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 启动负载服务</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>rebalanceService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 启动推送服务                this.defaultMQProducer.getDefaultMQProducerImpl().start(false);</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"the client factory [&#123;&#125;] start OK"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span>RUNNING<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> START_FAILED<span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">"The Factory object["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] has been created before, and failed."</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MQClientInstance</strong>主要是与<strong>Broker</strong>进行通信的，因此在启动后需要存储<strong>NameServer</strong>查询出来的<strong>Topic</strong>、<strong>Broker</strong>信息。在start()中使用了一下一个线程池去执行任务：</p><ol><li><strong>startScheduledTask</strong>2分钟去请求一次最新的NameServer地址、更新<strong>Topic</strong>信息、清理失效的<strong>Broker</strong>、保存消费者的<strong>offset</strong></li><li>启动拉消息的线程</li><li>启动topic负载线程</li><li>启动推送消息的线程</li></ol>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MessageQueue的分析</title>
      <link href="2019/03/27/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/6.MessageQueue%E7%9A%84%E5%88%86%E6%9E%90/"/>
      <url>2019/03/27/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/6.MessageQueue%E7%9A%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>MessageQueue的分析</h1><p>MessageQueue是</p><p>TODO</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consumer源代码分析</title>
      <link href="2019/03/25/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/5.DefaultMQPushConsumer%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2019/03/25/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/5.DefaultMQPushConsumer%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>Consumer源代码分析</h1><h2 id="消费流程"><a class="header-anchor" href="#消费流程"></a>消费流程</h2><h3 id="DefaultMQPushConsumer"><a class="header-anchor" href="#DefaultMQPushConsumer"></a>DefaultMQPushConsumer</h3><p><strong>DefaultMQPushConsumer</strong>是默认进行消费的工具类，类图如下：</p><p><img src="https://s1.ax1x.com/2020/03/25/8x1zJP.png" alt="DefaultMQPushConsumer继承结构"></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> namespace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">,</span>    <span class="token class-name">AllocateMessageQueueStrategy</span> allocateMessageQueueStrategy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup <span class="token operator">=</span> consumerGroup<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> namespace<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>allocateMessageQueueStrategy <span class="token operator">=</span> allocateMessageQueueStrategy<span class="token punctuation">;</span>    defaultMQPushConsumerImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认的构造函数参数如下</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>namespace</td><td>指定producer/consumer实例,只有在同一个实例下的消息才能被消费到</td></tr><tr><td>consumerGroup</td><td>消费组</td></tr><tr><td>defaultMQPushConsumerImpl</td><td></td></tr><tr><td>allocateMessageQueueStrategy</td><td>默认的消费策略</td></tr><tr><td>namesrvAddr</td><td>namesrv的地址</td></tr><tr><td>subscribe(topic,subExpression)</td><td>订阅的主题和tag过滤的规则</td></tr></tbody></table><h2 id="实现原理"><a class="header-anchor" href="#实现原理"></a>实现原理</h2><p>主要是一下几个步骤</p><ol start="0"><li>准备环境，设置各种环境变量(例如topic,过滤策略)，根据环境变量初始化<strong>pullRequest</strong></li><li>从本地或者Broker中获取到offerSet偏移量</li><li>从本地的brokerTable中获取到对应的broker地址</li><li>调用<strong>MQClientAPIImpl</strong>操作获取消息并执行回调(将Netty的操作封装成MQ层面的业务操作)</li><li>底层调用<strong>NettyRemotingClient</strong>进行网络连接，<strong>特殊的报文结构</strong></li></ol><p>消息的方式是通过“长轮询”的方式进行处理的，通过服务端hold住请求(默认是15s)来实现的</p><h2 id="源代码分析"><a class="header-anchor" href="#源代码分析"></a>源代码分析</h2><h3 id="ConsumerMessageConcurrentlyService"><a class="header-anchor" href="#ConsumerMessageConcurrentlyService"></a>ConsumerMessageConcurrentlyService</h3><p>上面讲到如何初始化一个<strong>DefaultMQPushConsumer</strong>,但是在实际执行获取动作的是<strong>ConsumerMessageConcurrentlyService</strong>来进行的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ConsumeMessageConcurrentlyService</span><span class="token punctuation">(</span><span class="token class-name">DefaultMQPushConsumerImpl</span> defaultMQPushConsumerImpl<span class="token punctuation">,</span>    <span class="token class-name">MessageListenerConcurrently</span> messageListener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl <span class="token operator">=</span> defaultMQPushConsumerImpl<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>messageListener <span class="token operator">=</span> messageListener<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>consumeRequestQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1. 创建一个主线程池用来拉去消息</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>consumeExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumeThreadMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumeThreadMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>consumeRequestQueue<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryImpl</span><span class="token punctuation">(</span><span class="token string">"ConsumeMessageThread_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 创建一个用来执行推迟消费的线程池</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadFactoryImpl</span><span class="token punctuation">(</span><span class="token string">"ConsumeMessageScheduledThread_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3. 定时清理超时的消息</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cleanExpireMsgExecutors <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadFactoryImpl</span><span class="token punctuation">(</span><span class="token string">"CleanExpireMsgScheduledThread_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>主线程池执行的逻辑</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitConsumeRequest</span><span class="token punctuation">(</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgs<span class="token punctuation">,</span>    <span class="token keyword">final</span> <span class="token class-name">ProcessQueue</span> processQueue<span class="token punctuation">,</span>    <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">,</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> dispatchToConsume<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> consumeBatchSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumeMessageBatchMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1. msgs是一批消息，先判断这一批消息是否大于最大处理量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msgs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> consumeBatchSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConsumeRequest</span> consumeRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeRequest</span><span class="token punctuation">(</span>msgs<span class="token punctuation">,</span> processQueue<span class="token punctuation">,</span> messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//2. 放入正常队列执行业务上的消费逻辑</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>consumeExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//3. 消费失败，放入延迟等待线程池中</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">submitConsumeRequestLater</span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//4. 如果batch消息太多会按照最大消费长度分批进行处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> total <span class="token operator">&lt;</span> msgs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgThis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>consumeBatchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> consumeBatchSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> total<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&lt;</span> msgs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    msgThis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msgs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//重复2、3的逻辑</span>            <span class="token class-name">ConsumeRequest</span> consumeRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeRequest</span><span class="token punctuation">(</span>msgThis<span class="token punctuation">,</span> processQueue<span class="token punctuation">,</span> messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>consumeExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> total <span class="token operator">&lt;</span> msgs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> total<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    msgThis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msgs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">submitConsumeRequestLater</span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费的逻辑：</p><ol><li>创建三个不同的线程池分别是正常消费的线程池、等待消费的线程池、清理消息的线程池</li><li>判断当前消息数量是否大于最大处理数量</li><li>尝试使用正常消费的线程池进行消费 如果失败 -&gt; 等待消费的线程池</li></ol><h3 id="消费消息线程池的逻辑"><a class="header-anchor" href="#消费消息线程池的逻辑"></a>消费消息线程池的逻辑</h3><ul><li><strong>ConsumeRequest</strong></li></ul><ol><li>线程调用消息的处理逻辑，根据消息从处理逻辑返回结果进行下一步操作</li></ol><ul><li>调用消息的逻辑</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ConsumeReturnType</span> returnType <span class="token operator">=</span> <span class="token class-name">ConsumeReturnType</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgs <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msgs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">setConsumeStartTimeStamp</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//listener就是消息的处理逻辑方法</span>        status <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>msgs<span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"consumeMessage exception: &#123;&#125; Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;"</span><span class="token punctuation">,</span>            <span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">exceptionSimpleDesc</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">ConsumeMessageConcurrentlyService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup<span class="token punctuation">,</span>            msgs<span class="token punctuation">,</span>            messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        hasException <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>处理消息的逻辑</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CONSUME_SUCCESS<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ackIndex <span class="token operator">>=</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ackIndex <span class="token operator">=</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ok <span class="token operator">=</span> ackIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> failed <span class="token operator">=</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ok<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerStatsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incConsumeOKTPS</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">,</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerStatsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incConsumeFailedTPS</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">,</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RECONSUME_LATER<span class="token operator">:</span>        ackIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerStatsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incConsumeFailedTPS</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">,</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getMessageModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> BROADCASTING<span class="token operator">:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ackIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">MessageExt</span> msg <span class="token operator">=</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"BROADCASTING, the message consume failed, drop it, &#123;&#125;"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> CLUSTERING<span class="token operator">:</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgBackFailed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ackIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">MessageExt</span> msg <span class="token operator">=</span> consumeRequest<span class="token punctuation">.</span><span class="token function">getMsgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendMessageBack</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                msg<span class="token punctuation">.</span><span class="token function">setReconsumeTimes</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                msgBackFailed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>将不同返回值的消息写入不同的队列中</li><li>根据不同的消费方式做不同的处理<br>2.1 广播模式 消费不成功不处理<br>2.2 集群模式消费不成功，推送broker，让broker通知其他consumer进行消费，还是失败进入延迟队列</li></ol><h3 id="ProcessQueue"><a class="header-anchor" href="#ProcessQueue"></a>ProcessQueue</h3><p><strong>ProcessQueue</strong>是consumer中每一个MessageQueue所对应的队列消耗快照。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReadWriteLock</span> lockTreeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgTreeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">MessageExt</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主要是由一个TreeMep和ReadWriteLock锁组成，TreeMap里以MessageQueue的Offset作为Key，以消息内容的引用为Value，保存了所有从MessageQueue获取到但是还未被处理的消息，读写锁控制着多个线程对TreeMap对象的并发访问。</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>Consumer的消费过程是:</p><ol><li>根据配置信息初始化Consumer client对象</li><li>获取Offerset偏移量</li><li>获取BrokerTable中的地址</li><li>调用NettyRemotingClint获取消息,然后业务处理完成回调</li></ol><p>Consumer的消费的组件是:</p><ol><li>处理正常消费的消息线程池</li><li>处理延迟消息的线程池</li><li>清理消息的线程池</li></ol><p>每一个MessageQueue在消费时都有一个ProcessQueue来缓冲所有已消费未处理的消息,ProcessQueue底层是采用<B>TreeMap</B>、<B>ReadWriteLock</B>来进行实现的</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NameServer源代码分析</title>
      <link href="2019/03/22/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/4.NameServer%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2019/03/22/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/4.NameServer%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>NameServer源代码分析</h1><p>周末继续阅读RocketMq的学习,在上周已经简单的把RocketMq的安装和使用学习了一下。本周主要来看一下NameServer的源代码和设计</p><h2 id="NameServer启动"><a class="header-anchor" href="#NameServer启动"></a>NameServer启动</h2><h3 id="NamesrvController启动"><a class="header-anchor" href="#NamesrvController启动"></a>NamesrvController启动</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">NamesrvController</span> <span class="token function">main0</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建NamesrvController()</span>            <span class="token class-name">NamesrvController</span> controller <span class="token operator">=</span> <span class="token function">createNamesrvController</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">start</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> tip <span class="token operator">=</span> <span class="token string">"The Name Server boot success. serializeType="</span> <span class="token operator">+</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">getSerializeTypeConfigInThisServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> tip<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> controller<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在RocketMQ的源代码<strong>NamesrvStartup.java</strong>中启动，调用时序主要是: main0() -&gt; createNamesrvController()</p><p>在<strong>createNamesrvController</strong>方法中，主要执行<strong>NamesrvController初始化</strong>、<strong>NamesrvController.start()</strong></p><h3 id="NamesrvController初始化"><a class="header-anchor" href="#NamesrvController初始化"></a>NamesrvController初始化</h3><p><strong>NamesrvController</strong>初始化的步骤主要是：</p><ol><li>获取到<strong>namesrvConfig</strong>、<strong>nettyServerConfig</strong>等配置信息</li><li>在根据配置生成<strong>NamesrvController</strong>初始化对象</li></ol><h3 id="NamesrvController-start"><a class="header-anchor" href="#NamesrvController-start"></a>NamesrvController.start()</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//省略代码....</span><span class="token comment">//初始化controller</span><span class="token keyword">boolean</span> initResult <span class="token operator">=</span> controller<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加关闭的钩子函数</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShutdownHookThread</span><span class="token punctuation">(</span>log<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        controller<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略代码....</span><span class="token comment">//start</span>controller<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> controller<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>NamesrvController.start()</B>主要做了两个工作：</p><ol><li>通过<strong>controller.initialize()<strong>设置好controller的配置环境<br>1.1 开启Netty服务<br>1.2 启动线程池（<strong>remotingExecutor</strong>、两个定时执行的线程，一个用来扫描失效的</strong>Broker（scanNotActiveBroker）</strong>，另一个用来打印配置信息（<strong>printAllPeriodically</strong>））</li><li>remotingServer.start()<br>2.1 使用netty开启服务<br>2.2 <strong>prepareSharableHandlers</strong>中注册<strong>NettyServerHandler</strong>将<strong>NettyRequestProcessor</strong>注册到处理器中</li></ol><h2 id="Namesrv的处理逻辑"><a class="header-anchor" href="#Namesrv的处理逻辑"></a>Namesrv的处理逻辑</h2><p>Namesrv的处理逻辑主要是通过<strong>NettyRequestProcessor</strong>的子类<strong>DefaultRequestProcessor</strong>来进行实现的</p><ul><li>DefaultRequestProcessor</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">switch</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>PUT_KV_CONFIG<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">putKVConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_KV_CONFIG<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKVConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>DELETE_KV_CONFIG<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteKVConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>QUERY_DATA_VERSION<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token function">queryBrokerTopicConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>REGISTER_BROKER<span class="token operator">:</span>        <span class="token class-name">Version</span> brokerVersion <span class="token operator">=</span> <span class="token class-name">MQVersion</span><span class="token punctuation">.</span><span class="token function">value2Version</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerVersion<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token class-name">MQVersion<span class="token punctuation">.</span>Version</span><span class="token punctuation">.</span>V3_0_11<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBrokerWithFilterServer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBroker</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>UNREGISTER_BROKER<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unregisterBroker</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_ROUTEINTO_BY_TOPIC<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRouteInfoByTopic</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_BROKER_CLUSTER_INFO<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBrokerClusterInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>WIPE_WRITE_PERM_OF_BROKER<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wipeWritePermOfBroker</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_ALL_TOPIC_LIST_FROM_NAMESERVER<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token function">getAllTopicListFromNameserver</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>DELETE_TOPIC_IN_NAMESRV<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token function">deleteTopicInNamesrv</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_KVLIST_BY_NAMESPACE<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKVListByNamespace</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_TOPICS_BY_CLUSTER<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTopicsByCluster</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_SYSTEM_TOPIC_LIST_FROM_NS<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSystemTopicListFromNs</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_UNIT_TOPIC_LIST<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUnitTopicList</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_HAS_UNIT_SUB_TOPIC_LIST<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHasUnitSubTopicList</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_HAS_UNIT_SUB_UNUNIT_TOPIC_LIST<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHasUnitSubUnUnitTopicList</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>UPDATE_NAMESRV_CONFIG<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span>GET_NAMESRV_CONFIG<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据不同的请求返回不同的处理函数</p><h2 id="RocketMQ元数据存储"><a class="header-anchor" href="#RocketMQ元数据存储"></a>RocketMQ元数据存储</h2><p>NameSrv中信息都是存储在内存中的，而且每一个NameSrv保存的信息都是全量的。<strong>RouteInfoManager</strong>是保存这些信息的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteInfoManager</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> log <span class="token operator">=</span> <span class="token class-name">InternalLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LoggerName</span><span class="token punctuation">.</span>NAMESRV_LOGGER_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> BROKER_CHANNEL_EXPIRED_TIME <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReadWriteLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">></span></span><span class="token operator">></span> topicQueueTable<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerName */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerData</span><span class="token operator">></span> brokerAddrTable<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* clusterName */</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerName */</span><span class="token operator">>></span> clusterAddrTable<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token operator">></span> brokerLiveTable<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token comment">/* Filter Server */</span><span class="token operator">></span> filterServerTable<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里由于Namesev中的业务场景是<strong>读多写少</strong>，因此用<strong>可重入的读写锁</strong>来保证并发的安全性</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><ol><li>加载配置文件转换为NameServerConfig、NettyConfig</li><li>根据配置文件生成<strong>NamesrvController</strong></li><li>创建线程池和定时扫描线程</li><li>开启<strong>Netty</strong>服务</li><li>用<strong>NettyRequestProcessor</strong>处理请求</li><li><strong>RouteInfoManager</strong>中存储信息</li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><ul><li>《RocketMQ实战与原理解析》</li><li><a href="http://www.jiangxinlingdu.com/rocketmq/2018/05/10/mq-rpc.html">RocketMQ 系列文章</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ组件</title>
      <link href="2019/03/15/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/3.RocketMQ%E7%BB%84%E4%BB%B6/"/>
      <url>2019/03/15/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/3.RocketMQ%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1>RocketMQ组件</h1><p>RocketMQ简单的看是由四个组件构成的，分别是<B>NameServe</B>、<B>Broker</B>、<B>Producer</B>、<B>consumer</B>这四个组件构成的;</p><p>一个简单的执行过程是:</p><ol><li>consumer通过向NameServer询问具体的Topic所在的Broker地址</li><li>consumer通过向Broker保持长连接的形式，获取到信息</li><li>同一组下的consumer会向broker中的不同MessageQueue根据offset的位置进行获取msg,offeset会根据不同的模式有不同的实现，如果是广播模式offset会保存在不同的consumer中，如果是集群模式offset是保存在broker中的</li></ol><p>下面依次来介绍一下这几个组件</p><h2 id="NameServer"><a class="header-anchor" href="#NameServer"></a>NameServer</h2><p><strong>NameServer</strong>是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息。同时，各个角色的机器都要定期向NameServer上报自己的状态，超时不上报的话，NameServer会认为某个机器出故障不可用了，其他的组件会把这个机器从可用列表里移除。<br><strong>NameServe</strong>r本身是无状态的，也就是说NameServer中的Broker、Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中的</p><p>NameServer和zk的对比：</p><ul><li>NameServer只是作为一个轻量级的元数据服务器</li><li>zk是一个分布式应用程序提供协调服务<br>RocketMQ的NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本</li></ul><h2 id="Broker"><a class="header-anchor" href="#Broker"></a>Broker</h2><p>Broker主要负责消息的存储、传递和查询，以及服务的高可用保证。在Broker的Master-Slave架构中，Broker分为Master和Slave。一个Master可以对应多个Slave，但是一个Slave只能对应一个Master。Master和Slave的对应关系是通过指定相同的BrokerName和不同的BrokerId来定义的。BrokerId 为 0 表示 Master，非 0 表示 Slave;</p><ul><li>ROCKETMQ 架构总结</li></ul><blockquote><p>每个Broker都与NameServer集群中的所有节点建立长期连接，并定期向所有 NameServer 注册 Topic 信息。Producer与NameServer集群中的一个节点建立长连接，定时从NameServer获取topic路由信息，与提供Topic服务的Master建立长连接，定时向Master发送心跳。Producer是完全无状态的。Consumer与NameServer集群中的一个节点建立长连接，定期从 NameServer 获取 Topic 路由信息，与提供 Topic 服务的 Master 和 Slave 建立长连接，定期向 Master 和 Slave 发送心跳。Consumer 从 Master 订阅 Topic或奴隶。</p></blockquote><h2 id="Producer"><a class="header-anchor" href="#Producer"></a>Producer</h2><p><B>Producer</B>是作为数据源，将消息优化、写入和发布到一个或多个主题。生产者通过 MessageQueue 在代理之间负载平衡数据。它支持快速失败和发送消息期间的重试。</p><h2 id="Consumer"><a class="header-anchor" href="#Consumer"></a>Consumer</h2><p><B>Consumer</B>是通过订阅Topic来读取消息,有两种消费的方式<B>服务端推送</B>或者<B>客户端拉取</B>;消费者需要在消费的时候作业务幂等和可靠性保证;</p><ul><li>执行过程</li></ul><ol><li>Consumer 启动时需要指定 Namesrv 地址，与其中一个 Namesrv 建立长连接。消费者每隔 30 秒从 Namesrv 获取所有Topic 的最新队列情况</li><li>消费者端的负载均衡。根据消费者的消费模式不同，负载均衡方式也不同。</li></ol><h3 id="消费者消费模式"><a class="header-anchor" href="#消费者消费模式"></a>消费者消费模式</h3><ol><li>集群消费<br>消费者的一种消费模式。一个 Consumer Group 中的各个 Consumer 实例分摊去消费消息，即一条消息只会投递到一个 Consumer Group 下面的一个实例。</li><li>广播消费<br>消费者的一种消费模式。消息将对一 个Consumer Group 下的各个 Consumer 实例都投递一遍。即即使这些 Consumer 属于同一个Consumer Group ，消息也会被 Consumer Group 中的每个 Consumer 都消费一次</li></ol><h2 id="RocketMQ执行流程"><a class="header-anchor" href="#RocketMQ执行流程"></a>RocketMQ执行流程</h2><ol><li>启动 Namesrv，Namesrv起 来后监听端口，等待 Broker、Producer、Consumer 连上来，相当于一个路由控制中心</li><li>Broker 启动，跟所有的 Namesrv 保持长连接，定时发送心跳包</li><li>收发消息前，先创建 Topic 。创建 Topic 时，需要指定该 Topic 要存储在 哪些 Broker上。也可以在发送消息时自动创建Topic</li><li>Producer 发送消息</li><li>Consumer 消费消息</li></ol><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/RocketMQ/RocketMQ%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png?raw=true" alt="RocketMQ执行过程"></p><h2 id="Producer执行流程"><a class="header-anchor" href="#Producer执行流程"></a>Producer执行流程</h2><ol><li>Producer 启动时，也需要指定 Namesrv 的地址，从 Namesrv 集群中选一台建立长连接</li><li>生产者端的负载均衡,生产者发送时，会自动轮询当前所有可发送的broker，一条消息发送成功，下次换另外一个broker发送，以达到消息平均落到所有的broker上</li></ol><hr><p>上面就是对RocketMQ整体结构的一个简单介绍,下面对RocketMQ中最重要的一个概念进行简单介绍</p><h2 id="Message"><a class="header-anchor" href="#Message"></a>Message</h2><p><B>Message</B>是所有MQ中间件的核心领域,一切都是围绕着这个领域来作设计的;</p><h3 id="存储消息"><a class="header-anchor" href="#存储消息"></a>存储消息</h3><p>RocketMQ的数据存储结构分为两种：</p><ol><li><strong>CommitLog</strong>是实际存储信息的单元，顺序进行写入</li><li><strong>ConsumeQueue</strong>是消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址</li></ol><p>刷盘策略分为<strong>同步刷盘</strong>、<strong>异步刷盘</strong></p><p>同步策略分为<strong>同步复制</strong>、<strong>异步复制</strong></p><ul><li>最佳实际：<strong>异步刷盘</strong>+<strong>同步复制</strong></li></ul><h3 id="使用消息"><a class="header-anchor" href="#使用消息"></a>使用消息</h3><p>”对一个应用来说，尽可能只用一个Topic，不同的消息子类型用Tag来标识（每条消息只能有一个Tag），服务器端基于Tag进行过滤，并不需要读取消息体的内容，所以效率很高。发送消息设置了Tag以后，消费方在订阅消息时，才可以利用Tag在Broker端做消息过滤。</p><p>其次是消息的Key。对发送的消息设置好Key，以后可以根据这个Key来查找消息。所以这个Key一般用消息在业务层面的唯一标识码来表示，这样后续查询消息异常，消息丢失等都很方便。Broker会创建专门的索引文件，来存储Key到消息的映射，由于是哈希索引，应尽量使Key唯一，避免潜在的哈希冲突</p><p>Tag和Key的主要差别是使用场景不同，Tag用在Consumer的代码中，用来进行服务端消息过滤，Key主要用于通过命令行查询消息。“</p><ul><li><strong>Tag</strong>过滤是在broker从<strong>Consume Queue</strong>中取数据的时候就进行比较，在这一过程中通过比较tag的<strong>hashCode值</strong>和<strong>内容</strong>进行双重过滤</li><li><strong>SQL过滤</strong>，通过在producer向消息中插入自定义属性和值的方式,在comsumer中使用**MessageSelect.bySql()**的方法进行过滤</li></ul><p>如何提高消费速度?</p><ul><li>提高消费并行度<ol><li>增加Consumer实例数量</li><li>增加单个Consumer中的并行度（增加线程）</li></ol></li><li>批量消费</li><li>自定义消费offset逻辑,丢弃一部分消息</li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://rocketmq.apache.org/docs/4.x/introduction/03whatis#consumer">RocketMQ简介</a></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ中的通信模式</title>
      <link href="2019/03/14/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/2.RocketMQ%E4%B8%AD%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/03/14/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/2.RocketMQ%E4%B8%AD%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>RocketMQ中的通信模式</h1><p>在RocketMQ中为<strong>producer</strong>提供了三种通讯模式分别是<strong>同步</strong>、<strong>异步</strong>、<strong>单向</strong>;<br>同时对于消息类型也提供了多种选择:<B>广播消息</B>、<B>延迟消息</B>、<br><B>顺序消息</B>、<B>事务消息</B>等选择;<br>下文就主要介绍一些概念性的东西和<B>最佳实践</B></p><h2 id="producer"><a class="header-anchor" href="#producer"></a>producer</h2><h3 id="同步模式"><a class="header-anchor" href="#同步模式"></a>同步模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token class-name">MqConfig</span><span class="token punctuation">.</span>GROUP_ID<span class="token punctuation">,</span> <span class="token function">getAclRPCHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConfig</span><span class="token punctuation">.</span>NAMESRV_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">MqConfig</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>                    <span class="token class-name">MqConfig</span><span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>                    <span class="token string">"Hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//        producer.shutdown();</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<B>DefaultMQProducer.send(msg)</B>发送消息就是同步的，向broker发送消息后就立即返回</p><h3 id="异步模式"><a class="header-anchor" href="#异步模式"></a>异步模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">MqConfig</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>        <span class="token class-name">MqConfig</span><span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>        <span class="token string">"Hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<strong>producer.send(msg, new SendCallback())</strong>,传入回调函数，这样发送的消息是一个异步的</p><h3 id="单向消息"><a class="header-anchor" href="#单向消息"></a>单向消息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**producer.sendOneway(msg)**发送的是单向消息</p><h2 id="Message"><a class="header-anchor" href="#Message"></a>Message</h2><h3 id="延迟消息"><a class="header-anchor" href="#延迟消息"></a>延迟消息</h3><ul><li>Message.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span>PROPERTY_DELAY_TIME_LEVEL<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>RocketMQ默认只支持固定的延迟级别，如果需要做到自定义延迟级别需要进行扩展。可以用长轮询+短轮询的方式实现</p><h3 id="顺序消息"><a class="header-anchor" href="#顺序消息"></a>顺序消息</h3><p>由于在一个Topic下会有多个MessageQueue，因此当同一组下的多个消费者线程来消费时，数据消费就有可能是无序的。</p><ul><li><p>发送顺序<br><img src="https://s1.ax1x.com/2020/03/15/83MLt0.png" alt="83MLt0.png"></p></li><li><p>消费顺序<br><a href="https://imgchr.com/i/83QuBd"><img src="https://s1.ax1x.com/2020/03/15/83QuBd.png" alt="83QuBd.png"></a></p></li><li><p>有序消息-producer</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> orderId <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">MqConfig</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>        <span class="token class-name">MqConfig</span><span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>        <span class="token string">"Hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>msg<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">></span></span> mqs<span class="token punctuation">,</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> id <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>有序消息- consumer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ConsumeOrderlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeOrderlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s Receive New Messages: %s %n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过orderId将所属同一批有顺序的msg发送到同一个msssageQueue中，来保证消费的消息的有序</p><h3 id="事务消息"><a class="header-anchor" href="#事务消息"></a>事务消息</h3><p>mq实现本地事务主要是将投递消息完成的动作和事务执行成功的动作结合在一起形成一个原子操作。当本地事务执行成功就投递事务完成的消息。</p><ul><li>事务消息：消息队列 RocketMQ 版提供类似 X/Open XA 的分布式事务功能，通过消息队列 RocketMQ 版事务消息能达到分布式事务的最终一致。</li><li>半事务消息：暂不能投递的消息，发送方已经成功地将消息发送到了消息队列 RocketMQ 版服务端，但是服务端未收到生产者对该消息的二次确认，此时该消息被标记成“暂不能投递”状态，处于该种状态下的消息即半事务消息。</li><li>消息回查：由于网络闪断、生产者应用重启等原因，导致某条事务消息的二次确认丢失，消息队列 RocketMQ 版服务端通过扫描发现某条消息长期处于“半事务消息”时，需要主动向消息生产者询问该消息的最终状态（Commit 或是 Rollback），该询问过程即消息回查。</li></ul><h2 id="最佳实践"><a class="header-anchor" href="#最佳实践"></a>最佳实践</h2><h3 id="Topic-与-Tag"><a class="header-anchor" href="#Topic-与-Tag"></a>Topic 与 Tag</h3><ul><li><p><strong>Topic</strong>消息主题，通过 Topic 对不同的业务消息进行分类</p></li><li><p><strong>Tag</strong>消息标签，用来进一步区分某个 Topic 下的消息分类，消息从生产者发出即带上的属性</p></li></ul><h3 id="消费幂等"><a class="header-anchor" href="#消费幂等"></a>消费幂等</h3><p>因为排除消息的重复并不属于mq的职责，而是业务端需要进行处理的。处理重复消息主要是用业务幂等的方式来进行处理;<br>还有一种记录重复消息消费的方案是使用日志表来进行处理。</p><h3 id="订阅关系"><a class="header-anchor" href="#订阅关系"></a>订阅关系</h3><p>订阅关系一致指的是同一个消费者 Group ID 下所有 Consumer 实例的处理逻辑必须完全一致。具体来说就是同一个消费者 Group ID 下所有的实例需在：</p><ol><li>订阅的 Topic 必须一致</li><li>订阅的 Topic 中的 Tag 必须一致</li></ol><p>因为这样才能按照广播或者集群的消费模式去共同消费同一批的消息。</p><p>简单的来说就是我们的消费者必须是一个无状态的服务;</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://help.aliyun.com/document_detail/43348.html?spm=a2c4g.11186623.2.17.40004fa4DZswLK#concept-2047067">官网对事务消息的介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ入门</title>
      <link href="2019/03/13/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/1.RocketMQ%E5%85%A5%E9%97%A8/"/>
      <url>2019/03/13/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/1.RocketMQ%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1>RocketMQ入门</h1><p>在工作中只是简单的使用了一下kafka进行系统间的交互，并未系统化的学习过消息队列这个中间件。基于开源MQ项目的一个活跃度,选择阿里开源出来的RocketMQ来进行学习，再来就是RocketMQ本身也是用java语言进行开发的一个项目。</p><h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2><h3 id="安装前提"><a class="header-anchor" href="#安装前提"></a>安装前提</h3><p>需要拥有以下软件：</p><ul><li>操作系统(推荐使用64位)</li><li>jdk1.8 (推荐使用64位的)</li><li>Maven 3.2x</li><li>Git</li><li>4G以上的空间</li></ul><h3 id="安装jdk"><a class="header-anchor" href="#安装jdk"></a>安装jdk</h3><ul><li>下载<a href="https://www.oracle.com/cn/java/technologies/javase-jdk8-downloads.html">jdk</a></li></ul><ol><li>解压<br>执行</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> -zvxf jdk-8u201-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改/etc/profile</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/home/java/jdk1.8.0_60<span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/lib/<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span> JAVA_HOME CLASSPATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>source /etc/profile</p></li><li><p>检查 java -version</p></li></ol><h3 id="安装Maven"><a class="header-anchor" href="#安装Maven"></a>安装Maven</h3><ul><li>下载<a href="https://maven.apache.org/download.cgi">mave</a></li></ul><ol><li>解压、设置环境path、生效</li></ol><h3 id="安装Git"><a class="header-anchor" href="#安装Git"></a>安装Git</h3><ul><li>更新源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update -y<span class="token function">apt-get</span> upgrade -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装git</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">apt install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>git --version</li></ul><h3 id="安装RocketMQ"><a class="header-anchor" href="#安装RocketMQ"></a>安装RocketMQ</h3><ol><li><p>解压</p></li><li><p>修改内存设置</p></li></ol><ul><li><a href="http://runserver.sh">runserver.sh</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token operator">!</span> -e <span class="token string">"<span class="token variable">$JAVA_HOME</span>/bin/java"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/jdk/java<span class="token punctuation">[</span> <span class="token operator">!</span> -e <span class="token string">"<span class="token variable">$JAVA_HOME</span>/bin/java"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/java<span class="token punctuation">[</span> <span class="token operator">!</span> -e <span class="token string">"<span class="token variable">$JAVA_HOME</span>/bin/java"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> error_exit <span class="token string">"Please set the JAVA_HOME variable in your environment, We need java(x64)!"</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=32m -XX:MaxMetaspaceSize=64m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="http://runbroker.sh">runbroker.sh</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token operator">!</span> -e <span class="token string">"<span class="token variable">$JAVA_HOME</span>/bin/java"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/home/java/jdk1.8.0_60<span class="token comment">#[ ! -e "$JAVA_HOME/bin/java" ] &amp;&amp; JAVA_HOME=/usr/java</span><span class="token comment">#[ ! -e "$JAVA_HOME/bin/java" ] &amp;&amp; error_exit "Please set the JAVA_HOME variable in your environment, We need java(x64)!"</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m"</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>启动NameServer</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> <span class="token function">sh</span> bin/mqnamesrv <span class="token operator">&amp;</span><span class="token function">tail</span> -f ~/logs/rocketmqlogs/namesrv.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>启动Broker</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> <span class="token function">sh</span> bin/mqbroker -n localhost:9876 <span class="token operator">&amp;</span><span class="token function">tail</span> -f ~/logs/rocketmqlogs/broker.log <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>发送和接收消息</li></ol><ul><li>Producer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 构造Producer</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"ProducerGroupName12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token string">"Hello RocketMQ!!!"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//        producer.shutdown();</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Consumer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"PushMsgGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span>CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>msgs<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Receive New Messages :"</span> <span class="token operator">+</span> msgs <span class="token operator">+</span> <span class="token string">"%n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述运行环境是在windows子系统中进行运行的,但是由于网络的问题producer一直连接不上broker，导致实验失败。最后切换到windows环境下，运行倒是成功了，但是由于c盘太小了，每次都要删除commitLog进行运行，实在是太耗费精力和时间了，所以不在环境问题上纠结了。</p><h2 id="RocketMQ中的基础概念"><a class="header-anchor" href="#RocketMQ中的基础概念"></a>RocketMQ中的基础概念</h2><ul><li><p>NameServer<br><strong>NameServer</strong>功能近似于zk，物理逻辑上的<strong>broker</strong>启动后向NameServer注册。NameServel是一种无状态的，每一个节点保存的都是全量的<strong>Broker</strong>节点信息，其他节点通过和NameServer保持长连接来获取信息</p></li><li><p>broker<br><strong>broker</strong>类似于物理逻辑上的机器，支持主从部署，是实际于消息体交互的</p></li><li><p>producer<br><strong>producer</strong>消息的提供方</p></li><li><p>comsumer<br><strong>comsumer</strong>消息的消费方</p></li></ul><p>具体的交互逻辑，如下图展示：<br><img src="https://s1.ax1x.com/2020/03/14/8luQ76.png" alt="RocketMQ架构图"></p><p><img src="https://s1.ax1x.com/2020/03/14/8lKAbt.png" alt="RocketMQ架构图"></p><blockquote><p>参考文章<br><a href="https://segmentfault.com/a/1190000017841402#item-3-8">RocketMQ入门篇</a><br><a href="https://blog.csdn.net/micholas_net/article/details/89178761">windows下安装rocketMQ</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书列表</title>
      <link href="2019/03/13/1.%E6%9D%82%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E5%88%97%E8%A1%A8/"/>
      <url>2019/03/13/1.%E6%9D%82%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1>读书列表</h1><h2 id="正在读"><a class="header-anchor" href="#正在读"></a>正在读</h2><table><thead><tr><th>名称</th><th>状态</th></tr></thead><tbody><tr><td>《现代操作系统-原理与实现》</td><td>ing</td></tr></tbody></table><h2 id="读过"><a class="header-anchor" href="#读过"></a>读过</h2><table><thead><tr><th>名称</th><th>状态</th></tr></thead><tbody><tr><td>《重构–改善既有代码的设计》</td><td>end</td></tr><tr><td>《大话设计模式》</td><td>end</td></tr><tr><td>《RocketMQ实战与原理解析》</td><td>end</td></tr><tr><td>《Spring Cloud与Docker微服务架构实战》</td><td>end</td></tr><tr><td>《MySQL技术内幕.InnoDB存储引擎》</td><td>end</td></tr><tr><td>《Effective Java中文版》</td><td>end</td></tr><tr><td>《Java异步编程实战》</td><td>end</td></tr><tr><td>《银行会计》</td><td>end</td></tr></tbody></table><h2 id="暂停"><a class="header-anchor" href="#暂停"></a>暂停</h2><p>《中台架构与实现》|stop</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis基础知识</title>
      <link href="2019/02/25/1.%E6%9D%82%E8%AE%B0/redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2019/02/25/1.%E6%9D%82%E8%AE%B0/redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="基本数据结构"><a class="header-anchor" href="#基本数据结构"></a>基本数据结构</h3><table><thead><tr><th>类型</th><th>特点</th></tr></thead><tbody><tr><td>string</td><td>字符串</td></tr><tr><td>list</td><td>列表</td></tr><tr><td>set</td><td>不重复列表</td></tr><tr><td>hash</td><td>哈希</td></tr><tr><td>zset</td><td>有序集合</td></tr></tbody></table><p>Redis中的hash是渐进式hash,不会在扩容时暂停，而是会重新创建一个新的hash来保存</p><h3 id="基础操作"><a class="header-anchor" href="#基础操作"></a>基础操作</h3><h4 id="字符串"><a class="header-anchor" href="#字符串"></a>字符串</h4><table><thead><tr><th>序号</th><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX]</td><td>设置字符串</td><td>set key value</td></tr><tr><td>2</td><td>GET key</td><td>获取字符串</td><td>get key</td></tr><tr><td>3</td><td>EXISTS key [key …]</td><td>判断是否存在</td><td>exists key</td></tr><tr><td>4</td><td>DEL key [key …]</td><td>删除key</td><td>del key</td></tr></tbody></table><h4 id="列表"><a class="header-anchor" href="#列表"></a>列表</h4><table><thead><tr><th>序号</th><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>RPUSH key element [element …]</td><td>装载元素</td><td>rpush list item0</td></tr><tr><td>2</td><td>LLEN key</td><td>返回长度</td><td>LLEN list</td></tr><tr><td>3</td><td>LPOP key</td><td>弹出第一个元素</td><td>LPOP list</td></tr><tr><td>4</td><td>RPOP key</td><td>弹出最后一个元素</td><td>RPOP list</td></tr><tr><td>5</td><td>LINDEX key index</td><td>根据索引查询元素</td><td>LINDEX list 0</td></tr><tr><td>6</td><td>LRANGE key start stop</td><td>按照范围获取元素</td><td>lrange books 0 -1</td></tr><tr><td>7</td><td>LTRIM list start stop</td><td>截取list</td><td>LTRIM list 0 1</td></tr></tbody></table><h4 id="hash-字典"><a class="header-anchor" href="#hash-字典"></a>hash(字典)</h4><table><thead><tr><th>序号</th><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>HSET key field value [field value …]</td><td>装载元素</td><td>hset map key value</td></tr><tr><td>2</td><td>HGET key field</td><td>获取指定元素</td><td>hget map key</td></tr><tr><td>3</td><td>HGETALL key</td><td>获取全部元素</td><td>hgetall map</td></tr><tr><td>4</td><td>HLEN key</td><td>获取map长度</td><td>hlen map</td></tr></tbody></table><h4 id="set-集合"><a class="header-anchor" href="#set-集合"></a>set(集合)</h4><table><thead><tr><th>序号</th><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>SADD set key…</td><td>装载元素</td><td>sadd set item1</td></tr><tr><td>2</td><td>SMEMBERS set</td><td>获取全部元素</td><td>smembers set</td></tr><tr><td>3</td><td>SCARD set</td><td>获取set长度</td><td>scard set</td></tr><tr><td>4</td><td>SPOP set</td><td>弹出元素</td><td>spop set</td></tr></tbody></table><h4 id="zset-有序集合"><a class="header-anchor" href="#zset-有序集合"></a>zset(有序集合)</h4><table><thead><tr><th>序号</th><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>ZADD key [NX|XX] [CH] [INCR] score member [score member …]</td><td>添加元素</td><td>zadd books 9.0 “think in java”</td></tr><tr><td>2</td><td>ZRANGE key start stop [WITHSCORES]</td><td>按照元素范围取值</td><td>zrange books 0 -1</td></tr><tr><td>3</td><td>ZREVRANGE key start stop [WITHSCORES]</td><td>倒序取值</td><td>zrevrange books 0 -1</td></tr><tr><td>4</td><td>ZCARD key</td><td>获取长度</td><td>zcard books</td></tr><tr><td>5</td><td>ZRANK key</td><td>获取分数</td><td>zrank books</td></tr><tr><td>6</td><td>ZRANGEBYSCORE key start stop</td><td>根据分值区间遍历</td><td>zrangebyscore key 0 -1</td></tr><tr><td>7</td><td>ZREM set key</td><td>删除元素</td><td>zrem books item1</td></tr></tbody></table><h4 id="运维"><a class="header-anchor" href="#运维"></a>运维</h4><table><thead><tr><th>序号</th><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>keys</td><td>根据正则匹配查询(慎用)</td><td>keys *</td></tr></tbody></table><h4 id="Redis删除过期Key的策略"><a class="header-anchor" href="#Redis删除过期Key的策略"></a>Redis删除过期Key的策略</h4><ol><li>将具有过期时间设置的key放在一个特殊的队列中</li><li>每秒扫描10次进行过期key的删除操作<br>2.1 随机从过期的key中获取20个数据<br>2.2 判断key是否过期,过期进行删除<br>2.3 如果筛选出来的数据有超过1/4需要删除,那么重复进行2.1的操作<br>由于Redis在执行删除操作时会阻塞主线程,因此在’set key nx’时需要注意key的过期时间,尽量避免大量的key在同一时间删除,阻塞业务</li></ol><p>这种删除方式称为’主动删除’,还有一种删除方式是在使用时check时间,当超时时会进行删除这种方式被称为’惰性删除’</p><h4 id="Redis的淘汰策略"><a class="header-anchor" href="#Redis的淘汰策略"></a>Redis的淘汰策略</h4><ol><li>不接受write请求,保持现有key(默认策略)</li><li>LRU策略<br>2.1 过期时间(淘汰设置过期时间的key,按照最少使用的原则)<br>2.2 剩余时间(淘汰剩余时间最小的时间)<br>2.3 过期时间(按照随机的方式进行淘汰)<br>2.4 全部key(按照最少使用的原则进行淘汰)<br>2.5 全部key(随机淘汰)<br>小结:Redis淘汰key的范围主要有两种’过期key’和’全量key’,筛选策略主要有两种:‘时间/使用频率’和’随机’</li></ol><h4 id="大key查询"><a class="header-anchor" href="#大key查询"></a>大key查询</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./redis-cli --bigkeys -i <span class="token number">0.01</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="原理分析"><a class="header-anchor" href="#原理分析"></a>原理分析</h2><h3 id="字符串-v2"><a class="header-anchor" href="#字符串-v2"></a>字符串</h3><h4 id="数据结构"><a class="header-anchor" href="#数据结构"></a>数据结构</h4><p>Redis的字符串结构底层是通过’数组’来实现的,数据格式分为两种类型:</p><ol><li>emb格式<br>针对容量较小的字符串采用的是emb格式,emb的特点是数据的元数据和内容在内存上是连续的.这样做的好处是节省了元数据的空间</li><li>raw格式<br>针对普通数据采用的是raw格式,这种格式在记录元数据和内容在内存上不是连续的,需要经过两次内存分配,好处是空间可以较大,但是元数据占用空间较多<br>猜测redis最开始应该是不支持emb格式的,但是由于redis在使用时,大部分场景下都是存储较小的字符串,因此后来才支持emb这种格式的.由于大部分是小字符串因此这样的改动会优化很大一部分内存空间</li></ol><h4 id="dict-字典-结构"><a class="header-anchor" href="#dict-字典-结构"></a>dict(字典)结构</h4><p>dict是Redis内部使用最频繁的结构,由于Redis在是在初始化dict时进行内存分配,因此在扩容时采用的是’渐进式’扩容的方式.<br>Redis的渐进式扩容需要用到另外一个hashtable,在迁移数据的过程中对于set操作会直接set到新的hashtable上,对于put操作会对两个hashtable进行查找<br>扩容默认的阀值是需要达到原hashtable的长度,才会对hashtable进行一倍容量的扩容.缩容的条件是数据不满数组长度的1/10时</p><h4 id="跳跃列表结构"><a class="header-anchor" href="#跳跃列表结构"></a>跳跃列表结构</h4><p>跳跃列表是实现zset的关键,zset是由hashtable和跳跃列表这两种数据结构组成<br><img src="https://oscimg.oschina.net/oscnet/c88f04bbc62a5510e106502e65b5b374541.png" alt="跳跃表"></p><ul><li>这里要注意一下,跳跃表查询的时间复杂度是O(log(n))与二分法的时间复杂度类似,跳跃表是底层数据结构并不是查询算法这里需要额外注意一下.zset的底层数据结构选择跳跃表的原因大概是因为跳跃表数据结构简单,并且在层级随机的前提下性能还行,并且支持范围查询,这是红黑树/ 平衡树所不能支持的,</li><li>跳跃列表的更新分为两个步骤,先删除原来的节点,在将新的节点插入跳跃列表中</li></ul><h2 id="示例"><a class="header-anchor" href="#示例"></a>示例</h2><h3 id="redi分布式锁"><a class="header-anchor" href="#redi分布式锁"></a>redi分布式锁</h3><h3 id="实现原理"><a class="header-anchor" href="#实现原理"></a>实现原理</h3><p>redis分布式锁实现的原理是，多个进程同时竞争同一个共享资源，拥有这个资源的线程就可以执行，其他进程等待执行线程释放。</p><h3 id="问题"><a class="header-anchor" href="#问题"></a>问题</h3><p>加锁：</p><ol><li>set和get是两个命令，因此要用<strong>set nx</strong></li><li>不会自动过期，因此要用<strong>px</strong>,设定过期时间</li><li>无法标记执行线程，因此要设置redis唯一值</li></ol><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">SET resource_name my_random_value NX PX <span class="token number">30000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解锁：<br>解锁需要判断线程持有的随机值和redis的值是否一样，因此要使用lua脚本</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在只是单机版redis的分布式锁，不适合分布式环境。当redis宕机后，执行线程不会被释放。当线程执行耗时任务时，可能出现redis释放锁，其他线程持有锁。<br>分布式redis锁可以采用Redission实现，底层是redis作者实现的Redlock原理。</p><ul><li>关于RedLock存在的问题</li></ul><ol><li>对获取到锁的进行操作没有保护机制,这里其实可以对比过期时间的方式来处理</li><li>RedLock是建立在时间有序的前提下的<br>一般业务系统可以使用RedLock算法,在严格要求分布式锁正确性的场景下推荐使用ZK(curator已有现成实现)</li></ol><h4 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h4><ul><li><p>缓存雪崩<br>雪崩指的是大量key在同一时间失效,导致大量请求发送到后端,影响数据库的情况<br>在设计key时就要考虑到失效时间的影响,将时效时间拉成一个时间段将请求进行防范</p></li><li><p>缓存穿透/击穿<br>缓存穿透/击穿指的是请求的key不在cache中,导致大量请求发送到后端系统中<br>解决这种问题需要从三个方面进行处理:<br>1.业务接口的设计上做到只提供最小范围(可控可知)的入参,尽量避免出现缓存穿透的情况;<br>2.对于恶意的请求可以通过Nginx这些反向代理工具进行隔离,也可以通过业务网关进行隔离<br>3.做好对出现穿透后的异常检测和恢复机制,可以使用Hystrix进行限流和降级</p></li></ul><h4 id="Cache使用策略"><a class="header-anchor" href="#Cache使用策略"></a>Cache使用策略</h4><ol><li>查询步骤<br>user -&gt; cache -&gt; DB</li><li>更新步骤<br>user -&gt; DB(update) -&gt;cache(delete)<br>一般使用cache都是使用这种策略,这种策略可能出现的问题是一个操作持有修改前的数据,但是在另外一个操作对数据进行修改后才将数据放到cache中;这种问题出现的概念较低,可以为缓存设置失效时间来尽可能的避免影响范围.还有的设计方案是让cache直接去维护DB的数据修改核心思想就是将两个写操作入口合并成为一个,从而解决数据不一致问题;</li></ol><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p><a href="https://imgtu.com/i/c6a3Jx"><img src="https://z3.ax1x.com/2021/04/14/c6a3Jx.png" alt="总结"></a></p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://try.redis.io/">Redis在线教程</a><br><a href="https://my.oschina.net/u/4283481/blog/4133755">Redis(2)——跳跃表</a><br><a href="http://redisbook.com/">Redis 设计与实现</a><br><a href="https://www.processon.com/view/link/60767e21f346fb647a4e4ebd">思维导图地址</a><br><a href="https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">关于Redis分布式锁的争论</a><br><a href="https://redis.io/topics/distlock">使用Redis的分布式锁</a><br><a href="http://antirez.com/news/101">Redlock安全吗</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis的插件机制源代码解析</title>
      <link href="2018/04/23/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/4.mybatis%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
      <url>2018/04/23/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/4.mybatis%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1>MyBatis的插件机制源代码解析</h1><p>MyBatis插件机制主要从插件的执行流程来进行分析,分别是<B>查找/注册阶段</B>,<B>包装阶段</B>,<B>执行阶段</B>和<B>扩展点</B>来分析</p><h2 id="查找-注册MyBatis插件阶段"><a class="header-anchor" href="#查找-注册MyBatis插件阶段"></a>查找/注册MyBatis插件阶段</h2><ul><li>org.apache.ibatis.session.Configuration#addInterceptor</li></ul><p>是使用<B>Configuration#addInterceptor</B>将插件注册到<B>InterceptorChain</B>拦截器链上;</p><p>有两个种使用的方法:</p><ol><li><p>org.apache.ibatis.builder.xml.XMLConfigBuilder#pluginElement<br>通过解析XML配置文件中的<plugins>标签,获取到插件类名,在通过类名加载的方式</p></li><li><p>直接外部调用的方式,常见的MyBatis-plus就是通过这种方式来注册插件的<br><a href="https://github.com/baomidou/mybatis-plus/blob/786f25ec272a828c69d73e83c0485b8fe0f4a942/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/spring/MybatisSqlSessionFactoryBean.java#L508">MybatisSqlSessionFactoryBean.buildSqlSessionFactory()</a></p></li></ol><p>在通过xml配置文件进行加载时,会根据自定义的类加载器 -&gt; 默认类加载器 -&gt; 当前线程的类加载器 -&gt; ClassLoaderWrapper.getClassLoader() -&gt; 系统类加载器的顺序来尝试进行加载,这里比较特别;</p><h2 id="包装阶段"><a class="header-anchor" href="#包装阶段"></a>包装阶段</h2><p>将Interceptor注册到<B>InterceptorChain</B>拦截器链上之后,下一步就是将InterceptorChain与Executor进行关联;</p><ul><li>DefaultSqlSessionFactory_openSessionFromDataSource</li></ul><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/M-MyBatis/DefaultSqlSessionFactory_openSessionFromDataSource.png?raw=true" alt="DefaultSqlSessionFactory_openSessionFromDataSource.png"></p><p>我们以openSessionFromDataSource方法为例,在创建<B>Executor</B>的过程中会向Plugin.wrap(Executor);</p><p>下面我们详细分析Plugin.wrap()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plugin</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//wrap方法</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">></span><span class="token punctuation">></span></span> signatureMap <span class="token operator">=</span> <span class="token function">getSignatureMap</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> type <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token function">getAllInterfaces</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> signatureMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>          type<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          interfaces<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> interceptor<span class="token punctuation">,</span> signatureMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//invoke</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//signatureMap是目标执行器需要执行的插件方法</span>      <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">></span></span> methods <span class="token operator">=</span> signatureMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> methods<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Invocation</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Plugin实现<B>InvocationHandler</B>接口,重写<B>invoke</B>方法,invoke方法在<B>targer</B>对象执行方法时都会先进入invoke方法体,这样就为插件的执行提供了底层基础;</p><h2 id="执行阶段"><a class="header-anchor" href="#执行阶段"></a>执行阶段</h2><ul><li><p>声明插件<br>插件在声明时主要是使用<B>@Intercepts</B>和<B>@Signature</B>注解来对插件类进行描述,描述插件的作用域(类/方法)</p></li><li><p>执行过程</p></li></ul><ol><li><p>pluginAll<br>在<B>Configuration</B>中创建Handler后,立即执行pluginAll方法,可以看到分别为<B>ResultSetHandler</B>,<B>ParameterHandler</B>,<B>StatementHandler</B>,<B>Executor</B>四种</p></li><li><p>当Target class在执行时会先执行<B>Plugin.invoke</B>方法,就会执行<B>Interceptor.intercept</B>中的实现方法</p></li></ol><h2 id="扩展点"><a class="header-anchor" href="#扩展点"></a>扩展点</h2><p>在上面的执行步骤中可以看到<B><a href="https://github.com/mybatis/mybatis-3/blob/0d0223b2df3a53e4a0b2e2be1b990091bd149fd4/src/main/java/org/apache/ibatis/session/Configuration.java#L683">ResultSetHandler</a></B>,<B><a href="https://github.com/mybatis/mybatis-3/blob/0d0223b2df3a53e4a0b2e2be1b990091bd149fd4/src/main/java/org/apache/ibatis/session/Configuration.java#L677">ParameterHandler</a></B>,<B><a href="https://github.com/mybatis/mybatis-3/blob/0d0223b2df3a53e4a0b2e2be1b990091bd149fd4/src/main/java/org/apache/ibatis/session/Configuration.java#L690">StatementHandler</a></B>,<B><a href="https://github.com/mybatis/mybatis-3/blob/0d0223b2df3a53e4a0b2e2be1b990091bd149fd4/src/main/java/org/apache/ibatis/session/Configuration.java#L700">Executor</a></B>执行pluginAll方法;</p><ul><li><p>Executor<br>一个 SqlSession 对应一个 Executor 对象，Executor对象负责增删改查的具体操作;</p></li><li><p>ParameterHandler<br>mybatis 提供的参数处理器, 没有过多的类关联关系, 只有一个默认的实现类;</p></li><li><p>StatementHandler<br>StatementHandler是mybatis创建Statement的处理器, 会负责Statement的创建工作,主要是<B>SimpleStatementHandler</B>,<B>PrepareStatementHandler</B>,<B>CallableStatementHandler</B>组成;主要是进行适配JDBC的Statement创建和执行的工作</p></li><li><p>ResultSetHandler<br>ResultSetHandler 作用域只有一个, 那就是负责处理 Statement 返回的结果, 根据定义返回类型进行封装返回</p></li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/cf8e5178ca31">mybatis 四大核心组件</a><br><a href="https://www.cnblogs.com/tanghaorong/p/14094521.html#_label1">Mybatis3详解（十九）----SqlSession下的四大对象</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis方法重载问题</title>
      <link href="2018/04/18/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/3.mybatis%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
      <url>2018/04/18/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/3.mybatis%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1>mybatis方法重载问题</h1><p>在mapper接口中不能重载方法，网上解释大部分的原因是因为mybatis使用package+Mapper+method全限名作为key，在xml中去寻找唯一的sql来执行时候会发生冲突。<br>以上这样原因的解释是正确的，但是现在网上对这个结果的描述是在启动时会抛出异常，在<strong>mybatis-spring-boot-starter.2.1.0</strong>的版本中并未发现异常，查看源代码发现在解析xml时候逻辑修改成为，根据key解析出第一个sql语句并执行</p><ul><li>XPathParser</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">></span></span> <span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token class-name">Object</span> root<span class="token punctuation">,</span> <span class="token class-name">String</span> expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">></span></span> xnodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">NodeList</span> nodes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NodeList</span><span class="token punctuation">)</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token class-name">XPathConstants</span><span class="token punctuation">.</span>NODESET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    xnodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nodes<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> xnodes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>深入分析原因是由于mybatis-boot在启动的时候初始化<strong>SqlSessionFactory</strong>的方式为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解析好配置后进行初始化，并不是mybatis来进行配置文件的解析的，如果是mybatis进行配置文件的解析会在初始化的过程中抛出异常。</p><p>深入分析其实在mybatis中不应该定义方法的重载，重载的本质是方法签名不同从而产生不同的结果，但是在ORM中如果方法签名最好不要混用相同的方法名称。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis初始化流程</title>
      <link href="2018/04/16/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/2.mybatis%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/"/>
      <url>2018/04/16/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/2.mybatis%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>mybatis初始化流程</h1><p>mybatis初始化的过程主要分为<strong>加载mybatis-config.xml配置文件</strong>、<strong>加载 Mapper 映射配置文件</strong>、<strong>加载 Mapper 接口中的注解信息</strong></p><h2 id="加载mybatis-config-xml中的信息"><a class="header-anchor" href="#加载mybatis-config-xml中的信息"></a>加载<strong>mybatis-config.xml</strong>中的信息</h2><ol><li>解析配置mybatis-config.xml文件</li><li>创建<strong>DefaultSqlSessionFactory</strong>文件</li></ol><ul><li>流程图<br><img src="https://s1.ax1x.com/2020/04/16/JEFmpF.png" alt="JEFmpF.png"></li></ul><h2 id="加载Mapper映射文件"><a class="header-anchor" href="#加载Mapper映射文件"></a>加载<strong>Mapper</strong>映射文件</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis常见问题</title>
      <link href="2018/04/14/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/99.mybatis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>2018/04/14/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/99.mybatis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1>mybatis常见问题</h1><h2 id="MyBatis-编程步骤"><a class="header-anchor" href="#MyBatis-编程步骤"></a>MyBatis 编程步骤</h2><ol><li>创建<strong>SqlSessionFactoy</strong>对象</li><li>通过<strong>SqlSessionFactory</strong>获取<strong>SqlSession</strong>对象</li><li>通过<strong>SqlSession</strong>获取<strong>Mapper</strong>接口的代理对象</li><li>通过<strong>Mapper</strong>代理对象执行数据库操作</li><li>执行成功提交事务，失败则回滚</li><li>最后返回连接</li></ol><h2 id="和-的区别是什么？"><a class="header-anchor" href="#和-的区别是什么？"></a><strong>#{}</strong> 和 <strong>${}</strong> 的区别是什么？</h2><ol><li>**#{}**属性替换</li><li>**${}**参数占位符，采用的是预编译的方式</li></ol><h2 id="当实体类中的属性名和表中的字段名不一样-，怎么办？"><a class="header-anchor" href="#当实体类中的属性名和表中的字段名不一样-，怎么办？"></a>当实体类中的属性名和表中的字段名不一样 ，怎么办？</h2><ol><li>aslias 别名</li><li><resultMap>来设定字段对应实体的属性值</li><li>默认驼峰风格</li></ol><h2 id="XML-映射文件中，除了常见的-select-insert-update-delete标-签之外，还有哪些标签？"><a class="header-anchor" href="#XML-映射文件中，除了常见的-select-insert-update-delete标-签之外，还有哪些标签？"></a>XML 映射文件中，除了常见的 select | insert | update | delete标 签之外，还有哪些标签？</h2><ol><li><sql/>可被引用</li><li><cache/> 作为二级缓存的引入标签</li><li><cache-ref/></li><li><resultMap/></li><li><foreach/></li><li><if></li><li><where></li></ol><h2 id="Mybatis-动态-SQL-是做什么的？都有哪些动态-SQL-？能简述一下动态-SQL-的执行原理吗？"><a class="header-anchor" href="#Mybatis-动态-SQL-是做什么的？都有哪些动态-SQL-？能简述一下动态-SQL-的执行原理吗？"></a>Mybatis 动态 SQL 是做什么的？都有哪些动态 SQL ？能简述一下动态 SQL 的执行原理吗？</h2><p>动态sql指的是在xml中用xml标签编写动态sql<br><where>、<if>、<set>、<forEache></p><h2 id="最佳实践中，通常一个-XML-映射文件，都会写一个-Mapper-接口与之对应。请问，这个-Mapper-接口的工作原理是什么？Mapper-接口里的方法，参数不同时，方法能重载吗？"><a class="header-anchor" href="#最佳实践中，通常一个-XML-映射文件，都会写一个-Mapper-接口与之对应。请问，这个-Mapper-接口的工作原理是什么？Mapper-接口里的方法，参数不同时，方法能重载吗？"></a>最佳实践中，通常一个 XML 映射文件，都会写一个 Mapper 接口与之对应。请问，这个 Mapper 接口的工作原理是什么？Mapper 接口里的方法，参数不同时，方法能重载吗？</h2><p>Mapper接口的实现类是mybatis使用JDK Proxy自动生成的代理对象,代理对象会拦截接口方法。然后通过statement接口去执行具体的sql。<br>不能，如果重载会出现两种情况，自定义mybatis加载方式会始终执行第一个sql。使用SqlSessionFactory初始化会在启动时抛出异常</p><h2 id="Mapper接口绑定有几种实现方式-分别是怎么实现的"><a class="header-anchor" href="#Mapper接口绑定有几种实现方式-分别是怎么实现的"></a>Mapper接口绑定有几种实现方式,分别是怎么实现的?</h2><p>三种；1.xml绑定 2.在mappper接口中使用注解的形式 3.注解的方式并且通过javaConfig的形式</p><h2 id="Mybatis-的-XML-Mapper文件中，不同的-XML-映射文件，id-是否可以重复？"><a class="header-anchor" href="#Mybatis-的-XML-Mapper文件中，不同的-XML-映射文件，id-是否可以重复？"></a>Mybatis 的 XML Mapper文件中，不同的 XML 映射文件，id 是否可以重复？</h2><p>可以，但是不建议，因为是namespace + id的形式作为 Map&lt;String, MappedStatement&gt; 的 key 使用的</p><h2 id="如何获取自动生成的-主-键值"><a class="header-anchor" href="#如何获取自动生成的-主-键值"></a>如何获取自动生成的(主)键值?</h2><ol><li>useGeneratedKeys + keyProperty 属性</li><li><selectKey>的方式</li></ol><h2 id="Mybatis-执行批量插入，能返回数据库主键列表吗？"><a class="header-anchor" href="#Mybatis-执行批量插入，能返回数据库主键列表吗？"></a>Mybatis 执行批量插入，能返回数据库主键列表吗？</h2><p>可</p><h2 id="在-Mapper-中如何传递多个参数"><a class="header-anchor" href="#在-Mapper-中如何传递多个参数"></a>在 Mapper 中如何传递多个参数?</h2><ol><li>用对象传参</li><li>用map穿参</li><li>用**@Param**</li></ol><h2 id="Mybatis-是否可以映射-Enum-枚举类？"><a class="header-anchor" href="#Mybatis-是否可以映射-Enum-枚举类？"></a>Mybatis 是否可以映射 Enum 枚举类？</h2><p>可，使用<strong>TypeHandler</strong></p><h2 id="Mybatis-都有哪些-Executor-执行器？它们之间的区别是什么？"><a class="header-anchor" href="#Mybatis-都有哪些-Executor-执行器？它们之间的区别是什么？"></a>Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？</h2><ol><li>SimpleExecutor每次执行一次update或者select操作，就创建一个statement对象，用完就关闭</li><li>ReuseExecutor通过Map&lt;String,Statement&gt;进行缓存的对象</li><li>BatchExecutor</li><li>cacheExecutor</li></ol><h2 id="MyBatis-如何执行批量插入"><a class="header-anchor" href="#MyBatis-如何执行批量插入"></a>MyBatis 如何执行批量插入?</h2><ol><li>使用batch进行插入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span>BATCH<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Mapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>itemDO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用<xml>标签进行拼接的方式<br><forEach></forEach></li></ol><p>尽量使用batch的方式</p><h2 id="介绍-MyBatis-的一级缓存和二级缓存的概念和实现原理？"><a class="header-anchor" href="#介绍-MyBatis-的一级缓存和二级缓存的概念和实现原理？"></a>介绍 MyBatis 的一级缓存和二级缓存的概念和实现原理？</h2><p>一级缓存是在session范围内的<br>二级缓存是在application中的<br>二级缓存的局限性较大，功能上和缓存中间件有部分冲突，适用于小型单体项目。</p><h2 id="Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？"><a class="header-anchor" href="#Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？"></a>Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？</h2><p>不会</p><h2 id="Mybatis-能否执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。"><a class="header-anchor" href="#Mybatis-能否执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。"></a>Mybatis 能否执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。</h2><p>可</p><ol><li>一种是单独发送一个 SQL 去查询关联对象，赋给主对象，然后返回主对象</li><li>另一种是使用嵌套查询，嵌套查询的含义为使用 join 查询，一部分列是 A 对象的属性值，另外一部分列是关联对象 B 的属性值</li></ol><h2 id="简述-Mybatis-的插件运行原理？以及如何编写一个插件？"><a class="header-anchor" href="#简述-Mybatis-的插件运行原理？以及如何编写一个插件？"></a>简述 Mybatis 的插件运行原理？以及如何编写一个插件？</h2><h2 id="使用mybatis进行更新的流程是上面？"><a class="header-anchor" href="#使用mybatis进行更新的流程是上面？"></a>使用mybatis进行更新的流程是上面？</h2><ol><li>查询<strong>cacheExecutor</strong>判断二级缓存中是否有缓存存在缓存进行刷新</li><li>调用<strong>BaseExecutor</strong>方法执行update语句（模板方法：在BaseExecutor中先清空一级缓存，再调用具体的执行对象）</li><li>具体的执行对象创建<strong>configuration</strong>对象，通过configuration对象创建<strong>statementHandle</strong>r对象返回执行器</li><li>执行器使用statement对象进行参数赋值</li></ol><h2 id="Mybatis-是如何进行分页的？分页插件的原理是什么？"><a class="header-anchor" href="#Mybatis-是如何进行分页的？分页插件的原理是什么？"></a>Mybatis 是如何进行分页的？分页插件的原理是什么？</h2><p>PageHelper<br>通过statement中解析sql并进行拦截，从而实现分页</p><h2 id="MyBatis-与-Hibernate-有哪些不同？"><a class="header-anchor" href="#MyBatis-与-Hibernate-有哪些不同？"></a>MyBatis 与 Hibernate 有哪些不同？</h2><p>Hibernate是面向对象的ORM框架不鼓励你去写定制化的sql，而是面向数据库对象去进行CRUD的操作</p><h2 id="JDBC-编程有哪些不足之处，MyBatis是如何解决这些问题的？"><a class="header-anchor" href="#JDBC-编程有哪些不足之处，MyBatis是如何解决这些问题的？"></a>JDBC 编程有哪些不足之处，MyBatis是如何解决这些问题的？</h2><p>sql在代码中不易维护</p><h2 id="Mybatis-比-IBatis-比较大的几个改进是什么？"><a class="header-anchor" href="#Mybatis-比-IBatis-比较大的几个改进是什么？"></a>Mybatis 比 IBatis 比较大的几个改进是什么？</h2><p>不会</p><h2 id="Mybatis-映射文件中，如果-A-标签通过-include-引用了B标签的内容，请问，B-标签能否定义在-A-标签的后面，还是说必须定义在A标签的前面？"><a class="header-anchor" href="#Mybatis-映射文件中，如果-A-标签通过-include-引用了B标签的内容，请问，B-标签能否定义在-A-标签的后面，还是说必须定义在A标签的前面？"></a>Mybatis 映射文件中，如果 A 标签通过 include 引用了B标签的内容，请问，B 标签能否定义在 A 标签的后面，还是说必须定义在A标签的前面？</h2><p>不会</p><h2 id="简述-Mybatis-的-XML-映射文件和-Mybatis-内部数据结构之间的映射关系？"><a class="header-anchor" href="#简述-Mybatis-的-XML-映射文件和-Mybatis-内部数据结构之间的映射关系？"></a>简述 Mybatis 的 XML 映射文件和 Mybatis 内部数据结构之间的映射关系？</h2><p>xml文件会解析到configuation对象中</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis源代码分析(一)</title>
      <link href="2018/04/14/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/1.mybatis%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/"/>
      <url>2018/04/14/11.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/1.mybatis%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1>mybatis源代码分析(一)</h1><p>在近两年的工作中一直是在适用的是mybatis框架，进行数据库的相关操作。这次来进行对mybatis源代码的一个学习。回想一下第一份工作时还使用的是ibatis，着实有一些岁月了。下面来一步一步的进行分析</p><h2 id="调试环境的搭建"><a class="header-anchor" href="#调试环境的搭建"></a>调试环境的搭建</h2><p>参照芋大的代码，在设置maven的时候需要指定中央仓库这样稍微快一点</p><p>使用<strong>org.apache.ibatis.autoconstructor.AutoConstructorTest</strong>进行测试,也可以查看github上的源代码<a href="https://github.com/mybatis/mybatis-3/blob/aa22f9ec1c48639c5db252e34b8809ee93ce3ef4/src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java#L36">地址</a></p><h2 id="核心基础组件"><a class="header-anchor" href="#核心基础组件"></a>核心基础组件</h2><p>核心的基础组件：<B>SqlSessionFactory和SqlSession</B>,<B>Configuration</B>,<B>Executor</B>,<B>MapperProxyFactory和MapperProxy</B>,<B>Plugin</B></p><p>这四大组件是注册Mybatis框架重要的基础组件,下面就详细来进行分析;</p><ol><li><strong>SqlSession</strong>是抽象处理出来为JDBC生成的Connection对象的SqlSession对象，这样才能与数据库开启“沟通”，通过SqlSession可以实现增删改查的接口</li></ol><p><img src="https://s1.ax1x.com/2020/04/16/JEVXRK.png" alt="JEVXRK.png"></p><ul><li>默认实现<strong>DefaultSqlSession</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span>NO_RESULT_HANDLER<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的代码可以看出，sql的执行是交给了<strong>executor</strong>对象去执行的，该对象是<strong>SqlSession</strong>的一个属性。该属性是在<strong>SqlSession</strong>对象的构造方法中传入的。继续延着调用链查看调用者</p><ol start="2"><li><strong>SqlSessionFactory</strong>是获取<strong>SqlSession</strong>的的接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">SqlSession</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// may have fetched a connection so lets call close()</span>    <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述代码中可以看到<strong>executor</strong>对象是通过<strong>comfiguration</strong>对象获取到的。稍后分析<strong>connfiguration</strong>时进行分析该方法。</p><ol start="3"><li><strong>SqlSessionManager</strong>是组合<strong>SqlSession</strong>和<strong>SqlSessionFactory</strong>的工具类。通过这个类可以直接对数据库进行操作。该类会复用<strong>SqlSessionManager的localSqlSession</strong>的逻辑。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入分析BeanWrapper</title>
      <link href="2018/03/24/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/19.%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90BeanWrapper/"/>
      <url>2018/03/24/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/19.%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90BeanWrapper/</url>
      
        <content type="html"><![CDATA[<h1>深入分析BeanWrapper</h1><p><strong>BeanWrapper</strong>是一个从BeanDefinition到Bean直接的中间产物</p><blockquote><p>可以访问属性的通用型接口（例如对象的 bean 属性或者对象中的字段），作为 BeanWrapper 的基础接口</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析BeanFactoryPostProcessor</title>
      <link href="2018/03/24/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/18.%E5%88%86%E6%9E%90BeanFactoryPostProcessor/"/>
      <url>2018/03/24/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/18.%E5%88%86%E6%9E%90BeanFactoryPostProcessor/</url>
      
        <content type="html"><![CDATA[<h1>分析BeanFactoryPostProcessor</h1><p><strong>BeanFactoryPostProcessor</strong>是在注册完成<strong>BeanDifinition</strong>后执行的接口，该接口就只有一个方法<strong>postProcessBeanFactory</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="子类PropertyPlaceholderConfigurer"><a class="header-anchor" href="#子类PropertyPlaceholderConfigurer"></a>子类PropertyPlaceholderConfigurer</h2><p><strong>PropertyPlaceholderConfigurer</strong>已过时</p><p><strong>PropertyResourceConfigurer</strong>帮着处理好属性后传入子类的方法进行执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Properties</span> mergedProps <span class="token operator">=</span> <span class="token function">mergeProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Convert the merged properties, if necessary.</span><span class="token function">convertProperties</span><span class="token punctuation">(</span>mergedProps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Let the subclass process the properties.</span><span class="token function">processProperties</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> mergedProps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInitializationException</span><span class="token punctuation">(</span><span class="token string">"Could not load properties"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要用法是用于不同的环境注入不同的环境参数，在springBoot中可以用<strong>envAbstractEnvironment</strong>来进行替代</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的生命周期</title>
      <link href="2018/03/23/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/17.Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2018/03/23/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/17.Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1>Bean的生命周期</h1><p>先上一张流程图</p><p><img src="https://s1.ax1x.com/2020/03/23/8HBWTA.png" alt="8HBWTA.png"></p><p>从图中可以看出初始化bean的流程主要分为</p><ol><li>实例化Bean</li><li>Aware、BeanProcessor处理</li><li>bean自己的init方法</li><li>注销bean时执行destroy-method方法</li></ol><h2 id="实例化Bean"><a class="header-anchor" href="#实例化Bean"></a>实例化Bean</h2><p>实例化bean主要是用<strong>BeanWrapperImpl</strong>,其主要作用是对这个Bean进行包装。Bean的初始化主要是根据策略模式来进行选择是用JDK的动态代理或CGLib的动态代理来实现。关键代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** Strategy for creating bean instances. */</span><span class="token keyword">private</span> <span class="token class-name">InstantiationStrategy</span> instantiationStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibSubclassingInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">protected</span> <span class="token class-name">BeanWrapper</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Object</span> beanInstance<span class="token punctuation">;</span>               <span class="token keyword">final</span> <span class="token class-name">BeanFactory</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   beanInstance <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>                           <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token class-name">BeanWrapper</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span>beanInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> bw<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                       mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在这里<strong>getInstantiationStrategy()</strong>，通过获取指定的动态代理策略来进行实例化</p></blockquote><ul><li>如何指定使用JDK的proxy？</li></ul><blockquote><p>spring5中貌似没有找到</p></blockquote><h2 id="使用Aware接口"><a class="header-anchor" href="#使用Aware接口"></a>使用Aware接口</h2><p><strong>Aware</strong>接口是一个具有具有感知能力的接口，其主要的子类分别是<strong>BeanNameAware</strong>、<strong>BeanClassLoaderAware</strong>、<strong>BeanFactoryAware</strong>接口，以上三个接口的方法都是在实例化完成后调用<strong>invokeAware</strong>实现</p><h2 id="BeanPostProcessor增强"><a class="header-anchor" href="#BeanPostProcessor增强"></a>BeanPostProcessor增强</h2><p><strong>BeanPostProcessor</strong>是bean的增强器，是spring容器用于增强全部bean的类。主要是初始化的前置方法和后置方法，主要的子类是<strong>InstantiationAwareBeanPostProcessorAdapter</strong>在初始化前就对bean进行一个预处理，以便进行特殊处理</p><h2 id="init-method"><a class="header-anchor" href="#init-method"></a>init-method()</h2><p>init-method表示的是bean自身定义的初始化方法，只会作用于bean本身的方法。执行时机是在属性赋值后进行执行。主要有</p><ol><li><strong>InitializingBean接口</strong></li><li><strong>@init-method注解</strong></li><li><strong>@PostConstruct</strong>，底层的实现是依赖于<strong>BeanPostProcessor</strong></li></ol><h2 id="DisposableBean"><a class="header-anchor" href="#DisposableBean"></a>DisposableBean</h2><p>销毁方法</p><h1>总结</h1><p>Bean初始化的过程如下：</p><ol start="0"><li>InstantiationAwareBeanPostProcessor的前置方法</li><li>实列化<br>1.1 根据实例化策略选择进行JDK反射或者CGlib反射<br>1.2 执行InstantiationAwareBeanPostProcessor的后置方法<br>1.3 bean的属性进行赋值</li><li>Aware接口处理</li><li>BeanProcessors接口的前置处理</li><li>init-method方法进行处理</li><li>BeanProcessors接口的后置处理</li><li>销毁方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InitializingBean扩展点分析</title>
      <link href="2018/03/21/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/16.InitializingBean%E6%89%A9%E5%B1%95%E7%82%B9%E5%88%86%E6%9E%90/"/>
      <url>2018/03/21/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/16.InitializingBean%E6%89%A9%E5%B1%95%E7%82%B9%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>InitializingBean扩展点分析</h1><p>上面两篇分别分析了扩展点<strong>aware</strong>、<strong>BreaProcessesor</strong>，接下来继续分析<strong>InitializingBean</strong></p><h2 id="代码示例"><a class="header-anchor" href="#代码示例"></a>代码示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>代码演示<br><img src="https://s1.ax1x.com/2020/03/21/8W8Ptf.png" alt="8W8Ptf.png"></li></ul><ol><li>InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation()</li><li>InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation()</li><li>InstantiationAwareBeanPostProcessor.postProcessProperties()</li><li>BeanPostProcessor.postProcessBeforeInitialization()</li><li>InitializingBean.afterPropertiesSet()</li><li>@Init-Method.initMethhod()</li><li>BeanPostProcessor.postProcessAfterInstantiation()</li></ol><blockquote><p><strong>@PostConstruct</strong>方法底层还是依赖于<strong>BeanPostProcess接口</strong>因此应该是在4-5之间进行执行</p></blockquote><h2 id="执行过程"><a class="header-anchor" href="#执行过程"></a>执行过程</h2><ul><li>调用方法</li></ul><ol><li><p><strong>populateBean</strong><br><img src="https://s1.ax1x.com/2020/03/21/8Wetij.png" alt="8Wetij.png"></p></li><li><p><strong>initializeBean</strong>方法</p></li></ol><p><img src="https://s1.ax1x.com/2020/03/21/8WeEZD.png" alt="8WeEZD.png"></p><p><strong>InitializingBean</strong>接口是一个作用域为当前bean的接口，通过在初始化完成属性后进行执行</p><p>在<strong>initializeBean</strong>方法比较的重要分别执行了<strong>Awarea</strong>、<strong>BeanPostProcess</strong>的后置方法、<strong>invokeInitMethods</strong>方法</p><p>这三个扩展接口整体的执行流程就是<br><strong>Instantiation</strong> -&gt; <strong>BeanPostProcessor.beafore</strong> -&gt; <strong>InitializingBean</strong> -&gt; <strong>@Init-Method</strong> -&gt; <strong>BeanPostProcessor.after</strong></p><p>总结：<br><strong>InitializingBean</strong>是作为初始化对象过程赋值完毕后执行的初始化方法</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanPostProcessor扩展点分析</title>
      <link href="2018/03/20/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/15.BeanPostProcessor%E6%89%A9%E5%B1%95%E7%82%B9%E5%88%86%E6%9E%90/"/>
      <url>2018/03/20/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/15.BeanPostProcessor%E6%89%A9%E5%B1%95%E7%82%B9%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>BeanPostProcessor扩展点分析</h1><blockquote><p>BeanPostProcess接口是在Bean完成实例化后，如果我们要对所有的加载bean进行一些处理或增加配置的接口</p></blockquote><ul><li>BeanPostProcessor.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果</li></ul><p><a href="https://imgchr.com/i/8RTugf"><img src="https://s1.ax1x.com/2020/03/21/8RTugf.png" alt="8RTugf.png"></a></p><p>可以看出<strong>BeanPostprocessor</strong>会对每一个bean在初始化前后进行处理</p><h2 id="处理机制"><a class="header-anchor" href="#处理机制"></a>处理机制</h2><p><img src="https://s1.ax1x.com/2020/03/21/8RvFDx.png" alt="8RvFDx.png"></p><blockquote><p>在完成属性装配之后执行<strong>initializeBean</strong>方法</p></blockquote><p><a href="https://imgchr.com/i/8RvtPg"><img src="https://s1.ax1x.com/2020/03/21/8RvtPg.md.png" alt="8RvtPg.md.png"></a></p><p>注意在这里的<strong>getBeanPostProcessors()<strong>并没有选择某些特定的BeanPostProcessor来执行；<br>在装配属性的</strong>populateBean</strong>方法中会指定执行接口，如下所示：<br><img src="https://s1.ax1x.com/2020/03/21/8RzUun.png" alt="8RzUun.png"></p><h2 id="BeanPostProcessor加载时机"><a class="header-anchor" href="#BeanPostProcessor加载时机"></a>BeanPostProcessor加载时机</h2><p>在<strong>AbstractApplicationContext</strong>刷新容器的过程中会执行<strong>registerBeanPostProcessors</strong>方法.这个方法的目的就是将<strong>BeanPostProcessors</strong>子类注册到BeanFactory中，其中还会实现<strong>priority</strong>、<strong>order</strong>等功能进行排序<br><a href="https://s1.ax1x.com/2020/03/21/8WSfMj.png">8WSfMj.png</a></p><h2 id="常用的BeanPostProcessor子类"><a class="header-anchor" href="#常用的BeanPostProcessor子类"></a>常用的BeanPostProcessor子类</h2><table><thead><tr><th>类名</th><th>作用</th></tr></thead><tbody><tr><td>InstantiationAwareBeanPostProcessorAdapter</td><td>实例化后进行初始化前后执行（可以对属性的装配进行控制）</td></tr><tr><td>ServletContextAwareProcessor</td><td>对servletContext进行处理</td></tr><tr><td>ApplicationContextAwareProcessor</td><td>对容器工具类进行赋值操作，以便后续进行使用（例如注入环境变量这些）</td></tr></tbody></table><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><ol><li><strong>BeanPostProcessor</strong> 的作用域是容器级别的，它只和所在的容器相关 ，当 <strong>BeanPostProcessor</strong> 完成注册后，它会应用于所有跟它在同一个容器内的 bean 。</li><li><strong>BeanFactory</strong> 和 <strong>ApplicationContext</strong> 对 <strong>BeanPostProcessor</strong> 的处理不同，ApplicationContext 会自动检测所有实现了 <strong>BeanPostProcessor</strong> 接口的 bean，并完成注册，但是使用 BeanFactory 容器时则需要手动调用 <strong>AbstractBeanFactory#addBeanPostProcessor(BeanPostProcessor beanPostProcessor)</strong> 方法来完成注册</li><li><strong>ApplicationContext</strong> 的 <strong>BeanPostProcessor</strong> 支持 Ordered，而 BeanFactory 的 <strong>BeanPostProcessor</strong> 是不支持的，原因在于ApplicationContext 会对 <strong>BeanPostProcessor</strong> 进行 Ordered 检测并完成排序，而 BeanFactory 中的 <strong>BeanPostProcessor</strong> 只跟注册的顺序有关。</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aware接口扩展点的分析</title>
      <link href="2018/03/20/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/14.Aware%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95%E7%82%B9%E7%9A%84%E5%88%86%E6%9E%90/"/>
      <url>2018/03/20/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/14.Aware%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95%E7%82%B9%E7%9A%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>Aware接口扩展点的分析</h1><p><strong>aware</strong>字面上的意思为感知，在spring中就是感知容器、bean的时机并进行自定义扩展的</p><h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2><p><img src="https://s1.ax1x.com/2020/03/20/86lLsf.png" alt="86lLsf.png"></p><h2 id="常用的Aware"><a class="header-anchor" href="#常用的Aware"></a>常用的Aware</h2><table><thead><tr><th>类名</th><th>作用</th></tr></thead><tbody><tr><td>LoadTimeWeaverAware</td><td>加载Spring Bean时织入第三方模块，如AspectJ</td></tr><tr><td>BeanClassLoaderAware</td><td>加载Spring Bean的类加载器</td></tr><tr><td>BootstrapContextAware</td><td>资源适配器BootstrapContext，如JCA,CCI</td></tr><tr><td>ResourceLoaderAware</td><td>底层访问资源的加载器</td></tr><tr><td>BeanFactoryAware</td><td>声明BeanFactory</td></tr><tr><td>PortletConfigAware</td><td>PortletConfig</td></tr><tr><td>PortletContextAware</td><td>PortletContext</td></tr><tr><td>ServletConfigAware</td><td>ServletConfig</td></tr><tr><td>ServletContextAware</td><td>ServletContext</td></tr><tr><td>MessageSourceAware</td><td>国际化</td></tr><tr><td>ApplicationEventPublisherAware</td><td>应用事件</td></tr><tr><td>NotificationPublisherAware</td><td>JMX通知</td></tr><tr><td>BeanNameAware</td><td>声明Spring Bean的名字</td></tr></tbody></table><h2 id="如何实现"><a class="header-anchor" href="#如何实现"></a>如何实现</h2><ul><li>AbstractAutowireCapableBeanFactory</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Aware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ClassLoader</span> bcl <span class="token operator">=</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bcl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span>bcl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在初始化bean的时候判断bean是否是aware子类本进行回调。对于其他aware子类也应该一样是在设定的业务回调点进行回调。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建bean的流程</title>
      <link href="2018/03/19/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/13.%E5%88%9B%E5%BB%BAbean%E7%9A%84%E6%B5%81%E7%A8%8B/"/>
      <url>2018/03/19/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/13.%E5%88%9B%E5%BB%BAbean%E7%9A%84%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>创建bean的流程</h1><p>通过上面几个流程的分析，终于来到了spring初始化bean的流程了。在这个过程中主要的功能有实列化bean对象、加载到缓存、前后置处理;</p><h2 id="创建流程"><a class="header-anchor" href="#创建流程"></a>创建流程</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//1.处理BeanDefinition</span>        <span class="token class-name">RootBeanDefinition</span> mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 尝试从BeanPostProcessors返回代理类对象</span>        <span class="token comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建bean</span>        <span class="token class-name">Object</span> beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建流程主要分为以下三步：</p><ol><li>对BeanDifinition属性在加载前进行处理<br>1.1 解析指定 BeanDefinition 的 class<br>1.2 处理override属性</li><li>尝试在创建前调用前置处理返回bean<br>2.1 主要是调用<strong>InstantiationAwareBeanPostProcessor</strong>接口(提前返回代理类，AOP就是基于此)</li><li>开始初始化bean</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">&#123;</span><span class="token comment">// Instantiate the bean.</span><span class="token class-name">BeanWrapper</span> instanceWrapper <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//构造方法初始化bean对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token class-name">Object</span> bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解决单列模式循环加载bean，提前将初始化中的bean放入正在初始化的map中</span><span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span><span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Initialize the bean instance.</span>        <span class="token comment">//初始化bean对象</span><span class="token class-name">Object</span> exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//对bean进行填充将各个属性值注入，可能存在依赖于其他bean的属性</span><span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//调用初始化方法</span>exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//解决循环依赖问题</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> earlySingletonReference <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonReference <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">==</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>exposedObject <span class="token operator">=</span> earlySingletonReference<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowRawInjectionDespiteWrapping <span class="token operator">&amp;&amp;</span> <span class="token function">hasDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dependentBeans <span class="token operator">=</span> <span class="token function">getDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> actualDependentBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>dependentBeans<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dependentBean <span class="token operator">:</span> dependentBeans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">removeSingletonIfCreatedForTypeCheckOnly</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>actualDependentBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Register bean as disposable.</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//注册bean</span><span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//返回</span><span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>单列模式下清除容器</li><li>构造方法初始化bean对象</li><li>属性装配调用初始化方法</li><li>解决循环依赖</li><li>注册、返回bean</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的加载1</title>
      <link href="2018/03/19/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/12.Bean%E7%9A%84%E5%8A%A0%E8%BD%BD/"/>
      <url>2018/03/19/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/12.Bean%E7%9A%84%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1>Bean的加载</h1><p>Spring Ioc容器就是以某种方式加载配置文件并创建相应的对象进行绑定形成一个可取可存的容器。</p><p>spring在实现过程中分为两个阶段：</p><ol><li>容器初始化阶段</li><li>加载bean阶段</li></ol><h2 id="容器初始化阶段"><a class="header-anchor" href="#容器初始化阶段"></a>容器初始化阶段</h2><ol><li>通过某种方式(<strong>ResourceLoadle</strong>)将配置文件(Resource)加载</li><li>通过<strong>BeanDefinitionReader</strong>将配置文件转换为BeanDefinition</li><li>通过<strong>BeanDefinitionRegistry</strong>将BeanDefinition注册到容器中</li><li>Ioc容器开始进行初始化</li></ol><h2 id="加载bean阶段"><a class="header-anchor" href="#加载bean阶段"></a>加载bean阶段</h2><ol><li>调用**BeanFactory.getBean(…)**进行bean加载</li><li>初始化Bean完成之后进行缓存或原型模式</li></ol><h1>doGetBean(…)方法</h1><p>**doGetBean(…)**方法是bean加载的核心方法，主要有以下几个流程：</p><h2 id="核心流程"><a class="header-anchor" href="#核心流程"></a>核心流程</h2><ol><li>对BeanName的处理</li></ol><blockquote><p>通过对传入的beanName进行处理获取到真实的beanName</p></blockquote><ol start="2"><li>尝试从已加载的容器中获取</li></ol><blockquote><p>如果容器中已经存在bean，那么就直接进行返回</p></blockquote><ol start="3"><li>对原型模式循环依赖的检查</li><li>尝试通过ParentBeanFacoty返回bean</li><li>标记bean正在进行创建</li><li>处理循环依赖</li></ol><blockquote><p>通过标记 beanName -&gt; 依赖的beanNames，递归进行判断是否存在递归关系；如果存在递归关系 -&gt; 处理循环依赖</p></blockquote><ol start="8"><li>不同作用域下的实例化</li></ol><blockquote><p>createBean(…)</p></blockquote><ol start="9"><li>对返回结果进行类型转化</li></ol><h2 id="循环依赖"><a class="header-anchor" href="#循环依赖"></a>循环依赖</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性依赖</li></ul><ol><li>加载A类，尝试从缓存或正在加载的集合中获取,由于第一次初始化肯定是取不到的</li><li>由于缓存中没有bean，A类进行初始化</li><li>A类初始化完成需要装配属性，装配属性的时候发现依赖的B还未进行加载，就执行加载B类的动作</li><li>B类重复1，2，3，在执行3时，发现依赖于A,那么就将会从正在执行的加载Map对象中去获取A类</li><li>B类加载成功-&gt;A类继续加载</li></ol><ul><li>@DependsOn</li></ul><blockquote><p>@DependsOn是指定其他bean要在当前bean初始化之前进行加载；并且不能有循环依赖的场景出现</p></blockquote><ol><li>A类依赖于B类，A类初始化到这里时会去加载B类，</li><li>如果B类依赖于A类，那么就会先调用一次getBean(“A”)，这里是不要求有返回结果</li></ol><h2 id="bean初始化的细节"><a class="header-anchor" href="#bean初始化的细节"></a>bean初始化的细节</h2><h3 id="Singleton-scope"><a class="header-anchor" href="#Singleton-scope"></a>Singleton scope</h3><ol><li>再次检查缓存中是否有bean</li><li>初始化bean的前置处理</li><li>**singletonFactory.getObject();**初始化bean</li><li>初始化bean的后置处理</li><li>放入缓存及处理<br>5.1 【put】singletonObjects 属性，单例 bean 的缓存。<br>5.2 【remove】singletonFactories 属性，单例 bean Factory 的缓存。<br>5.3 【remove】earlySingletonObjects 属性，“早期”创建的单例 bean 的缓存。<br>5.4 【add】registeredSingletons 属性，已经注册的单例缓存。</li></ol><h3 id="prototype-scope"><a class="header-anchor" href="#prototype-scope"></a>prototype scope</h3><ol><li>初始化bean的前置处理</li><li>**createBean();**初始化bean</li><li>初始化bean的后置处理</li></ol><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>Bean的加载的加载主要分为两个大流程：</p><ol><li>容器环境的初始化<br>1.1 资源文件加载<br>1.2 资源文件 -&gt; BeanDefinition<br>1.3 注册BeanDefinition<br>2.Bean的初始化<br>2.1 对注册的BeanDefinition的再次处理(属性合并、加载顺序等)<br>2.2 加载Bean(解决循环依赖、前置后置操作、初始化bean)</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring的BeanDefinition体系</title>
      <link href="2018/03/18/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/11.spring%E7%9A%84BeanDefinition%E4%BD%93%E7%B3%BB/"/>
      <url>2018/03/18/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/11.spring%E7%9A%84BeanDefinition%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1>spring的BeanDefinition体系</h1><p>BeanDefinition是作为记录Bean的原始信息。读取完成配置文件后就要将配置文件解析为<strong>BeanDefinition</strong>。我们来分析一一下这个流程</p><h2 id="bean的元数据"><a class="header-anchor" href="#bean的元数据"></a>bean的元数据</h2><ul><li>BeanDefinition -&gt; bean的元数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> SCOPE_SINGLETON <span class="token operator">=</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span>SCOPE_SINGLETON<span class="token punctuation">;</span><span class="token class-name">String</span> SCOPE_PROTOTYPE <span class="token operator">=</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span>SCOPE_PROTOTYPE<span class="token punctuation">;</span><span class="token keyword">int</span> ROLE_APPLICATION <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ROLE_SUPPORT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> ROLE_INFRASTRUCTURE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//设置父定义的名称</span><span class="token keyword">void</span> <span class="token function">setParentName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> parentName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getParentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置BeanClassName</span><span class="token keyword">void</span> <span class="token function">setBeanClassName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置作用域</span><span class="token keyword">void</span> <span class="token function">setScope</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置加载时间</span><span class="token keyword">void</span> <span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> lazyInit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置依赖</span><span class="token keyword">void</span> <span class="token function">setDependsOn</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> dependsOn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置是否自动装配</span><span class="token keyword">void</span> <span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置是否是自动装配的首选对象</span><span class="token keyword">void</span> <span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> primary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置BeanFactory名称</span><span class="token keyword">void</span> <span class="token function">setFactoryBeanName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> factoryBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getFactoryBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置调用BeanFacory的指定方法</span><span class="token keyword">void</span> <span class="token function">setFactoryMethodName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> factoryMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getFactoryMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回bean构造方法的参数</span><span class="token class-name">ConstructorArgumentValues</span> <span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">hasConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取属性值</span><span class="token class-name">MutablePropertyValues</span> <span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">hasPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置初始化方法</span><span class="token keyword">void</span> <span class="token function">setInitMethodName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> initMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getInitMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置销毁方法</span><span class="token keyword">void</span> <span class="token function">setDestroyMethodName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getDestroyMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置bean的角色</span><span class="token keyword">void</span> <span class="token function">setRole</span><span class="token punctuation">(</span><span class="token keyword">int</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置bean的描述信息</span><span class="token keyword">void</span> <span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回资源的描述信息</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取原始的BeanDefinition信息</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">BeanDefinition</span> <span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>BeanDefinition</strong>继承两个接口<strong>AttributeAccessor</strong>、<strong>BeanMetadataElement</strong></p><ul><li>AttributeAccessor</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AttributeAccessor</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">Object</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">attributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>AttributeAccessor</strong>定义了一系列有关属性的操作接口</p><ul><li>BeanMetadataElement</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanMetadataElement</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">Object</span> <span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>BeanMetadataElement</strong>返回原始文件信息</p><ul><li>子类</li></ul><p><img src="https://s1.ax1x.com/2020/03/18/8D1wJx.png" alt="8D1wJx.png"></p><ul><li><p><strong>AbstractBeanDefinition</strong>抽象出文件定义的BeanDefintion</p></li><li><p><strong>AnnotatedBeanDefinition</strong>基于注解的BeanDefinition</p></li></ul><h2 id="BeanDefinition的加载器"><a class="header-anchor" href="#BeanDefinition的加载器"></a>BeanDefinition的加载器</h2><p>AnnotatedBeanDefinitionReader -&gt; BeanDefinition的加载器</p><ul><li>BeanDefinitionReader.java</li></ul><blockquote><p>BeanDefinitionReader ，主要定义资源文件读取并转换为 BeanDefinition 的各个功能。 from 《Spring 源码深度解析》</p></blockquote><p>现在普遍使用注解的方式来加载bean，因此用<strong>AnnotatedBeanDefinitionReader</strong>来分析加载资源的流程</p><ul><li>AnnotatedBeanDefinitionReader.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">doRegisterBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> annotatedClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> instanceSupplier<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> qualifiers<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionCustomizer</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> definitionCustomizers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">AnnotatedGenericBeanDefinition</span> abd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>annotatedClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>abd<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>abd<span class="token punctuation">.</span><span class="token function">setInstanceSupplier</span><span class="token punctuation">(</span>instanceSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ScopeMetadata</span> scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>abd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>qualifiers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">></span></span> qualifier <span class="token operator">:</span> qualifiers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Primary</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>abd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Lazy</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>abd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>abd<span class="token punctuation">.</span><span class="token function">addQualifier</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutowireCandidateQualifier</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionCustomizer</span> customizer <span class="token operator">:</span> definitionCustomizers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>definitionHolder <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册代码主要分为两步</p><ol><li>创建<strong>AnnotatedGenericBeanDefinition</strong>,set各种属性</li><li>注册BeanDefinition<br>其中注册<strong>registerBeanDefinition</strong>使用的是模板模式，根据不同的实现向注册BeanDefinition时进行不同的操作和检查</li></ol><h2 id="BeanDefinition的注册器"><a class="header-anchor" href="#BeanDefinition的注册器"></a>BeanDefinition的注册器</h2><p>在上一步的结尾，通过调用<strong>BeanDefinitionReaderUtils.registerBeanDefinition</strong>实际上调用的是<strong>BeanDefinitionRegistry.registerBeanDefinition</strong></p><p>注册BeanDefinition的过程其实就向<strong>beanDefinitionMap</strong>中添加元素的</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p><strong>BeanDefinition</strong>作为bean定义的元数据，通过<strong>BeanDefinitionReader</strong>来进行加载。可以从文件、注解等地方加载定义。最后通过<strong>BeanDefinitionRegistry</strong>将<strong>BeanDefinitionReader</strong>加载进<strong>beanDefinitionMap</strong>中。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring中资源的加载</title>
      <link href="2018/03/17/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/10.spring%E4%B8%AD%E8%B5%84%E6%BA%90%E7%9A%84%E5%8A%A0%E8%BD%BD/"/>
      <url>2018/03/17/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/10.spring%E4%B8%AD%E8%B5%84%E6%BA%90%E7%9A%84%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1>spring中资源的加载</h1><p>对于资源的加载这个场景首先要划分<strong>边界</strong>,spring抽象出两个组件：<strong>Resource</strong>、<strong>ResourceLoader</strong></p><h2 id="Resource接口"><a class="header-anchor" href="#Resource接口"></a>Resource接口</h2><p><strong>Resource</strong>是对资源的一种抽象，提供一系列操作文件的方法</p><h3 id="定义"><a class="header-anchor" href="#定义"></a>定义</h3><ul><li>resource.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Resource</span> <span class="token keyword">extends</span> <span class="token class-name">InputStreamSource</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//文件是否存在</span>    <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件是否可读</span>    <span class="token keyword">boolean</span> <span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件是否打开</span>    <span class="token keyword">boolean</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回统一资源定位器(URL)</span>    <span class="token class-name">URL</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token comment">//返回URI</span>    <span class="token class-name">URI</span> <span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token comment">//返回文件</span>    <span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token comment">//文件最后修改时间</span>    <span class="token keyword">long</span> <span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token comment">//文件文件相对路径</span>    <span class="token class-name">Resource</span> <span class="token function">createRelative</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token comment">//返回文件名称</span>    <span class="token class-name">String</span> <span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回文件描述</span>    <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子类"><a class="header-anchor" href="#子类"></a>子类</h3><table><thead><tr><th>类名</th><th>作用</th></tr></thead><tbody><tr><td>FileSystemResource</td><td>对 java.io.File 类型资源的封装</td></tr><tr><td>ByteArrayResource</td><td>对字节数组提供的数据的封装</td></tr><tr><td>UrlResource</td><td>对 java.net.URL类型资源的封装</td></tr><tr><td>ClassPathResource</td><td>class path 类型资源的实现。使用给定的 ClassLoader 或者给定的 Class 来加载资源</td></tr><tr><td>InputStreamResource</td><td>将给定的 InputStream 作为一种资源的 Resource 的实现类</td></tr></tbody></table><h3 id="AbstractResource"><a class="header-anchor" href="#AbstractResource"></a>AbstractResource</h3><p><strong>AbstractResource</strong>是Resource的默认抽象类，实现了大部分公共方法；</p><h2 id="ResourceLoader"><a class="header-anchor" href="#ResourceLoader"></a>ResourceLoader</h2><p><strong>ResourceLoader</strong>定义如何加载Resource的接口</p><h3 id="定义-v2"><a class="header-anchor" href="#定义-v2"></a>定义</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">&#123;</span><span class="token comment">/** Pseudo URL prefix for loading from the class path: "classpath:". */</span><span class="token class-name">String</span> CLASSPATH_URL_PREFIX <span class="token operator">=</span> <span class="token class-name">ResourceUtils</span><span class="token punctuation">.</span>CLASSPATH_URL_PREFIX<span class="token punctuation">;</span><span class="token class-name">Resource</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Resource getResource(String location)<br>根据地址返回Resource,不保证文件是否存在，因此需要调用**exists()**进行判断</p></li><li><p>getClassLoader()<br>getClassLoader() 方法，返回 ClassLoader 实例</p></li></ul><h3 id="DefaultResourceLoader-java"><a class="header-anchor" href="#DefaultResourceLoader-java"></a>DefaultResourceLoader.java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Resource</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token string">"Location must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 首先通过ProtocolResolver来加载</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolResolver</span> protocolResolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>protocolResolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Resource</span> resource <span class="token operator">=</span> protocolResolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> resource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//2. 用ClassPathResource加载</span><span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">getResourceByPath</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>CLASSPATH_URL_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>CLASSPATH_URL_PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//3. 尝试用FileUrlResource或UrlResource进行加载</span><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ResourceUtils</span><span class="token punctuation">.</span><span class="token function">isFileURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FileUrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>            <span class="token comment">//4. url类型加载不到，继续使用ClassPathResource方式进行加载</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// No URL -> resolve as resource path.</span><span class="token keyword">return</span> <span class="token function">getResourceByPath</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ProtocolResolver"><a class="header-anchor" href="#ProtocolResolver"></a>ProtocolResolver</h4><p><strong>ProtocolResolver</strong>用户自定义协议资源解决策略</p><h4 id="代码演示"><a class="header-anchor" href="#代码演示"></a>代码演示</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResourceLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Resource</span> fileResource1 <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"D:/text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Resource</span> fileResource2 <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Resource</span> urlResource1 <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"file:/Users/text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Resource</span> urlResource2 <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fileResource1.class = "</span> <span class="token operator">+</span> fileResource1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fileResource2.class = "</span> <span class="token operator">+</span> fileResource1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"urlResource1.class = "</span> <span class="token operator">+</span> urlResource1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"urlResource2.class = "</span> <span class="token operator">+</span> urlResource2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果</li></ul><p><img src="https://s1.ax1x.com/2020/03/18/8dJXjg.png" alt="8dJXjg.png"></p><p>由于fileResource1资源不存在，因此抛出异常，使用<strong>ClassPathResource</strong>来加载资源</p><h3 id="FileSystemResourceLoader"><a class="header-anchor" href="#FileSystemResourceLoader"></a>FileSystemResourceLoader</h3><p><strong>FileSystemResourceLoader</strong>是对file文件的加载的优化</p><ul><li>getResourceByPath(String path)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Resource</span> <span class="token function">getResourceByPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResourceLoader<span class="token punctuation">.</span>FileSystemContextResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对<strong>getResourceByPath</strong>方法针对file的<strong>重写</strong>,自然返回的都是<strong>FileSystemContextResource</strong>类型的Resource</p><h3 id="ClassRelativeResourceLoader"><a class="header-anchor" href="#ClassRelativeResourceLoader"></a>ClassRelativeResourceLoader</h3><ul><li>getResourceByPath(String path)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Resource</span> <span class="token function">getResourceByPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassRelativeContextResource</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ClassRelativeResourceLoader</strong>是针对加载ClassPathResource子类ClassRelativeContextResource文件的重写</p><h3 id="ResourcePatternResolver"><a class="header-anchor" href="#ResourcePatternResolver"></a>ResourcePatternResolver</h3><p><strong>ResourcePatternResolver</strong>是针对ResourceLoader的增强，定义返回多个Resource的方法</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><ol><li>srping通过设计出抽象的资源(Resource)和资源加载器(ResourceLoader)让加载资源这个业务场景，变的更加的边界清晰和松耦合</li><li><strong>AbstrctResource</strong>是Resource的抽象实现类，实现了Resource大部分接口，使用模板方法</li><li><strong>DefaultResourceLoader</strong>是ResourceLoader默认实现，实现了最级别的方法资源的方法，并提供了一些公共接口为子类的扩展提供便利。</li><li><strong>PathMatchingResourcePatternResolver</strong>实现了<strong>ResourcePatternResolver</strong>（一个允许返回多个资源文件的ResourceLoder接口）,是一个比较完整的ResourceLoader</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring源代码基础和组件</title>
      <link href="2018/03/17/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/9.spring%E6%BA%90%E4%BB%A3%E7%A0%81%E5%9F%BA%E7%A1%80%E5%92%8C%E7%BB%84%E4%BB%B6/"/>
      <url>2018/03/17/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/9.spring%E6%BA%90%E4%BB%A3%E7%A0%81%E5%9F%BA%E7%A1%80%E5%92%8C%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1>spring的IoC理解</h1><p><strong>IoC</strong>名词含义指的是<strong>控制反转</strong>或<strong>依赖注入</strong>，但是本质上指的是我们在不同的类中相互依赖的不是类本身，而是不同的类提供出来的不同服务，本质是依赖于服务。由于业务处理逻辑本身是一种<strong>无状态</strong>的处理过程，因此不该使用者去关心服务提供者的生命周期(创建、初始化、销毁),使用者关心于提供的服务本身。<strong>IoC</strong>本质上就是去控制类的生命周期，让开发者关注于服务本身的工具。</p><h1>注入方式</h1><p>从上一个问题又引出这一个问题，IoC容器管理着类的生命周期，但是IoC容器不知道应该将管理的类是服务于那种业务场景下。因此就需要我们将管理的类<strong>注入</strong>到业务类中。spring常用的三种注入方式</p><ol><li>@Autowired，自动装配注入，基于反射</li><li>构造器注入</li><li>setter方法注入</li></ol><h1>spring的组件</h1><p>（图自:<a href="http://singleant.iteye.com/blog/1177358%EF%BC%89">http://singleant.iteye.com/blog/1177358）</a></p><p><img src="https://s1.ax1x.com/2020/03/17/8dekeU.jpg" alt="8dekeU.jpg"></p><h2 id="Resource-体系"><a class="header-anchor" href="#Resource-体系"></a>Resource 体系</h2><p><img src="https://s1.ax1x.com/2020/03/17/8defXV.jpg" alt="8defXV.jpg"></p><p>org.springframework.core.io.Resource，<strong>对资源的抽象</strong>。它的每一个实现类都代表了一种资源的访问策略，如 ClassPathResource、RLResource、FileSystemResource等</p><h2 id="ResourceLoader-体系"><a class="header-anchor" href="#ResourceLoader-体系"></a>ResourceLoader 体系</h2><p><img src="https://s1.ax1x.com/2020/03/17/8devnK.png" alt="8devnK.png"></p><p>org.springframework.core.io.ResourceLoader定义了<strong>统一资源加载</strong>的方法</p><h2 id="BeanFactory-体系"><a class="header-anchor" href="#BeanFactory-体系"></a>BeanFactory 体系</h2><p>org.springframework.beans.factory.BeanFactory是spring最底层定义如何操作bean的接口,<strong>AbstractBeanFactory</strong>内部持有一个<strong>ConcurrentHashMap</strong>来保存name和BeanDefinition之间的映射</p><h2 id="BeanDefinition-体系"><a class="header-anchor" href="#BeanDefinition-体系"></a>BeanDefinition 体系</h2><p><a href="https://imgchr.com/i/8dnjoD"><img src="https://s1.ax1x.com/2020/03/17/8dnjoD.png" alt="8dnjoD.png"></a><br><strong>BeanDefinition</strong>用于描述bean的元数据</p><h2 id="BeanDefinitionReader-体系"><a class="header-anchor" href="#BeanDefinitionReader-体系"></a>BeanDefinitionReader 体系</h2><p><img src="https://s1.ax1x.com/2020/03/17/8duKln.png" alt="8duKln.png"></p><p>org.springframework.beans.factory.support.BeanDefinitionReader 的作用是读取 Spring 的配置文件的内容，并将其转换成 Ioc 容器内部的数据结构 ：BeanDefinition</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring调试环境搭建</title>
      <link href="2018/03/17/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/8.spring%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>2018/03/17/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/8.spring%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1>spring调试环境搭建</h1><h2 id="环境依赖"><a class="header-anchor" href="#环境依赖"></a>环境依赖</h2><ul><li>Gradle</li><li>Git</li><li>JDK1.8+</li></ul><h2 id="clone"><a class="header-anchor" href="#clone"></a>clone</h2><p>跳过，下载后导入idea会自动使用Gradle来<strong>Build</strong>项目</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">gradlew :spring-oxm:compileTestJava<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id=""><a class="header-anchor" href="#"></a></h2>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring JDBC持久化设计</title>
      <link href="2018/03/13/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/7.spring%20JDBC%E6%8C%81%E4%B9%85%E5%8C%96%E8%AE%BE%E8%AE%A1/"/>
      <url>2018/03/13/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/7.spring%20JDBC%E6%8C%81%E4%B9%85%E5%8C%96%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1>spring JDBC持久化设计</h1><p>spring中大量运用到<strong>模板模式</strong>，简单回顾一下模板模式就是</p><blockquote><p>抽象类中定义好产品的步骤，不同的子类去实现相同的步骤方法，客户端调用抽象类的方法，执行统一的产品步骤，从而返回结果有点类似于桥接模式的一半，将建造过程抽象出来，形成统一的模板方法。可以使用钩子方法改造模板方法流程，从而增加健壮性。</p></blockquote><h2 id="JdbcTemplate分析"><a class="header-anchor" href="#JdbcTemplate分析"></a>JdbcTemplate分析</h2><h3 id="使用代码"><a class="header-anchor" href="#使用代码"></a>使用代码</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8080spring:  profiles:  active: dev  datasource:    username: root    password: 111111    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;tables?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT    driver-class-name: com.mysql.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserDO.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserRowMapper.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRowMapper</span> <span class="token keyword">implements</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDO</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDO</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserDO</span> userDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDO<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"pass_word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userDO<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserServiceImpl.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDO</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from t_user where id = ? "</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDO</span><span class="token punctuation">></span></span> stu <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDO</span> student <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stu<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            student <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">UserDO</span> userDO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span><span class="token string">"insert into student(id,user_name,pass_word) values(null,?,?)"</span><span class="token punctuation">;</span>        <span class="token class-name">KeyHolder</span> keyHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratedKeyHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> resRow <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PreparedStatementCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">PreparedStatement</span> <span class="token function">createPreparedStatement</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>userDO<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>userDO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ps<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>keyHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>keyHolder<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Test.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserDO</span> user <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserDO</span> userDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDO<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> userId <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**private JdbcTemplate jdbcTemplate;**是由JdbcTemplateAutoConfiguration加载到容器中的；</p><ul><li><p><strong>JdbcTemplate</strong>实现了JdbcAccessor、JdbcOperations接口<br><img src="https://s1.ax1x.com/2020/03/16/8Yb6aR.png" alt="8Yb6aR.png"></p></li><li><p>query</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatementCreator</span> psc<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> <span class="token class-name">PreparedStatementSetter</span> pss<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ResultSetExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> rse<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>rse<span class="token punctuation">,</span> <span class="token string">"ResultSetExtractor must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Executing prepared SQL query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">execute</span><span class="token punctuation">(</span>psc<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PreparedStatementCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">doInPreparedStatement</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pss <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pss<span class="token punctuation">.</span><span class="token function">setValues</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> rse<span class="token punctuation">.</span><span class="token function">extractData</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">closeResultSet</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pss <span class="token keyword">instanceof</span> <span class="token class-name">ParameterDisposer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterDisposer</span><span class="token punctuation">)</span> pss<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cleanupParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>execute</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatementCreator</span> psc<span class="token punctuation">,</span> <span class="token class-name">PreparedStatementCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> action<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>ps <span class="token operator">=</span> psc<span class="token punctuation">.</span><span class="token function">createPreparedStatement</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">applyStatementSettings</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">T</span> result <span class="token operator">=</span> action<span class="token punctuation">.</span><span class="token function">doInPreparedStatement</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">handleWarnings</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psc <span class="token keyword">instanceof</span> <span class="token class-name">ParameterDisposer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterDisposer</span><span class="token punctuation">)</span> psc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cleanupParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">closeStatement</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>execute</strong>是一个模板方法，将<strong>connection</strong>的获取和关闭抽象出来作为执行，传入的action作为扩展实现的方法。</p><h2 id="Connection"><a class="header-anchor" href="#Connection"></a>Connection</h2><p><strong>Connection</strong>是通过DataSourceUtils.getConnection(DataSource dataSource)来获取的</p><ul><li>doGetConnection</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">doGetConnection</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">"No DataSource specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConnectionHolder</span> conHolder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConnectionHolder</span><span class="token punctuation">)</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>conHolder <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>conHolder<span class="token punctuation">.</span><span class="token function">hasConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> conHolder<span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>conHolder<span class="token punctuation">.</span><span class="token function">requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conHolder<span class="token punctuation">.</span><span class="token function">hasConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Fetching resumed JDBC Connection from DataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conHolder<span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token function">fetchConnection</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> conHolder<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Else we either got no holder or an empty thread-bound holder here.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Fetching JDBC Connection from DataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token function">fetchConnection</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// Use same Connection for further JDBC actions within the transaction.</span><span class="token comment">// Thread-bound object will get removed by synchronization at transaction completion.</span><span class="token class-name">ConnectionHolder</span> holderToUse <span class="token operator">=</span> conHolder<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>holderToUse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>holderToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>holderToUse<span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>holderToUse<span class="token punctuation">.</span><span class="token function">requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">registerSynchronization</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionSynchronization</span><span class="token punctuation">(</span>holderToUse<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>holderToUse<span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>holderToUse <span class="token operator">!=</span> conHolder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> holderToUse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Unexpected exception from external delegation call -> close Connection and rethrow.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> con<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TransactionSynchronizationManager.resource</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"Transactional resources"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>resource是一个线程变量,当同一个线程尝试获取jdbc Connection时返回的是同一个Connection<br>当Connection获取不到时就会从DataSource中获取新的jdbc连接，并放到resource中</p><h2 id="事务"><a class="header-anchor" href="#事务"></a>事务</h2><p>spring中<strong>事务传播级别</strong>分为</p><p>支持当前事务的情况:</p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRED</strong>: 如果当前存在事务,则加入该事务;如果当前没有事务,则创建一个新的事务。</li><li><strong>TransactionDefinition.PROPAGATION_SUPPORTS</strong>: 如果当前存在事务,则加入该事务;如果当前没有事务,则以非事务的方式继续运行。</li><li><strong>TransactionDefinition.PROPAGATION_MANDATORY</strong>: 如果当前存在事务,则加入该事务;如果当前没有事务,则抛出异常。(mandatory:强制性)</li></ul><p>不支持当前事务的情况:</p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW</strong>: 创建一个新的事务,如果当前存在事务,则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</strong>: 以非事务方式运行,如果当前存在事务,则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NEVER</strong>: 以非事务方式运行,如果当前存在事务,则抛出异常。</li></ul><p>其他情况:</p><ul><li><strong>TransactionDefinition.PROPAGATION_NESTED</strong>: 如果当前存在事务,则创建一个事务作为当前事务的嵌套事务来运行;如果当前没有事务,则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p>spring中<strong>事务隔离级别</strong>分为</p><ul><li><strong>TransactionDefinition.ISOLATION_DEFAULT</strong>: 使用后端数据库默认的隔离级别,Mysql 默认采用的<strong>REPEATABLE_READ</strong>隔离级别 Oracle 默认采用的 <strong>READ_COMMITTED</strong>隔离级别。</li><li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</strong>: 最低的隔离级别,允许读取尚未提交的数据变更,可能会导致脏读、幻读或不可重复读。</li><li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED</strong>: 允许读取并发事务已经提交的数据,可以阻止脏读,但是幻读或不可重复读仍有可能发生。</li><li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ</strong>: 对同一字段的多次读取结果都是一致的,除非数据是被本身事务自己所修改,可以阻止脏读和不可重复读,但幻读仍有可能发生。</li><li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE</strong>: 最高的隔离级别,完全服从ACID的隔离级别。所有的事务依次逐个执行,这样事务之间就完全不可能产生干扰,也就是说,该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><h2 id="事务的远行原理"><a class="header-anchor" href="#事务的远行原理"></a>事务的远行原理</h2><ul><li><p>TransactionAspectSupport<br><strong>TransactionAspectSupport</strong> implements BeanFactoryAware, InitializingBean<br>这里有两个比较重要的方法</p></li><li><p>TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);<br>createTransactionIfNecessary() -&gt; AbstractPlatformTransactionManager.getTransaction(txAttr) -&gt; doBegin(transaction, definition)</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  txObject<span class="token punctuation">.</span><span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Switching JDBC Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"] to manual commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在doBegin方法中获取到设置一个<strong>con.setAutoCommit(false);</strong></p><ul><li>completeTransactionAfterThrowing(txInfo, ex);</li></ul><p><strong>completeTransactionAfterThrowing(txInfo, ex)</strong> -&gt; <strong>txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())</strong> -&gt;<strong>processRollback(defStatus, false)</strong> -&gt;<strong>doRollback</strong></p><p>调用<strong>AbstractPlatformTransactionManager</strong>的doRollback方法执行的回滚，这里使用的也是模板模式不同的连接方式有不同的回滚逻辑，例如<strong>DataSourceTransactionManager</strong>的回滚方法就是调用<strong>con.rollback()</strong>（数据库驱动程序的rollback）</p><h2 id="如何织入的？"><a class="header-anchor" href="#如何织入的？"></a>如何织入的？</h2><p>spring容器在启动的时候会将 @Transactional注解标注的方法先进行一个配置解析，再进行一个aop的增强，当执行这个方法时候会先执行aop的方法开启事务，通过反射将目标方法执行完毕后在通过结过进行对应的一个处理</p><h1>总结：</h1><ul><li><p>Spring基于ThreadLocal解决有状态的Connetion的并发问题，事务同步管理器org.springframework.transaction.support.TransactionSynchronizationManager使用ThreadLocal为不同事务线程提供独立的资源副本</p></li><li><p>Spring事务管理基于3个接口：TransactionDefinition，TransactionStatus和PlatformTransactionManager</p></li></ul><p><strong>TransactionDefinition</strong>定义了传播级别和隔离级别</p><p><strong>TransactionStatus</strong>定义了事务的状态</p><p><strong>PlatformTransactionManager</strong>实现了事务的执行方法</p><ul><li>注意点</li></ul><ol><li>注解不能被继承，所以业务接口中的@Transactional注解不会被业务实现类继承；方法处的注解会覆盖类定义处的注解</li><li>对于基于接口动态代理的AOP事务，由于接口方法都是public的，实现类的实现方法必须是public的，同时不能使用static修饰符。因此，可以通过接口动态代理实施AOP增强、实现Spring事务的方法只能是public或public final的</li><li>基于CGLib动态代理实施AOP的时候，由于使用final、static、private的方法不能被子类覆盖，相应的，这些方法不能实施AOP增强，实现事务</li><li>不能被Spring进行AOP事务增强的方法不能启动事务，但是外层方法的事务上下文仍然可以传播到这些方法中</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring MVC分析</title>
      <link href="2018/03/12/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/6.spring%20MVC%E5%88%86%E6%9E%90/"/>
      <url>2018/03/12/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/6.spring%20MVC%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>spring MVC分析</h1><p>本章主要分析一下spring MVC的过程，主要从一下几个方面：</p><h2 id="spring-MVC概述"><a class="header-anchor" href="#spring-MVC概述"></a>spring MVC概述</h2><p>如果要在web环境中使用IOC容器，需要spring IOC设计一个启动过程把web容器导入。在这个过程中一方面<strong>处理Web容器的启动</strong>，另一方面通过设计特定的web容器拦截器将IOC容器加载到web环境中进行初始化。</p><ul><li>web.xml文件描述</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>spring mvc 配置文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath*:/spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过在web.xml文件中</p><ol><li>定义一个<strong>DispatcherServlet</strong>并且拦截所有请求</li><li>向ServletContext注册参数文件为<strong>applicationContext.xml</strong></li><li>注册监听器<strong>ContextLoaderListener</strong><br>通过这样的设置<strong>ServletContext</strong>就为spring IOC 提供了一个宿主环境。IOC容器通过<strong>ContextLoaderListener</strong>的初始化来建立，IOC容器初始化完成后，利用<strong>DispatcherServlet</strong>作为Spring MVC处理请求的转发器，来转发HTTP请求。</li></ol><h2 id="初始化过程"><a class="header-anchor" href="#初始化过程"></a>初始化过程</h2><ul><li>ContextLoaderListener是初始化Spring IOC容器的关键，类图如下</li></ul><p><img src="https://s1.ax1x.com/2020/03/12/8m7l28.png" alt="8m7l28.png"></p><ul><li><p>ServletContextListener是Servlet规范中定义的接口</p></li><li><p>ContextLoader是spring用来进行初始化的类</p></li><li><p>ContextLoaderListener代码,调用ContextLoader进行初始化</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ContextLoader代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize context because there is already a root application context present - "</span> <span class="token operator">+</span><span class="token string">"check whether you have multiple ContextLoader* definitions in your web.xml!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//省略代码...</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// Store context in local instance variable, to guarantee that</span><span class="token comment">// it is available on ServletContext shutdown.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ConfigurableWebApplicationContext</span> cwac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//上下文尚未刷新->提供诸如设置父上下文，设置应用程序上下文ID等服务。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 上下文实例是在没有显式父级的情况下注入的-> 确定根Web应用程序上下文的父级（如果有）</span><span class="token class-name">ApplicationContext</span> parent <span class="token operator">=</span> <span class="token function">loadParentContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">,</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>            <span class="token comment">//省略代码</span>servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>initWebApplicationContext主要是创建<strong>WebApplicationContext</strong>对象并进行初始化设置上下文环境，然后在将<strong>WebApplicationContext</strong>对象放到<strong>servletContext</strong>域中</p><ul><li>createWebApplicationContext方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> sc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> contextClass <span class="token operator">=</span> <span class="token function">determineContextClass</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Custom context class ["</span> <span class="token operator">+</span> contextClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"] is not of type ["</span> <span class="token operator">+</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>determineContextClass(sc)方法获取到是param中设置的<em>contextClass</em>,默认是返回<strong>WebApplicationContext.class</strong></li></ul><p>默认定义的是XmlWebApplicationContext.class</p><pre class="line-numbers language-none"><code class="language-none">org.springframework.web.context.WebApplicationContext&#x3D;org.springframework.web.context.support.XmlWebApplicationContext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>**BeanUtils.instantiateClass(contextClass)**返回XmlWebApplicationContext</li></ul><p>初始化完成上下文对象后会去调用<strong>configureAndRefreshWebApplicationContext</strong>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span> wac<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> sc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//省略代码...</span>    wac<span class="token punctuation">.</span><span class="token function">setServletContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">customizeContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span> wac<span class="token punctuation">)</span><span class="token punctuation">;</span>    wac<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这一步骤中，将<strong>ServletContext</strong>对象设置在了ApplicationContext中，并且进行了**refresh()**方法</p><h2 id="DispatcherServlet分析"><a class="header-anchor" href="#DispatcherServlet分析"></a>DispatcherServlet分析</h2><p><strong>DispatcherServlet</strong>作为一个前端控制器，所有的Web请求都需要通过它来处理，进行转发、匹配、数据处理后返回</p><h3 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h3><ol><li>在Servlet的初始化过程中，Servlet的init方法会被调用，DispatcherServlet执行初始化</li><li>DispatcherServlet持有的IoC容器的初始化过程，创建<strong>DispatcherServlet</strong>持有的上下文，该上下文是web应用上下文的子下文，因为getBean方法会先检索父上下文对象获取bean</li></ol><h3 id="Dispatcher过程"><a class="header-anchor" href="#Dispatcher过程"></a>Dispatcher过程</h3><ul><li><p><strong>Dispatcher</strong>是利用<strong>HandlerMapping</strong>可以持有一系列从URL请求到Controller的映射，通过URL路径在handleMap中获取到handler对象</p></li><li><p>doDispatch方法是DispatcherServlet完成Disp*atcher的主要方法，包括</p></li></ul><ol><li>准备ModelAndView*</li><li>调用getHandler来响应HTTP请求</li><li>执行Handler的处理来得到返回的ModelAndView结果，</li><li>最后把这个ModelAndView对象交给相应的视图对象去呈现</li></ol><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><ol><li>通过<strong>ContextLoaderListener</strong>实现servlert接口，加载webApplicationContex，reflesh IOC容器</li><li>初始化<strong>DispatcherServlet</strong>对象作为webApplicationContex的子容器</li><li>初始化HandlerMapping得到url对应的handler之间的映射关系</li><li>通过servlet拦截请求转发到<strong>DispatcherServlet</strong>上执行**doDispatch()*<em>方法<br>4.1. 准备ModelAndView</em><br>4.2. 调用getHandler来响应HTTP请求<br>4.3. 执行Handler的处理来得到返回的ModelAndView结果，<br>4.4. 最后把这个ModelAndView对象交给相应的视图对象去呈现</li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><ul><li>Spring技术内幕——深入解析Spring架构与设计原理（第2版）</li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP源代码分析</title>
      <link href="2018/03/10/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/5.AOP%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2018/03/10/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/5.AOP%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>AOP源代码分析</h1><p>阅读spring的源代码，来查看spring是如何实现AOP增强的</p><h2 id="被AOP代理的Bean对象创建过程"><a class="header-anchor" href="#被AOP代理的Bean对象创建过程"></a>被AOP代理的Bean对象创建过程</h2><p>在普通bean的加载流程中，如果一个bean是被AOP拦截增强后<strong>doCreateBean</strong>方法返回的是CGLib动态代理类生成的对象</p><ul><li>CGLib动态代理对象</li></ul><p><img src="https://s1.ax1x.com/2020/03/11/8Ejz79.png" alt="doCreateBean"></p><ul><li>未被AOP增强的对象</li></ul><p><img src="https://s1.ax1x.com/2020/03/11/8EvDjU.png" alt="doCreateBean"></p><p>可以得出结论,spring是在bean的创建时期对bean就进行了增强。我们继续往下看</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这里创建出bean对象，继续向下看代码,<strong>initializeBean</strong>这个方法对bean创建后进行了后置操作后返回的是CGLib动态代理后的对象。跟踪方法到了<strong>applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)</strong>,在这里完成了动态代理。</p><p><strong>applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)<strong>方法分析这个方法主要是执行</strong>BeanPostProcessor.postProcessAfterInitialization</strong>这个方法，其中在初始化时候会执行<strong>AnnotationAwareAspectJAutoProxyCreator</strong>这个实现类</p><ul><li>类图</li></ul><p><img src="https://s1.ax1x.com/2020/03/11/8ViR1A.png" alt="8ViR1A.png"></p><p>从类图可以看到这个类的<strong>postProcessAfterInitialization</strong>方法是父类<strong>AbstractAutoProxyCreator</strong>的方法</p><ul><li>postProcessAfterInitialization实现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>wrapIfNecessary方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> cacheKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Create proxy if we have advice.</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> DO_NOT_PROXY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> proxy<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wrapIfNecessary方法首先返回了目标对象需要增强的拦截器<br><img src="https://s1.ax1x.com/2020/03/11/8VkGRJ.png" alt="8VkGRJ.png"><br>如果目标对象有需要增强的拦截器，执行创建proxy的程序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors<span class="token punctuation">,</span> <span class="token class-name">TargetSource</span> targetSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">AutoProxyUtils</span><span class="token punctuation">.</span><span class="token function">exposeTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ProxyFactory</span> proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxyFactory<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proxyFactory<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldProxyTargetClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>proxyFactory<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">evaluateProxyInterfaces</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Advisor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> advisors <span class="token operator">=</span> <span class="token function">buildAdvisors</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvisors</span><span class="token punctuation">(</span>advisors<span class="token punctuation">)</span><span class="token punctuation">;</span>proxyFactory<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span>targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">customizeProxyFactory</span><span class="token punctuation">(</span>proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>proxyFactory<span class="token punctuation">.</span><span class="token function">setFrozen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>freezeProxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">advisorsPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>proxyFactory<span class="token punctuation">.</span><span class="token function">setPreFiltered</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token function">getProxyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>暴露目标的原始属性</li><li>创建ProxyFactory对象</li><li>获取到目标对象的<strong>Advisor</strong></li><li>最后使用<strong>proxyFactory.getProxy</strong>来进行一个初始化工作，底层调用JDK的动态代理或者是CGLib的动态代理</li></ol><h2 id="AOP的底层原理"><a class="header-anchor" href="#AOP的底层原理"></a>AOP的底层原理</h2><p>通过JDK或者CGLib生成不同的AopProxy对象，从而构造了不同的回调方法来对拦截器链进行调用。<br>拦截器的调用调用的过程都是在ReflectiveMethodInvocation中通过proceed方法实现的。在proceed方法中，会逐个运行拦截器的拦截方法。在运行拦截器的拦截方法之前，需要对代理方法完成一个匹配判断，通过这个匹配判断来决定拦截器是否满足切面增强的要求。如果方法符合要求进行通知增强，依次调用拦截器链上的拦截器依次直到最后一个拦截器调用完毕执行目标方法</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>spring实现AOP的方式是在bean初始化过程中，一个<strong>BeanPostProcessor</strong>接口的<strong>postProcessAfterInitialization</strong>方法对bean进行一个处理。<strong>AbstractAutoProxyCreator</strong>是实际进行aop拦截增强的类，执行步骤依次是<br>1.暴露目标类的原始属性<br>2. 创建ProxyFactory对象<br>3. 获取到目标对象的<strong>Advisor</strong><br>4. 使用JDK或CGLib生成代理对象</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP简单使用</title>
      <link href="2018/03/10/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/4.AOP%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2018/03/10/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/4.AOP%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>AOP简单使用</h1><h2 id="AOP术语"><a class="header-anchor" href="#AOP术语"></a>AOP术语</h2><ul><li><strong>通知(Advice)</strong></li></ul><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>前置通知</td><td>在目标方法调用之前执行通知功能</td></tr><tr><td>后置通知</td><td>在目标方法调用之后执行通知功能</td></tr><tr><td>返回通知</td><td>在目标成功执行之后调用通知</td></tr><tr><td>异常通知</td><td>在目标返回抛出异常后调用通知</td></tr><tr><td>环绕通知</td><td>通知包裹被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</td></tr></tbody></table><ul><li><p><strong>连接点</strong><br>连接点是应用执行过程中能够插入切面的一个点。切面代码可以利用这些点将切面插入到正常流程中</p></li><li><p><strong>切点</strong><br>切点的定义会匹配通知所要织入的一个或多个连接点。通常用明确的类或方法名称或者是正则表达式定义所匹配的类和方法来指定切点</p></li><li><p><strong>切面</strong><br>切面是通知和切点的结合。通知和切点定义了切面的全部内容</p></li><li><p><strong>引入</strong><br>引入允许我们向现有的类添加新方法或属性</p></li><li><p><strong>织入</strong><br>织入是把切面应用到目标对象并创建新的代理对象的过程。织入可以在<strong>编译器</strong>、<strong>类加载期</strong>、<strong>运行期</strong></p></li></ul><h2 id="AOP示例"><a class="header-anchor" href="#AOP示例"></a>AOP示例</h2><ul><li>切点</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example.springdemo.interfaces.impl.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>前置通知</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"performance()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">silenceCellPhones</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Silencing cell phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>后置通知</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"performance()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">silenceCellPhones</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Silencing cell phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>-环绕通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"performance()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aroundMethod</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//执行目标方法</span>    joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-返回通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"performance()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">applause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"CLAP CLAP CLAP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>-异常通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"performance()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demandRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Demanding a refund"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增强类型"><a class="header-anchor" href="#增强类型"></a>增强类型</h2><h3 id="前置增强"><a class="header-anchor" href="#前置增强"></a>前置增强</h3><ul><li>接口<strong>org.springframework.aop.MethodBeforeAdvice</strong></li></ul><h3 id="后置增强"><a class="header-anchor" href="#后置增强"></a>后置增强</h3><ul><li>接口<strong>org.springframework.aop.AfterReturningAdvice</strong></li></ul><h3 id="环绕增强"><a class="header-anchor" href="#环绕增强"></a>环绕增强</h3><ul><li>接口<strong>org.springframework.aop.MethodMatcher</strong></li></ul><h3 id="异常增强"><a class="header-anchor" href="#异常增强"></a>异常增强</h3><ul><li><p>接口<strong>org.springframework.aop.ThrowsAdvice</strong></p></li><li><p>Advice*Impl</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterAdviceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 执行后置增强 : "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AroundAdviceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" around advice: before "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"around advice: after "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeforeAdviceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 执行前置增强 : "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionAdviceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ThrowsAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" throws exception, method="</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"throws exception, message="</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ServiceTest.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行主函数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdviceMainApp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ProxyFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeforeAdviceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AroundAdviceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AfterAdviceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExceptionAdviceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServiceTest</span> serviceTest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServiceTest</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceTest<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果<br><img src="https://s2.ax1x.com/2020/03/11/8F5eDU.png" alt="8F5eDU.png"></li></ul><p>通过<strong>ProxyFactory</strong>通过<strong>setTarget()<strong>设置目标对象，通过</strong>addAdvice</strong>添加增强器形成增强链，在代理类执行方法时会执行增强器</p><h2 id="切点表达式"><a class="header-anchor" href="#切点表达式"></a>切点表达式</h2><p>spring aop中只是用到AspectJ语法中的一个子集</p><h3 id="切点表达式函数"><a class="header-anchor" href="#切点表达式函数"></a>切点表达式函数</h3><table><thead><tr><th>类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>方法切点函数</td><td>execution()，@annotation()</td><td>通过描述目标方法信息定义连接点</td></tr><tr><td>方法入参切点函数</td><td>args()，@args()</td><td>通过描述目标类方法入参的信息定义连接点</td></tr><tr><td>目标类切点函数</td><td>within()，target()，@within()，@target()</td><td>通过描述目标类类型信息定义连接点</td></tr><tr><td>代理类切点函数</td><td>this()</td><td>通过描述目标类的代理类的信息定义连接点</td></tr></tbody></table><h3 id="函数说明"><a class="header-anchor" href="#函数说明"></a>函数说明</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>execution()</td><td>表示满足某一匹配模式的所有目标类方法连接点，如execution(* handle(…))表示所有目标类中的handle()方法</td></tr><tr><td>@annotation()</td><td>表示标注了特定注解的目标方法连接点，如@annotation(com.aspectj.Authority)表示任何标注了@Authority注解的目标类方法</td></tr><tr><td>args()</td><td>通过判别目标类方法运行时入参对象的类型定义指定连接点，如args(com.data.Car)表示所有有且仅有一个按类型匹配于Car（含子类）入参的方法</td></tr><tr><td>@args()</td><td>通过判别目标方法运行时入参对象的类是否标注特定注解来制定连接点，如@args(com.aspectj.Authority)表示任何这样的一个目标方法：它有一个入参且入参对象的类标注@Authority注解。要使@args()生效，类继承树中，标注注解的类类型需要不高于入参类类型</td></tr><tr><td>within</td><td>表示特定域下的所有连接点，如within(com.service.*)，within(com.service.*Service)和within(com.service…*)</td></tr><tr><td>target()</td><td>假如目标按类型匹配于指定类，则目标类的所有连接点匹配这个切点。如通过target(com.data.Car)定义的切点，Car及Car的子类中的所有连接点都匹配该切点，包括子类中扩展的方法</td></tr><tr><td>@within()</td><td>假如目标类按类型匹配于某个类A，且类A标注了特定注解，则目标类的所有连接点都匹配于这个切点。如@within(com.aspectj.Authority)定义的切点，假如Car类标注了@Authority注解，则Car以及Car的子类的所有连接点都匹配。@within标注接口类无效</td></tr><tr><td>@target()</td><td>目标类标注了特定注解，则目标类（不包括子类）所有连接点都匹配该切点。如通过@target(com.aspectj.Authority)定义的切点，若BMWCar标注了@Authority，则BMWCar所有连接点匹配该切点</td></tr><tr><td>this()</td><td>代理类按类型匹配于指定类，则被代理的目标类所有连接点匹配切点</td></tr><tr><td>bean(beanName)</td><td>这个是Spring特有的表示beanName的bean</td></tr></tbody></table><h3 id="通配符"><a class="header-anchor" href="#通配符"></a>通配符</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>匹配任意字符，但只能匹配上下文中的一个元素</td></tr><tr><td>…</td><td>匹配任意字符，可以匹配上下文中的多个元素。表示类时，和*联合使用；表示入参时单独使用</td></tr><tr><td>+</td><td>按类型匹配指定类的所有类（包括实现类和继承类），必须跟在类名后面</td></tr></tbody></table><ul><li>支持所有通配符：execution()，within()</li><li>仅支持+通配符：args()，this()，target()</li><li>不支持通配符：@args，@within，@target，@annotation</li></ul><h3 id="execution-语法"><a class="header-anchor" href="#execution-语法"></a>execution()语法</h3><ul><li>语法：execution(&lt;修饰符模式&gt;? &lt;返回类型模式&gt; &lt;方法名模式&gt; (&lt;参数模式&gt;) &lt;异常模式&gt;?)</li></ul><h4 id="通过方法签名定义切点"><a class="header-anchor" href="#通过方法签名定义切点"></a>通过方法签名定义切点</h4><ul><li>execution(pulic * *(…))：匹配目标类的public方法，第一个*代表返回类型，第二个*代表方法名，…代表任意入参</li><li>execution(* *To(…))：匹配目标类所有以To结尾的方法，第一个*代表返回类型，*To代表任意以To结尾的方法</li></ul><h4 id="通过类定义切点"><a class="header-anchor" href="#通过类定义切点"></a>通过类定义切点</h4><ul><li>execution(* com.data.User.*(…))：匹配User接口的所有方法</li><li>execution(* com.data.User+.*(…))：匹配User接口的所有方法，包括其实现类中不在User接口中定义的方法</li></ul><h4 id="通过类包定义切点"><a class="header-anchor" href="#通过类包定义切点"></a>通过类包定义切点</h4><ul><li>execution(* com.data.*(…))：匹配data包下所有类的所有方法</li><li>execution(* com.data.User…*(…))：匹配data包及其子孙包中的所有类的所有方法</li><li>execution(* com…*Manager.get*(…))：匹配com包及其子孙包中后缀为Manager的类里以get开头的方法</li></ul><h4 id="通过方法入参定义切点"><a class="header-anchor" href="#通过方法入参定义切点"></a>通过方法入参定义切点</h4><ul><li>execution(* get(String, int))：匹配get(String, int)方法</li><li>execution(* get(String, *))：匹配名为get且第一个入参类型为String、第二个入参类型任意的方法</li><li>execution(* get(String, …))：匹配名为get且第一个入参为String类型的方法</li><li>execution(* get(Object+))：匹配名为get且唯一入参是Object或其子类的方法</li></ul><h3 id="逻辑运算符"><a class="header-anchor" href="#逻辑运算符"></a>逻辑运算符</h3><ul><li>与&amp;&amp;，或||，非!</li></ul><h3 id="织入顺序"><a class="header-anchor" href="#织入顺序"></a>织入顺序</h3><ul><li>如果增强在同一个切面类中声明，则依照增强在切面类中定义的顺序织入</li><li>如果增强位于不同的增强类中，且都实现了org.springframework.core.Ordered接口，则由接口方法的顺序号决定（顺序号小的先织入）</li><li>如果增强位于不同的增强类中，且没有实现org.springframework.core.Ordered接口，织入顺序不确定</li></ul><h3 id="获取连接点信息"><a class="header-anchor" href="#获取连接点信息"></a>获取连接点信息</h3><ul><li>**args()<strong>用于绑定连接点方法的入参，</strong>@annotation()<strong>用于绑定连接点方法的注解对象，</strong>@args()**用于绑定连接点方法的入参注解。下例表示方法入参为(String, int, …)的方法匹配该切点，并将name和age两个参数绑定到切面方法的入参中</li><li>AspectJ使用org.aspectj.lang.<strong>JointPoint</strong>接口表示目标类连接点对象。如果是环绕增强时，使用org.aspectj.lang.<strong>ProceedingJointPoint</strong>表示连接点对象，该类是JointPoint接口的子接口。任何一个增强方法都可以通过将第一个入参声明为JointPoint访问到连接点上下文的信息</li><li>使用**this()<strong>或</strong>target()**可以绑定被代理对象的实例。下例表示代理对象为User类的所有方法匹配该切点，且代理对象绑定到user入参中</li><li>**@within()**和<B>@target()</B>函数可以将目标类的注解对象绑定到增强方法中</li><li>通过<strong>returning</strong>绑定连接点方法的返回值</li><li>使用<strong>AfterThrowing</strong>注解的<strong>throwing</strong>成员绑定</li></ul><h2 id="动态代理的两种方式"><a class="header-anchor" href="#动态代理的两种方式"></a>动态代理的两种方式</h2><ul><li><p>JDK中的动态代理是动态创建一个具有某种接口能力的代理对象。这样就必须要有Interface并且方法必须是<strong>public</strong>和<strong>public final</strong>的</p></li><li><p>CGLib采用的是底层的字节码技术，通过子类去拦截父类的方法，织入横切逻辑；不能代理<strong>final</strong>和<strong>private</strong></p></li><li><p>演示代码</p></li><li><p>TargetService.java</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">TargetService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>TargetServiceImpl.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TargetService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CglibProxy.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : before execute"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : before after"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JdkProxy.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> targer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">JdkProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> targer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>targer <span class="token operator">=</span> targer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : before execute"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targer<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : before after"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>MainApp.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//JDK proxy</span>        <span class="token class-name">TargetServiceImpl</span> jdkService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JdkProxy</span> jdkProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkProxy</span><span class="token punctuation">(</span>jdkService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TargetService</span> jdkServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TargetService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>jdkService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jdkService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jdkProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        jdkServiceProxy<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token string">"jdk 动态代理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//CGLib proxy</span>        <span class="token class-name">CglibProxy</span> cglibProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TargetService</span> cglibServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TargetService</span><span class="token punctuation">)</span> cglibProxy<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">TargetServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cglibServiceProxy<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token string">"CGLib 动态代理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果</li></ul><p><img src="https://s2.ax1x.com/2020/03/10/8Fdk5Q.png" alt="8Fdk5Q.png"></p><p>从结果可以看出CGLib是生成动态代理的内部类进行方法的拦截，从而达到增强的目的。jdk的动态代理是传入目标类对象通过反射去执行目标类对象的方法从而到达执行增强的目的。</p><blockquote><p>参考资料</p></blockquote><ul><li><a href="https://segmentfault.com/a/1190000008283874">Learn Spring - Spring AOP</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普通bean对象的初始化流程</title>
      <link href="2018/03/07/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/3.%E6%99%AE%E9%80%9Abean%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/"/>
      <url>2018/03/07/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/3.%E6%99%AE%E9%80%9Abean%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>普通bean对象的初始化流程</h1><p>在上文中分析ApplicationContext的refresh过程,在这过程中对于业务bean对象添加到Spirng容器的过程,在这个流程的最后一步骤就是初始化业务bean对象,下面这个业务bean对象的初始化流程进行分析;</p><h2 id="整体执行流程"><a class="header-anchor" href="#整体执行流程"></a>整体执行流程</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">AbstractApplicationContext:refresh() -&gt; finishBeanFactoryInitialization() -&gt; DefaultListableBeanFactory.preInstantiateSingletons()-&gt; DefaultSingletonBeanRegistry:preInstantiateSingletons()  -&gt; getBean(beanName) -&gt; AbstractBeanFactory.doGetBean() -&gt; getSingleton(beanName)|createBean(beanName, mbd, args) -&gt; -&gt; AbstractAutowireCapableBeanFactory:createBean() -&gt;resolveBeforeInstantiation(beanName, mbdToUse) -&gt; doCreateBean() -&gt; initializeBean() -&gt;applyBeanPostProcessorsBeforeInitialization()|invokeInitMethods()|applyBeanPostProcessorsAfterInitialization()invokeInitMethods(): -&gt;invokeCustomInitMethod()-&gt;BeanUtils.findMethod()|ClassUtils.getMethodIfAvailable()-&gt;ClassUtils.getInterfaceMethodIfPossible-&gt;methodToInvoke.invoke<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的流程稍微复杂一点,化繁为简来看有几个总要的步骤:</p><ol><li>调用入口方法:finishBeanFactoryInitialization()</li><li>循环依赖处理:AbstractBeanFactory.doGetBean()</li><li>提前初始化扩展点:resolveBeforeInstantiation()</li><li>执行初始化前置扩展点:applyBeanPostProcessorsBeforeInitialization()</li><li>执行初始化:invokeInitMethods()</li><li>执行初始化后置扩展点:applyBeanPostProcessorsAfterInitialization()</li></ol><h2 id="调用入口方法"><a class="header-anchor" href="#调用入口方法"></a>调用入口方法</h2><p>调用初始化业务bean的方法是在<B>finishBeanFactoryInitialization</B>进行处理的,</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//省略...</span><span class="token comment">//1. 提前加载LoadTimeWeaverAware实例,用于在class加载的过程中实现AOP的功能</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weaverAwareNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">LoadTimeWeaverAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> weaverAwareName <span class="token operator">:</span> weaverAwareNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">getBean</span><span class="token punctuation">(</span>weaverAwareName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2. 停止使用临时类加载器进行类型匹配</span>beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 允许缓存所有 Bean 定义元数据，而不期望进一步更改</span>beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4. 调用beanFactory实例化bean对象.</span>beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面省略的主要是在做一些前置转换和设置默认处理的特殊操作.<br>下面的第一个步骤比较有意思是在类进行加载的过程中实现AOP的功能,可以看到<B>LoadTimeWeaverAware</B>类有3个实现类,分别是<B>LocalContainerEntityManagerFactoryBean</B>、<B>DefaultPersistenceUnitManager</B>、<B>AspectJWeavingEnabler</B>;</p><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/S-springboot%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/LoadTimeWeaverAware.png?raw=true" alt="LoadTimeWeaverAware"></p><p>在LoadTimeWeaverAware接口中只定义了一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadTimeWeaverAware</span> <span class="token keyword">extends</span> <span class="token class-name">Aware</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置加载时间</span><span class="token keyword">void</span> <span class="token function">setLoadTimeWeaver</span><span class="token punctuation">(</span><span class="token class-name">LoadTimeWeaver</span> loadTimeWeaver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面对这三个实现类进行分析:</p><ul><li>AspectJWeavingEnabler</li></ul><p><B>AspectJWeavingEnabler</B>这个类是属于<B>weaving</B>织入模块下的一个配置类,主要是负责注册AspectJ的后处理器<B>ClassPreProcessorAgentAdapter</B>,这个类中的关键代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoadTimeWeaver</span><span class="token punctuation">(</span><span class="token class-name">LoadTimeWeaver</span> loadTimeWeaver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>loadTimeWeaver <span class="token operator">=</span> loadTimeWeaver<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token function">enableAspectJWeaving</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loadTimeWeaver<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">enableAspectJWeaving</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">LoadTimeWeaver</span> weaverToUse<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> beanClassLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>weaverToUse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">InstrumentationLoadTimeWeaver</span><span class="token punctuation">.</span><span class="token function">isInstrumentationAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>weaverToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstrumentationLoadTimeWeaver</span><span class="token punctuation">(</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No LoadTimeWeaver available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>weaverToUse<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AspectJClassBypassingClassFileTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPreProcessorAgentAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AspectJWeavingEnabler实现<B>LoadTimeWeaverAware</B>主要目的是为了将<B>LoadTimeWeaver</B>对象作为实参传递进来,然后添加<B>AspectJClassBypassingClassFileTransformer</B>,这个类实现了<B>ClassFileTransformer</B>从而完成在类的加载期间进行增强的功能;</p><h2 id="循环依赖处理"><a class="header-anchor" href="#循环依赖处理"></a>循环依赖处理</h2><p>在org.springframework.beans.factory.support.AbstractBeanFactory#getSingleton方法中实现检查循环依赖,具体实现方法如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> singletonFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Bean name must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//将beanName添加到singletonsCurrentlyInCreation(目前正在创建的bean对象集合中)</span><span class="token function">beforeSingletonCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> newSingleton <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newSingleton <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//省略...</span><span class="token comment">//如果是新创建的对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newSingleton<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">addSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> singletonObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//单例对象的缓存：key-bean对象名称</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单例工厂的缓存：key-ObjectFactory的 Bean名称</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//早期单例对象的缓存</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已注册的bean单例名称set集合</span><span class="token keyword">this</span><span class="token punctuation">.</span>registeredSingletons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个方法中大部分方法进行了省略，只保留最关键的几行代码<br>singletonObject = singletonFactory.getObject();这里调用singletonFactory生成bean对象；<br>然后将bean对象添加到<B>singletonObjects</B>和<B>registeredSingletons</B>,singletonObjects就是常说的一级缓存，在<B>getSingleton(String beanName)</B>中会使用到，下面继续分析<B>doCreateBean(String beanName)</B>方法,doCreateBean方法是在getSingleton方法中显示调用的</p><ul><li>DefaultSingletonBeanRegistry.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 快速缓存单例以便能够解析循环引用</span><span class="token comment">// 即使由 BeanFactoryAware 等生命周期接口触发.</span><span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span><span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> singletonFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>singletonFactory<span class="token punctuation">,</span> <span class="token string">"Singleton factory must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//向三级缓存添加对象</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>registeredSingletons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这一步中Spring提前将<B>singletonFactory</B>放到三级缓存中，下面继续分析属性对象的初始化过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置bean对象的属性</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">populateBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">BeanWrapper</span> bw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果适用，按名称添加bean对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_NAME<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//自动装载bean对象</span><span class="token function">autowireByName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果适用，按类型添加bean对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//自动装载bean对象</span><span class="token function">autowireByType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">autowireByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">AbstractBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token class-name">BeanWrapper</span> bw<span class="token punctuation">,</span> <span class="token class-name">MutablePropertyValues</span> pvs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> propertyNames <span class="token operator">=</span> <span class="token function">unsatisfiedNonSimpleProperties</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> bw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> propertyName <span class="token operator">:</span> propertyNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">containsBean</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取bean对象</span><span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>pvs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerDependentBean</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Added autowiring by name from bean name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span><span class="token string">"' via property '"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"' to bean named '"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在这里对bean对象依赖的属性对象进行获取<B>getBean</B>,也就同样走到了获取bean对象的流程中；</p><p>对于循环引用的流程可以分为下面几个步骤：</p><ol><li>先实例化A对象，并且将A对象的factory放入三级缓存中(目的在于延迟对实例化阶段生成的对象的代理，只有真正发生循环依赖的时候，才去提前生成代理对象，否则只会创建一个工厂并将其放入到三级缓存中，但是不会去通过这个工厂去真正创建对象)</li><li>A对象进行<B>填充属性</B></li><li>加载B对象，B对象进行实例化并放入三级缓存中</li><li>B对象进行填充属性，获取到A对象的三级缓存然后添加到二级缓存中</li><li>B对象完成初始化</li><li>A对象完成初始化然后添加到一级缓存中</li></ol><ul><li>@DependsOn</li></ul><p><B>@DependsOn</B>和depends-on标签可以指定bean的初始化的先后顺序,也是在<B>doGetBean</B>方法中进行处理的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断是否通过标签&lt;depends-on>或@DependsOn显示引入需要在提前进行初始化的对象</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span><span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//注册需要提前进行初始化的bean</span><span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span><span class="token string">"'"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' depends on missing bean '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提前初始化扩展点"><a class="header-anchor" href="#提前初始化扩展点"></a>提前初始化扩展点</h2><ul><li>resolveBeforeInstantiation()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">&#123;</span><span class="token comment">//调用resolveBeforeInstantiation</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// 让 BeanPostProcessor 有机会返回代理而不是目标 Bean 实例</span><span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span><span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>beforeInstantiationResolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Make sure bean class is actually resolved at this point.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//确定目标类型</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetType <span class="token operator">=</span> <span class="token function">determineTargetType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//在实例化之前应用 Bean 后处理器</span>bean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInstantiation</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//初始化后应用 Bean 后处理器</span>bean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>mbd<span class="token punctuation">.</span>beforeInstantiationResolved <span class="token operator">=</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">applyBeanPostProcessorsBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationAwareBeanPostProcessor</span> bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instantiationAware<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> result <span class="token operator">=</span> bp<span class="token punctuation">.</span><span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这一步骤中可以看到<B>applyBeanPostProcessorsBeforeInstantiation</B>方法尝试执行所有<B>InstantiationAwareBeanPostProcessor</B>的postProcessBeforeInstantiation方法，用于提前方法bean对象，然后在执行<B>applyBeanPostProcessorsAfterInitialization</B>后置处理器;</p><h2 id="执行初始化前置扩展点"><a class="header-anchor" href="#执行初始化前置扩展点"></a>执行初始化前置扩展点</h2><ul><li>applyBeanPostProcessorsBeforeInitialization</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> existingBean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> result <span class="token operator">=</span> existingBean<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> processor <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> current <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ref.1</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> current<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanPostProcessors<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<B>this.beanPostProcessors</B>是通过refresh() -&gt; registerBeanPostProcessors(beanFactory) -&gt; registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors) -&gt; ((AbstractBeanFactory) beanFactory).addBeanPostProcessors(postProcessors) -&gt;this.beanPostProcessors.addAll(beanPostProcessors)来进行设置的;</p><p>可以看到在ref处执行了postProcessBeforeInitialization方法,spring提供这个扩展点是为了在对象在初始化的前提供属性注入的方法;</p><h2 id="执行初始化"><a class="header-anchor" href="#执行初始化"></a>执行初始化</h2><ul><li>invokeInitMethods</li></ul><pre class="line-numbers language-`java" data-language="`java"><code class="language-`java">protected void invokeInitMethods(String beanName, Object bean, @Nullable RootBeanDefinition mbd)throws Throwable &#123;&#x2F;&#x2F;执行InitializingBean方法boolean isInitializingBean &#x3D; (bean instanceof InitializingBean); &#x2F;&#x2F;ref.1if (isInitializingBean &amp;&amp; (mbd &#x3D;&#x3D; null || !mbd.hasAnyExternallyManagedInitMethod(&quot;afterPropertiesSet&quot;))) &#123;if (logger.isTraceEnabled()) &#123;logger.trace(&quot;Invoking afterPropertiesSet() on bean with name &#39;&quot; + beanName + &quot;&#39;&quot;);&#125;((InitializingBean) bean).afterPropertiesSet();&#125;if (mbd !&#x3D; null &amp;&amp; bean.getClass() !&#x3D; NullBean.class) &#123;&#x2F;&#x2F;获取init-methodString[] initMethodNames &#x3D; mbd.getInitMethodNames(); &#x2F;&#x2F;ref.2if (initMethodNames !&#x3D; null) &#123;for (String initMethodName : initMethodNames) &#123;if (StringUtils.hasLength(initMethodName) &amp;&amp;!(isInitializingBean &amp;&amp; &quot;afterPropertiesSet&quot;.equals(initMethodName)) &amp;&amp;!mbd.hasAnyExternallyManagedInitMethod(initMethodName)) &#123;invokeCustomInitMethod(beanName, bean, mbd, initMethodName);&#125;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ref.1处是执行<B>执行InitializingBean.afterPropertiesSet()</B>,这个方法主要是用来在执行检查属性是否填充完成的;<br>在ref.2处是执行<B>init-method</B>方法的;</p><h2 id="执行初始化后置扩展点"><a class="header-anchor" href="#执行初始化后置扩展点"></a>执行初始化后置扩展点</h2><ul><li>applyBeanPostProcessorsAfterInitialization</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> existingBean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> result <span class="token operator">=</span> existingBean<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> processor <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> current <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> current<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法与applyBeanPostProcessorsBeforeInitialization方法的执行逻辑类似;</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>普通Bean对象的生命周期可以划分为以下几个阶段:实例化 -&gt; 属性填充 -&gt; 初始化 -&gt; 使用 -&gt; 销毁,这几个流程中涉及到的扩展点如下所示;</p><ul><li><p>实例化<br>InstantiationAwareBeanPostProcessor.以下方法<br>postProcessBeforeInstantiation：实例化bean之前，相当于new这个bean之前<br>postProcessAfterInstantiation：实例化bean之后，相当于new这个bean之后<br>postProcessPropertyValues：bean已经实例化完成，在属性注入时阶段触发，@Autowired,@Resource等注解原理基于此方法实现<br>postProcessBeforeInitialization：初始化bean之前，相当于把bean注入spring上下文之前<br>postProcessAfterInitialization：初始化bean之后，相当于把bean注入spring上下文之后</p></li><li><p>属性填充</p></li></ul><p>BeanFactoryAware.setBeanFactory方法可在注入属性之前，也就是Setter之前拿到Bean对象;</p><ul><li>初始化<br>@PostConstruct<br>InitializingBean</li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/867991f3daa0">Spring AOP源码解读1 - 程序入口</a><br><a href="https://www.sohu.com/a/214717253_714863">Spring源码分析之Bean的加载 </a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ApplicationContext容器的refresh过程</title>
      <link href="2018/03/05/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/2.ApplicationContext%E5%AE%B9%E5%99%A8%E7%9A%84refresh%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>2018/03/05/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/2.ApplicationContext%E5%AE%B9%E5%99%A8%E7%9A%84refresh%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>在Spring框架中要说最重要的方法就是<B>AbstrctApplicationContext.refresh()</B>方法,在这个方法中完成对容器的刷新和bean对象的加载过程,下面就详细对这个方法进行分析;</p><h2 id="refresh-方法概述"><a class="header-anchor" href="#refresh-方法概述"></a>refresh()方法概述</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.1 准备此上下文以进行刷新.</span><span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.1 告诉子类刷新内部bean工厂.(获取beanFactory)</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.2 准备在这种情况下使用的bean工厂.(对beanFactory进行预处理)</span><span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//2.3 在上下文子类中对bean工厂进行后置处理.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.1 调用在上下文中注册为Bean的工厂处理器.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.2 注册拦截Bean创建的Bean处理器.</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.1 为此上下文初始化消息源.</span><span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.2 为此上下文初始化事件广播器.</span><span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.1 在特定上下文子类中初始化其他特殊bean.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6 检查侦听器bean并注册它们.</span><span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7 实例化所有剩余的（非延迟初始化）单例bean.</span><span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8 最后一步：发布相应事件.</span><span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span><span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 销毁已创建的单例以避免资源悬空.</span><span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重置“active”标志</span><span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Propagate exception to caller.</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token comment">//自检并重置spring中缓存的bean的元数据，因为可能不在使用</span><span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源代码可以看到<B>AbstrctApplicationContext.refresh()方法</B>分为<B>8个步骤</B></p><ol><li>准备环境上下文</li><li>创建准备beanFactory</li><li>处理前置扩展点(BeanFactoryPostProcessor/BeanPostProcessor)</li><li>事件广播</li><li>onRefresh</li><li>注册监听器</li><li>实例化剩下的bean</li><li>发布事件</li></ol><p>下面根据步骤进一步分析refresh()方法的具体操作;</p><h2 id="准备环境上下文"><a class="header-anchor" href="#准备环境上下文"></a>准备环境上下文</h2><p>配置应用刷新上下文环境的方法主要有<B>prepareRefresh()</B>、<B>obtainFreshBeanFactory()</B>、<B>prepareBeanFactory(beanFactory)</B></p><h3 id="prepareRefresh"><a class="header-anchor" href="#prepareRefresh"></a>prepareRefresh()</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 准备此上下文以进行刷新，设置其启动日期和 * 活动标志，以及执行属性源的任何初始化. */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//切换到活动状态.</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupDate <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化ProperySources容器.</span><span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证所有标记为必需的属性都是可解析的:</span><span class="token comment">// see ConfigurablePropertyResolver#setRequiredProperties</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ApplicationListeners设置为预处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 将ApplicationListeners重新设置成预处理状态.</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>prepareRefresh()</B>方法只是在清理上下文环境、设置启动事件以及初始化<B>PropertySources容器</B>等；<br>初始化<B>PropertySources</B>容器方法对应web应用底层是调用</p><pre class="line-numbers language-none"><code class="language-none">WebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现将<B>servletContext</B>, <B>servletConfig</B>加载到<B>PropertySources容器</B>中的</p><ul><li>servletContext是web应用服务器为每一个应用创建的一个服务上下文对象</li><li>servletConfig是操作一个servlet中的配置属性的接口</li></ul><h2 id="创建准备beanFactory"><a class="header-anchor" href="#创建准备beanFactory"></a>创建准备beanFactory</h2><h3 id="obtainFreshBeanFactory"><a class="header-anchor" href="#obtainFreshBeanFactory"></a>obtainFreshBeanFactory()</h3><p><B>obtainFreshBeanFactory()</B></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ConfigurableListableBeanFactory</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><B>refreshBeanFactory()</B>刷新beanFactory，底层是调用<B>DefaultListableBeanFactory.setSerializationId()</B>方法去刷新工厂集合</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">//这里使用的是ConcurrentHashMap</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Reference</span><span class="token punctuation">&lt;</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">></span><span class="token punctuation">></span></span> serializableFactories <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> serializationId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>serializationId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//注意这里使用的是WeakReference保证了并发安全性</span>serializableFactories<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>serializationId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serializationId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>serializableFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serializationId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>serializationId <span class="token operator">=</span> serializationId<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>getBeanFactory()方法不同的实现都是返回<B>DefaultListableBeanFactory</B></li></ol><h3 id="prepareBeanFactory-beanFactory"><a class="header-anchor" href="#prepareBeanFactory-beanFactory"></a>prepareBeanFactory(beanFactory)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 告诉内部bean工厂使用上下文的类加载器等.</span>beanFactory<span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">setBeanExpressionResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardBeanExpressionResolver</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用上下文回调配置Bean工厂.</span>beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">MessageSourceAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// BeanFactory接口不在普通工厂中注册设置为可解析类型.</span><span class="token comment">// MessageSource注册为Bean（并发现用于自动装配）.</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册早期的后置处理器以将内部bean检测为ApplicationListeners.</span>beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果发现LoadTimeWeaver，请准备织入。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>LOAD_TIME_WEAVER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Set a temporary ClassLoader for type matching.</span>beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 注册默认环境bean.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>prepareBeanFactory(beanFactory)</B>主要是给beanFactory设置各种预设的属性的</p><h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3><p>在开始加载bean之前需要做三件事情：</p><ol><li>清理环境，设置启动时间，装载servletContext和servletConfig</li><li>获取<B>DefaultListableBeanFactory</B></li><li>给获取到的<B>DefaultListableBeanFactory</B>设置各种属性</li></ol><h2 id="处理前置扩展点"><a class="header-anchor" href="#处理前置扩展点"></a>处理前置扩展点</h2><p><B>postProcessBeanFactory</B>是用来在应用上下文中注册一些特殊的<B>BeanPostProrecessors</B></p><h3 id="GenericWebApplicationContext分析"><a class="header-anchor" href="#GenericWebApplicationContext分析"></a>GenericWebApplicationContext分析</h3><ul><li>代码展示</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">registerWebApplicationScopes</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">registerEnvironmentBeans</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><B>ServletContextAwareProcessor</B></li></ol><ul><li>WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, this.servletContext)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerWebApplicationScopes</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ServletContext</span> sc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerScope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SCOPE_REQUEST<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RequestScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerScope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SCOPE_SESSION<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SessionScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ServletContextScope</span> appScope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextScope</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerScope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SCOPE_APPLICATION<span class="token punctuation">,</span> appScope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Register as ServletContext attribute, for ContextCleanupListener to detect it.</span>sc<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServletContextScope</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appScope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RequestObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ServletResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResponseObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SessionObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">WebRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WebRequestObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>jsfPresent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">FacesDependencyRegistrar</span><span class="token punctuation">.</span><span class="token function">registerFacesDependencies</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>主要是用于注册web应用程序bean的注册范围增加<B>request</B>、<B>session</B>、<B>application</B></li></ol><ul><li>WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, this.servletContext)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerEnvironmentBeans</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> bf<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bf<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SERVLET_CONTEXT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>bf<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SERVLET_CONTEXT_BEAN_NAME<span class="token punctuation">,</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>servletConfig <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bf<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">.</span>SERVLET_CONFIG_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>bf<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">.</span>SERVLET_CONFIG_BEAN_NAME<span class="token punctuation">,</span> servletConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//省略...</span>bf<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>CONTEXT_PARAMETERS_BEAN_NAME<span class="token punctuation">,</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>parameterMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//省略...</span>bf<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>CONTEXT_ATTRIBUTES_BEAN_NAME<span class="token punctuation">,</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>attributeMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>将<B>servletContext</B>、<B>servletConfig</B>、<B>contextParameters</B>、<B>contextParameters</B>注册到容器中</li></ol><p>postProcessBeanFactory方法就是在bean初始化之前将一些特殊的bean注册到容器中去，从而完成接下来的初始化操作</p><h3 id="invokeBeanFactoryPostProcessors"><a class="header-anchor" href="#invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h3><p><B>invokeBeanFactoryPostProcessors</B>方法是执行实现<B>BeanFactoryPostProcessor</B>接口的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">PostProcessorRegistrationDelegate</span><span class="token punctuation">.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span><span class="token function">getBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span><span class="token comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getTempClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>LOAD_TIME_WEAVER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>getBeanFactoryPostProcessors()</B>中返回的bean是在初始化化环境<B>prepareContext</B>中加载的</p><p><B>invokeBeanFactoryPostProcessors</B>的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> processedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">BeanDefinitionRegistry</span> registry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> regularPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">></span></span> registryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span> postProcessor <span class="token operator">:</span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span> registryProcessor <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> postProcessor<span class="token punctuation">;</span>registryProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>registryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>regularPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>postProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">></span></span> currentRegistryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略....</span><span class="token comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span><span class="token comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span><span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略....</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的作用就是</p><ol><li>先处理<B>BeanDefinitionRegistryPostProcessor</B>，按照PriorityOrdered &gt; Ordered &gt; 普通的顺序一次执行<B>postProcessBeanDefinitionRegistry</B>方法；</li><li>再处理<B>BeanFactoryPostProcessors</B>，按照PriorityOrdered &gt; Ordered &gt; 普通的顺序一次执行<B>postProcessBeanFactory</B>方法；</li></ol><h3 id="小结-v2"><a class="header-anchor" href="#小结-v2"></a>小结</h3><p><B>invokeBeanFactoryPostProcessors</B>方法就是执行实现<B>BeanDefinitionRegistryPostProcessor</B>接口的<B>postProcessBeanDefinitionRegistry</B>以及执行实现<B>BeanFactoryPostProcessors</B>接口的<B>postProcessBeanFactory</B>方法</p><blockquote><p>运行示例<br><img src="https://s2.ax1x.com/2020/03/06/3LvlRO.png" alt="3LvlRO.png"></p></blockquote><h3 id="registerBeanPostProcessors分析"><a class="header-anchor" href="#registerBeanPostProcessors分析"></a>registerBeanPostProcessors分析</h3><ul><li>代码示例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">AbstractApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Register BeanPostProcessorChecker that logs an info message when</span><span class="token comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span><span class="token comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span><span class="token keyword">int</span> beanProcessorTargetCount <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanPostProcessorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> postProcessorNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanPostProcessorChecker</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanProcessorTargetCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span><span class="token comment">// Ordered, and the rest.</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> internalPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span><span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> priorityOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略代码...</span><span class="token comment">// Next, register the BeanPostProcessors that implement Ordered.</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> orderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略代码...</span><span class="token comment">// Now, register all regular BeanPostProcessors.</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> nonOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略代码...</span><span class="token comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span><span class="token comment">// moving it to the end of the processor chain (for picking up proxies etc).</span>beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是往beanFactory中注册<B>BeanProcessor</B>的实现，在beanFactory中是用<B>CopyOnWriteArrayList</B>来作为缓存容器的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** AbstractBeanFactory内部是用CopyOnWriteArrayList来保证安全性的 */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> beanPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="事件广播"><a class="header-anchor" href="#事件广播"></a>事件广播</h2><h3 id="initMessageSource"><a class="header-anchor" href="#initMessageSource"></a>initMessageSource()</h3><p><B>initMessageSource</B>是初始化消息源的，也就是进行初始化国际化配置相关的</p><h2 id="initApplicationEventMulticaster"><a class="header-anchor" href="#initApplicationEventMulticaster"></a>initApplicationEventMulticaster</h2><p><B>initApplicationEventMulticaster</B>进行初始化事件发布器。beanFactory中存在<B>ApplicationEventMulticaster</B>就进行注册，没有就注册<B>SimpleApplicationEventMulticaster</B>。</p><h2 id="onRefresh"><a class="header-anchor" href="#onRefresh"></a>onRefresh()</h2><p><B>onRefresh</B>,用于子类实现容器refresh的过程中执行其他特殊操作，这是一个模板方法，允许子类去扩展</p><h2 id="注册监听器"><a class="header-anchor" href="#注册监听器"></a>注册监听器</h2><p><B>registerListeners</B>注册监听器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 首先注册指定的静态侦听器.</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> listener <span class="token operator">:</span> <span class="token function">getApplicationListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不要在这里初始化FactoryBeans：我们需要保留所有常规bean</span><span class="token comment">//否则后置处理器将无法对他们进行处理!</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listenerBeanNames <span class="token operator">=</span> <span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> listenerBeanName <span class="token operator">:</span> listenerBeanNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addApplicationListenerBean</span><span class="token punctuation">(</span>listenerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Publish early application events now that we finally have a multicaster...</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">></span></span> earlyEventsToProcess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earlyEventsToProcess <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> earlyEvent <span class="token operator">:</span> earlyEventsToProcess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span>earlyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例化剩下的bean"><a class="header-anchor" href="#实例化剩下的bean"></a>实例化剩下的bean</h2><p><B>finishBeanFactoryInitialization(beanFactory)</B>实列化剩下的bean,这个方法也是绝大多数bean初始化的方式。这个方法的解析放在下一篇文章</p><h2 id="发布事件"><a class="header-anchor" href="#发布事件"></a>发布事件</h2><p><B>finishRefresh</B>完成容器的刷新</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 清除上下文级别的资源缓存（例如来自扫描的ASM元数据）.</span><span class="token function">clearResourceCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为容器初始化处理器.注册一个LifecycleProcessor</span><span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对生命周期处理器进行刷新.</span><span class="token function">getLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 广播容器初始化完成的消息.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先LiveBeanView中注册ApplicationContext.</span><span class="token class-name">LiveBeansView</span><span class="token punctuation">.</span><span class="token function">registerApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>initLifecycleProcessor</B>容器执行容器初始化周期过程中的控制</p><ul><li>代码运行<br><img src="https://s2.ax1x.com/2020/03/07/3OuocQ.png" alt="3OuocQ.png"></li></ul><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><ol><li>配置资源初始化环境<ol><li>清理环境，设置启动时间，装载servletContext和servletConfig</li><li>获取DefaultListableBeanFactory</li><li>给DefaultListableBeanFactory设置各种属性</li></ol></li><li>postProcessBeanFactory()<ol><li>注册ServletContextAwareProcessor</li><li>主要是用于注册web应用程序bean的注册范围增加request、session、application</li><li>将servletContext、servletConfig、contextParameters、contextParameters注册到容器中</li></ol></li><li>invokeBeanFactoryPostProcessors()<ol><li>先处理BeanDefinitionRegistryPostProcessor，按照PriorityOrdered &gt; Ordered &gt; 普通的顺序一次执行postProcessBeanDefinitionRegistry方法</li><li>再处理BeanFactoryPostProcessors，按照PriorityOrdered &gt; Ordered &gt; 普通的顺序一次执行postProcessBeanFactory方法</li></ol></li><li>registerBeanPostProcessors()<ol><li>往beanFactory中注册BeanProcessor的实现</li></ol></li><li>initMessageSource进行国际化配置处理</li><li>initApplicationEventMulticaster进行初始化事件发布器。beanFactory中存在ApplicationEventMulticaster就进行注册，没有就注册SimpleApplicationEventMulticaster</li><li>onRefresh,用于子类实现容器refresh的过程中执行其他特殊操作，这是一个模板方法，允许子类去扩展</li><li>registerListeners注册监听器</li><li>finishBeanFactoryInitialization()加载bean</li><li>finishRefresh完成容器的刷新</li></ol><ul><li>流程图<br><img src="https://s2.ax1x.com/2020/03/07/3OMqYV.png" alt="3OMqYV.png"></li></ul><blockquote><p>参考资料</p></blockquote><ul><li><a href="https://www.jianshu.com/p/5323114c0d05">spring之BeanFactoryPostProcessor执行流程</a></li><li><a href="https://www.jianshu.com/p/1bc735c30c54">解读Spring容器的refresh()</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring源代码学习(一) 认识spring容器和组件</title>
      <link href="2018/03/03/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/1.%E8%AE%A4%E8%AF%86spring%E5%AE%B9%E5%99%A8%E5%92%8C%E7%BB%84%E4%BB%B6/"/>
      <url>2018/03/03/4.spring%E6%BA%90%E4%BB%A3%E7%A0%81/1.%E8%AE%A4%E8%AF%86spring%E5%AE%B9%E5%99%A8%E5%92%8C%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>spring始终是java程序员必须要掌握的一个技能，随着springBoot的普及化，springBoot替开发者实现了大量初始化工作，隐藏了实现细节,方便了我们快速开展业务，但是掌握好spring，熟悉基础，才能更好的知道应用是为什么这样运行的,出现问题怎么去解决。反反复复，我也尝试看了很多遍spring的源代码，但是都只是知识在脑海中过了一下，并没有留下、理解。这一次将之前的知识点记录下来,以供之后查阅.</p><h1>认识spring容器和组件</h1><h2 id="spring容器"><a class="header-anchor" href="#spring容器"></a>spring容器</h2><h3 id="spring容器是什么？"><a class="header-anchor" href="#spring容器是什么？"></a>spring容器是什么？</h3><p>spring容器指的是</p><ul><li><p>功能描述：是一个通过配置文件或类似方式加载配置的容器，这个容器必须要有<strong>创建</strong>、<strong>管理</strong>、<strong>销毁</strong>等<B>管理</B>Bean对象的功能。</p></li><li><p>抽象接口：<strong>ApplicationContext</strong></p></li><li><p>ApplicationContext</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">EnvironmentCapable</span><span class="token punctuation">,</span> <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">,</span> <span class="token class-name">HierarchicalBeanFactory</span><span class="token punctuation">,</span><span class="token class-name">MessageSource</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">,</span> <span class="token class-name">ResourcePatternResolver</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//返回context的唯一标识</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回context的名称</span><span class="token class-name">String</span> <span class="token function">getApplicationName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//</span><span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回context的启动时间</span><span class="token keyword">long</span> <span class="token function">getStartupDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回context的parent context</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">ApplicationContext</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回AutowireCapableBeanFactory</span><span class="token class-name">AutowireCapableBeanFactory</span> <span class="token function">getAutowireCapableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到Spring抽象出来的最顶层的接口<B>ApplicationContext</B>只有寥寥几个方法,分别是返回名称/启动时间/父容器/自动装配工厂。在看接口的实现有哪些</p><h3 id="spring容器的功能"><a class="header-anchor" href="#spring容器的功能"></a>spring容器的功能</h3><ul><li><p>spring容器功能<br><img src="https://s2.ax1x.com/2020/03/03/34bTkq.png" alt="spring容器功能"></p></li><li><p>spring容器类型<br><img src="https://s2.ax1x.com/2020/03/03/35pvRA.png" alt="spring容器类型"></p></li></ul><h3 id="BeanFactory和ApplicationContext的对比"><a class="header-anchor" href="#BeanFactory和ApplicationContext的对比"></a>BeanFactory和ApplicationContext的对比</h3><table><thead><tr><th>\</th><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>初始化bean方式</td><td>在启动时，不会实例化Bean，从容器中获取的时候才会实例化bean</td><td>启动时就会初始化全部bean，可配置lazy-init=true实现延迟加载</td></tr></tbody></table><h3 id="Application容器的特点和功能"><a class="header-anchor" href="#Application容器的特点和功能"></a>Application容器的特点和功能</h3><p><img src="https://s2.ax1x.com/2020/03/03/35SvuV.png" alt="Application类别和特点"></p><h2 id="spring组件"><a class="header-anchor" href="#spring组件"></a>spring组件</h2><h3 id="资源抽象接口"><a class="header-anchor" href="#资源抽象接口"></a>资源抽象接口</h3><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>FileSystemResource</td><td>文件系统绝对路径的方式进行访问</td></tr><tr><td>ClassPathResource</td><td>以类路径的方式进行访问</td></tr><tr><td>ServletContextResource</td><td>相对于Web应用根目录的方式进行访问</td></tr></tbody></table><h3 id="BeanFactory组件类"><a class="header-anchor" href="#BeanFactory组件类"></a>BeanFactory组件类</h3><ul><li><p>DefaultListableBeanFactory类图<br><img src="https://s2.ax1x.com/2020/03/04/35EWge.png" alt="DefaultListableBeanFactory类图"></p></li><li><p>观察BeanFactory的类图结构为：<br><img src="https://s2.ax1x.com/2020/03/04/3omrsU.png" alt="BeanFactory的类图"></p></li><li><p>BeanFactory中定义的功能<br><img src="https://s2.ax1x.com/2020/03/04/3oQ9cq.png" alt="BeanFactory的功能"></p></li></ul><p><strong>BeanFactory</strong>下有三个实现类，分别是：</p><ul><li>ListableBeanFactory</li><li>HierarchicalBeanFactory</li><li>AutowireCapableBeanFactory</li></ul><h4 id="ListableBeanFactory"><a class="header-anchor" href="#ListableBeanFactory"></a>ListableBeanFactory</h4><ul><li><p>定义：可将Bean列出的工厂类</p></li><li><p>主要的功能有：</p></li></ul><table><thead><tr><th>方法名称</th><th>功能含义</th></tr></thead><tbody><tr><td>boolean containsBeanDefinition(String beanName)</td><td>根据名称判断是否有BeanDefinition</td></tr><tr><td>int getBeanDefinitionCount()</td><td>返回BeanDefinition的个数</td></tr><tr><td>String[] getBeanDefinitionNames()</td><td>返回BeanDefinition的名称集合</td></tr><tr><td>String[] getBeanNamesForType(Class&lt;?&gt; type)</td><td>根据类型返回Bean的名称集合</td></tr><tr><td>Map&lt;String,T&gt; getBeansOfType(Class<T> type)</td><td>根据类型返回Bean实例</td></tr></tbody></table><h4 id="HierarchicalBeanFactory"><a class="header-anchor" href="#HierarchicalBeanFactory"></a>HierarchicalBeanFactory</h4><ul><li><p>定义：实现Bean工厂的分层</p></li><li><p>主要的功能有：</p></li></ul><table><thead><tr><th>方法名称</th><th>功能含义</th></tr></thead><tbody><tr><td>BeanFactory getParentBeanFactory()</td><td>返回bean工厂的父工厂</td></tr><tr><td>boolean containsLocalBean(String name)</td><td>根据名称判断该Bean工厂是否包含这个bean</td></tr></tbody></table><h4 id="AutowireCapableBeanFactory"><a class="header-anchor" href="#AutowireCapableBeanFactory"></a>AutowireCapableBeanFactory</h4><ul><li><p>定义：实现自动装配的Bean工厂</p></li><li><p>主要的功能有：</p></li></ul><table><thead><tr><th>方法名称</th><th>功能含义</th></tr></thead><tbody><tr><td>applyBeanPostProcessorsBeforeInitialization、applyBeanPostProcessorsBeforeInitialization、applyBeanPropertyValues</td><td>分别是执行InstantiationAwareBeanPostProcessor接口对应的方法</td></tr><tr><td>configureBean</td><td>给Bean自动装配属性</td></tr><tr><td>createBean、destroyBean</td><td>分别是创建和销毁bean</td></tr><tr><td>initializeBean</td><td>初始化bean</td></tr><tr><td>resolveBeanByName</td><td>分解指定依赖的方法</td></tr></tbody></table><ul><li>AutowireCapableBeanFactory方法<br><img src="https://s2.ax1x.com/2020/03/04/3oBjsO.png" alt="AutowireCapableBeanFactory"></li></ul><h4 id="ConfigurableBeanFactory"><a class="header-anchor" href="#ConfigurableBeanFactory"></a>ConfigurableBeanFactory</h4><p><strong>ConfigurableBeanFactory</strong>是可配置的bean工厂,实现了<strong>HierarchicalBeanFactory</strong>、<strong>SingletonBeanRegistry</strong></p><ul><li>SingletonBeanRegistry<br>注册单列bean的接口</li></ul><table><thead><tr><th>方法名称</th><th>功能含义</th></tr></thead><tbody><tr><td>containsSingleton</td><td>根据名称判断Bean是否存在</td></tr><tr><td>getSingleton</td><td>根据名称返回Bean</td></tr><tr><td>getSingletonCount</td><td>返回Bean的个数</td></tr><tr><td>getSingletonMutex</td><td>返回实例化过程中的锁</td></tr><tr><td>getSingletonNames</td><td>返回所有bean的名称</td></tr><tr><td>registerSingleton</td><td>注册单列bean</td></tr></tbody></table><p>由于<strong>ConfigurableBeanFactory</strong>方法实在是太多了，因此这里只单独列举几个比较典型的方法，后面的章节在结合流程来分析。</p><ul><li>ConfigurableBeanFactory的方法</li></ul><table><thead><tr><th>方法名称</th><th>功能含义</th></tr></thead><tbody><tr><td>isFactoryBean</td><td>判断是否是BeanFactory</td></tr><tr><td>register*</td><td>注册Bean相关的方法</td></tr><tr><td>addBeanPostProcessor</td><td>添加BeanPostProcessor</td></tr></tbody></table><h4 id="ConfigurableListableBeanFactory"><a class="header-anchor" href="#ConfigurableListableBeanFactory"></a>ConfigurableListableBeanFactory</h4><p><strong>ConfigurableListableBeanFactory</strong>该类继承自<strong>ListableBeanFactory</strong>、<strong>AutowireCapableBeanFactory</strong>、<strong>ConfigurableBeanFactory</strong>等类</p><table><thead><tr><th>方法名称</th><th>功能含义</th></tr></thead><tbody><tr><td>registerResolvableDependency</td><td>注册一个可分解的依赖</td></tr><tr><td>preInstantiateSingletons</td><td>实例化非延迟加载的bean</td></tr><tr><td>getBeanDefinition</td><td>根据名称返回BeanDefinition</td></tr></tbody></table><h4 id="BeanDefinitionRegistry"><a class="header-anchor" href="#BeanDefinitionRegistry"></a>BeanDefinitionRegistry</h4><p><strong>BeanDefinitionRegistry</strong>用来操作BeanDefinition的类，继承了<strong>AliasRegistry</strong></p><p><strong>AliasRegistry</strong>定义了根据别名对类进行操作的方法，包括<strong>registerAlias</strong>、<strong>removeAlias</strong>、<strong>isAlias</strong>、<strong>getAliases</strong></p><ul><li>BeanDefinitionRegistry方法的定义</li></ul><table><thead><tr><th>方法名称</th><th>功能含义</th></tr></thead><tbody><tr><td>registerBeanDefinition</td><td>注册一个beanName名称的BeanDefinition</td></tr><tr><td>remove、get、contains</td><td>移除、获取、判断BeanDefinition</td></tr><tr><td>getBeanDefinitionNames</td><td>返回容器内BeanDefinition的名称数组</td></tr><tr><td>getBeanDefinitionCount</td><td>返回BeanDefintion的个数</td></tr><tr><td>isBeanNameInUse</td><td>根据名称判断BeanDefintion是否被注册过</td></tr></tbody></table><h3 id="ApplicationContext组件类"><a class="header-anchor" href="#ApplicationContext组件类"></a>ApplicationContext组件类</h3><p>ApplicationContext容器以<strong>AbstractXmlApplicationContext</strong>来进行分析</p><ul><li>AbstractXmlApplicationContext类图</li></ul><p><img src="https://s2.ax1x.com/2020/03/04/3ohgJO.png" alt="3ohgJO.png"><br>从类图可以看得出ApplicationContxt主要还是实现BeanFactory的子类，并且也继承了实现Spring容器其他特性的功能，例如事件监听、资源文件、国际化等接口</p><p>以下截取☞<a href="https://segmentfault.com/a/1190000008291174">Learn Spring - Spring IoC</a>的总结</p><ul><li><p><strong>ApplicationEventPublisher</strong>：让容器拥有发布应用上下文事件的功能，包括容器启动事件、关闭事件等。实现了ApplicationListener事件监听接口的Bean 可以接收到容器事件，并对事件进行响应处理。在ApplicationContext抽象实现类AbstractApplicationContext中，我们可以发现存在一个ApplicationEventMulticaster，它负责保存所有监听器，以便在容器产生上下文事件时通知这些事件监听者。</p></li><li><p><strong>MessageSource</strong>：为应用提供i18n国际化消息访问的功能；</p></li><li><p><strong>ResourcePatternResolver</strong>：所有ApplicationContext实现类都实现了类似于PathMatchingResourcePatternResolver的功能，可以通过带前缀的Ant风格的资源文件路径装载Spring的配置文件。</p></li><li><p><strong>LifeCycle</strong>：该接口是Spring 2.0加入的，该接口提供了start()和stop()两个方法，主要用于控制异步处理过程。在具体使用时，该接口同时被ApplicationContext实现及具体Bean实现，ApplicationContext会将start/stop的信息传递给容器中所有实现了该接口的Bean，以达到管理和控制JMX、任务调度等目的。</p></li><li><p><strong>ConfigurableApplicationContext</strong>扩展于ApplicationContext，它新增加了两个主要的方法：refresh()和close()，让ApplicationContext具有启动、刷新和关闭应用上下文的能力。在应用上下文关闭的情况下调用refresh()即可启动应用上下文，在已经启动的状态下，调用refresh()则清除缓存并重新装载配置信息，而调用close()则可关闭应用上下文。</p></li></ul><h3 id="WebApplicantContext组件类"><a class="header-anchor" href="#WebApplicantContext组件类"></a>WebApplicantContext组件类</h3><p><strong>WebApplicationContext</strong>是一个专门为Web应用准备的，它允许从Web根目录根据相对路径进行装载配置文件完成初始化。从WebApplicationContext中可以获取ServletContext引用，整个Web应用上下文对象将作为属性放置在ServletContext中，以便Web应用环境可以访问spring上下文。</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>主要介绍了Spring容器和组件，Spring组件主要是分为BeanFactory组件和ApplicationContext组件。这两个组件下面有分别派生出其他的组件例如BeanFactory下又有<strong>AutowireCapableBeanFactory</strong>实现了自动装配和应用InstantiationAwareBeanPostProcessor接口的方法、<strong>ConfigurableBeanFactory</strong>可配置化的BeanFactory增强了BeanFactory的能力；Application下的<strong>ApplicationEventPublisher</strong>让容器拥有发布应用上下文事件的功能(启动和关闭)、<strong>ConfigurableApplicationContext</strong>扩展于ApplicationContext，它新增加了两个主要的方法：**refresh()**和close()，让ApplicationContext具有启动、刷新和关闭应用上下文的能力。</p><blockquote><p>参考资料</p></blockquote><ul><li><a href="https://blog.csdn.net/qq_34598667/article/details/83245753">Spring容器是什么(浅显易懂)？</a></li><li><a href="https://www.jianshu.com/p/6a2100dd6532">Spring 容器是什么？</a></li><li><a href="https://segmentfault.com/a/1190000008291174">Learn Spring - Spring IoC</a></li><li><a href="https://blog.csdn.net/xiao__jia__jia/article/details/102470325">ConfigurableApplicationContext</a></li><li><a href="https://www.jianshu.com/p/2854d8984dfc">理解Spring容器、BeanFactory和ApplicationContext</a></li><li><a href="https://www.cnblogs.com/zrtqsk/p/4028453.html">Spring源码分析——BeanFactory体系之接口详细分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown模板</title>
      <link href="2017/12/22/1.%E6%9D%82%E8%AE%B0/Markdown%E6%A8%A1%E6%9D%BF/"/>
      <url>2017/12/22/1.%E6%9D%82%E8%AE%B0/Markdown%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1>Markdown 基本要素</h1><p>这篇文件意在简要介绍 <a href="https://guides.github.com/features/mastering-markdown/">GitHub Flavored Markdown 写作</a>。</p><h2 id="语法说明"><a class="header-anchor" href="#语法说明"></a>语法说明</h2><h3 id="标题"><a class="header-anchor" href="#标题"></a>标题</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 这是 &lt;h1> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 这是 &lt;h2> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 这是 &lt;h3> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 这是 &lt;h4> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 这是 &lt;h5> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 这是 &lt;h6> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="强调"><a class="header-anchor" href="#强调"></a>强调</h3><!-- prettier-ignore --><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">这会是 斜体 的文字</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">这会是 斜体 的文字</span><span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">这会是 粗体 的文字</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">这会是 粗体 的文字</span><span class="token punctuation">__</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">你也 <span class="token bold"><span class="token punctuation">**</span><span class="token content">组合</span><span class="token punctuation">**</span></span> 这些符号</span><span class="token punctuation">_</span></span><span class="token strike"><span class="token punctuation">~~</span><span class="token content">这个文字将会被横线删除</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表"><a class="header-anchor" href="#列表"></a>列表</h3><h4 id="无序列表"><a class="header-anchor" href="#无序列表"></a>无序列表</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> Item 1<span class="token list punctuation">-</span> Item 2  <span class="token list punctuation">-</span> Item 2a  <span class="token list punctuation">-</span> Item 2b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有序列表"><a class="header-anchor" href="#有序列表"></a>有序列表</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> Item 1<span class="token list punctuation">1.</span> Item 2<span class="token list punctuation">1.</span> Item 3   <span class="token list punctuation">1.</span> Item 3a   <span class="token list punctuation">1.</span> Item 3b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加图片"><a class="header-anchor" href="#添加图片"></a>添加图片</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">GitHub Logo</span>](<span class="token url">/images/logo.png</span>)</span>Format: <span class="token url"><span class="token operator">!</span>[<span class="token content">Alt Text</span>](<span class="token url">url</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="链接"><a class="header-anchor" href="#链接"></a>链接</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">http://github.com - 自动生成！<span class="token url">[<span class="token content">GitHub</span>](<span class="token url">http://github.com</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="引用"><a class="header-anchor" href="#引用"></a>引用</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">正如 Kanye West 所说：<span class="token blockquote punctuation">></span> We're living the future so<span class="token blockquote punctuation">></span> the present is our past.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分割线"><a class="header-anchor" href="#分割线"></a>分割线</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">如下，三个或者更多的<span class="token hr punctuation">---</span>连字符<span class="token hr punctuation">---</span>星号<span class="token hr punctuation">---</span>下划线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="行内代码"><a class="header-anchor" href="#行内代码"></a>行内代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">我觉得你应该在这里使用<span class="token code-snippet code keyword">`&lt;addr>`</span> 才对。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="代码块"><a class="header-anchor" href="#代码块"></a>代码块</h3><p>你可以在你的代码上面和下面添加 <code>```</code> 来表示代码块。</p><h4 id="语法高亮"><a class="header-anchor" href="#语法高亮"></a>语法高亮</h4><p>你可以给你的代码块添加任何一种语言的语法高亮</p><p>例如，给 ruby 代码添加语法高亮：</p><pre><code><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'redcarpet'</span>markdown <span class="token operator">=</span> <span class="token constant">Redcarpet</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span>puts markdown<span class="token punctuation">.</span>to_html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><p>会得到下面的效果：</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'redcarpet'</span>markdown <span class="token operator">=</span> <span class="token constant">Redcarpet</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span>puts markdown<span class="token punctuation">.</span>to_html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="任务列表"><a class="header-anchor" href="#任务列表"></a>任务列表</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [x] @mentions, #refs, [links](), <span class="token bold"><span class="token punctuation">**</span><span class="token content">formatting</span><span class="token punctuation">**</span></span>, and <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>tags<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span> supported<span class="token list punctuation">-</span> [x] list syntax required (any unordered or ordered list supported)<span class="token list punctuation">-</span> [x] this is a complete item<span class="token list punctuation">-</span> [ ] this is an incomplete item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格"><a class="header-anchor" href="#表格"></a>表格</h3><!-- prettier-ignore --><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token table-header important">First Header </span><span class="token punctuation">|</span><span class="token table-header important"> Second Header</span></span><span class="token table-line"><span class="token punctuation">------------</span> <span class="token punctuation">|</span> <span class="token punctuation">-------------</span></span><span class="token table-data-rows"><span class="token table-data">Content from cell 1 </span><span class="token punctuation">|</span><span class="token table-data"> Content from cell 2</span><span class="token table-data">Content in the first column </span><span class="token punctuation">|</span><span class="token table-data"> Content in the second column</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展的语法"><a class="header-anchor" href="#扩展的语法"></a>扩展的语法</h2><h3 id="上标"><a class="header-anchor" href="#上标"></a>上标</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">30^th^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下标"><a class="header-anchor" href="#下标"></a>下标</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">H<span class="token strike"><span class="token punctuation">~</span><span class="token content">2</span><span class="token punctuation">~</span></span>O<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="脚注"><a class="header-anchor" href="#脚注"></a>脚注</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Content [^1]<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Hi!</span> This is a footnote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="缩略"><a class="header-anchor" href="#缩略"></a>缩略</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">_</span><span class="token content">[HTML]: Hyper Text Markup Language</span><span class="token punctuation">_</span></span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">W3C</span><span class="token punctuation">]</span><span class="token punctuation">:</span> World</span> Wide Web ConsortiumThe HTML specificationis maintained by the W3C.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标记"><a class="header-anchor" href="#标记"></a>标记</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">==marked==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CriticMarkup"><a class="header-anchor" href="#CriticMarkup"></a>CriticMarkup</h3><p>CriticMarkup 缺省是禁用的，你可以通过插件设置来启动它。<br>有关 CriticMarkup 的更多信息，请查看 <a href="http://criticmarkup.com/users-guide.php">CriticMarkup 用户指南</a>.</p><p>这里有 5 种基本语法：</p><ul><li>添加 <code>&#123;++ ++&#125;</code></li><li>删除 <code>&#123;-- --&#125;</code></li><li>替换 <code>&#123;~~ ~&gt; ~~&#125;</code></li><li>注释 <code>&#123;&gt;&gt; &lt;&lt;&#125;</code></li><li>高亮 <code>&#123;== ==&#125;&#123;&gt;&gt; &lt;&lt;&#125;</code></li></ul><blockquote><p>CriticMarkup 仅可用于 markdown-it parser，不与 pandoc parser 兼容。</p></blockquote><h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2><ul><li><a href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</a></li><li><a href="https://daringfireball.net/projects/markdown/basics">Daring Fireball: Markdown Basics</a></li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> <span class="token url">[<span class="token content">Mastering Markdown</span>](<span class="token url">https://guides.github.com/features/mastering-markdown/</span>)</span><span class="token list punctuation">-</span> <span class="token url">[<span class="token content">Daring Fireball: Markdown Basics</span>](<span class="token url">https://daringfireball.net/projects/markdown/basics</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>参考文档</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java内存模型</title>
      <link href="2017/06/19/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/11.java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>2017/06/19/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/11.java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1>java内存模型</h1><ul><li>jvm内存模型<br>jvm虚拟机中间内存划分为：</li></ul><ol><li>堆区</li><li>虚拟机栈区</li><li>方法区</li><li>本地方法栈</li><li>程序计数器</li><li>运行时常量</li></ol><ul><li>java内存模型<br><strong>java内存模型</strong>是java的规范，定义了语义到实现的规范。主要有<strong>重排序</strong>、<strong>原子性</strong>、<strong>内存可见性</strong></li></ul><h2 id="重排序"><a class="header-anchor" href="#重排序"></a>重排序</h2><p>指令重排序是通过减少执行指令，来提高整体运行速度。主要有三个地方：</p><ol><li>编译器优化</li><li>cpu重排序</li><li>内存重排序</li></ol><h2 id="原子操作"><a class="header-anchor" href="#原子操作"></a>原子操作</h2><p>java中原子操作有哪些？</p><ol><li>除long和double之外的基本类型</li><li>所有reference的读写</li><li>用volatile修饰后的变量读写</li><li>j.u.c包下的原子类</li></ol><h2 id="内存的可见性"><a class="header-anchor" href="#内存的可见性"></a>内存的可见性</h2><p>内存的可见性指的是，当前线程修改内存中的值以后不能被其他线程看到</p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程协作</title>
      <link href="2017/06/12/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/10.%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/"/>
      <url>2017/06/12/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/10.%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1>线程协作</h1><p>线程之间相互协作</p><h2 id="信号量"><a class="header-anchor" href="#信号量"></a>信号量</h2><p>线程（semaphore）之间信号量的作用是于标记当前资源能否被线程访问的信号。线程访问资源时尝试用<strong>acquire</strong>，访问完成使用<strong>release</strong>归还资源</p><h2 id="countDownLatch"><a class="header-anchor" href="#countDownLatch"></a>countDownLatch</h2><p><strong>countDownLatch</strong>的作用是多线程之间的倒计时器，用于多线程之间的协作。有两种用法：</p><ol><li>主线程等待其他线程运行完毕后执行</li><li>其他线程等待主线程运行完毕后执行</li></ol><ul><li>演示代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"线程_%s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CountDownLatch</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s开始执行..."</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    count<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行完毕..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/03/29/GZRSF1.png" alt="GZRSF1.png"></p><h2 id="CyclicBarriar"><a class="header-anchor" href="#CyclicBarriar"></a>CyclicBarriar</h2><p><strong>CyclicBarriar</strong>是一组线程到达某个状态后才开始执行,与<strong>CountDownLatch</strong>不同。<strong>CountDownLatch</strong>是达到count=0以后开始执行，是作用于<strong>事件</strong>驱动。<strong>CyclicBarriar</strong>是线程驱动，N个线程到达<strong>wait</strong>的状态统一开始执行。</p><ul><li>CyclicBarriar演示代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarriarDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"线程_%s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CyclicBarrier</span> cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> finalI1 <span class="token operator">=</span> i<span class="token punctuation">;</span>            threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> msg1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[%s]-小老鼠[%d]开始出洞"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> finalI1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Integer</span> sleepTime <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> msg2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[%s]-小老鼠[%d]到达指定地点"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> finalI1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> msg3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[%s]-小老鼠[%d]合力获取到奶酪(🧀)"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> finalI1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>执行结果<br><img src="https://s1.ax1x.com/2020/03/29/GZ57WR.png" alt="GZ57WR.png"></p></li><li><p>有启始动作的方法</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CyclicBarrier</span> cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> msg1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[%s]-发现奶酪(🧀)"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果</li></ul><p><img src="https://s1.ax1x.com/2020/03/29/GZIufs.png" alt="GZIufs.png"></p><h2 id="Condittion"><a class="header-anchor" href="#Condittion"></a>Condittion</h2><p><strong>Condittion</strong>能让不同线程之间相互协作，等待满足条件后继续执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConditionDemo</span> conditionDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                conditionDemo<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conditionDemo<span class="token punctuation">.</span><span class="token function">method0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":条件未准备完毕..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":条件准备完毕..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Condition</strong>是lock锁提供的一种可供线程之间进行交互的一种方法。由于<strong>signal</strong>底层会使用到当前线程和lock锁的持有线程进行对比，相等才会进行唤醒其他线程。</p><h1>总结</h1><ul><li><p><strong>semaphore</strong><br>信号量的作用是只有获得信号量的线程才能<strong>执行</strong>，其余线程只能等待持有信号量的线程释放后才有机会执行。</p></li><li><p><strong>countDownLatch</strong>是等待一组线程执行完毕后等待线程才可以执行，是事件触发</p></li><li><p><strong>CyclicBarriar</strong>是一组线程到达**wait()**状态以后才可以开始执行，触发动作是设定的一组线程都到达某个临界状态，并且可被复用，</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程协作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Futrue初探</title>
      <link href="2017/05/19/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/9.Futrue%E5%88%9D%E6%8E%A2/"/>
      <url>2017/05/19/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/9.Futrue%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1>Futrue初探</h1><h2 id="Runnable和Callable的区别？"><a class="header-anchor" href="#Runnable和Callable的区别？"></a>Runnable和Callable的区别？</h2><p><strong>Runnable</strong>是一个无返回值，并且不能checked Exception的任务。java中之所以这样实现是因为执行Runnable方法是调用的Threa.run()方法，不是当前线程进行执行，所以就算抛出异常我们也无法捕捉到；</p><p><strong>Callable</strong>方法定义的是一个有返回值并且可抛出异常的方法，底层采用的是<strong>submit()<strong>方法，返回的是</strong>Futrue<T></strong>，会等待线程执行完毕返回值</p><h2 id="Futrue的主要功能？"><a class="header-anchor" href="#Futrue的主要功能？"></a>Futrue的主要功能？</h2><blockquote><p>Futrue接口</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span>        <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取返回值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> future  <span class="token operator">=</span> threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    futures<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>checked Exception</li><li>取消任务</li><li>判断是否执行完毕</li></ul><h2 id="Futrue的注意点"><a class="header-anchor" href="#Futrue的注意点"></a>Futrue的注意点?</h2><ol><li>**Futrue.get()**是一个阻塞方法，在遍历Futrue时注意会方法是阻塞的去获取不同线程的返回值的，这里可以采用get(timeout)的方式</li><li>Futrue本身并没有产生新的线程，这里是利用Threa或者线程池的技术来执行任务的</li></ol><h2 id="演示代码"><a class="header-anchor" href="#演示代码"></a>演示代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token class-name">Sets</span><span class="token punctuation">.</span><span class="token function">newHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  execute...val:"</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> task0 <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> task1 <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> task2 <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>task0<span class="token punctuation">,</span>task1<span class="token punctuation">,</span>task2<span class="token punctuation">)</span><span class="token punctuation">;</span>    task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过<strong>Collections.synchronizedSet</strong>获取到并发安全的set,利用<strong>Completable.runAsync</strong>执行任务并将结果写入set中，<strong>Future队列</strong>进行等待，定时等待结束，获取结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Futrue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal的分析</title>
      <link href="2017/05/09/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/8.Thread%E7%9A%84%E5%88%86%E6%9E%90/"/>
      <url>2017/05/09/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/8.Thread%E7%9A%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>ThreadLocal的分析</h1><h2 id="ThreadLocal的适用场景"><a class="header-anchor" href="#ThreadLocal的适用场景"></a>ThreadLocal的适用场景</h2><ul><li><strong>ThreadLocal</strong>适用于保存每个线程都独享的对象</li><li><strong>ThreadLocal</strong>适用于保存每个线程独享的对象可供其他方法获取的场景<br>例如web应用程序中的用户信息可以保存中用线程中，从而在其他需要用到的地方直接可以获取到</li></ul><h2 id="ThreadLocal是不是用来解决共享资源多线程访问的？"><a class="header-anchor" href="#ThreadLocal是不是用来解决共享资源多线程访问的？"></a>ThreadLocal是不是用来解决共享资源多线程访问的？</h2><ul><li>不是，ThreadLocal的底层机制决定了每个线程都独立拥有一份空间来存放数据。虽然在效果上线程安全的，但这并不是通过解决共享资源的方式实现的。</li></ul><h2 id="底层原理"><a class="header-anchor" href="#底层原理"></a>底层原理</h2><p>每一个<strong>Thread</strong>内部都有一个<strong>ThreadLocalMap</strong>对象，在<strong>ThreadLocalMap</strong>中有保存的是<strong>ThreadLocal</strong>作为key，值作为value的k-v结构</p><blockquote><p>ThreadLocal.get()</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>this</strong>就是ThreadLocal，因为ThreadLocalMap中的key就是ThreadLocal,因此通过getEntry(this)的方式取到对应的值</p><blockquote><p>Thread.getMap()</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* ThreadLocal values pertaining to this thread. This map is maintained * by the ThreadLocal class. */</span><span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/* * InheritableThreadLocal values pertaining to this thread. This map is * maintained by the InheritableThreadLocal class. */</span><span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//InheritableThreadLocal</span><span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> t<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getMap()就是获取<strong>Thread</strong>的成员变量<strong>threadLocals</strong>、<strong>inheritableThreadLocals</strong></p><ul><li>ThreadLocalMap<br><strong>ThreadLocalMap</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** The value associated with this ThreadLocal. */</span>    <span class="token class-name">Object</span> value<span class="token punctuation">;</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Entry是一个内部类，类似于map结构。Entry这里不是采用HashMap的<strong>拉链法</strong>而是采用的是<strong>线性探测法</strong><br><strong>线性探测法</strong>原理如下：<br><img src="https://s2.ax1x.com/2020/03/09/89Hm0e.png" alt="线性探测法"></p><h2 id="ThreadLocal-remove"><a class="header-anchor" href="#ThreadLocal-remove"></a>ThreadLocal.remove</h2><p><strong>ThreadLocal.remove</strong>方法。在线程不使用ThreadLocal之后必须进行<strong>remove</strong>操作，因为在ThreadLocalMap中k-v是强引用关系，会造成内存泄漏。因此在不使用ThreaLocal之后一定要进行remove操作</p><h2 id="InheritableThreadLocal"><a class="header-anchor" href="#InheritableThreadLocal"></a>InheritableThreadLocal</h2><p><strong>InheritableThreadLocal</strong>是子线程能访问到父线程的ThreadLoca</p><blockquote><p>Thread.init()</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>inheritThreadLocals <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span>        <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在线程初始化方法中，会判断父线程中的<strong>inheritableThreadLocals</strong>是否有值，如果有值会将值赋给子线程</p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原子类的分析</title>
      <link href="2017/04/08/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/7.%E5%8E%9F%E5%AD%90%E7%B1%BB%E7%9A%84%E5%88%86%E6%9E%90/"/>
      <url>2017/04/08/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/7.%E5%8E%9F%E5%AD%90%E7%B1%BB%E7%9A%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>原子类的分析</h1><h2 id="原子类是什么？"><a class="header-anchor" href="#原子类是什么？"></a>原子类是什么？</h2><p>原子类是操作要么是成功要么是失败，不能被中断的类。在java中是在<strong>java.util.concurrent.atomic</strong>下。与锁对比</p><ul><li>粒度更细</li><li>效率更高</li></ul><h2 id="原子类有哪些？"><a class="header-anchor" href="#原子类有哪些？"></a>原子类有哪些？</h2><table><thead><tr><th>分类</th><th>类名</th></tr></thead><tbody><tr><td>Atomic* 基本类型原子类</td><td>AtomicInteger、AtomicLong、AtomicBoolean</td></tr><tr><td>Atomic*Array 数组原子类</td><td>AtomicIntgerArray、AtomicLongArray、AtoimcReferenceArray</td></tr><tr><td>Atomic*Reference 引用类型</td><td>AtomicReference、AtomicStampedReference、AtomicMarkableReference</td></tr><tr><td>Atomic*FieldUpdater 升级类型原子类</td><td>AtomicIntegerfieldupdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater</td></tr><tr><td>Adder 累加器</td><td>LongAdder、DoubleAdder</td></tr><tr><td>Accumulator 积累器</td><td>LongAccumulator、DoubleAccumulator</td></tr></tbody></table><h3 id="Atomic-基本类型原子类"><a class="header-anchor" href="#Atomic-基本类型原子类"></a>Atomic* 基本类型原子类</h3><p>Atomic* 基本原子类，主要是AtomicInteger、AtomicLong、AtomicBoolean<br><strong>AtomicInteger</strong> 类常用方法</p><ul><li>public final int get() //获取当前的值</li><li>public final int getAndSet(int newValue) //获取当前的值，并设置新的值</li><li>public final int getAndIncrement() //获取当前的值，并自增</li><li>public final int getAndDecrement() //获取当前的值，并自减</li><li>public final int getAndAdd(int delta) //获取当前的值，并加上预期的值</li></ul><h3 id="Atomic-Array-数组类型原子类"><a class="header-anchor" href="#Atomic-Array-数组类型原子类"></a>Atomic*Array 数组类型原子类</h3><p>Atomic*Array 数组类型原子类，数组里的元素，都可以保证其原子性，比如 AtomicIntegerArray 相当于把 AtomicInteger 聚合起来，组合成一个数组。主要是<strong>AtomicIntegerArray</strong>：整形数组原子类、<strong>AtomicLongArray</strong>：长整形数组原子类、<strong>AtomicReferenceArray</strong>：引用类型数组原子类</p><h3 id="Atomic-Reference-引用类型原子类"><a class="header-anchor" href="#Atomic-Reference-引用类型原子类"></a>Atomic*Reference 引用类型原子类</h3><ul><li><strong>AtomicReference 引用类型原子类</strong>,可以让一个对象保证原子性。</li><li><strong>AtomicStampedReference</strong>：它是对 AtomicReference 的升级，在此基础上还加了时间戳，用于解决 CAS 的 ABA 问题</li><li><strong>AtomicMarkableReference</strong> 和AtomicReference类似，但是多一个boolean类型可以用来标记是否删除了对象</li></ul><h3 id="Atomic-FieldUpdater-原子更新器"><a class="header-anchor" href="#Atomic-FieldUpdater-原子更新器"></a>Atomic*FieldUpdater 原子更新器</h3><ul><li>AtomicIntegerFieldUpdater：原子更新整形的更新器</li><li>AtomicLongFieldUpdater：原子更新长整形的更新器；</li><li>AtomicReferenceFieldUpdater：原子更新引用的更新器。<br>可以将一个原本不具有原子类操作的类型升级成为一个具有原子的类。</li></ul><h3 id="Adder-加法器"><a class="header-anchor" href="#Adder-加法器"></a>Adder 加法器</h3><ul><li>LongAdder</li><li>DubleAdder</li></ul><h3 id="Accumulator-积累器"><a class="header-anchor" href="#Accumulator-积累器"></a>Accumulator 积累器</h3><ul><li>LongAccumulator</li><li>DoubleAccumulator</li></ul><h2 id="底层原理"><a class="header-anchor" href="#底层原理"></a>底层原理</h2><p>用AtomicIntger类来分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token operator">+</span> delta<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用的是<strong>unsafe.getAndAddInt</strong>方法，这是一个调用硬件进行CAS的方法，通过自旋和CAS保证了并发的安全性</p><h2 id="AtomicIntger在高并发下的性能问题"><a class="header-anchor" href="#AtomicIntger在高并发下的性能问题"></a>AtomicIntger在高并发下的性能问题</h2><p><strong>AtomicIntger</strong>底层是用一个<strong>volatile</strong>进行修饰<B>value</B>字段，因此在高并发的场景下，线程会不断的进行<strong>flush</strong>、<strong>reflush</strong>。<br>因此<strong>LongAdder</strong>是更新方案，采用的是<strong>base</strong>即value和<B>call[]</B>数组用分段的思想，在并发激烈的场景下会加线程需要的资源分配到不同的call中去，在需要sum等操作时遍历<strong>call[]<strong>数组和</strong>base</strong>从而得出值</p><h2 id="原子类和volatile的区别"><a class="header-anchor" href="#原子类和volatile的区别"></a>原子类和volatile的区别</h2><p>原子类是对类的一系列操作进行了封装，让这一系列的操作成为一个原子性的动作。volatile修饰的变量是在内存模型上对其他线程透明;<br>一个表示的语义是并发安全,一个表示的语义是线程间的可见性;<br>两者的适用场景也不一样，volatile适用于可见性方面，原子类适用于对一系列操作具有的原子性的要求;</p><h2 id="LongAccumulator"><a class="header-anchor" href="#LongAccumulator"></a>LongAccumulator</h2><p><strong>LongAccumulator</strong>是对<strong>longAdder</strong>的一个升级，提供了自定义函数的功能，构造器如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LongAccumulator</span><span class="token punctuation">(</span><span class="token class-name">LongBinaryOperator</span> accumulatorFunction<span class="token punctuation">,</span>                       <span class="token keyword">long</span> identity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>function <span class="token operator">=</span> accumulatorFunction<span class="token punctuation">;</span>    base <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>identity <span class="token operator">=</span> identity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>LongBinaryOperator</strong>是一个实现值如何处理的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LongBinaryOperator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Applies this operator to the given operands.     *     * @param left the first operand     * @param right the second operand     * @return the operator result     */</span>    <span class="token keyword">long</span> <span class="token function">applyAsLong</span><span class="token punctuation">(</span><span class="token keyword">long</span> left<span class="token punctuation">,</span> <span class="token keyword">long</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CountDownLatch</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LongAccumulator</span> accumulator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":executer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    accumulator<span class="token punctuation">.</span><span class="token function">accumulate</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span><span class="token function">getThenReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://s2.ax1x.com/2020/03/08/3zjqL8.png" alt="3zjqL8.png"></p><p>适用场景：</p><ul><li>大量的计算并且需要并行计算</li><li>线程之间执行不需要顺序执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原子类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻塞队列</title>
      <link href="2017/04/07/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/6.%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
      <url>2017/04/07/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/6.%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1>阻塞队列</h1><h2 id="阻塞队列的定义"><a class="header-anchor" href="#阻塞队列的定义"></a>阻塞队列的定义</h2><p><strong>阻塞队列</strong>是实现了BlockingQueue接口的子类，BlockingQueue接口是继承自<B>Queue</B></p><ul><li>BlockingQueue</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 阻塞队列的添加操作,如果队列已满，则抛出异常</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 阻塞队列的添加操作,如果队列已满，则返回false</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 阻塞队列的添加操作,如果队列已满，则等待至队列有空间</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">// 阻塞队列的添加操作,如果队列已满，则等待至队列有空间，或者超时</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">// 阻塞队列的弹出操作,如果deque为空，则等待</span>    <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">// 阻塞队列的弹出操作,等待指定时间后超时,可响应中断</span>    <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">// 返回阻塞队列的大小    </span>    <span class="token keyword">int</span> <span class="token function">remainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 移除阻塞队列中的元素    </span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断阻塞队列是否包含指定元素</span>    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将阻塞队列中的元素拷贝到指定的数组中</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将阻塞队列中的元素拷贝到指定的数组中，并返回拷贝的元素个数</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> maxElements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是阻塞队列<B>BlockingQueue</B>接口定义的方法,下面详细的分析一下,这几个主要的方法</p><ol><li><B>take()</B>的功能是移除头节点，当队列为空时，则阻塞</li><li><B>put()</B>的功能是向对位添加元素，当队列满载时，则阻塞</li></ol><p>BlocakingQueue的实现类有：</p><ol><li>ArrayBlockingQueue</li><li>LinkedBlockingQueue</li><li>SynchronousQueue</li><li>DelayQueue</li><li>PriorityBlockingQueue</li><li>LinkedTransferQueue</li></ol><p><img src="https://s2.ax1x.com/2020/03/07/3jrGTI.png" alt="阻塞队列实现"></p><h2 id="阻塞队列常用的方法"><a class="header-anchor" href="#阻塞队列常用的方法"></a>阻塞队列常用的方法</h2><p>在阻塞队列中主要有8种方法，按照分类分为3大类：</p><ol><li><strong>抛出异常</strong> : add、remove、element</li><li><strong>返回结果但是不抛出异常</strong> : offer、poll、peek</li><li><strong>阻塞</strong> : put、take</li></ol><ul><li>分类</li></ul><table><thead><tr><th>动作\失败处理方式</th><th>抛出异常</th><th>返回结果但是不抛出异常</th><th>阻塞</th></tr></thead><tbody><tr><td>添加元素</td><td>add</td><td>offer</td><td>put</td></tr><tr><td>移除元素</td><td>remove</td><td>poll</td><td>take</td></tr><tr><td>返回头节点</td><td>element</td><td>peek</td><td>无</td></tr></tbody></table><ul><li><p>实例操作分析<br>下面使用<B>ArrayBlockingQueue</B>实例来进行演示</p></li><li><p>ArrayBlockingQueueDemo</p></li></ul><h2 id="常见的阻塞队列"><a class="header-anchor" href="#常见的阻塞队列"></a>常见的阻塞队列</h2><ul><li>ArrayBlockingQueue<br><strong>ArrayBlockingQueue</strong>是一个容量固定的有界阻塞队列，构造方法如下：</li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//省略代码...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>fair</strong>表示队列是公平的还是不公平的</p><ul><li>LinkBlockingQueue<br><strong>LinkedBlockingQueue</strong>是一个默认构造器创建的是无界阻塞队列也可以指定队列容量，构造方法如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    last <span class="token operator">=</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>SynchronousQueue<br><strong>SynchronousQueue</strong>是一个内部容量为0的阻塞队列，导致每次取数据都要阻塞等待</p></li><li><p>PriorityBlockingQueue<br><strong>PriorityBlockingQueue</strong>是一个支持优先级排序的阻塞队列，是一个无界队列。构造方法</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DelayQueue</li></ul><p><strong>DelayQueue</strong>是一个延迟阻塞队列，构造函数为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">DelayQueue</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>阻塞队列并发安全的原理是什么？<br>使用两个lock来保证的并发安全,但是在某些情况下不能完全保证并发是安全的</li></ul><h3 id="ArrayBlockingQueue"><a class="header-anchor" href="#ArrayBlockingQueue"></a>ArrayBlockingQueue</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** Main lock guarding all access */</span><span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock<span class="token punctuation">;</span><span class="token comment">/** Condition for waiting takes */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> notEmpty<span class="token punctuation">;</span><span class="token comment">/** Condition for waiting puts */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> notFull<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过共用同一个lock来锁住队列后，用首尾两个<strong>Condition</strong>来分别使线程暂定和唤醒线程;</p><h3 id="ConcurrentLinkedQueue"><a class="header-anchor" href="#ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> t <span class="token operator">=</span> tail<span class="token punctuation">,</span> p <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// p is last node</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// Successful CAS is the linearization point</span>                    <span class="token comment">// for e to become an element of this queue,</span>                    <span class="token comment">// and for newNode to become "live".</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t<span class="token punctuation">)</span> <span class="token comment">// hop two nodes at a time</span>                        <span class="token function">casTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Failure is OK.</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// Lost CAS race to another thread; re-read next</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>                <span class="token comment">// We have fallen off list.  If tail is unchanged, it</span>                <span class="token comment">// will also be off-list, in which case we need to</span>                <span class="token comment">// jump to head, from which all live nodes are always</span>                <span class="token comment">// reachable.  Else the new tail is a better bet.</span>                p <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> head<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token comment">// Check for tail updates after two hops.</span>                p <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> q<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以从方法中看出offer方法就是不停的重试加上CAS机制保证了并发的安全性，这是乐观锁的一种思想。适用用线程竞争不激烈的场景。</p><h2 id="如何选择阻塞队列"><a class="header-anchor" href="#如何选择阻塞队列"></a>如何选择阻塞队列</h2><p>如何选择阻塞队列可以中线程池来进行分析</p><ol><li>LinkedBlockingQueue</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>    <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                            <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出固定线程数的线程池采用的是无限长度的队列作为缓存池</p><ol start="2"><li>SynchronousQueue</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最大线程数的线程池采用的是无容量的队列做为缓存池</p><h3 id="DelayedWorkQueue"><a class="header-anchor" href="#DelayedWorkQueue"></a>DelayedWorkQueue</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具有周期性执行的线程池采用的是延迟队列，从而实现周期性执行的功能</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>因此选择队列也应该从业务的属性出发，在这几个方面进行取舍<strong>长度</strong>、<strong>特点</strong>、<strong>性能</strong>,从而选择最适合业务场景的队列。</p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阻塞队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发容器</title>
      <link href="2017/03/27/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/5.%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/"/>
      <url>2017/03/27/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/5.%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1>并发容器</h1><p>有关并发的容器：HashMap、ConcurrentHashMap、CopyOnWriteArrayList</p><h2 id="HashMap"><a class="header-anchor" href="#HashMap"></a>HashMap</h2><p><strong>HashMap</strong>在并发场景时候存在几个问题：</p><ol><li>get()方法在容器扩容时，获取到的值可能会不正确。因为在扩容时候，hashMap没有保证容器安全性，可能会出现get()方法获取到镜像链表上，而镜像链表此时并没有值的情况</li><li>put()方法可能会造成值消失（这也是map k-v的特性）</li><li>可见性问题</li><li>死循环cpu占用100%。多个线程同时扩容时，会反转散列表的节点，会有死锁场景相互等待。</li></ol><h2 id="ConcurrentHashMap"><a class="header-anchor" href="#ConcurrentHashMap"></a>ConcurrentHashMap</h2><p><strong>ConcurrentHashMap</strong>底层是采用CAS+synchronized的方式，来保证并发安全性。</p><ul><li>synchronized保证写操作时资源竞争激烈情况下的安全</li><li>用CAS机制来保证写操作下轻量级的竞争的安全性。</li></ul><p>map中链表红黑树的设计：红黑树在map中属于一种保底，防御性的编程方式。当hash()方法设计良好的时候，散列表中的元素是符合泊松分布，此时很难出现红黑树的情况，可能性为千万分之一，当出现这样的情况时。首先看容量，在考虑hash()方法是否设计良好。8个的限制是基于空间和时间权衡下得出的。</p><h2 id="CopyOnWriteArrayList"><a class="header-anchor" href="#CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p><strong>CopyOnWriteArrayList</strong>是线程安全的列表，适合于读多写少的场景，列入内存字典等。<br>CopyOnWriteArrayList底层是采用<B>ReentrantLock</B>和volatile修饰数组来保证并发的安全性的。<br>特点：可在迭代器中进行修改列表，当时不会在此次迭代中体现。原因是内部采用双重数组的方式进行扩容，因此迭代器只能读取迭代开始时的元素集合。</p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁</title>
      <link href="2017/03/16/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/4.%E9%94%81/"/>
      <url>2017/03/16/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/4.%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1>锁</h1><p>关于java中锁的有关知识，例如有锁的种类、乐观锁和悲观锁的定义、synchronized和lock的特点、公平锁和非公平锁、读写锁ReadWriteLock、自旋锁、jvm对锁的优化</p><h2 id="锁的分类"><a class="header-anchor" href="#锁的分类"></a>锁的分类</h2><p>java中按照特定可以将锁划分为7个特性：</p><ul><li>偏向锁/轻量级锁/重量级锁</li><li>可重入锁/不可重入锁</li><li>共享锁/非共享锁</li><li>悲观锁/乐观锁</li><li>自旋锁/非自旋锁</li><li>可中断锁/不可中断锁</li></ul><h3 id="偏向锁-轻量级锁-重量级锁"><a class="header-anchor" href="#偏向锁-轻量级锁-重量级锁"></a>偏向锁/轻量级锁/重量级锁</h3><p>这三种都是描述synchronized持有的锁，synchronized锁底层是通过持有共享对象的moniter来实现的，在持有对象的对象头用mark word的标记，当前对象是属于那种锁。</p><h4 id="偏向锁"><a class="header-anchor" href="#偏向锁"></a>偏向锁</h4><p>偏向锁：当共享对象没有发生线程竞争时，执行线程持有锁就是偏向锁。此时共享对象的对象头将持有线程的ID记录下来，再次访问该对象时，如果是执行线程就直接获取，如果不是执行线程该锁会升级为轻量级锁;</p><h4 id="轻量级锁"><a class="header-anchor" href="#轻量级锁"></a>轻量级锁</h4><p>轻量级锁：当共享对象存在资源竞争时，如果之前的锁是偏向锁的状态就会发生锁的升级，升级为轻量级锁。轻量级锁采用CAS和自旋的机制，避免了线程切换所带来的开销</p><h4 id="重量级锁"><a class="header-anchor" href="#重量级锁"></a>重量级锁</h4><p>重量级锁：重量级锁是利用操作系统的同步机制实现的，线程会等待和唤醒开销比较大。</p><h3 id="可重入锁和不可重入锁"><a class="header-anchor" href="#可重入锁和不可重入锁"></a>可重入锁和不可重入锁</h3><p>可重入锁指的是当前持有锁的线程，再次请求持有锁的时候可以直接获得；<br>不可重入锁指定是当前持有锁的线程，再次请求持有锁的时候也不能直接获得需要排队；<br><strong>ReentrantLock</strong>就是可重入锁</p><h3 id="共享锁-非共享锁"><a class="header-anchor" href="#共享锁-非共享锁"></a>共享锁/非共享锁</h3><p>共享锁指的是一个锁可以被多个线程获得；非共享锁又叫独占锁，只能被一个线程使用。<br><strong>ReadWriteLock</strong>中的读锁就是共享锁，write就是独占锁。</p><h3 id="公平锁-非公平锁"><a class="header-anchor" href="#公平锁-非公平锁"></a>公平锁/非公平锁</h3><p>公平锁和非公平锁指的是线程获取锁是否要按照FIFO的规则</p><h3 id="乐观锁-悲观锁"><a class="header-anchor" href="#乐观锁-悲观锁"></a>乐观锁/悲观锁</h3><p>乐观锁：不独占资源，利用CAS思想来完成操作<br>悲观锁：先独占资源，在进行操作</p><h3 id="自旋锁-非自旋锁"><a class="header-anchor" href="#自旋锁-非自旋锁"></a>自旋锁/非自旋锁</h3><p>自旋锁：不出让cpu,通过空转不停的去获取资源<br>非自旋锁：尝试获取锁失败，就进入等待</p><h3 id="可中断锁-不可中断锁"><a class="header-anchor" href="#可中断锁-不可中断锁"></a>可中断锁/不可中断锁</h3><p>可中断锁：可响应线程中断的的锁<br>不可中断锁：必须等待执行线程释放锁，才能响应中断操作</p><h2 id="synchronized底层的实现方法"><a class="header-anchor" href="#synchronized底层的实现方法"></a>synchronized底层的实现方法</h2><p>synchronized修饰<B>代码块</B>时，是通过<strong>monitorenter</strong>、<strong>monitorexit</strong>指令来实现的</p><p><strong>monitorenter</strong>指令的执行过程是</p><ul><li>如果执行线程尝试获取对象的monitor的计数值是0，那么就加1，标记该线程持有锁对象</li><li>如果该线程已经拥有该对象，那么monitor的技术值在加1</li><li>如果该线程尝试获取对象的monitor不为0，且执行线程不为自己，那么等待monitor为0后在尝试获取</li></ul><p><strong>monitorexit</strong></p><ul><li>将锁对象的monitor计数减1操作</li></ul><p>synchronized修饰方法时，是通过<B>ACC_SYNCHRONIZED</B>标记位来实现的，<B>ACC_SYNCHRONIZED</B>标记位标记的方法会在尝试获取到monitor锁后才执行，执行完毕后就释放。</p><h2 id="RLock接口的常用方法"><a class="header-anchor" href="#RLock接口的常用方法"></a>RLock接口的常用方法</h2><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>lock()</td><td>直接获取锁</td></tr><tr><td>tryLock()</td><td>尝试获取锁，返回值表示获取成功还是失败</td></tr><tr><td>tryLock(time)</td><td>带等待时间的tryLock()</td></tr><tr><td>lockInterruptibly()</td><td>可响应中断的锁</td></tr><tr><td>unlock()</td><td>释放锁</td></tr><tr><td>newCondition()</td><td>获取执行线程的Condition对象</td></tr></tbody></table><h2 id="公平锁和非公平锁"><a class="header-anchor" href="#公平锁和非公平锁"></a>公平锁和非公平锁</h2><p>非公平锁存在的意义是,当前cpu执行线程可以直接获取到锁，不用参与线程等待队列，从而减少线程挂起和唤醒消耗的时间。有可能线程已经执行完成后，等待队列中的线程才进行唤起。</p><ul><li><strong>ReentrantLock</strong>默认就是非公平锁</li></ul><h2 id="读写锁"><a class="header-anchor" href="#读写锁"></a>读写锁</h2><ul><li><strong>ReadWriteLock</strong></li></ul><h3 id="特点"><a class="header-anchor" href="#特点"></a>特点</h3><p>要么是一个线程或多个线程占用了读锁，要么是一个线程占用了写锁。两者不会同时出现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock</span> readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span> readLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> writeLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ReentrantReadWriteLock是ReadWrite接口的一个具体实现，通过readLock()获取读锁，通过writeLock()可以获取写锁<br>在获取读写锁的时候，可以多个线程同时获取到readLock锁，但是在获取写锁的时候只能单个写获取到写锁并且该锁只能独占在使用到写锁的时候</p><h3 id="获取锁的方式和读写锁升降级策略"><a class="header-anchor" href="#获取锁的方式和读写锁升降级策略"></a>获取锁的方式和读写锁升降级策略</h3><p>公平的读写锁时，都不允许插队，读锁和写锁都要按照等待队列的顺序依次进行排队在获取锁</p><p>非公平锁的时候？读锁在等待队列中的第一个线程不是竞争写锁的时候可以允许插队，但是第一个是竞争写锁的线程时不允许插队<br>写锁竞争时，允许插队，插队如果失败的话进入等待队列中</p><p>锁的升降级策略：在同一个线程中可以先获取到写锁并且不释放，然后获取到读锁，再释放写锁，从而实现线程持有锁的降级，从写锁降级为读锁。</p><p>注意锁的降级是在同一线程中执行的，并不是在不同的线程中实现的。<br>这样做的优点在于，写锁只独占修改的那一段时间，降级为读锁后其他线程都可以获取到读锁从而提高效率。</p><h2 id="自旋锁"><a class="header-anchor" href="#自旋锁"></a>自旋锁</h2><p>自旋锁产生的原因是，由于线程独占执行的代码时间较短，比挂起和唤醒线程的时间要短很多，因此线程通过循环判断竞争锁的条件不断的尝试获取锁，从而提高性能。<br>如果临界区很大，线程执行任务耗时需要很久的话，这种方式反而不利于性能<br>适用于并发度不是很高，并且临界区比较短小的情况这样。</p><h2 id="JVM对锁的优化"><a class="header-anchor" href="#JVM对锁的优化"></a>JVM对锁的优化</h2><p>1.自适应锁的自旋<br>2.锁消除   对于不会有竞争的场景，会自动消除锁<br>3.锁粗化   锁的范围会放大，减少加锁解锁的步骤，从而提高效率<br>4.偏向锁/轻量级锁/重量级锁</p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注音词典(一)</title>
      <link href="2017/03/04/9.%E6%B3%A8%E9%9F%B3%E8%AF%8D%E5%85%B8/%E6%B3%A8%E9%9F%B3%E8%AF%8D%E5%85%B8-1/"/>
      <url>2017/03/04/9.%E6%B3%A8%E9%9F%B3%E8%AF%8D%E5%85%B8/%E6%B3%A8%E9%9F%B3%E8%AF%8D%E5%85%B8-1/</url>
      
        <content type="html"><![CDATA[<h1>注音词典</h1><table><thead><tr><th>英文</th><th>读音</th><th>中文</th><th>音标</th></tr></thead><tbody><tr><td>transaction</td><td>穿事安可型</td><td>事务</td><td>ˈzak-,tranˈsakSHən</td></tr><tr><td>template</td><td>谈普冷特</td><td>模板</td><td>ˈtemplət</td></tr><tr><td>reflect</td><td>瑞富来客特</td><td>反射</td><td>riˈflekt</td></tr><tr><td>method</td><td>麦舍得</td><td>方法</td><td>ˈmeTHəd</td></tr><tr><td>interceptor</td><td>应乐赛破特儿</td><td>拦截器</td><td>ˌintərˈseptər</td></tr><tr><td>execution</td><td>哎克斯扣新</td><td>执行</td><td>ˌeksiˈkyo͞oSHən</td></tr><tr><td>component</td><td>肯珀冷特</td><td>零件</td><td></td></tr><tr><td>definition</td><td>带飞类型</td><td>定义</td><td>defəˈniSHən</td></tr><tr><td>abstract</td><td>阿波斯拽克特</td><td>抽象</td><td></td></tr><tr><td>default</td><td>地否哦</td><td>默认</td><td></td></tr><tr><td>annotation</td><td>按类忒型</td><td>注解</td><td></td></tr><tr><td>componet</td><td>肯珀冷特</td><td>零件</td><td></td></tr><tr><td>register</td><td>完即使忒</td><td>注册</td><td></td></tr><tr><td>scanner</td><td>斯丹勒儿</td><td>扫描器</td><td></td></tr><tr><td>prepare</td><td>珀佩儿</td><td>准备</td><td></td></tr><tr><td>obtain</td><td>奥珀听</td><td>获得</td><td></td></tr><tr><td>generic</td><td>姐捏瑞克</td><td>通用</td><td></td></tr><tr><td>process</td><td>波啦舍斯</td><td>处理</td><td></td></tr><tr><td>source</td><td>锁斯</td><td>资源</td><td></td></tr><tr><td>multicaster</td><td>谋提凯斯特</td><td>多路广播</td><td></td></tr><tr><td>Event</td><td>额完特</td><td>事件</td><td></td></tr><tr><td>listable</td><td>类似特博</td><td>可列出</td><td></td></tr><tr><td>Initialize</td><td>因立新来紫</td><td>初始化</td><td></td></tr><tr><td>obtain</td><td>熬普廷</td><td>获取</td><td></td></tr><tr><td>Delegating</td><td>待乐给因</td><td>委托</td><td></td></tr><tr><td>resolve</td><td>蕊早富</td><td>解决</td><td></td></tr><tr><td>Instantiation</td><td>因是丹写A性</td><td>实例化</td><td></td></tr><tr><td>constructor</td><td>肯斯穿克特儿</td><td>构建器</td><td></td></tr><tr><td>Concurrent</td><td>肯块儿润</td><td>并发的</td><td></td></tr><tr><td>Reference</td><td>软分斯</td><td>参考</td><td>ˈref(ə)rəns</td></tr><tr><td>Atomic</td><td>额套米克</td><td>原子</td><td>əˈtämik</td></tr><tr><td>volatile</td><td>瓦勒多</td><td>易变的</td><td>ˈvälətl</td></tr><tr><td>accumulator</td><td>额Q米勒得儿</td><td>累加器</td><td>əˈkyo͞omyəˌlātər</td></tr><tr><td>inherit</td><td>营黑儿</td><td>继承</td><td>inˈherit</td></tr><tr><td>Creator</td><td>魁蕊得儿</td><td>创作者</td><td>krēˈātər</td></tr><tr><td>proxy</td><td>怕克舍</td><td>代理</td><td>ˈpräksē</td></tr><tr><td>status</td><td>斯丹特斯</td><td>状态</td><td>statəs</td></tr><tr><td>platform</td><td>珀那博儿</td><td>平台</td><td>ˈplatfôrm</td></tr><tr><td>prepared</td><td>珀佩儿的</td><td>准备</td><td>priˈpe(ə)r</td></tr><tr><td>Resolver</td><td>蕊遭飞儿</td><td>解析器</td><td></td></tr><tr><td>annotated</td><td>俺勒提</td><td>注释</td><td>ˈanəˌtāt</td></tr><tr><td>semaphore</td><td>三模否儿</td><td>信号</td><td>seməˌfôr</td></tr><tr><td>acquire</td><td>额快儿</td><td>获得</td><td></td></tr><tr><td>Latch</td><td>蓝池</td><td>锁存器</td><td></td></tr><tr><td>environment</td><td>营歪勒们特</td><td>环境</td><td></td></tr><tr><td>cyclicBarrier</td><td>c克立克憋蕊儿</td><td>循环屏障</td><td>sīklik ˈbarēər</td></tr><tr><td>groups</td><td>格肉破丝</td><td>团体</td><td>ɡro͞ops</td></tr><tr><td>completion</td><td>康珀类新</td><td>完成时间</td><td></td></tr><tr><td>Servivor</td><td>色外德二</td><td>幸存者</td><td>sərˈvīvər</td></tr><tr><td>minor</td><td>买勒儿</td><td>次要</td><td>ˈmīnər</td></tr><tr><td>major</td><td>梅吉儿</td><td>重要</td><td>ˈmājər</td></tr><tr><td>throwable</td><td>否欧-额博</td><td>抛出</td><td>THrō ˈābəl</td></tr><tr><td>transient</td><td>穿站特</td><td>短暂的</td><td>tranSHənt</td></tr><tr><td>Issues</td><td>一宿时~</td><td>问题</td><td>ˈiSHo͞os</td></tr><tr><td>dynamic</td><td>待蓝米克</td><td>动态的</td><td>dīˈnamik</td></tr><tr><td>acquire Shared</td><td>额快儿 西儿</td><td>获取共享</td><td></td></tr><tr><td>factories</td><td>泛客铽瑞</td><td>工厂</td><td></td></tr><tr><td>Maria DB</td><td>玛瑞亚</td><td>玛瑞亚</td><td>MariaDB</td></tr><tr><td>resilience</td><td>瑞泽丽安时</td><td>resilience4j</td><td>rəˈzilyəns</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 英文发音 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英文发音 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="2017/03/02/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/3.%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>2017/03/02/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/3.%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1>线程池</h1><p>有关线程池的创建、常见的几种线程池，线程池的使用方式</p><h2 id="创建线程池"><a class="header-anchor" href="#创建线程池"></a>创建线程池</h2><p>创建线程池：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>各个参数含义</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>corePoolSize</td><td>核心线程数</td></tr><tr><td>maximumPoolSize</td><td>最大线程数</td></tr><tr><td>keepAliveTime和unit</td><td>空闲存活时间</td></tr><tr><td>workQueue</td><td>任务缓存队列</td></tr><tr><td>threadFactory</td><td>线程工厂</td></tr><tr><td>handler</td><td>拒绝策略</td></tr></tbody></table><p>线程池的执行流程为、</p><ol><li>线程池中的线程未达到核心线程，<strong>提交任务后就会立刻执行任务</strong></li><li>线程池中的线程达到核心线程数，<strong>将任务提交到任务缓存队列</strong></li><li>任务缓存队列已满，未达到最大线程数，<strong>将会创建新的线程执行任务</strong></li><li>达到最大线程数，执行拒绝策略</li></ol><p><img src="https://github.com/agmtopy/noteBook/blob/master/png/j-jvm/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png?raw=true" alt="线程池执行流程"></p><ul><li>拒绝策略类型</li></ul><table><thead><tr><th>初始化</th><th>特性</th></tr></thead><tbody><tr><td>ThreadPoolExecutor.AbortPolicy()</td><td>抛出异常</td></tr><tr><td>ThreadPoolExecutor.DiscardPolicy()</td><td>直接丢弃不抛出异常</td></tr><tr><td>ThreadPoolExecutor.DiscardOldestPolicy()</td><td>丢弃队列中存在最长的时间</td></tr><tr><td>ThreadPoolExecutor.CallerRunsPolicy()</td><td>由提交任务的线程来执行任务</td></tr></tbody></table><p><strong>ThreadPoolExecutor.CallerRunsPolicy()</strong> 这种拒绝策略比较合理，通过将任务由提交任务的线程去执行这样可以减少任务的累积</p><h3 id="Executers-new"><a class="header-anchor" href="#Executers-new"></a>Executers.new</h3><table><thead><tr><th>初始化</th><th>特性</th></tr></thead><tbody><tr><td>Executors.newCachedThreadPool()</td><td>无上限的线程数的线程池,线程会保持60s</td></tr><tr><td>Executors.newFixedThreadPool()</td><td>固定线程数,无上限的缓存任务队列</td></tr><tr><td>Executors.newSingleThreadExecutor()</td><td>单个线程,无上限的缓存任务队列</td></tr><tr><td>Executors.ScheduledThreadPoolExecutor()</td><td>有固定线程数,延迟队列</td></tr></tbody></table><h3 id="ForkJoinPool"><a class="header-anchor" href="#ForkJoinPool"></a>ForkJoinPool</h3><p><strong>ForkJoinPool线程池</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ForkJoinPool</span> forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ForkJoinTask</span> task <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fibonacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="阻塞队列"><a class="header-anchor" href="#阻塞队列"></a>阻塞队列</h2><table><thead><tr><th>初始化</th><th>特性</th></tr></thead><tbody><tr><td>LinkedBlockingQueue</td><td>无容量上限的队列</td></tr><tr><td>SynchronousQueue</td><td>无容量的队列，提交任务立即弹出</td></tr><tr><td>DelayedWorkQueue</td><td>延迟队列</td></tr></tbody></table><h2 id="核心线程数的选择"><a class="header-anchor" href="#核心线程数的选择"></a>核心线程数的选择</h2><p>核心线程数的选择是根据任务的类型<strong>CPU密集性</strong>、<strong>IO密集型</strong></p><p><strong>CPU密集性</strong>任务，会一直使用cpu进行计算，合适的线程数为cpu核心数的<strong>1~2</strong>倍，过多的线程数会造成线程上下文的频繁切换，执行效率反而不高。</p><p><strong>IO密集型</strong>任务，会执行IO任务，cpu进行等待，因此线程数可以尽量多一些。</p><p>*<em>线程数 =  CPU核心数 <em>（1 + 平均等待时间/平均工作时间）</em></em></p><h2 id="shutdown和shutdownNew的区别"><a class="header-anchor" href="#shutdown和shutdownNew的区别"></a>shutdown和shutdownNew的区别</h2><p><B>shutdown</B>不在允许提交任务，待执行线程池中正在执行的任务和任务队列中的任务后线程池关闭<br><B>shutdownNow</B>立即暂停任务，向正在执行任务的线程发送中断信号，将等待队列中的任务转移出来，然后线程池关闭</p><p>线程池复用线程的逻辑是，创建线程后不停的获取task进行执行（run）方法</p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全</title>
      <link href="2017/02/27/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/2.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
      <url>2017/02/27/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/2.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1>线程安全</h1><p>介绍多线程中的有关线程安全的知识，包含线程安全问题、性能问题</p><h2 id="线程安全"><a class="header-anchor" href="#线程安全"></a>线程安全</h2><p>多线程远行时序不正确可能会带来<strong>运行结果错误</strong>、<strong>初始化线程导致的安全问题</strong>、<strong>活跃性问题</strong>。</p><ol><li><B>运行结果问题</B>：多线程运行时，共享的资源没有得到正确的处理导致结果错误</li><li><B>初始化线程导致的安全问题</B>：线程执行时序错误，导致初始化错误</li><li><B>活跃性问题</B>：多线程竞争导致<strong>死锁</strong>、<strong>活锁</strong>、<strong>饥饿</strong>等问题</li></ol><h2 id="线程性能"><a class="header-anchor" href="#线程性能"></a>线程性能</h2><ol><li>调度开销：<strong>线程上下文切换</strong>、<strong>缓存失效</strong></li><li>协助开销：共享资源相互协助需要等待和刷新等等协助的操作会耗时<br><strong>缓存失效</strong>指的是操作系统在读取一段数据时会预载磁盘分配上下节点的数据，当线程发生切换后，缓存失效</li></ol>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程基础</title>
      <link href="2017/02/22/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/1.%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>2017/02/22/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/1.%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>线程基础</h1><p>介绍多线程中的基础知识，包含线程创建、线程运行状态和线程中断</p><h2 id="线程创建"><a class="header-anchor" href="#线程创建"></a>线程创建</h2><p>线程创建有且/只有一种方式，继承<B>Thread</B>类,并重写<B>Run()</B>方法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> TaskDemoKt<span class="token operator">:</span> <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"执行任务"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> demoKt <span class="token operator">=</span> <span class="token function">TaskDemoKt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    demoKt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Thread内部是通过本地方法的方式来进行实现的</p><ul><li>Thread</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//其他步骤省略...</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//run()方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//本地方法</span><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这里可以看到在创建Thread(Runnable)对象时,会将Runnable对象作为线程内部的一个成员变量target<br>这个target在两个地方会使用到,第一个是直接执行run()方法时,第二个是本地native start0();</p><p>下面分析JVM是如何执行start0()这个本地方法的</p><ul><li>start0</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1. 调用操作系统创建Threadbool os::create_thread(Thread* thread, ThreadType thr_type,                       size_t req_stack_size) &#123;  assert(thread-&gt;osthread() &#x3D;&#x3D; nullptr, &quot;caller responsible&quot;);  &#x2F;&#x2F; Allocate the OSThread object  OSThread* osthread &#x3D; new OSThread();  if (osthread &#x3D;&#x3D; nullptr) &#123;    return false;  &#125;&#125;&#x2F;&#x2F;2. 父Thread启动子Threadvoid os::start_thread(Thread* thread) &#123;  OSThread* osthread &#x3D; thread-&gt;osthread();  osthread-&gt;set_state(RUNNABLE);  pd_start_thread(thread);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现任务的几种方式"><a class="header-anchor" href="#实现任务的几种方式"></a>实现任务的几种方式</h2><p>通过实现Runnable接口、创建线程池、Timer类等方式都可以把业务逻辑代码包装成为一个task,在使用Thread来进行执行;</p><h3 id="实现Runnable"><a class="header-anchor" href="#实现Runnable"></a>实现Runnable</h3><h3 id="创建线程池"><a class="header-anchor" href="#创建线程池"></a>创建线程池</h3><p>创建线程池,以创建同步队列的线程池为例</p><ul><li>创建线程池</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">fun <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//以创建同步队列的线程池为例</span>    val poolExecutor <span class="token operator">=</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token class-name">IntRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>forEach <span class="token punctuation">&#123;</span> _ <span class="token operator">-></span> poolExecutor<span class="token punctuation">.</span>submit <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印当前时间:"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//ThreadPoolExecutor中的线程的创建过程</span><span class="token comment">//execute()</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Worker(firstTask)</span><span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inhibit interrupts until runWorker</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Timer"><a class="header-anchor" href="#使用Timer"></a>使用Timer</h3><ul><li>使用Timer</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> timer <span class="token operator">=</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>timerTask <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始打印:"</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Timer.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//实现Timer执行的方法</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sched</span><span class="token punctuation">(</span><span class="token class-name">TimerTask</span> task<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建TimerThread</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TimerThread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerThread</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TimerThread</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">mainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Someone killed this Thread, behave as if Timer cancelled</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newTasksMayBeScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Eliminate obsolete references</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//mainLoop</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimerTask</span> task<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> taskFired<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                task <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上这是Timer执行过程的伪代码,主要是分为以下几个部分</p><ol><li>构建Timer是初始化TimerThread/queue</li><li>TimerThread循环处理queue中的task</li></ol><h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3><p>可以看到以上三种方式不管是实现Ruannble接口/创建线程池/使用Timer在底层都是通过创建一个Thread对象来执行的.<br>下面来分析一下Thread的方法和实现</p><h2 id="线程任务"><a class="header-anchor" href="#线程任务"></a>线程任务</h2><p>线程能执行的任务分为<B>Runnable</B>,<B>Callable</B>,<B>ForkJoinTask</B>三类,下面来详细的介绍一下</p><h3 id="Runnable"><a class="header-anchor" href="#Runnable"></a>Runnable</h3><p>实现<B>Runnable</B>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//TODO 执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Callable"><a class="header-anchor" href="#Callable"></a>Callable</h3><p>实现<B>Callable<Objetc></B>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ForkJoinTask"><a class="header-anchor" href="#ForkJoinTask"></a>ForkJoinTask</h3><p>继承<B>ForkJoinTask</B>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getRawResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setRawResult</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过实现Runnable接口的方式来执行任务比直接创建线程要好的多，这样可以复用线程。</p><h2 id="线程状态"><a class="header-anchor" href="#线程状态"></a>线程状态</h2><p>线程的状态可以分为</p><ol><li>New(新创建)</li><li>Runnable(可运行)</li><li>Blocked(可阻塞)</li><li>Waiting(等待)</li><li>Timed Waiting(计时等待)</li><li>Terminated(被终止)</li></ol><p><img src="https://s2.ax1x.com/2020/02/23/31vE4A.png" alt="线程状态"></p><p>线程的创建/启动/执行是由JVM的native方法调用操作系统的API进行执行</p><h2 id="中断线程"><a class="header-anchor" href="#中断线程"></a>中断线程</h2><p>在java中不提供强制停止线程的方式，因为线程的强制停止可能会造成数据异常或者业务中断，这是业务方和中断方都不愿意看到的方式。java提供的方式是希望线程之间可以相互的通知、相互协助。提供这个方式的是<B>interrupt</B>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//more work to do</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>判断线程条件和业务规则都满足时，才会继续执行。</p><p>在线程<B>sleep</B>期间，线程可以感受到中断信号，感受到中断信号后会清除中断位标志并且抛出<B>InterruptedException</B>异常。</p><p>关于线程中断isInterrupted()和线程关闭stop()的区别在于<br>线程中断是不会中断线程的运行的,而线程关闭stop会关闭线程,stop()是不安全的说法来自于stop()执行后会立即释放该线程所持有的所有锁(包括synchronized持有的全局对象锁)</p><h2 id="volatile不能作为线程标记位"><a class="header-anchor" href="#volatile不能作为线程标记位"></a>volatile不能作为线程标记位</h2><p>volatile作为并发标记位的时候，当一个使用线程阻塞的时候，其他线程仍旧可以改变标记位的值,打但是由于线程不是活动的是不能即使获取到volatile的值，因此volatile不适合作为线程标记位。根本原因在于volatile标记的对象不是全局共享的,在内存一致性的协议下作到可见性;</p><h2 id="wait-notify-notifyAll-方法使用注意"><a class="header-anchor" href="#wait-notify-notifyAll-方法使用注意"></a>wait/notify/notifyAll()方法使用注意</h2><ol><li>wait()方法，必须在<B>synchronized</B>中持有锁后才能使用，因为必须持有对象的<B>monitor</B>锁，这样才能防止在执行前后线程被切换。</li><li><B>sleep()</B>被定义在Thread中，wait/notify/notifyAll都要操作<B>monitor</B>,属于对象级的锁。</li><li>wait/notify与sleep的区别<ol><li>相同点<br>都让线程阻塞、都可响应InterruptException异常</li><li>不同点<br>2.1 sleep不会释放monitor锁<br>2.2 sleep方法必须定义一个等待时间，到期后可主动恢复，wait方法没时间参数意味着一直会等待下去<br>2.3 wait/notify是Object的，sleep是Thread的方法<br>2.4 wait必须在synchronized中使用<br>wait必须在synchronized中使用的原因是因为防止指令的乱序执行导致wait()后的代码提前执行,使用synchronized来保证原子性</li></ol></li></ol><h2 id="参考文章"><a class="header-anchor" href="#参考文章"></a>参考文章</h2><p><a href="https://www.baeldung.com/java-thread-stop">如何杀死java中的Thread</a><br><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/doc-files/threadPrimitiveDeprecation.html">Java Thread Primitive Deprecation</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022的一些杂想</title>
      <link href="2012/11/26/1.%E6%9D%82%E8%AE%B0/2022%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E6%83%B3/"/>
      <url>2012/11/26/1.%E6%9D%82%E8%AE%B0/2022%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="eba0d66d78ff91c79318679d67a91ca8a21dc554867055416c7952385a022d44">643d109c51640d2d7b0c82f8ea2d3c213e402d02b862bdb1d79adc88c6b281564768ef0d8f3136fc808847c5c2e211f3f32009187ab6ae8c389caa18909c80cccf9d5c8bc1183edcf20e8ba97b7525081d3756c504dec301e3c3aed566b01399bb2451f3bcc4169642ae4dab7489cbe1b9f9ed8aff6cde80f1653ae97bcb32821e94f40b021ccc35e6d856411ccc9b2954b88afb2dc9e6bbfe51087af217e160e6be8c2d848e1c1fd0f8d4dfa5c8963a7bbd488aa9693f5e3bcfb37ec5d44fc88e1ad5dc7e56438b436f4f188703949c14a025692978f873a8b36cc1e5e29cc694d321deb32964bc13c44ad3f2fdeed0a60ecab4792e2274e82a85e4c2e0c390fda2992a15e3668392fde2fbaab056255bb641f8dc2698503e397df6fece8b3c8aa47aecac740137493ab327c5f26093a3fea3c08700499a178cd126f1e9d88e64fec12a235b945a38b8af846e9ed7d46077d644fb2b6c3b6d19be18b524e1eb855546e59fcbf78fd554da8bb8b3befd9974e3558e22d177c45e101b0e3c00da8311a9e51b8338e3d285373b4b3b43b710b0f92107ffe8b557a6e488b60e46cad7f047ba32e2ab2a7631d14181148d43cb359bd3f3d0c9fa111125b65392be80e854de380fbad41f5a54cc0413f5c8c36ef6f3e07554ede2bc839d94cec6c6c5f211a4d2687b3680fa97a90217360fd7ab53ca709baf527a87000aeeeb5283f7e0f48307bd7d67860cb550af2dd0030e7511c21804b9f27bb2bdd5c7bcea68ab1f49b103ef46b656cedb8d5283e1dcc399698f9a38955536ba0e5dc95aad1f29bf42f4e70b5c63204669c2de74ba2f9c4c08755a6723929f8126a820f02fe9177346835319171cfce55a755964cd356b8ef610cc852a0c075d4375ecbb2d99c87866b937989f4a3d911b85a00cf5dbafac3b1febe9507a5ba36019c6c3f7a4a91b8f0f495f03dbea35362c55d57beb7ab030b6eb489d14f46b613d9251c005d348bb4600e856f0f12c8be2f7c14a498ad9a9fc6de99f19f0ab7ebfce5b411187be531ef085d5c6bf552a76f1d6c2074e9ebb6bfc1566ed621518744dbf3888e7ec8dca6494bbeb1a0a136407863a2ac14e85579aac5cdb45ff44aab9e58178b02756f01ab30d42acf00a1f08f37a54914ec65ac586577fb29f653f43dbd045ff6e4f4a8ba9e8a7d5e3e2fd565b590b1087578ab8a7e038d3692c8448841185ebf1fa5fc060b367b94a27ae19906e3eeee30d4751628f5e30d1023c8639e7647cafd01202429ad4c688026ca7e16307b204b5aad2cc4b892842cda67417bc91fce6c092331de96812d69658c43829efd8e625ad8d91d053b9ef017c42d8db2802a5d3014080056c4ae2648b8854a6945a1892848f8f9684110c0d6dbdef5cf01ea7b028943935e9d1973f3ba1340d0c06870c274b9bdfad5a9ec692966cddb06b8cef7dd1b0ab4634458d401ea0d5c1cf6027e0f6c33ed2ec5f4356a203bcd16a118816dc7413d06dd348498018af07cb26e111b9d295e09a335f005b1fd99bb02b55a612f45186e06046a6978b7255eed299d1869b3b4a6181607eb272f0f0079cf9e6c8af02937810d9928ac6b4cfa973a812b0b02eb1c8fa9f1c2856d72e6c9dd4b749407df3c13d80fb14c52be535f1c53bdcc7ee516605028f3a7b95882a840218b8925d3e4386a53905f1a1330b6937ead943c44e6911b19490d9d1114f4ca3d38815d2d9c36f452d99debc33b8125ec24a3957ae4e1deac1edf991a97677b6997ebb723b8d7786291c0058ab4e56a769309701dc0e0ce7f64ab7c96604</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
