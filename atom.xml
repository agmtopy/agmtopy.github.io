<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>agmtopy博客</title>
  
  <subtitle>agmtopy</subtitle>
  <link href="https://agmtopy.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://agmtopy.gitee.io/"/>
  <updated>2022-01-15T16:49:09.556Z</updated>
  <id>https://agmtopy.gitee.io/</id>
  
  <author>
    <name>agmtopy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis底层数据结构分析</title>
    <link href="https://agmtopy.gitee.io/2022/01/05/1.%E6%9D%82%E8%AE%B0/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>https://agmtopy.gitee.io/2022/01/05/1.%E6%9D%82%E8%AE%B0/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</id>
    <published>2022-01-05T14:51:45.000Z</published>
    <updated>2022-01-15T16:49:09.556Z</updated>
    
    <content type="html"><![CDATA[<h1>redis底层数据结构分析</h1><p>redis底层数据结构分析主要是根据《Redis5 设计与源码分析》一书而来,redis底层数据结构可以划分为</p><ul><li>简单动态字符串</li><li>跳跃表</li><li>压缩列表</li><li>字典</li><li>整数集合</li><li>quicklist</li><li>stream</li></ul><p>这七种数据类型,下面分别对这七种数据类型进行分析</p><h2 id="简单动态字符串"><a class="header-anchor" href="#简单动态字符串"></a>简单动态字符串</h2><h3 id="数据结构"><a class="header-anchor" href="#数据结构"></a>数据结构</h3><p>简单动态字符串又被称为<B>SDS</B>,几乎贯穿redis中所有的模块。redis中重新设计字符串的原因是由于C语言中的char*,不满足redis中的一些常用操作例如追加字符、<br>计数等。</p><ul><li><p>char*<br>在C语言中定义的字符串结构为:字符+字符结尾，例如&quot;hello world!/n&quot;,而/n就是字符结尾，这样的结构不满足redis所需要的快速追加和计数操作</p></li><li><p>SDS<br>SDS结构是一个可以描述字符串类型(redis内部用于区分长度)、字符串长度、字符指针的类型,下面是一个具体的SDS的定义</p></li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef char *sds;struct __attribute__ ((__packed__)) sdshdr8 &#123;    uint8_t len; &#x2F;* used *&#x2F;    uint8_t alloc; &#x2F;* excluding the header and null terminator *&#x2F;    unsigned char flags; &#x2F;* 3 lsb of type, 5 unused bits *&#x2F;    char buf[];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到SDS的类型还是*char，但是在内部重新定义了len-占用长度、alloc-最大长度、flags-标识等。</p><p><img src="http://zhangtielei.com/assets/photos_redis/redis_sds_structure.png" alt="sds的数据结构"></p><p>在这张图中的<B>sdshdr8</B>、<B>sdshdr16</B>,flags的低三位存储的是SDS的类型，高5位没有含义，在SDS5中高5位存储的是长度。<br>实际存储数据的是<B>buf[]</B>,buf[]是一个柔性数组，柔性数组指的是数据结构和内容在内存上是连续的，这样的结构查询更快速(因为不需要额外进行指针操作)<br>使用<B><strong>attribute</strong></B>让编译器以紧凑模式进行内存分配,这样可以节省<B>flags</B>的3个字节，默认内存分配是以4个字节进行分配的</p><ul><li>小结<br>关于SDS需要记住的tags:</li></ul><ol><li>[继承] 继承于char*</li><li>[类型] 是一种动态的字符串，根据字符的长度可以分配不同的SDS类型</li><li>[组成] 由于len、alloc、flags、buf[]构成</li><li>[紧凑] 紧凑模式分配类型</li></ol><h3 id="操作"><a class="header-anchor" href="#操作"></a>操作</h3><p>SDS-动态字符串具有的操作分别有增删改查这几种，其中删除的设计比较特别。</p><ul><li>删除</li></ul><p>SDS的删除是通过<B>sdsclear</B>来实现的,直接设置len为0的方式来实现</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Modify an sds string in-place to make it empty (zero length).* However all the existing buffer is not discarded but set as free space* so that next append operations will not require allocations up to the* number of bytes previously available. *&#x2F;void sdsclear(sds s) &#123;    sdssetlen(s, 0);    s[0] &#x3D; &#39;\0&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加</li></ul><p>增加机制可参考下图<br><img src="https://s2.loli.net/2022/01/06/LUTovNR2k3hyIKm.png" alt="redis_sds_扩容机制"></p><p>主要是进行两个判断</p><ol><li>判断是否需要进行扩容</li><li>判断是否需要进行类型更改</li></ol><p>默认情况下是不会使用SDS5的类型,因为Redis认为扩容是一种常见的操作,因此SDS5很大的几率会更新成为SDS8类型.</p><h2 id="跳跃列表"><a class="header-anchor" href="#跳跃列表"></a>跳跃列表</h2><h3 id="数据结构-v2"><a class="header-anchor" href="#数据结构-v2"></a>数据结构</h3><p>跳跃列表指的是通过维护一个多层的链表结构来实现快速查找的数据结构<br><a href="https://zh.wikipedia.org/wiki/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8">跳跃列表</a>的解释.<br>下面是一个跳跃列表的数据结构</p><p><img src="https://s2.loli.net/2022/01/06/uciEDA9j2THBkJx.gif" alt="跳跃列表"></p><blockquote><p>通过将有序集合的部分节点分层，由最上层开始依次向后查找，如果本层的next节点大于要查找的值或next节点为NULL，则从本节点开始，降低一层继续向后查找，依次类推，如果找到则返回节点；否则返回NULL。采用该原理查找节点，在节点数量比较多时，可以跳过一些节点，查询效率大大提升，这就是跳跃表的基本思想。</p></blockquote><p>redis中的跳跃列表主要是由两个元素进行实现<B>zskiplistNode</B>、<B>zskiplist</B>,下面来详细分析一下这两个元素的源代码</p><ul><li>zskiplistNode</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* ZSETs 所使用的特殊版本的Skiplists *&#x2F;typedef struct zskiplistNode &#123;    &#x2F;&#x2F;字符串类型ele    sds ele;    &#x2F;&#x2F;用于存储排序的分值,最底层的列表就是根据这个分值进行排序    double score;    &#x2F;&#x2F;后退指针    struct zskiplistNode *backward;    &#x2F;&#x2F;层信息描述    struct zskiplistLevel &#123;        &#x2F;&#x2F;同层中的下一个节点指针        struct zskiplistNode *forward;        &#x2F;&#x2F;同层中的跨度,用于计数        unsigned long span;    &#125; level[];&#125; zskiplistNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>zskiplist</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct zskiplist &#123;    &#x2F;&#x2F;分别指向跳跃列表的头结点指针和尾节点指针    struct zskiplistNode *header, *tail;    &#x2F;&#x2F;列表的长度    unsigned long length;    &#x2F;&#x2F;列表的高度    int level;&#125; zskiplist;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作-v2"><a class="header-anchor" href="#操作-v2"></a>操作</h3><ul><li>查找过程</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* 查询包含在指定范围内的第一个节点，反之返回null. *&#x2F;zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range)&#123;    zskiplistNode *x;    int i;    &#x2F;* 判断传入范围超过列表范围 *&#x2F;    if (!zslIsInRange(zsl, range))        return NULL;    x &#x3D; zsl-&gt;header;    &#x2F;&#x2F;从最高层向下查找    for (i &#x3D; zsl-&gt;level - 1; i &gt;&#x3D; 0; i--)    &#123;        &#x2F;* 在同一层内从左到右依次查找 *&#x2F;        while (x-&gt;level[i].forward &amp;&amp; !zslValueGteMin(x-&gt;level[i].forward-&gt;score, range))            x &#x3D; x-&gt;level[i].forward;    &#125;    &#x2F;* 目标节点不能是最后一个*tail节点 *&#x2F;    x &#x3D; x-&gt;level[0].forward;    serverAssert(x !&#x3D; NULL);    &#x2F;*再次检测分数限制 *&#x2F;    if (!zslValueLteMax(x-&gt;score, range))        return NULL;    return x;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先从上到下，再从左到右的进行查找</p><ul><li>跳跃列表的实际应用</li></ul><p>跳跃列表主要是作为<B>zset</B>的一种底层实现,在满足以下两个条件后zset会使用<B>压缩列表</B>作为底层实现</p><ol><li>有序集合元素数量小于128个时</li><li>元素大小不超过64字节时</li><li>集合大小操作1G时<br>如果不同时满足这三个条件时,则使用skipList-跳跃列表作为底层数据结构,这里需要注意的是zset底层结构转换成为skipList以后,就不会在转换成为ziplist</li></ol><ul><li>zset</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token comment">//如果当前列表长度大于128个时进行转化</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">zzlLength</span><span class="token punctuation">(</span>zobj<span class="token operator">-></span>ptr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">></span> server<span class="token punctuation">.</span>zset_max_ziplist_entries <span class="token operator">||</span> <span class="token comment">//如果当前列表格式大于64个时进行转化</span>    <span class="token function">sdslen</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">></span> server<span class="token punctuation">.</span>zset_max_ziplist_value <span class="token operator">||</span>  <span class="token comment">//如果当前列表大小大于1G时进行转化</span>    <span class="token operator">!</span><span class="token function">ziplistSafeToAdd</span><span class="token punctuation">(</span>zobj<span class="token operator">-></span>ptr<span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token comment">//转换为skip结构</span>      <span class="token function">zsetConvert</span><span class="token punctuation">(</span>zobj<span class="token punctuation">,</span>OBJ_ENCODING_SKIPLIST<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//继续添加数据</span>      zobj<span class="token operator">-></span>ptr <span class="token operator">=</span> <span class="token function">zzlInsert</span><span class="token punctuation">(</span>zobj<span class="token operator">-></span>ptr<span class="token punctuation">,</span>ele<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newscore<span class="token punctuation">)</span> <span class="token operator">*</span>newscore <span class="token operator">=</span> score<span class="token punctuation">;</span>      <span class="token operator">*</span>out_flags <span class="token operator">|=</span> ZADD_OUT_ADDED<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="压缩列表"><a class="header-anchor" href="#压缩列表"></a>压缩列表</h2><blockquote><p>压缩列表本质上是一个字节数组,是redis为了节省内存空间而设计的紧凑性数据结构,可以包含多个元素.压缩列表可以作为有序集合(zset)、散列(hash)、列表(list)</p></blockquote><h3 id="数据结构-v3"><a class="header-anchor" href="#数据结构-v3"></a>数据结构</h3><p><img src="https://s2.loli.net/2022/01/10/79cA85aCil3IzJf.png" alt="ziplist结构"></p><ul><li>zlbytes：压缩列表的字节长度，占4个字节，因此压缩列表最多有232-1个字节</li><li>zltail：压缩列表尾元素相对于压缩列表起始地址的偏移量，占4个字节</li><li>zllen：压缩列表的元素个数，占2个字节。zllen无法存储元素个数超过65535（216-1）的压缩列表，必须遍历整个压缩列表才能获取到元素个数</li><li>entryX：压缩列表存储的元素，可以是字节数组或者整数，长度不限。entry的编码结构将在后面详细介绍</li><li>zlend：压缩列表的结尾，占1个字节，恒为0xFF</li></ul><p>以下是创建ziplist的代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 创建一个空白的ziplist *&#x2F;  unsigned char *ziplistNew(void) &#123;      &#x2F;&#x2F;ZIPLIST_HEADER_SIZE &#x3D; (sizeof(uint32_t)*2+sizeof(uint16_t))  + (sizeof(uint8_t))      &#x2F;&#x2F;8个字节 + 2个字节 + 1个字节      unsigned int bytes &#x3D; ZIPLIST_HEADER_SIZE+ZIPLIST_END_SIZE;      &#x2F;&#x2F;分配内存,返回列表指针      unsigned char *zl &#x3D; zmalloc(bytes);      &#x2F;&#x2F;尝试将大端数据转换成小端数据      ZIPLIST_BYTES(zl) &#x3D; intrev32ifbe(bytes);      ZIPLIST_TAIL_OFFSET(zl) &#x3D; intrev32ifbe(ZIPLIST_HEADER_SIZE);      &#x2F;&#x2F;初始化列表长度      ZIPLIST_LENGTH(zl) &#x3D; 0;      &#x2F;&#x2F;设置列表尾部字符为hex_ff      zl[bytes-1] &#x3D; ZIP_END;      return zl;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意的是第三个步骤使用<B>intrev32ifbe()</B>尝试将大端数据转换成为小段数据;</p><p>大小端数据定义</p><blockquote><p>字节的排列方式有两个通用规则。例如，将一个多位数的低位放在较小的地址处，高位放在较大的地址处，则称小端序；反之则称大端序。在网络应用中，字节序是一个必须被考虑的因素，因为不同机器类型可能采用不同标准的字节序，所以均按照网络标准转化。<br>这里redis尽量采用小端的原因是在于<B>X86架构</B>和<B>ARM架构</B>是采用的小端模式,但是网络传输采用的是大端模式.</p></blockquote><h3 id="Entry的内部结构"><a class="header-anchor" href="#Entry的内部结构"></a>Entry的内部结构</h3><p>entry的结构体定义如下:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 我们使用这个函数来接收有关 ziplist 条目的信息。   请注意，这不是数据的实际编码方式，这是我们  被一个函数填充以便更容易操作。 *&#x2F;typedef struct zlentry &#123;    unsigned int prevrawlensize; &#x2F;* 对prevrawlen编码后的字节大小*&#x2F;    unsigned int prevrawlen;     &#x2F;* 上一个节点的长度 *&#x2F;    unsigned int lensize;        &#x2F;* 对len编码后的长度*&#x2F;    unsigned int len;            &#x2F;* 当前节点的长度 *&#x2F;    unsigned int headersize;     &#x2F;* prevrawlensize + lensize. *&#x2F;    unsigned char encoding;      &#x2F;* 当前节点所使用的编码类型:ZIP_STR_* or ZIP_INT *&#x2F;    unsigned char *p;            &#x2F;* 指向列表第一个元素的指针 *&#x2F;&#125; zlentry;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ziplist中需要注意的是’连锁更新’问题,由于ziplist的结构并不是链表结构而是连续内存结构,导致在删除上一个大节点时会导致数组整体移动的问题</p><h2 id="字典"><a class="header-anchor" href="#字典"></a>字典</h2><blockquote><p>字典又称散列表，是用来存储键值（key-value）对的一种数据结构.</p></blockquote><h3 id="数据结构-v4"><a class="header-anchor" href="#数据结构-v4"></a>数据结构</h3><p>Redis字典实现依赖的数据结构主要包含了三部分：字典、Hash表、Hash表节点。字典中嵌入了两个Hash表，Hash表中的table字段存放着Hash表节点，Hash表节点对应存储的是键值对。</p><p>结构如下:<br><img src="https://s2.loli.net/2022/01/16/sbcuXE1oLvhFzi9.jpg" alt="空Hash表结构示意"></p><ul><li>dict</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;** hash结构体* 会同时使用两个hash结构体,以便实现增量扩容*&#x2F;typedef struct dictht &#123;    &#x2F;&#x2F;指针数组,用于存储键值对    dictEntry **table;    &#x2F;&#x2F;table数组的大小    unsigned long size;    &#x2F;&#x2F;掩码(size-1)    unsigned long sizemask;    &#x2F;&#x2F;已存储的元素数量    unsigned long used;&#125; dictht;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里着重介绍一下掩码(sizemask)这个字段,sizemask的计算方式为取(size-1)这样的好处是通过<br><B>hash_key&amp;sizemask = hash_key/size</B><br>位操作的性能要高于取余操作</p><ul><li>dictEntry</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct dictEntry &#123;    void *key;    union &#123;        void *val;        uint64_t u64;        int64_t s64;        double d;    &#125; v;    struct dictEntry *next;&#125; dictEntry;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dictEntry是hash的节点元素结构,需要注意的是<B>V</B>是一种联合体结构,根据使用场景使用不同类型<br>*next是用来解决hash冲突的,采用的是头插法</p><ul><li>渐进式reHash</li></ul><ol><li>当执行插入\删除\查找\修改时都会先判断当前字典是否在进行rehash,然后尝试进行rehash后才会执行操作</li><li>线程空闲时会每次对100个节点进行rehash</li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://redis.io/topics/internals-sds">Hacking Strings</a><br><a href="http://www.itabin.com/redis-zskiplist/">zskiplist</a><br><a href="https://www.geek-share.com/detail/2714589322.html">redisd源代码的大端与小端</a></p><p><a href="https://cache.one/read/2884987">https://cache.one/read/2884987</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;redis底层数据结构分析&lt;/h1&gt;
&lt;p&gt;redis底层数据结构分析主要是根据《Redis5 设计与源码分析》一书而来,redis底层数据结构可以划分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单动态字符串&lt;/li&gt;
&lt;li&gt;跳跃表&lt;/li&gt;
&lt;li&gt;压缩列表&lt;/li&gt;
&lt;li&gt;字</summary>
      
    
    
    
    <category term="杂记" scheme="https://agmtopy.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="redis" scheme="https://agmtopy.gitee.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>深入理解linux内核笔记</title>
    <link href="https://agmtopy.gitee.io/2021/12/08/1.%E6%9D%82%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8%E7%AC%94%E8%AE%B0/"/>
    <id>https://agmtopy.gitee.io/2021/12/08/1.%E6%9D%82%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8%E7%AC%94%E8%AE%B0/</id>
    <published>2021-12-08T13:25:57.000Z</published>
    <updated>2021-12-15T12:47:43.279Z</updated>
    
    <content type="html"><![CDATA[<h1>深入理解linux内核笔记</h1><h2 id="内核"><a class="header-anchor" href="#内核"></a>内核</h2><p>unix内核根据执行状态分为’用户态’和’执行态’</p><ul><li>用户与内核态的切换</li></ul><ol><li>进程调用系统调用</li><li>触发异常(exception)</li><li>响应中断</li><li>内核线程的执行(这里有一些歧义,本身就是内核态)</li></ol><ul><li>进程描述符</li></ul><p>进程描述符是用来描述当前正在运行的进程的详细信息,包括以下几个部分<br>- 程序计数器和栈指针<br>- 通用寄存器<br>- 浮点寄存器<br>- 内存管理寄存器</p><ul><li>可重入内核</li></ul><p>unix是可重入内核,意味着同时有若干个进程在执行,在抢占式内核调度系统中进程会交替执行</p><ul><li><p>僵尸进程<br>僵尸进程的产生是由父进程通过’wait4()'的系统调用等待子进程的结束的状态,</p></li><li><p>进程组与会话<br>进程组是对一种&quot;作业&quot;的抽象<br>登录会话指的是</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;深入理解linux内核笔记&lt;/h1&gt;
&lt;h2 id=&quot;内核&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#内核&quot;&gt;&lt;/a&gt;内核&lt;/h2&gt;
&lt;p&gt;unix内核根据执行状态分为’用户态’和’执行态’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户与内核态的切换&lt;/li&gt;
</summary>
      
    
    
    
    <category term="笔记" scheme="https://agmtopy.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="linux" scheme="https://agmtopy.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析Kubernetes之编排能力</title>
    <link href="https://agmtopy.gitee.io/2021/11/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/3.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8B%E7%BC%96%E6%8E%92%E8%83%BD%E5%8A%9B/"/>
    <id>https://agmtopy.gitee.io/2021/11/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/3.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8B%E7%BC%96%E6%8E%92%E8%83%BD%E5%8A%9B/</id>
    <published>2021-11-28T15:41:26.000Z</published>
    <updated>2021-11-28T15:43:00.947Z</updated>
    
    <content type="html"><![CDATA[<h1>深入剖析Kubernetes之编排能力</h1><blockquote></blockquote><h2 id="编排能力"><a class="header-anchor" href="#编排能力"></a>编排能力</h2><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;深入剖析Kubernetes之编排能力&lt;/h1&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;编排能力&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#编排能力&quot;&gt;&lt;/a&gt;编排能力&lt;/h2&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a cl</summary>
      
    
    
    
    <category term="容器化" scheme="https://agmtopy.gitee.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
    <category term="Kubernetes" scheme="https://agmtopy.gitee.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析Kubernetes之Pods的概念</title>
    <link href="https://agmtopy.gitee.io/2021/11/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/2.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8BPod%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>https://agmtopy.gitee.io/2021/11/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/2.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8BPod%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
    <published>2021-11-28T05:40:30.000Z</published>
    <updated>2021-11-28T15:40:46.956Z</updated>
    
    <content type="html"><![CDATA[<h1>深入剖析Kubernetes之Pods的概念</h1><p>在上一篇文章中了解到kubernetes的部署在逻辑上是按照<B>Pod</B>的概念进行的,下面来详细的了解一下pod的知识</p><h2 id="基础概念"><a class="header-anchor" href="#基础概念"></a>基础概念</h2><blockquote><p>Pods是您可以在 Kubernetes 中创建和管理的最小的可部署计算单元。Pods是一组由一个或一个以上的容器组成的共享存储和网络资源，以及如何运行容器的规范。Pod 的内容始终位于同一地点并共同调度，并在共享上下文中运行。Pod 为特定于应用程序的“逻辑主机”建模：它包含一个或多个相对紧密耦合的应用程序容器。在非云环境中，在同一物理或虚拟机上执行的应用程序类似于在同一逻辑主机上执行的云应用程序。</p></blockquote><p>Pods的官网定义,这个定义传达出三个规范:</p><ol><li>Pods是Kubernetes管理执行的最小单元</li><li>Pods是容器组成,并且容器内部可以共享网络和存储</li><li>Pods是一个逻辑概念,替kubernetes完成底层操作的还是容器三剑客’Namespace’、‘Cgroup’、‘rootFs’</li></ol><h2 id="Pods组成"><a class="header-anchor" href="#Pods组成"></a>Pods组成</h2><p>Pods的组成可以参考这张图:<br><img src="https://d33wubrfki0l68.cloudfront.net/aecab1f649bc640ebef1f05581bfcc91a48038c4/728d6/images/docs/pod.svg" alt="Pods组成"></p><p>Pods除了本身的容器’ContainerA/ContainerB’以外还有一个<B>Infra container</B>容器，这个容器的镜像很小解压后也只有100kb~200kb大小。</p><ul><li><p>Init容器<br>init容器是在用户容器启动之前-网络和数据卷初始化完成后启动<br>用于代理用户容器的网络和IO,其实就是Sidecar模式</p></li><li><p>用户容器<br>用户容器是’Web Server’也就是在YML中定义的容器</p></li></ul><h2 id="Pods功能"><a class="header-anchor" href="#Pods功能"></a>Pods功能</h2><ul><li><p>volume</p><p>volume数据卷其中有一种特殊的volume-&gt;‘Projected Volume’(投射数据卷)主要是用来向容器内部提供预先定义好的数据，可以划分为</p><ol><li>Secret</li><li>ConfigMao</li><li>DownwardApi</li><li>ServiceAccountToken</li></ol><p>这几种类型，其中Secret指的是将配置添加到kubernetes中镜像管理的数据，在通过Pods的YMAL文件的定义可以将这部分配置信息直接写入容器中，并且可以随着Kubernetes中内容的变化而变化，类似与配置中心的使用</p></li><li><p>异常恢复策略</p><p>Pods的异常恢复策略可以分为:</p><ol><li>只要容器没有运行就进行自动重启</li><li>只有在容器异常时才进行chongq</li><li>永不自动重启容器</li></ol><p>检查容器是否运行的方法有:</p><ol><li>响应外部请求，例如http请求</li><li>外部检查预设的启动后的钩子方法，例如检查文件卷宗预设的文件是否存在等</li></ol><p>实现对容器进行定期诊断的功能叫’容器探针’，由容器内部进行实现。分为三种类型</p><ol><li>ExecAction</li><li>TCPSocketAction</li><li>HTTPGetAction</li></ol><p>容器探针又分为：</p><ol><li>存活探针<br>存活探针指的是要确认一个容器是否真正的死亡的场景，例如重启时检测之前的失败容器是否已经死亡</li><li>就绪探针<br>就绪探针指的是区分应用是否准备就绪的场景</li><li>启动探针<br>启动探针指的是对于大型容器的启动比较慢的场景需要区分容器是否还在启动</li></ol></li></ul><h2 id="Pods生命周期"><a class="header-anchor" href="#Pods生命周期"></a>Pods生命周期</h2><p>Pod的阶段分为</p><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>Pending（悬决）</td><td>Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间，</td></tr><tr><td>Running（运行中）</td><td>Pod 已经绑定到了某个节点，Pod 中所有的容器都已被创建。至少有一个容器仍在运行，或者正处于启动或重启状态。</td></tr><tr><td>Succeeded（成功）</td><td>Pod 中的所有容器都已成功终止，并且不会再重启。</td></tr><tr><td>Failed（失败）</td><td>Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非 0 状态退出或者被系统终止。</td></tr><tr><td>Unknown（未知）</td><td>因为某些原因无法取得 Pod 的状态。这种情况通常是因为与 Pod 所在主机通信失败。</td></tr></tbody></table><h2 id="Pod的上层抽象-Service"><a class="header-anchor" href="#Pod的上层抽象-Service"></a>Pod的上层抽象:Service</h2><p>这里先简单的介绍以下Service，kubernetes中Service是将一组Pod暴露给外界的一种方式。对外提供两种访问方式</p><ol><li><p>VIP<br>通过对外提供Service的虚拟IP,然后在将请求转发到具体的Pod上。</p></li><li><p>DNS<br>- Normal Service<br>与VIP方式类似<br>- Headles Service<br>对于请求直接返回具体Pod的IP。类似于DNS直接解析出真实Pod的IP</p></li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/">pod是什么?</a><br><a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase">pod的生命周期</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;深入剖析Kubernetes之Pods的概念&lt;/h1&gt;
&lt;p&gt;在上一篇文章中了解到kubernetes的部署在逻辑上是按照&lt;B&gt;Pod&lt;/B&gt;的概念进行的,下面来详细的了解一下pod的知识&lt;/p&gt;
&lt;h2 id=&quot;基础概念&quot;&gt;&lt;a class=&quot;header-anchor</summary>
      
    
    
    
    <category term="容器化" scheme="https://agmtopy.gitee.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
    <category term="Kubernetes" scheme="https://agmtopy.gitee.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>大规模分布式存储系统-基础篇</title>
    <link href="https://agmtopy.gitee.io/2021/11/09/19.%E5%88%86%E5%B8%83%E5%BC%8F/0.%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://agmtopy.gitee.io/2021/11/09/19.%E5%88%86%E5%B8%83%E5%BC%8F/0.%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2021-11-09T01:45:45.000Z</published>
    <updated>2021-11-11T05:57:59.932Z</updated>
    
    <content type="html"><![CDATA[<h1>大规模分布式存储系统-基础篇</h1><p>主要是记录阅读《大规模分布式存储系统：原理解析与架构实战》基础篇中的一些知识和理解。</p><ul><li>书评</li></ul><p><a href="https://book.douban.com/subject/25723658/">大规模分布式存储系统</a></p><p>基础篇主要是从<B>单机存储系统</B>到<B>分布式存储系统</B>的演化过程以及各自的特点进行分析</p><h2 id="单机存储系统"><a class="header-anchor" href="#单机存储系统"></a>单机存储系统</h2><p>单机存储系统最早应该是来源自关系型数据库的理论，根据数据库操作在发展出事务的概念</p><h3 id="硬件基础"><a class="header-anchor" href="#硬件基础"></a>硬件基础</h3><p>介绍CPU、IO总线、网络拓扑等知识，其中南桥/北桥的作用比较有意思</p><ul><li>南桥负责与低速设备的交互</li><li>北桥负责与高速设备的交互</li></ul><p><img src="https://i.loli.net/2021/11/09/6OIbyw3zZGTFCkc.jpg" alt="南北桥结构"></p><h3 id="存储引擎"><a class="header-anchor" href="#存储引擎"></a>存储引擎</h3><p>存储引擎是根据文件系统对存储系统提供底层的CRUD能力的引擎,根据存储引擎底层使用的算法可以大致划分为’hash存储引擎’、‘B tree存储引擎’、'LSM存储引擎’这三类</p><ul><li><p>hash存储引擎<br>hash存储引擎底层采用hash算法确定key的位置，value则代表文件的物理位置。使用这种算法的可以参考RocketMQ中的indexFile和commitLog文件之间的关系.<br>hash存储引擎不支持顺序读写</p></li><li><p>B+ tree存储引擎<br>B+ tree存储引擎具体的实现可以参考MySQL中的innodb存储引擎的设计模型，会设计出一个缓存区来对热点数据的缓存。对于缓存数据的替换策略有<B>LRU</B>、<B>LIRS</B>，其中LIRS的设计比较有趣，LIRS是为了解决LRU策略无法处理因全表扫描导致污染缓冲区的场景，底层采用多级缓冲的策略，设置晋升阈值来避免一级缓存受到污染</p></li><li><p>LSM存储引擎<br>LSM存储引擎的全称是’Log-structured merge-tree’. 将对数据的修改增量保持在内存中，达到指定的大小限制后将这些修改操作批量顺序写入磁盘中。LSM适合于写多读少的场景，通过牺牲读取性能来换写入的性能</p></li></ul><h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3><p>关于更多的存储引擎可以参考<br><a href="https://dev.to/creativcoder/what-is-a-lsm-tree-3d75">What is a LSM Tree?</a><br><a href="ttps://bbs.huaweicloud.com/blogs/detail/197482">存储引擎对比</a><br><a href="https://www.cs.umb.edu/~poneil/lsmtree.pdf">LSM Tree 论文</a></p><h2 id="数据模型"><a class="header-anchor" href="#数据模型"></a>数据模型</h2><p>数据模型指的是存储引擎用什么格式保存数据常用的数据模型有’文件’、‘关系’、‘键值对’</p><h2 id="事务"><a class="header-anchor" href="#事务"></a>事务</h2><ul><li>事务的特性:ACID</li><li>事务的种类:读事务、写事务、混合事务</li><li>事务的实现:锁、COW、MVCC</li></ul><h2 id="故障恢复"><a class="header-anchor" href="#故障恢复"></a>故障恢复</h2><p>数据库需要实现完善的故障恢复机制，一般是采用操作日志来实现的。<br>操作日志分为</p><ul><li>回滚日志(UNDO log) 用来记录事务修改前的记录</li><li>重做日志(REDO log) 用来记录事务修改后的状态</li><li>操作日志(binlog) 用来记录对物理磁盘的操作</li></ul><h2 id="数据压缩"><a class="header-anchor" href="#数据压缩"></a>数据压缩</h2><p>数据压缩是对大量数据进行压缩以节省空间。压缩算法的核心就是查找重复数据，'列式存储技术’是把相同列的数据组织在一起</p><h3 id="压缩算法"><a class="header-anchor" href="#压缩算法"></a>压缩算法</h3><ul><li>Huffman编码</li><li>LZ系列压缩算法</li></ul><h3 id="列式存储"><a class="header-anchor" href="#列式存储"></a>列式存储</h3><pre><code>列式存储是针对于传统的行式存储的对应，针对的是OLAP的场景。按照列来存储数据就会导致列上重复的值较多，因此就需要使用压缩算法来进行压缩</code></pre><h2 id="分布式存储系统特性"><a class="header-anchor" href="#分布式存储系统特性"></a>分布式存储系统特性</h2><p>分布式存储系统底层主要依赖两个协议<B>Paxos选举协议</B>、<B>两阶段提交协议</B></p><h3 id="异常"><a class="header-anchor" href="#异常"></a>异常</h3><ul><li>宕机</li><li>网络异常<br>消息丢失、消息乱序、网络数据包异常</li></ul><blockquote><p>设计分布式系统的一个原则是:网络永远是不可靠的</p></blockquote><ul><li>磁盘故障</li></ul><h3 id="状态"><a class="header-anchor" href="#状态"></a>状态</h3><p>分布式系统中定义的系统状态有且只有<B>成功</B>、<B>失败</B>、<B>未知</B></p><h3 id="一致性"><a class="header-anchor" href="#一致性"></a>一致性</h3><p>在分布式环境中由于异常是无法避免的，因此需要冗余多份数据来保证可用性。冗余的多份副本就会存在数据一致性的问题，如何保证副本之间的一致性是关键</p><h2 id="数据分布"><a class="header-anchor" href="#数据分布"></a>数据分布</h2><p>分布式系统与单机存储系统系统最大的区别在于<B>数据分布</B>上,分布式系统可以将数据按照<B>Hash分布</B>、<B>顺序分布</B>两种方式进行划分。</p><h3 id="Hash分布"><a class="header-anchor" href="#Hash分布"></a>Hash分布</h3><p>Hash分布原理比较简单，需要注意的是扩容场景下的处理，有两种处理方法分别是</p><ul><li>元数据区<br>引入元数据区，通过元数据区来管理hash的key与value之间的关系</li><li>一致性hash算法<br>使用一致性hash算法,保证节点的平均分布</li></ul><blockquote><p>一致性hash算法如何在扩容时保证数据的平均分布?</p></blockquote><p>Hash算法不支持顺序查找</p><h3 id="顺序分布"><a class="header-anchor" href="#顺序分布"></a>顺序分布</h3><p>顺序分布指的是数据按照指定的维度顺序的写入数据，多用于分布式表格系统中</p><h2 id="复制"><a class="header-anchor" href="#复制"></a>复制</h2><p>分布式系统中数据的复制机制决定了这个分布式系统对可用性和一致性的取舍。数据的复制可以分为<B>强同步复制</B>、<B>异步复制</B>两种方向。<br>在工程实践中又可以根据这两个方向做不同的取舍，以Oracle的DataGuard复制组件为例,提供了三种不同的模式</p><ul><li>最大保护模式<br>最大保护模式也就是强同步复制模式</li><li>最大性能模式<br>最大性能模式也就是异步复制模式</li><li>最大可用模式<br>最大可用模式是默认情况下使用强同步复制模式，网络异常时使用异步复制模式</li></ul><h2 id="故障检测"><a class="header-anchor" href="#故障检测"></a>故障检测</h2><p>故障检测常用的方法有心跳、φ-accrual(累计历史故障检测器)、 Gossip故障检测.这几种方式</p><p><a href="https://iswade.github.io/database/db_internals_ch09_failure_detection/#gossip">分布式系统之故障检测</a><br><a href="https://www.serf.io/docs/internals/gossip.html">serf官网</a><br><a href="https://flogx.com/post/using-serf-to-implement-distributed-fault-detection/">使用serf实现分布式故障检测</a></p><h2 id="故障恢复-v2"><a class="header-anchor" href="#故障恢复-v2"></a>故障恢复</h2><p>故障恢复是由于分布式环境下机器或网络的故障，需要通过故障恢复的机制将服务从不可用状态恢复成可用状态。分布式系统的存储方案分为两种结构:<B>单层结构</B>、<B>双层结构</B></p><ul><li>单层结构<br>单层结构指的是服务和存储都作为一个节点，然后按照节点进行分片</li><li>多层结构<br>多层结构指的是存储系统按照服务层和存储层进行分层,在服务层只提供一个一份数据</li></ul><h2 id="分布式协议"><a class="header-anchor" href="#分布式协议"></a>分布式协议</h2><p><B>分布式协议</B>根据不同的作用域可以划分为租约\复制协议\一致性协议等.比较重要的是<B>两阶段提交协议</B>、<B>Paxos选举协议</B></p><ul><li><p>两阶段提交协议<br>两阶段提交协议指的是将分布式事务的操作划分为两个阶段,分别是<B>请求阶段</B>、<B>提交阶段</B><br>两阶段提交协议中的包括的节点有两类，分别是<B>协调者</B>和<B>参与者</B></p><p><img src="https://i.loli.net/2021/11/11/qxE9X3mhKwDJfBg.jpg" alt="两阶段提交过程.jpg"></p></li><li><p>Paxos选举协议<br>Paxos选举协议主要是用于解决多个节点之间的一致性问题。可以参考之前的一篇文章<a href="https://agmtopy.github.io/2020/06/23/1.%E6%9D%82%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7paxos%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0zab%E5%8D%8F%E8%AE%AE/">分布式中的一致性paxos算法以及其实现zab协议</a><br>采用’Quorum机制’机制来保证节点作为一个整体对外的一致性,简单的来说就是通过序列号和大多数确认机制来保证集群的一致性</p></li><li><p>Paxos与2PC混合场景<br><img src="https://i.loli.net/2021/11/11/M12yJLwtjePQfnr.jpg" alt="2PC与Paoxs的对比.jpg"></p></li></ul><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>基础篇主要是介绍单机存储系统的<B>硬件基础</B>、<B>存储引擎</B>、分布式存储系统<B>数据模型</B>、<B>分布式特性</B>、<B>故障检测/恢复</B>、<B>分布式协议</B>等</p><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;大规模分布式存储系统-基础篇&lt;/h1&gt;
&lt;p&gt;主要是记录阅读《大规模分布式存储系统：原理解析与架构实战》基础篇中的一些知识和理解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书评&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject</summary>
      
    
    
    
    <category term="分布式" scheme="https://agmtopy.gitee.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="读书笔记" scheme="https://agmtopy.gitee.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析Kubernetes之Kubernetes的基础概念</title>
    <link href="https://agmtopy.gitee.io/2021/11/08/18.%E5%AE%B9%E5%99%A8%E5%8C%96/1.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8BKubernetes%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>https://agmtopy.gitee.io/2021/11/08/18.%E5%AE%B9%E5%99%A8%E5%8C%96/1.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8BKubernetes%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</id>
    <published>2021-11-08T08:31:00.000Z</published>
    <updated>2021-11-28T05:39:51.593Z</updated>
    
    <content type="html"><![CDATA[<h1>深入剖析Kubernetes之Kubernetes的基础</h1><blockquote><p>Kubernetes是由google和RetHot主导的容器编排工具，已经称为容器编排的标准.Kubernetes源自Google内部的Borg,可以参考这篇文章</p></blockquote><p><a href="https://kubernetes.io/zh/blog/2015/04/borg-predecessor-to-kubernetes/">Borg: Kubernetes 的前身</a></p><h2 id="概念"><a class="header-anchor" href="#概念"></a>概念</h2><p>Kubernetes是一个对容器进行管理的框架,提供了<B>服务发现和负载均衡</B>、<B>存储编排</B>、<B>自动部署和回滚</B>、<B>自动完成装箱计算</B>、<B>自我修复</B>、<B>密钥与配置管理</B>等功能，可以参考这篇文章</p><p><a href="https://kubernetes.io/zh/docs/concepts/overview/">Kubernetes 是什么</a></p><h2 id="组件"><a class="header-anchor" href="#组件"></a>组件</h2><p><img src="https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg" alt="kubernetes组件总览"></p><p>kubernetes的组件分为<B>控制平面组件</B>、<B>Node 组件</B>、<B>插件</B></p><h3 id="控制平面组件"><a class="header-anchor" href="#控制平面组件"></a>控制平面组件</h3><p>控制平面组件是对集群做出全局决策(比如调度)，以及检测和响应集群事件的决策和处理。</p><h3 id="Node-组件"><a class="header-anchor" href="#Node-组件"></a>Node 组件</h3><p>Node节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p><h3 id="插件（Addons）"><a class="header-anchor" href="#插件（Addons）"></a>插件（Addons）</h3><p>插件是是对Kubernetes资源（DaemonSet、 Deployment等）实现管理的功能。 因为这些插件提供集群级别的功能，插件中命名空间域的资源属于kube-system命名空间。</p><h2 id="部署"><a class="header-anchor" href="#部署"></a>部署</h2><p>Kubernetes的部署工具目前有<B>kubectl</B>、<B>kind</B>、<B>minikube</B>、<B>kubeadm</B></p><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/">kubernetes的部署工具文档</a></p><h2 id="实例"><a class="header-anchor" href="#实例"></a>实例</h2><p>如何创建一个简单的kubernetes的本地环境</p><h3 id="前置准备"><a class="header-anchor" href="#前置准备"></a>前置准备</h3><ul><li><p>工具</p><ol><li>minikube</li><li>kubectl</li></ol></li><li><p>步骤</p><ol><li>安装minikube</li></ol><ul><li>检查是否支持虚拟化</li></ul><blockquote><p>grep -E --color ‘vmx|svm’ /proc/cpuinfo</p></blockquote><ul><li>安装配置 kubectl</li></ul>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y apt-transport-https<span class="token function">curl</span> -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token builtin class-name">echo</span> <span class="token string">"deb https://apt.kubernetes.io/ kubernetes-xenial main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/apt/sources.list.d/kubernetes.list<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装minikube</li></ul>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64<span class="token function">sudo</span> <span class="token function">install</span> minikube-linux-amd64 /usr/local/bin/minikube<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>启动</li></ol><ul><li>查看所有namespace下的pod</li></ul><blockquote><p>kubectl get po -A</p></blockquote><ul><li>安装仪表盘</li></ul><blockquote><p>minikube dashboard</p></blockquote><p>启动控制台后可以看到<br><img src="https://i.loli.net/2021/11/27/iYAxaecJMdFurZQ.jpg" alt="kubernetes控制台"></p></li></ul><h3 id="配置文件"><a class="header-anchor" href="#配置文件"></a>配置文件</h3><p>kubernetes不推荐使用命令行来操作容器，而是推荐使用YAML文件来进行配置</p><p>下面是一个典型的zk集群的配置文件</p><ul><li>application/zookeeper/zookeeper.yaml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>hs  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> zk<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2888</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> server  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3888</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>election  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> zk<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>cs  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> zk<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2181</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> client  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> zk<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> policy/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PodDisruptionBudget<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>pdb<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> zk  <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> zk  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>hs  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">updateStrategy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate  <span class="token key atrule">podManagementPolicy</span><span class="token punctuation">:</span> OrderedReady  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> zk    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>                <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"app"</span>                    <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                    <span class="token key atrule">values</span><span class="token punctuation">:</span>                    <span class="token punctuation">-</span> zk              <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> <span class="token string">"kubernetes.io/hostname"</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>zookeeper        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always        <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"k8s.gcr.io/kubernetes-zookeeper:1.0-3.4.10"</span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"1Gi"</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"0.5"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">2181</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> client        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">2888</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> server        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3888</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>election        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sh        <span class="token punctuation">-</span> <span class="token punctuation">-</span>c        <span class="token punctuation">-</span> "start<span class="token punctuation">-</span>zookeeper \          <span class="token punctuation">-</span><span class="token punctuation">-</span>servers=3 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>data_dir=/var/lib/zookeeper/data \          <span class="token punctuation">-</span><span class="token punctuation">-</span>data_log_dir=/var/lib/zookeeper/data/log \          <span class="token punctuation">-</span><span class="token punctuation">-</span>conf_dir=/opt/zookeeper/conf \          <span class="token punctuation">-</span><span class="token punctuation">-</span>client_port=2181 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>election_port=3888 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>server_port=2888 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>tick_time=2000 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>init_limit=10 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>sync_limit=5 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>heap=512M \          <span class="token punctuation">-</span><span class="token punctuation">-</span>max_client_cnxns=60 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>snap_retain_count=3 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>purge_interval=12 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>max_session_timeout=40000 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>min_session_timeout=4000 \          <span class="token punctuation">-</span><span class="token punctuation">-</span>log_level=INFO"        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> sh            <span class="token punctuation">-</span> <span class="token punctuation">-</span>c            <span class="token punctuation">-</span> <span class="token string">"zookeeper-ready 2181"</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> sh            <span class="token punctuation">-</span> <span class="token punctuation">-</span>c            <span class="token punctuation">-</span> <span class="token string">"zookeeper-ready 2181"</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> datadir          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/zookeeper      <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>        <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">1000</span>        <span class="token key atrule">fsGroup</span><span class="token punctuation">:</span> <span class="token number">1000</span>  <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> datadir    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">accessModes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"ReadWriteOnce"</span> <span class="token punctuation">]</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">requests</span><span class="token punctuation">:</span>          <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件以’—'作为容器配置分割符，分别创建了4个容器从而创建一个完整的ZK集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">service/zk-hs createdservice/zk-cs createdpoddisruptionbudget.policy/zk-pdb createdstatefulset.apps/zk created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><ol><li>kubernetes内部是由四个组件组成</li></ol><ul><li>控制平面组件</li><li>Node节点组件</li><li>插件</li></ul><ol start="2"><li>部署工具</li></ol><ul><li>minikube</li><li>kind</li><li>kubeadm</li></ul><ol start="3"><li>配置文件<br>配置文件将容器中按照集群部署的方式根据应用维度打包形成一个配置文件,后续就可以读取这个配置文件进行启动。这里应用的概念在kubernetes中被称为pod,一个pod是由一个或多个容器组成的。</li></ol><h2 id="参考文档"><a class="header-anchor" href="#参考文档"></a>参考文档</h2><p><a href="https://kubernetes.io/zh">kubernetes中文官网</a><br><a href="https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/create-cluster/cluster-interactive/">kubernetes交互文档</a><br><a href="https://minikube.sigs.k8s.io/docs/handbook/">minikube官网</a><br><a href="https://kubernetes.io/zh/docs/tutorials/stateful-application/zookeeper/">部署运行ZooKeeper集群</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;深入剖析Kubernetes之Kubernetes的基础&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes是由google和RetHot主导的容器编排工具，已经称为容器编排的标准.Kubernetes源自Google内部的Borg,可以参考这篇文章&lt;/p&gt;
</summary>
      
    
    
    
    <category term="容器化" scheme="https://agmtopy.gitee.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
    <category term="Kubernetes" scheme="https://agmtopy.gitee.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>ReadWriteLock的源码分析</title>
    <link href="https://agmtopy.gitee.io/2021/11/02/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/16.ReadWriteLock%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://agmtopy.gitee.io/2021/11/02/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/16.ReadWriteLock%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2021-11-02T08:24:34.000Z</published>
    <updated>2021-11-16T08:38:21.966Z</updated>
    
    <content type="html"><![CDATA[<h1>ReadWriteLock的源码分析</h1><p>ReadWriteLock是JUC包下的定义的读写锁的接口,定义两个接口<B>readLock()</B>、<B>writeLock()</B>分别是返回读锁和返回一个写锁。<br>ReadWriteLock默认有两个实现分别是<B>ReadWriteLockView</B>、<B>ReentrantReadWriteLock</B>。</p><p>ReentrantReadWriteLock是默认的读写锁的实现<br>ReadWriteLockView是<B>StampedLock</B>的内部类，StampedLock是JDK 1.8中对ReentrantReadWriteLock的一个增强的实现<br>下面会先分析ReentrantReadWriteLock，在对StampedLock进行分析</p><h2 id="ReentrantReadWriteLock"><a class="header-anchor" href="#ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><blockquote><p>ReentrantReadWriteLock是实现ReadWriteLock接口,对外提供read()和wirte()方法。特点主要是支持公平锁选择、可重入、锁降级的分类</p></blockquote><h3 id="用例"><a class="header-anchor" href="#用例"></a>用例</h3><p>这个用例是对ReentrantReadWriteLock提供的用例CachedData的简化版本</p><ul><li>CachedData</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> CachedData <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> <span class="token keyword">data</span><span class="token operator">:</span> String    <span class="token keyword">private</span> <span class="token keyword">var</span> cacheValid<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> lock<span class="token operator">:</span> ReentrantReadWriteLock <span class="token operator">=</span> <span class="token function">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">processCacheData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取读锁</span>        lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheValid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取写锁之前先要释放读锁</span>            lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//获取写锁</span>            lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//再次检查标记,因为上一次检查标记是在获取写锁之前</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheValid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" set data"</span><span class="token punctuation">)</span>                    <span class="token keyword">data</span> <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    cacheValid <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//重新获取读锁来完成锁降级</span>                lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"打印data:"</span> <span class="token operator">+</span>  <span class="token keyword">data</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建线程池</span>    <span class="token keyword">val</span> poolExecutor <span class="token operator">=</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//创建任务</span>    <span class="token keyword">var</span> cache<span class="token operator">:</span>CachedData <span class="token operator">=</span> <span class="token function">CachedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> barrier<span class="token operator">:</span>CyclicBarrier <span class="token operator">=</span> <span class="token function">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">&#123;</span>        poolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">&#123;</span>            barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            cache<span class="token punctuation">.</span><span class="token function">processCacheData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果</li></ul><p><img src="https://i.loli.net/2021/11/12/wNerlsGfKLpEhzd.jpg" alt="执行结果"><br>可以看到两个线程对data的写锁进行竞争,但是只有一个线程成功执行set方法,另外的一个线程只能执行读锁的操作<br>从现象上来看一个<B>ReentrantReadWriteLock</B>对外提供了读锁和写锁两个功能,下面就开始对代码进行详细的分析</p><h3 id="构造函数"><a class="header-anchor" href="#构造函数"></a>构造函数</h3>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Creates a new &#123;@code ReentrantReadWriteLock&#125; with * default (nonfair) ordering properties. */</span><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Creates a new &#123;@code ReentrantReadWriteLock&#125; with * the given fairness policy. * * @param fair &#123;@code true&#125; if this lock should use a fair ordering policy */</span><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriteLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到无参的构造函数是非公平锁的策略,在构造方法中主要是创建了三个成员变量</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">&#123;</span>    <span class="token comment">//公平锁类型</span>    <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>    <span class="token comment">//内部读锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span> readerLock<span class="token punctuation">;</span>    <span class="token comment">//内部写锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> writerLock<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源码解析"><a class="header-anchor" href="#源码解析"></a>源码解析</h3><h4 id="构造方法"><a class="header-anchor" href="#构造方法"></a>构造方法</h4><ul><li>获取锁的方法<br>获取读锁/写锁就是直接返回内部的读锁/写锁变量</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> writerLock<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span>  <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> readerLock<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到锁的类型分别是ReadLock和WriteLock,继续分析ReadLock/WriteLock</p><ul><li><p>ReadLock与WriteLock对比</p></li><li><p>ReadLock</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReadLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5992448646407690164L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">ReadLock</span><span class="token punctuation">(</span><span class="token class-name">ReentrantReadWriteLock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync <span class="token operator">=</span> lock<span class="token punctuation">.</span>sync<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireSharedNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> sync<span class="token punctuation">.</span><span class="token function">getReadLockCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">"[Read locks = "</span> <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>WriteLock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WriteLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4992448646407690164L</span><span class="token punctuation">;</span>    <span class="token comment">//ReentrantReadWriteLock内部的AQS公平/非公平抽象类</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">WriteLock</span><span class="token punctuation">(</span><span class="token class-name">ReentrantReadWriteLock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync <span class="token operator">=</span> lock<span class="token punctuation">.</span>sync<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> o <span class="token operator">=</span> sync<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                    <span class="token string">"[Unlocked]"</span> <span class="token operator">:</span>                                    <span class="token string">"[Locked by thread "</span> <span class="token operator">+</span> o<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查询当前线程是否持有写锁</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当前写锁的锁定次数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">getWriteHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过对比可知<B>WriteLock</B>只是比<B>ReadLock</B>多两个方法</p><ul><li>isHeldByCurrentThread()<br>查询当前线程是否持有写锁</li><li>getHoldCount()<br>当前写锁的锁定次数</li></ul><p>同时可以看到不管是<B>WriteLock</B>、<B>ReadLock</B>都是使用<B>Sync</B>来实现的功能，下面详细的分析一下<B>Sync</B>类的实现</p><ul><li><B>Sync</B></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">ThreadLocalHoldCounter</span> readHolds<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>    <span class="token comment">//构造函数</span>    <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建ThreadLocalHoldCounter(记录线程持有的锁数量)</span>        readHolds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalHoldCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置状态，调用AQS的setState()</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ensures visibility of readHolds</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码可以看出<B>Sync</B>是继承自<B>AbstractQueuedSynchronizer</B>，在构造方法中创建<B>ThreadLocalHoldCounter</B>和调用AQS的<B>setState()</B>方法</p><p>有关<B>AbstractQueuedSynchronizer</B>的内容可以参考之前写的<br><a href="../../../../../2020/05/22/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/13.AbstractQueuedSynchronizer%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">AbstractQueuedSynchronizer的源码分析</a></p><ul><li><p>ThreadLocalHoldCounter<br>ThreadLocalHoldCounter的代码如下所示</p></li><li><p>ThreadLocalHoldCounter</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalHoldCounter</span>    <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HoldCounter</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HoldCounter</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HoldCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HoldCounter</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HoldCounter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始为0</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment">//使用id来标识Thread而不是引用,避免引用逃逸</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> tid <span class="token operator">=</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ThreadLocalHoldCounter继承于ThreadLocal然后在初始化时用initialValue()方法返回一个<B>HoldCounter</B>引用<br>HoldCounter是用来记录线程中加锁的统计与线程id相关联,这里关联线程引用是比较优秀的,通过<B>LockSupport.getThreadId</B>获取一个long类型的线程标识</p><ul><li>LockSupport.getThreadId</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//U是Unsafe类型的对象</span>    <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> TID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><B>Sync</B>除了通过构造函数初始化上述的ThreadLocalHoldCounter对象以外,还有一些静态成员变量来完成一些例如控制允许线程重复持有锁的次数等</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_SHIFT   <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_UNIT    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_COUNT      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCLUSIVE_MASK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//省略...</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">></span> MAX_COUNT<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Reentrant acquire</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是对同一个线程持有的锁超过阈值的演示</p><p><img src="https://i.loli.net/2021/11/13/uon9IW6fcLxPRv5.jpg" alt="超过锁阈值场景"></p><h4 id="readLock"><a class="header-anchor" href="#readLock"></a>readLock()</h4><ul><li>lock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接使用<B>AbstractQueuedSynchronizer</B>的<B>acquireShared()</B>获取一把共享锁,失败就阻塞</p><ul><li>AbstractQueuedSynchronizer.acquireShared</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//调用子类的tryAcquireShared()实现</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ReentrantReadWriteLock.tryAcquireShared()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ReservedStackAccess</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    * 例子:    * 1. 如果写锁被其他线程持有就返回失败    * 2. 因此该线程获取到写入资格,根据线程队列判断是否要进行阻塞,不需要进行阻塞时就通过CAS的方式来操作锁以及计数    * 3. 对cas失败的场景进行重试    */</span>    <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取同步状态</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果有独占线程并且独占线程不是当前线程时直接返回-1(失败)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//共享计数</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1. 通过readerShouldBlock()判断当前是否可以操作,readerShouldBlock()主要是对公平锁和非公平锁的一个判断</span>    <span class="token comment">//2. 判断当前是否操作了最大的加锁量</span>    <span class="token comment">//3. 通过CAS进行操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果是首次加锁,设置首次加锁线程和次数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>            firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是首次加锁线程进行继续加锁那么次数++</span>            firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//处理holdCounter对象</span>            <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>            rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//重复处理</span>    <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>tryAcquireShared</B>是会执行锁的计数、初始线程的绑定等工作，并且会对执行失败进行自旋重试</p><ul><li>unlock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<B>releaseShared</B>来完成释放锁的操作,AQS又是通过<B>tryReleaseShared</B>来完成的，下面可以看一下tryReleaseShared的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//尝试释放锁</span><span class="token annotation punctuation">@ReservedStackAccess</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果是首次加锁线程对首次的标记进行修改</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert firstReaderHoldCount > 0;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            firstReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//对HoldCounter进行修改</span>        <span class="token comment">//如果不是临时holdCounter,那么获取holdCounter后在进行处理</span>        <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//自旋</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>        <span class="token comment">//CAS的方式对锁进行释放</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="writeLock"><a class="header-anchor" href="#writeLock"></a>writeLock()</h4><ul><li>lock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接使用<B>AbstractQueuedSynchronizer</B>的<B>acquire()</B>获取一把独占锁,失败就阻塞</p><ul><li>unlock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<B>release</B>来完成释放锁的操作</p><p>通过上面的代码可以看到所有的操作都是通过<B>Sync</B>这个类委托给<B>AbstractQueuedSynchronizer</B>来进行的,主要是三个功能</p><ul><li>加锁(共享/独占)</li><li>解锁(共享/独占)</li><li>计数(共享/独占)<br>然后AQS作为入口也会通过调用<B>ReentrantReadWriteLock</B>的具体的加锁/解锁/计数的进行操作。<br>读锁不进行排队，写锁会进行排队阻塞<br><B>ReentrantReadWriteLock</B>中有趣的操作是把state的高16位作为读锁标识，低16位作为写锁标识，因此也是只能加锁2^16的原因</li></ul><h2 id="StampedLock"><a class="header-anchor" href="#StampedLock"></a>StampedLock</h2><p><B>StampedLock</B>是对ReentrantReadWriteLock的迭代，在对StampedLock中优化了写锁饥饿的问题</p><h3 id="用例-v2"><a class="header-anchor" href="#用例-v2"></a>用例</h3><ul><li>StampedLockDemo</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> StampedLockDemo <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> stampedLock <span class="token operator">=</span> <span class="token function">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> <span class="token keyword">data</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">fun</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">data</span> <span class="token operator">+=</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token number">1</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            stampedLock<span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>        <span class="token comment">//1.使用乐观锁</span>        <span class="token keyword">var</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> curData <span class="token operator">=</span> <span class="token keyword">data</span>        <span class="token comment">//2. 写法1 双重锁保证读取到的是最新数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stampedLock<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                curData <span class="token operator">=</span> <span class="token keyword">data</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                stampedLock<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3. 写法2 循环</span><span class="token comment">//        while(!stampedLock.validate(stamp)) &#123;</span><span class="token comment">//            stamp = stampedLock.tryOptimisticRead();</span><span class="token comment">//            curData = this.data;</span><span class="token comment">//        &#125;</span>        <span class="token keyword">return</span> curData    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>StampedLock</B>在加锁时会返回一个戳(stamp),可以把它理解为版本号/时间戳，在后续解锁时会用到.</p><ul><li><p>提供了乐观锁和悲观锁的实现</p><ul><li>tryOptimisticRead()</li><li>tryReadLock()</li></ul></li><li><p>锁降/升级</p><ul><li>tryConvertToWriteLock()</li><li>tryConvertToReadLock()</li></ul></li></ul><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>ReadWriteLock是读写锁的接口，默认有两个实现分别是<B>ReentrantReadWriteLock</B>、<B>StampedLock</B>,分别是针对读多写少的场景和需要使用乐观锁的场景。<br>底层都采用一个标志位来进行区分读锁/写锁标识,一个是Int(32位),一个是Long(64位)，并且都继承与<B>AbstractQueuedSynchronizer</B>来进行实现的。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/zxporz/p/11642176.html">StampedLock的理解和使用</a><br><a href="https://zxs.io/article/1667">StampedLock源码分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;ReadWriteLock的源码分析&lt;/h1&gt;
&lt;p&gt;ReadWriteLock是JUC包下的定义的读写锁的接口,定义两个接口&lt;B&gt;readLock()&lt;/B&gt;、&lt;B&gt;writeLock()&lt;/B&gt;分别是返回读锁和返回一个写锁。&lt;br&gt;
ReadWriteLock默认有两</summary>
      
    
    
    
    <category term="并发" scheme="https://agmtopy.gitee.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="ReadWriteLock" scheme="https://agmtopy.gitee.io/tags/ReadWriteLock/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析Kubernetes之容器化的基础</title>
    <link href="https://agmtopy.gitee.io/2021/10/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/0.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A1%80/"/>
    <id>https://agmtopy.gitee.io/2021/10/28/18.%E5%AE%B9%E5%99%A8%E5%8C%96/0.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Kubernetes%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-28T06:08:23.000Z</published>
    <updated>2021-11-08T08:31:04.505Z</updated>
    
    <content type="html"><![CDATA[<h1>深入剖析Kubernetes之容器化的基础</h1><h2 id="容器化的基础之进程管理"><a class="header-anchor" href="#容器化的基础之进程管理"></a>容器化的基础之进程管理</h2><p><B>容器化的基础</B>是依赖于Linux底层提供的两种能力分别是<B>cgroups</B>,<B>Namespace</B></p><h3 id="cgroups"><a class="header-anchor" href="#cgroups"></a>cgroups</h3><blockquote><p>cgroups 的全称是control groups,是Linux内核提供的一种可以限制单个进程或者多个进程所使用资源的机制<br>cgroups可以管理的资源有:</p></blockquote><ul><li><B>cpu子系统</B><br>主要限制进程的cpu使用率</li><li><B>cpuacct子系统</B><br>可以统计cgroups中的进程的cpu使用报告</li><li><B>cpuset 子系统</B><br>可以为cgroups中的进程分配单独的cpu节点或者内存节点</li><li><B>memory子系统</B><br>可以限制进程的 </B><br>可以限制进程的块设备 io</li><li><B>devices子系统</B><br>可以控制进程能够访问某些设备</li><li><B>net_cls子系统</B><br>可以标记cgroups中进程的网络数据包，然后可以使用tc模块(traffic control)对数据包进行控制</li><li><B>freezer子系统</B><br>可以挂起或者恢复cgroups中的进程</li><li><B>ns子系统</B><br>可以使不同cgroups下面的进程使用不同的namespace</li></ul><p><B>cgroups</B>是通过与内核的其他模块来完成<B>进程维度</B>对<B>资源</B>的管理</p><h3 id="Namespace"><a class="header-anchor" href="#Namespace"></a>Namespace</h3><p><B>namespace</B>是对内核资源进行分组管理的一个特性,用来修改进程间的可见性</p><p>namespace创建进程时会使用<B>CLONE_NEWPID</B>这个参数来创建一个新的进程空间</p><h3 id="虚拟机与Docker的区别"><a class="header-anchor" href="#虚拟机与Docker的区别"></a>虚拟机与Docker的区别</h3><p>虚拟机与Docker的区别在于虚拟机会采用硬件虚拟化功能,模拟出操作系统底层的设备;docker只是在宿主机上做了进程隔离和资源隔离</p><h2 id="容器化的基础之隔离和限制"><a class="header-anchor" href="#容器化的基础之隔离和限制"></a>容器化的基础之隔离和限制</h2><p><img src="https://i.loli.net/2021/10/28/HNTkSg5vwd7jymf.jpg" alt="容器化与虚拟机之间的对比"></p><p>通过<B>namespace</B>来完成进程之间的隔离,通过<B>cgroups</B>来完成对资源的限制</p><p><B>cgroups</B>是通过配置在<B>/sys/fs/cgroup</B>文件夹下会有</p><ul><li><p>资源分组<br><img src="https://i.loli.net/2021/10/28/gUHWXSlaGd7Lpn8.jpg" alt="cgroup资源分组"><br>这些限制项来进行处理</p></li><li><p>控制组<br><img src="https://i.loli.net/2021/10/28/PFv8caUqsLiYBpo.jpg" alt="cgroup详细控制"></p></li></ul><p>通过详细信息可以看到这个目录下有不同的配置文件<B>cgroup.procs</B>,内容如下展示</p><p><img src="https://z3.ax1x.com/2021/10/29/5jdCIx.jpg" alt="cgroup.procs内容"><br>可以看到这里记录的就是pid列表,<cgroup>就是通过管理为每个线程分配资源的执行时间来控制不同进程的资源使用情况</p><p>docker就是在创建容器的时候为每一个容器创建一个控制组,在将用户指定的docker容器初始化资源配置写入控制组中就可以了<br><B>cgroups</B>采用的资源限制方式主要是通过控制时间的形式来实现的,因此就会存在容器的进程实际上可以看到整个宿主机的一些状态.这是相较与虚拟机方式的不足</p><blockquote><p><B>容器的本质就是一个特殊的进程</B></p></blockquote><h2 id="容器中镜像的概念"><a class="header-anchor" href="#容器中镜像的概念"></a>容器中镜像的概念</h2><blockquote><p>镜像指的是一个由容器识别的只读模板.通常这个模板是基于另外的一个模板并进行一些自定义改动的</p></blockquote><p>以上是docker官网中对镜像概念的描述,镜像在物理上指的是容器进程实际可用的文件<br>通过<B>Namespace</B>和<B>cgroups</B>实现了对进程和操作时间的隔离,但是容器之间没有对文件的隔离,容器进程的可用文件与其他用户进程的可用文件相同.<br>因此需要对容器的可用文件进行限制,在docker上是优先使用<B>pivot_root</B>,其次使用<B>chroot</B></p><h3 id="pivot-root与chroot的区别"><a class="header-anchor" href="#pivot-root与chroot的区别"></a>pivot_root与chroot的区别</h3><ul><li><p>pivot_root改变当前mount namespace的rootfs(&quot;/&quot;目录)</p></li><li><p>chroot改变的是当前进程的rootfs(&quot;/&quot;目录)</p></li></ul><p>pivot_root的执行步骤分为三步:</p><ol><li>创建临时目录并将当前所有的root mount移动到临时目录</li><li>创建新目录(“/”)</li><li>清理新目录</li></ol><h3 id="rootfs"><a class="header-anchor" href="#rootfs"></a>rootfs</h3><p><B>rootfs</B>指的是就是镜像中的文件,也就是登录到具体的镜像中看到的文件.<B>rootfs</B>在结构上可以分为三层<B>可读写层</B>、<br><B>init层</B>、<B>只读层</B></p><p>从上到下分别是应用层到系统层的划分,在详细的对这三层进行分析之前需要了解一下为什么镜像文件中分层的文件在使用的时候可以想在同一个文件夹中一样？<br>这是采用了一种被称为联合文件系统(union file System)概念,docker中默认是使用Overlay2的实现，关于联合文件系统的文章看可以参考<br><a href="https://lwn.net/Articles/324291/">https://lwn.net/Articles/324291/</a></p><ul><li><p>可读写层<br>可读写层是rootfs中最上面的一层，是承载容器中文件读写的操作一层,在这一层中的挂载方式是read + write</p></li><li><p>init层<br>init层指的是Docker项目用来存放对底层操作系统的改动信息例如’etc/hosts’、‘etc/resolv.conf’等，因为容器在启动时可以手动指定。init层在挂载时是采用’ro’ + 'wh’的方式，'ro’指的是read onley,'wh’指的是whiteout,即只读 + ‘whiteout’,whiteout指的是对文件的操作会在通过一定的手段进行隐藏，类似与java中的临时变量的概念，只在当前容器中有效，不会真正的修改底层的文件</p></li><li><p>只读层<br>只读层指的是镜像中最底层的系统镜像层，它们的挂载方式也是’ro’ + ‘wh’</p></li></ul><h3 id="总结"><a class="header-anchor" href="#总结"></a>总结</h3><p>docker中的镜像通过这种分层构建的方式大大的减少了传统镜像中操作系统的大小，只包含了可读写层中应用的部分。底层支持这种构建方式主要是依赖<B>chroot</B>(切换根目录的能力)和<B>union file System</B>(联合文件系统)</p><h2 id="总结-v2"><a class="header-anchor" href="#总结-v2"></a>总结</h2><p>docker容器化的基础是三个部分</p><ul><li>Namespace提供的进程隔离能力</li><li>Cgroup提供的资源限制能力</li><li>rootfs的文件分层结构设计</li></ul><p><B>clone(true)/cgroup file/union file System</B></p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://tech.meituan.com/2015/03/31/cgroups.html">Linux资源管理之cgroups简介</a><br><a href="https://www.nginx.com/blog/what-are-namespaces-cgroups-how-do-they-work/">什么是命名空间和cgroup,以及它们是如何工作的？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;深入剖析Kubernetes之容器化的基础&lt;/h1&gt;
&lt;h2 id=&quot;容器化的基础之进程管理&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#容器化的基础之进程管理&quot;&gt;&lt;/a&gt;容器化的基础之进程管理&lt;/h2&gt;
&lt;p&gt;&lt;B&gt;容器化的基础&lt;/B&gt;是依赖于Li</summary>
      
    
    
    
    <category term="容器化" scheme="https://agmtopy.gitee.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
    <category term="docker" scheme="https://agmtopy.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq索引实现原理之IndexService</title>
    <link href="https://agmtopy.gitee.io/2021/10/13/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/15.rocketmq%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BIndexService/"/>
    <id>https://agmtopy.gitee.io/2021/10/13/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/15.rocketmq%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BIndexService/</id>
    <published>2021-10-12T16:23:46.000Z</published>
    <updated>2021-11-06T08:04:22.885Z</updated>
    
    <content type="html"><![CDATA[<h1>rocketmq索引实现原理之IndexService</h1><p>在之前的文章中分析了消息是如果通过Commitlog的逻辑设计到MappedFile的与文件系统进行交付的过程，这篇文章来分析消息体是如何实现快速查找的以及底层实现<br>RocketMQ的索引相关的工作都是由Store包下的<B>IndexService</B>实现的,<B>IndexService</B>操作的对象是<B>IndexFile</B>,下面主要来分析IndexFile的<B>创建</B>、<B>加载</B>、<B>插入</B>、<B>内容</B>过程。</p><h2 id="IndexFile文件的创建过程"><a class="header-anchor" href="#IndexFile文件的创建过程"></a>IndexFile文件的创建过程</h2><p>创建Index索引文件的过程的触发点是在<B>load()</B>方法中进行触发的,主要是通过<B>IndexService.retryGetAndCreateIndexFile()</B>方法执行的</p><ul><li>IndexService.retryGetAndCreateIndexFile</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">IndexFile</span> <span class="token function">retryGetAndCreateIndexFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IndexFile</span> indexFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//1. 重复尝试创建索引文件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">null</span> <span class="token operator">==</span> indexFile <span class="token operator">&amp;&amp;</span> times <span class="token operator">&lt;</span> MAX_TRY_IDX_CREATE<span class="token punctuation">;</span> times<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//2.获取或创建index文件</span>        indexFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndCreateLastIndexFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> indexFile<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//线程休眠1s,重新尝试创建indexFile文件</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Tried to create index file fail. times: %s ,start sleep 1s"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Interrupted"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> indexFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getAccessRights</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeIndexFileError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Mark index file cannot build flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> indexFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>retryGetAndCreateIndexFile()</B>方法主要是对文件的创建过程有一个重试的机制来尽量保证<B>index文件</B>的成功创建,具体的创建过程就是通过<br><B>getAndCreateLastIndexFile()</B>方法来进行创建</p><ul><li>getAndCreateLastIndexFile()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取或创建index文件 */</span><span class="token keyword">private</span> <span class="token class-name">IndexFile</span> <span class="token function">getAndCreateLastIndexFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化成员变量</span>    <span class="token class-name">IndexFile</span> indexFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">IndexFile</span> prevIndexFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lastUpdateEndPhyOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lastUpdateIndexTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//使用代码块?</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//执行读锁</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果indexFileList不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取最后一个indexFile</span>            <span class="token class-name">IndexFile</span> tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断当前indexFile文件是否写入满额</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">.</span><span class="token function">isWriteFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果写入满额的法直接使用indexFile</span>                indexFile <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果写入满额就会查询这个文件的最后一次写入的offset</span>                lastUpdateEndPhyOffset <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">getEndPhyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//查询最后一次更新的时间戳</span>                lastUpdateIndexTimestamp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">getEndTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//标记当前文件为上一个使用的索引文件</span>                prevIndexFile <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//释放锁操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//indexFile文件没有获取成功时</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>indexFile <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//计算index fileName 格式为yyyyMMddHHmmssSSS</span>            <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeIndexPath <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">timeMillisToHumanString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//新建indexFile文件</span>            indexFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashSlotNum<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexNum<span class="token punctuation">,</span> lastUpdateEndPhyOffset<span class="token punctuation">,</span> lastUpdateIndexTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//占用写锁</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getLastIndexFile exception "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//释放写锁</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>indexFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//对上一个index文件进行刷盘操作</span>            <span class="token keyword">final</span> <span class="token class-name">IndexFile</span> flushThisFile <span class="token operator">=</span> prevIndexFile<span class="token punctuation">;</span>            <span class="token class-name">Thread</span> flushThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span>flushThisFile<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"FlushIndexFileThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flushThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flushThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> indexFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>getAndCreateLastIndexFile()</B>方法主要是分为三个步骤</p><ul><li>查询可以使用的indexFile文件</li><li>如果没有index文件就新建一个indexFile文件</li><li>尝试将已经满额的indexFile文件刷盘</li></ul><h2 id="IndexFile文件的加载过程"><a class="header-anchor" href="#IndexFile文件的加载过程"></a>IndexFile文件的加载过程</h2><p><B>IndexService</B>的加载过程是由<B>load()</B>方法实现的,这个方法的被调用链是由<br><B>BrokerController</B> -&gt; <B>DefaultMessageStore</B> -&gt; <B>IndexService</B></p><p><img src="https://i.loli.net/2021/10/17/KA9awWtHXcfGjRL.jpg" alt="IndexService被调用链"><br><B>load()</B>构造方法主要是对原有的index文件分析然后生成IndexFile对象的过程</p><ul><li>load()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> lastExitOK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.查找指定文件目录下的文件列表</span>    <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storeIndexPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//2.按照文件名称进行升序</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//3.根据index文件初始化indexFile对象</span>                <span class="token class-name">IndexFile</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashSlotNum<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexNum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//3.初始化indexFile对象的头文件信息</span>                f<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//4.判断上次是否正常退出，未正常退出并且文件记录在日志保存点之后的进行舍弃</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastExitOK <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span><span class="token function">getEndTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIndexMsgTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//4.1 舍弃未到保存点的数据</span>                    f<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"load index file OK, "</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//5.将文件装载到indexFileList中</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>indexFileList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e <span class="token operator">|</span> <span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//省略...</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码就是对之前的indexFile文件进行加载，并且对在日志保存点之后的数据进行抛弃。</p><ul><li>IndexFile()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">IndexFile</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> hashSlotNum<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> indexNum<span class="token punctuation">,</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> endPhyOffset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> endTimestamp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//计算index文件大小 = 头信息长度 + 哈希slot数量*哈希slot长度 + index数量*index长度</span>    <span class="token keyword">int</span> fileTotalSize <span class="token operator">=</span> <span class="token class-name">IndexHeader</span><span class="token punctuation">.</span>INDEX_HEADER_SIZE <span class="token operator">+</span> <span class="token punctuation">(</span>hashSlotNum <span class="token operator">*</span> hashSlotSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>indexNum <span class="token operator">*</span> indexSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建mappedFile对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> fileTotalSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对属性进行赋值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFile<span class="token punctuation">.</span><span class="token function">getFileChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFile<span class="token punctuation">.</span><span class="token function">getMappedByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hashSlotNum <span class="token operator">=</span> hashSlotNum<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>indexNum <span class="token operator">=</span> indexNum<span class="token punctuation">;</span>    <span class="token comment">//处理文件头信息</span>    <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexHeader</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化'空间位置'和'时间位置'</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>endPhyOffset <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">setBeginPhyOffset</span><span class="token punctuation">(</span>endPhyOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">setEndPhyOffset</span><span class="token punctuation">(</span>endPhyOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>endTimestamp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">setBeginTimestamp</span><span class="token punctuation">(</span>endTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">setEndTimestamp</span><span class="token punctuation">(</span>endTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>IndexFile()</B>方法会根据文件名称创建一个index文件对象，这个方法中比较有意思的是会根据配置文件<B>解析</B>、<B>创建</B>头文件信息对象<B>IndexHeader</B>而且还是是通过<B>MappedFile</B>对象进行处理的</p><h2 id="IndexFile文件的插入过程"><a class="header-anchor" href="#IndexFile文件的插入过程"></a>IndexFile文件的插入过程</h2><p>IndexService对外提供插入索引的方法是<B>buildIndex</B>,buildIndex()是通过<B>DefaultMessageStore</B>的<B>ReputMessageService</B>来进行触发的</p><ul><li>ReputMessageService</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReputMessageService</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceThread</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//真正启动索引任务入口</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.判断索引的offset是否小于commitLog中最小的offset</span>        <span class="token comment">//2.只处理需要进行索引操作的消息</span>        <span class="token comment">//3.根据消息组装消息后置处理器</span>        <span class="token comment">//4/5。处理主节点和从节点的差异</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doReput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<B>ReputMessageService</B>可以看到是使用一个循环每隔1s去查询一次commitLog文件中需要进行后置处理的消息来进行处理</p><h2 id="IndexFile文件的查询过程"><a class="header-anchor" href="#IndexFile文件的查询过程"></a>IndexFile文件的查询过程</h2><p>前面介绍了对indexFile文件的创建、加载、写入的过程，接下介绍一下indexFile文件的查询过程</p><ul><li>调用流程</li></ul><pre class="line-numbers language-none"><code class="language-none">NettyRemotingServer -&gt; NettyRemotingAbstract -&gt; QueryMessageProcessor -&gt; DefaultMessageStore -&gt; IndexService -&gt; IndexFile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上是调用索引文件的查询过程，从Netty的服务端到IndexFile文件的整体流程，具体的执行方法是IndexFile文件中的selectPhyOffset()</p><ul><li>selectPhyOffset</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//计算出indexFile文件中数据的具体物理位置</span><span class="token keyword">int</span> keyHash <span class="token operator">=</span> <span class="token function">indexKeyHashMethod</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> slotPos <span class="token operator">=</span> keyHash <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashSlotNum<span class="token punctuation">;</span><span class="token keyword">int</span> absSlotPos <span class="token operator">=</span> <span class="token class-name">IndexHeader</span><span class="token punctuation">.</span>INDEX_HEADER_SIZE <span class="token operator">+</span> slotPos <span class="token operator">*</span> hashSlotSize<span class="token punctuation">;</span><span class="token comment">//根据具体的位置进行取数操作</span><span class="token keyword">int</span> keyHashRead <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>absIndexPos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> phyOffsetRead <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> timeDiff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> prevIndexRead <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IndexFile文件的内容"><a class="header-anchor" href="#IndexFile文件的内容"></a>IndexFile文件的内容</h2><p>索引文件是放置在<B>${rootpath}/index</B>目录下的，文件名称按照yyyyMMddhhmmsssss的形式进行生成，默认大小为400MB,由三个部分组成</p><ul><li>header</li><li>slot table</li><li>index linked list</li></ul><p>结构如下所示:</p><pre class="line-numbers language-none"><code class="language-none">|&lt;-- 40 byte --&gt;|&lt;---   500w   ---&gt;|&lt;---   2000w   ---&gt;|+---------------+------------------+-------------------+|    header     |   slot table     | index linked list |+---------------+------------------+-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详细的数据结构如下所示</p><h3 id="B-header结构-B"><a class="header-anchor" href="#B-header结构-B"></a><B>header结构</B></h3><pre class="line-numbers language-none"><code class="language-none">+---------------------+--0| beginTimestampIndex |             ----&gt; 第一条消息的保存时间+---------------------+--8| endTimestampIndex   |             ----&gt; 最后一条消息的保存时间+---------------------+--16| beginPhyoffsetIndex |             ----&gt; 第一条消息的在commitlog中的偏移量+---------------------+--24| endPhyoffsetIndex   |             ----&gt; 最后一条消息的在commitlog中的偏移量+---------------------+--32| hashSlotcountIndex  |             ----&gt; 哈希槽数量，保存添加到本槽列表的最新索引位置+---------------------+--36| indexCountIndex     |             ----&gt; 索引数量，具体索引数据+---------------------+--40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键代码可以参考<B>IndexHeader</B>的静态成员变量,以下是展示用例</p><ul><li>IndexHeader</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INDEX_HEADER_SIZE <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> beginTimestampIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> endTimestampIndex <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> beginPhyoffsetIndex <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> endPhyoffsetIndex <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> hashSlotcountIndex <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> indexCountIndex <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span>    <span class="token comment">//插入indexFile文件的开始时间</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeginTimestamp</span><span class="token punctuation">(</span><span class="token keyword">long</span> beginTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//本地缓存</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>beginTimestamp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>beginTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//指定位置插入时间戳,beginTimestampIndex默认为0</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>byteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>beginTimestampIndex<span class="token punctuation">,</span> beginTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里初始化的静态变量会在插入具体的头文件值时进行使用,可以参考<B>setBeginTimestamp</B>方法;<br>通过vscode的hexdump插件可以看到indexFile文件的内容如下</p><p><img src="https://i.loli.net/2021/11/04/jXilUC1O9em3v4P.jpg" alt="indexFile原始文件"></p><p>可以看到前8个字节为<B>00 00 01 7C E9 D4 AA A5</B>,通过计算器转换为十进制为<B>1636010601125</B></p><p><img src="https://i.loli.net/2021/11/04/UHYsJqGEyrotCxP.jpg" alt="时间戳"></p><p>时间戳在进行一次转换可以看到为<br><img src="https://i.loli.net/2021/11/04/UQqBHVZ4vliWNIs.jpg" alt="开始时间"></p><p>剩下的endTimestampIndex、beginPhyoffsetIndex、beginPhyoffsetIndex、endPhyoffsetIndex、hashSlotcountIndex、indexCountIndex信息的处理方式与这个类似，不进行重复了</p><h3 id="B-slot-table结构-B"><a class="header-anchor" href="#B-slot-table结构-B"></a><B>slot table结构</B></h3><p><B>slot table结构</B>是对</p><h3 id="B-index-linked-list结构-B"><a class="header-anchor" href="#B-index-linked-list结构-B"></a><B>index linked list结构</B></h3><p><B>index linked list</B>的结构是在indexFile上的hash索引之后用存放实际的offset的值</p><p>结构如下所示</p><pre class="line-numbers language-none"><code class="language-none">+---------------------+--0| key hash            |             ----&gt; 会根据Topic和key的值拼接在一起计算的一个hash值+---------------------+--4| commitLogOffset     |             ----&gt; commitLog Offset是commitLog文件上的位置+---------------------+--12| timeDiff            |             ----&gt; timeDiff是写入时的相对时间戳+---------------------+--16| slotValue           |             ----&gt; slotValue表示的是记录因为hash冲突造成的下一个节点的数据的相对位置+---------------------+--20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键的代码如下所示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 写入keyHash 长度为4</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>absIndexPos<span class="token punctuation">,</span> keyHash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 写入commitLogOffset 长度为 8</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> commitLogOffset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 写入时的相对时间戳 长度为 4</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> timeDiff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4. 写入slotValue 长度为 4,记录因为hash冲突造成的下一个节点的数据的相对位置</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>absIndexPos <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> slotValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.更新slot上的记录的hash槽位使用数量</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>absSlotPos<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader<span class="token punctuation">.</span><span class="token function">getIndexCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>IndexFile文件最精华的设计在于对索引数据的分类，并且按照分类将数据依次写入IndexFile文件。IndexFile文件分为header、Hash solt、offset三种类型数据</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="http://zjykzk.github.io/post/cs/rocketmq/store/">http://zjykzk.github.io/post/cs/rocketmq/store/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;rocketmq索引实现原理之IndexService&lt;/h1&gt;
&lt;p&gt;在之前的文章中分析了消息是如果通过Commitlog的逻辑设计到MappedFile的与文件系统进行交付的过程，这篇文章来分析消息体是如何实现快速查找的以及底层实现&lt;br&gt;
RocketMQ的索引相关</summary>
      
    
    
    
    <category term="消息队列" scheme="https://agmtopy.gitee.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RocketMQ" scheme="https://agmtopy.gitee.io/tags/RocketMQ/"/>
    
    <category term="IndexService" scheme="https://agmtopy.gitee.io/tags/IndexService/"/>
    
  </entry>
  
  <entry>
    <title>G1GC的算法与实现</title>
    <link href="https://agmtopy.gitee.io/2021/09/26/12.JVM/6.G1GC%E7%9A%84%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://agmtopy.gitee.io/2021/09/26/12.JVM/6.G1GC%E7%9A%84%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-09-26T14:48:01.000Z</published>
    <updated>2021-10-10T02:54:07.285Z</updated>
    
    <content type="html"><![CDATA[<h1>G1GC的算法与实现-算法篇</h1><p>根据《深入Java虚拟机-JVM G1GC的算法与实现》-算法篇整理而来,该篇主要由以下章节组成</p><ul><li>第一章 G1GC是什么?</li><li>第二章 并发标记</li><li>第三章 转移</li><li>第四章 软实时性</li><li>第五章 分代G1GC模式</li><li>第六章 算法篇总结</li></ul><h2 id="G1GC是什么"><a class="header-anchor" href="#G1GC是什么"></a>G1GC是什么?</h2><blockquote><p>Garbage-First (G1) 垃圾收集器是一种服务端的垃圾收集器，针对具有大内存和多处理器的机器。它尝试尽量满足用户设定的垃圾收集 (GC) 暂停时间，同时实现高吞吐量。GC操作（例如全局标记）与应用程序线程同时执行。<br>这是JDK官方对于G1的定义,这里作者提出一个结论G1的特点是非常非常的关注实时性,并且实时性分为<B>软实时性</B>/<B>硬实时性</B><br>硬实时性指的是硬性强制要求的，如果达不到指定时间就会返回失败的处理;<br>软实时性指的是柔性的，对于设定的指定时间只是一个期望，不会做强制的要求限制;<br>额外一点是<B>G1是支持4G以上的堆内存进行垃圾收集</B></p></blockquote><h3 id="G1出现的背景"><a class="header-anchor" href="#G1出现的背景"></a>G1出现的背景</h3><p>在G1出现之前的GC处理器主要是通过增量GC或者是并发GC来提高STW的暂停时间，但是这样缩短时间会造成吞吐量下降。<br>G1的出现是为了解决在期望的暂停时间周围尽量的完成更大的GC吞吐量。目前GC的关注点都是在尽可能的减少暂停时间，而不是增大吞吐量上，这可能是因为堆中的对象大多属于是朝生夕死的类型</p><h3 id="G1的目前的现状"><a class="header-anchor" href="#G1的目前的现状"></a>G1的目前的现状</h3><p>G1在JDK9中就作为默认的垃圾回收器，现阶段G1在最后一次增强是在JDK14中增加对NUMA(非统一内存访问)的增强。在JDK14中新增了ZGC收集器，并且预计将ZGC在未来的JDK版本中作为默认GC</p><h2 id="G1GC的执行过程"><a class="header-anchor" href="#G1GC的执行过程"></a>G1GC的执行过程</h2><p>所有GC在执行过程可以都划分为</B>标记</B>和<B>整理</B>两个大的步骤，不同的是具体的执行过程会有差别</p><h3 id="G1GC的标记过程"><a class="header-anchor" href="#G1GC的标记过程"></a>G1GC的标记过程</h3><p>G1GC的标记过程是<B>并发标记</B>,但是目前的GC还做不到全局并发，只能在某些标记步骤中做到并发。G1的标记过程划分为五个步骤分别是</p><ul><li>初始标记阶段</li><li>并发标记阶段</li><li>最终标记阶段</li><li>存活对象计数阶段</li><li>收尾工作</li></ul><hr><ul><li><p>初始化标记阶段<br><b>初始化标记阶段</b>只对<b>根引用对象</b>进行标记这个过程也称为根扫描，由于mutator(用户线程)会修改根对象引用，因此在者一步是需要将mutator暂停下来，这里之所以没有采用读/写屏障的技术来实现并发个人猜测是因为mutator会频繁修改根对象，因此在此处保证并发后的性能损耗远远大于顺序执行所带来的性能损耗。<br>在初始化标记阶段只会对根引用对象进行标记到特定的内存中称为<b>标记位图</b></p></li><li><p>并发标记阶段<br><b>并发标记阶段</b>的特点是GC线程与mutator线程是并发执行的，在mutator线程修改根对象引用时会采用<b>写屏障</b>来记录对象之间引用关系的变化。<br>SATB是记录对象之间逻辑引用关系的结构，全称为Snapshot At The Beginning(初始快照),在并发标记过程中产生的新对象会作为“已完成扫描和标记”的对象，在mutator线程发生对标记对象的修改时，SATB专用写屏障也会将该对象记录到SATB队列中。SATB队列在实现上采用与线程绑定的形式来进行，当队列装满时，将会添加到全局SATB队列中。</p></li></ul><p>log</p><blockquote><p>并发指的是更多的指的是软件领域的无序执行，不同任务之间没有顺序关系的一种软件启动方式</br>并行更多的指的是在硬件领域不同指令在同一时刻执行的</p></blockquote><h2 id="参考文章"><a class="header-anchor" href="#参考文章"></a>参考文章</h2><p><a href="https://tech.meituan.com/2016/09/23/g1.html">https://tech.meituan.com/2016/09/23/g1.html</a><br><a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html">https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;G1GC的算法与实现-算法篇&lt;/h1&gt;
&lt;p&gt;根据《深入Java虚拟机-JVM G1GC的算法与实现》-算法篇整理而来,该篇主要由以下章节组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一章 G1GC是什么?&lt;/li&gt;
&lt;li&gt;第二章 并发标记&lt;/li&gt;
&lt;li&gt;第三章 转移&lt;/li&gt;</summary>
      
    
    
    
    <category term="jvm" scheme="https://agmtopy.gitee.io/categories/jvm/"/>
    
    
    <category term="jvm" scheme="https://agmtopy.gitee.io/tags/jvm/"/>
    
    <category term="G1" scheme="https://agmtopy.gitee.io/tags/G1/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq的存储实现原理之commitlog</title>
    <link href="https://agmtopy.gitee.io/2021/09/09/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/13.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8Bcommitlog/"/>
    <id>https://agmtopy.gitee.io/2021/09/09/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/13.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8Bcommitlog/</id>
    <published>2021-09-09T15:17:09.000Z</published>
    <updated>2021-10-10T04:08:48.736Z</updated>
    
    <content type="html"><![CDATA[<h1>rocketmq的存储实现原理之commitlog</h1><p>在之前的《rocketmq的存储原理》文章中分析了rocketmq的存储过程主要是通过两个类来实现的分别是commitlog和MappedFile，这篇文章重点分析commitlog这个类的实现</p><h2 id="初始化过程"><a class="header-anchor" href="#初始化过程"></a>初始化过程</h2><p>comitlog对象是通过三个方法来负责初始化处理过程分别是构造方法<b>commitLog()</b>/加载方法<b>load()</b>/启动方法<b>start()</b>,这里将commitlog的对象初始化过程和load过程以及启动-start过程都划分为初始化过程中</p><h3 id="commitLog-构造方法"><a class="header-anchor" href="#commitLog-构造方法"></a>commitLog()构造方法</h3><p>CommitLog()构造方法的调用链如图所示<br><img src="https://i.loli.net/2021/09/10/s2fcpiQdSHC8Tyv.png" alt="CommitLog()"><br>可以看到在Broker启动过程中会通过<B>DefaultMessageStore</B>来调用<B>Commitlog</B>构造方法,commitlog的构造方法主要是做初始化日志环境的功能，下面详细的看一下<B>commitLog()</B>方法的实现</p><ul><li>CommitLog构造方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CommitLog</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DefaultMessageStore</span> defaultMessageStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 初始化文件信息在内存中的映射的queue</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedFileQueue</span><span class="token punctuation">(</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStorePathCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMappedFileSizeCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultMessageStore<span class="token punctuation">.</span><span class="token function">getAllocateMappedFileService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 设置默认的消息存储</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore <span class="token operator">=</span> defaultMessageStore<span class="token punctuation">;</span>    <span class="token comment">//3. 设置刷盘策略</span>    <span class="token comment">//TODO 这里的刷盘策略'FlushCommitLogService'是使用final关键字进行修饰的，在初始化完成以后就不允许更新刷盘策略的。暂时还不知道为什么这样做</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FlushDiskType</span><span class="token punctuation">.</span>SYNC_FLUSH <span class="token operator">==</span> defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushDiskType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置同步刷盘策略</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupCommitService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置异步刷盘策略</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlushRealTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4. 设置消息提交策略为实时提交,CommitRealTimeService继承FlushCommitLogService并作为默认的提交策略，具体实现类还有GroupCommitService/FlushRealTimeService</span>    <span class="token comment">//TODO 这里的抽象不是很好，将提交策略通过内部类的方式来隐藏实现</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>commitLogService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommitRealTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5. 设置默认响应策略</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>appendMessageCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAppendMessageCallback</span><span class="token punctuation">(</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxMessageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6. 初始化提交消息线程</span>    putMessageThreadLocal <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">PutMessageThreadLocal</span><span class="token punctuation">(</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxMessageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7. 初始化提交消息的锁，TODO  会根据配置初始化出可重入锁或自旋锁??</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>putMessageLock <span class="token operator">=</span> defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUseReentrantLockWhenPutMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">PutMessageReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PutMessageSpinLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤1~7是初始化日志环境的工作，依次是</p><ul><li>初始化messagequeue\messafestore</li><li>设置刷盘策略、提交策略、响应策略</li><li>初始化提交线程池</li></ul><hr><h3 id="load-方法"><a class="header-anchor" href="#load-方法"></a>load()方法</h3><p>在构造方法完成后<B>BrokerController</B>会继续调用<B>DefaultMessageStore</B>load()方法,来对<B>CommitLog</B>对象进行加载</p><ul><li>BrokerController.load</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//initialize()方法执行message加载动作</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//省略...</span>    result <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//省略...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DefaultMessageStore.load()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> loadResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 通过是否存在临时文件判断是否上一次正常退出</span>        <span class="token keyword">boolean</span> lastExitOK <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTempFileExist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"last shutdown &#123;&#125;"</span><span class="token punctuation">,</span> lastExitOK <span class="token operator">?</span> <span class="token string">"normally"</span> <span class="token operator">:</span> <span class="token string">"abnormally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. TODO 这里的判断是多余的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> scheduleMessageService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//执行调度</span>            loadResult <span class="token operator">=</span> loadResult <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduleMessageService<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3. 加载CommitLog</span>        loadResult <span class="token operator">=</span> loadResult <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.加载loadConsumeQueue</span>        loadResult <span class="token operator">=</span> loadResult <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadConsumeQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.创建成功后续操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//初始化文件存储的检查对象</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>storeCheckpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StoreCheckpoint</span><span class="token punctuation">(</span><span class="token class-name">StorePathConfigHelper</span><span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getStorePathRootDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//加载index的管理服务</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>indexService<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>lastExitOK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//根据上次服务是否异常中断进行状态恢复</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>lastExitOK<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"load over, and the max phy offset = &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxPhyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"load exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        loadResult <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载失败时,关闭 TODO 这里就只有文件映射服务(MappedFileService)需要关闭吗?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>allocateMappedFileService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> loadResult<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在DefaultMessageStore.load的第3步会将commitLog进行加载,其他方法是对异常恢复、延迟消息处理队列服务、ConsumerQueue进行加载。<br>下面介绍一下commitLog.loan的加载过程</p><ul><li>CommitLog.load()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//加载mappedFileQueue</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"load commit log "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token string">"OK"</span> <span class="token operator">:</span> <span class="token string">"Failed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到CommitLog.load()方法就是加载<B>MappedFileQueue</B></p><ul><li>MappedFileQueue.load()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 加载commit log文件 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//默认地址为System.getProperty("user.home") + File.separator + "store" + File.separator + "commitlog"; @see org.apache.rocketmq.store.config.MessageStoreConfig.storePathCommitLog</span>    <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件不存在时,直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token operator">||</span> files<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对文件按照升序进行排序 TODO 这里也是多余的文件的命名规则是有序</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//commitLog的文件大小默认为1G TODO 这个大小是介于性能和容量之间的一个选择</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>file <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" length not matched message store config value, please check it manually"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//设置MappedFile对象信息</span>            <span class="token class-name">MappedFile</span> mappedFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            mappedFile<span class="token punctuation">.</span><span class="token function">setWrotePosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            mappedFile<span class="token punctuation">.</span><span class="token function">setFlushedPosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            mappedFile<span class="token punctuation">.</span><span class="token function">setCommittedPosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将MappedFile对象添加到mappedFiles，注意是通过CopyOnWriteArrayList容器进行保存</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mappedFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"CommitLog  call MappedFileQueue load &#123;&#125; :OK"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"CommitLog  call MappedFileQueue load &#123;&#125; :ERROR"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mappedFiles.load()方法主要通过指定的文件路径加载文件，并将文件对象通过CopyOnWriteArrayList容器进行存放<br>CopyOnWriteArrayList是读无锁-写有锁的容器，存储commitLog信息</p><h3 id="start-方法"><a class="header-anchor" href="#start-方法"></a>start()方法</h3><ul><li>commitLog.Start()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.启动刷盘线程</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.判断是否启动异步提交</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransientStorePoolEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>commitLogService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>commitLog.start()方法主要是启动刷盘线程和判断是否启动异步提交</p><h2 id="调用过程"><a class="header-anchor" href="#调用过程"></a>调用过程</h2><p>CommitLog底层是通过<B>asyncPutMessage()</B>方法来实现异步向文件系统提交的，下面我们先根据asyncPutMessage()来分析从上至下的调用链过程</p><h3 id="调用链"><a class="header-anchor" href="#调用链"></a>调用链</h3><p>通过Arthas分析<B>asyncPutMessage()</B>的调用过程如图所示</p><p><img src="https://i.loli.net/2021/09/13/rbDHVqyCkc8XJoj.jpg" alt="/调用链路.jpg"></p><ul><li>arthas cmd</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stack org.apache.rocketmq.store.CommitLog asyncPutMessage  -n <span class="token number">5</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从图中可以看处理整个调用过程从网络I/O到文件I/O是非常短的</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token operator">@</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>store<span class="token punctuation">.</span>CommitLog<span class="token punctuation">.</span>asyncPutMessage<span class="token operator">(</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>store<span class="token punctuation">.</span>DefaultMessageStore<span class="token punctuation">.</span>asyncPutMessage<span class="token operator">(</span>DefaultMessageStore<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">435</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>broker<span class="token punctuation">.</span>processor<span class="token punctuation">.</span>SendMessageProcessor<span class="token punctuation">.</span>asyncSendMessage<span class="token operator">(</span>SendMessageProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">314</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>broker<span class="token punctuation">.</span>processor<span class="token punctuation">.</span>SendMessageProcessor<span class="token punctuation">.</span>asyncProcessRequest<span class="token operator">(</span>SendMessageProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">101</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>broker<span class="token punctuation">.</span>processor<span class="token punctuation">.</span>SendMessageProcessor<span class="token punctuation">.</span>asyncProcessRequest<span class="token operator">(</span>SendMessageProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">82</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>NettyRemotingAbstract<span class="token operator">$</span>1<span class="token punctuation">.</span>run<span class="token operator">(</span>NettyRemotingAbstract<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">225</span><span class="token operator">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>RequestTask<span class="token punctuation">.</span>run<span class="token operator">(</span>RequestTask<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">80</span><span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NettyRemotingAbstract -&gt; SendMessageProcessor -&gt; CommitLog 三个类就完成了处理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;rocketmq的存储实现原理之commitlog&lt;/h1&gt;
&lt;p&gt;在之前的《rocketmq的存储原理》文章中分析了rocketmq的存储过程主要是通过两个类来实现的分别是commitlog和MappedFile，这篇文章重点分析commitlog这个类的实现&lt;/p&gt;
</summary>
      
    
    
    
    <category term="消息队列" scheme="https://agmtopy.gitee.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RocketMQ" scheme="https://agmtopy.gitee.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq的存储实现原理之MappedFile</title>
    <link href="https://agmtopy.gitee.io/2021/09/09/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/14.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BMappedFile/"/>
    <id>https://agmtopy.gitee.io/2021/09/09/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/14.rocketmq%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BMappedFile/</id>
    <published>2021-09-09T15:17:09.000Z</published>
    <updated>2021-10-12T16:23:09.335Z</updated>
    
    <content type="html"><![CDATA[<h1>rocketmq的存储实现原理之MappedFile</h1><p><B>MappedFile</B>是RoketMq处理底层文件的类,在上面一篇文章中已经了解了如何通过<B>CommitLog</B>类来处理请求以及如何通过<B>MappedFile</B>来实现底层存储的<br><B>MappedFile</B>的整体逻辑是</p><h2 id="MappedFile"><a class="header-anchor" href="#MappedFile"></a>MappedFile</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;rocketmq的存储实现原理之MappedFile&lt;/h1&gt;
&lt;p&gt;&lt;B&gt;MappedFile&lt;/B&gt;是RoketMq处理底层文件的类,在上面一篇文章中已经了解了如何通过&lt;B&gt;CommitLog&lt;/B&gt;类来处理请求以及如何通过&lt;B&gt;MappedFile&lt;/B&gt;来实现底层</summary>
      
    
    
    
    <category term="消息队列" scheme="https://agmtopy.gitee.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RocketMQ" scheme="https://agmtopy.gitee.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>Nacos使用指南</title>
    <link href="https://agmtopy.gitee.io/2021/09/05/17.Nacos/0.Nacos%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://agmtopy.gitee.io/2021/09/05/17.Nacos/0.Nacos%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2021-09-05T13:41:02.000Z</published>
    <updated>2021-09-08T16:20:50.579Z</updated>
    
    <content type="html"><![CDATA[<h1>Nacos使用指南</h1><p>Nacos的定位是注册中心，支持目前主流的分布式架构K8S/RPC/RESTful。主要功能有</p><ul><li>服务发现和服务健康监测</li><li>动态配置服务</li><li>动态 DNS 服务</li><li>服务及其元数据管理</li></ul><h2 id="构建Nacos"><a class="header-anchor" href="#构建Nacos"></a>构建Nacos</h2><h3 id="Nacos-docker"><a class="header-anchor" href="#Nacos-docker"></a>Nacos docker</h3><ul><li>clone项目</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/nacos-group/nacos-docker.git<span class="token builtin class-name">cd</span> nacos-docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>单机模式 Derby</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose -f example/standalone-derby.yaml up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意一定要启动docker desktop或者docker进程，然后就经过漫长的编译环节，编译完成后docker镜像会自动启动</p><p><img src="https://i.loli.net/2021/09/08/xpdPVki2fA18yh3.jpg" alt="/镜像image.jpg"></p><ul><li>测试服务状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -X POST <span class="token string">'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/08/yt43erZ8ED2SoBm.jpg" alt="/服务注册.jpg"><br>Nacos提供的服务以RESTful风格进行提供，因此可以直接通过http请求进行操作</p><h3 id="Nacos-Cons"><a class="header-anchor" href="#Nacos-Cons"></a>Nacos Cons</h3><ul><li>服务地址<br><a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></li><li>账号/密码<br>nacos/nacos<br>这个账号/密码是存放在数据库中的，可以进行更改</li></ul><p><img src="https://i.loli.net/2021/09/08/qSbWEAl1zR4Cpxa.jpg" alt="/nacos_admin.jpg"></p><h3 id="spring-boot示例"><a class="header-anchor" href="#spring-boot示例"></a>spring boot示例</h3><h4 id="配置管理"><a class="header-anchor" href="#配置管理"></a>配置管理</h4><ul><li>ConfigExample</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> serverAddr <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> dataId <span class="token operator">=</span> <span class="token string">"nacos.cfg.dataId1"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> group <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>SERVER_ADDR<span class="token punctuation">,</span> serverAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建连接</span>    <span class="token class-name">ConfigService</span> configService <span class="token operator">=</span> <span class="token class-name">NacosFactory</span><span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取配置</span>    <span class="token class-name">String</span> content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content1:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置监听</span>    configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"recieve:"</span> <span class="token operator">+</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//推送配置</span>    <span class="token keyword">boolean</span> isPublishOk <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">publishConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isPublishOk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content2:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//移除配置</span>    <span class="token keyword">boolean</span> isRemoveOk <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">removeConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isRemoveOk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content3:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注册中心"><a class="header-anchor" href="#注册中心"></a>注册中心</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Nacos使用指南&lt;/h1&gt;
&lt;p&gt;Nacos的定位是注册中心，支持目前主流的分布式架构K8S/RPC/RESTful。主要功能有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务发现和服务健康监测&lt;/li&gt;
&lt;li&gt;动态配置服务&lt;/li&gt;
&lt;li&gt;动态 DNS 服务&lt;/li&gt;
&lt;li&gt;服</summary>
      
    
    
    
    <category term="框架" scheme="https://agmtopy.gitee.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Nacos" scheme="https://agmtopy.gitee.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>如何编写JavaAgent</title>
    <link href="https://agmtopy.gitee.io/2021/07/03/12.JVM/5.%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99JavaAgent/"/>
    <id>https://agmtopy.gitee.io/2021/07/03/12.JVM/5.%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99JavaAgent/</id>
    <published>2021-07-03T15:11:15.000Z</published>
    <updated>2021-09-26T14:48:14.630Z</updated>
    
    <content type="html"><![CDATA[<h1>如何编写JavaAgent</h1><p>这篇文章是根据MegaEase的袁伟老师的分享而来,地址是<a href="https://www.youtube.com/watch?v=ujhqct2POLU">How To Write a JavaAgent</a></p><h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2><h3 id="java-agent是什么？"><a class="header-anchor" href="#java-agent是什么？"></a>java agent是什么？</h3><p>java agent是jdk1.5时候推出的一个在运行时动态修改class,从而达到动态修改行为的目的</p><h3 id="能做什么？"><a class="header-anchor" href="#能做什么？"></a>能做什么？</h3><p>功能与AOP类似，它的优势在与彻底和业务代码隔离，可以完成AOP相同的事情，并且不入侵业务代码，适合于日志采集、链路追踪等基础组件</p><h2 id="用法"><a class="header-anchor" href="#用法"></a>用法</h2><p>java agent主要可以在两个时间点进行加载：</p><ol><li>JVM启动时</li><li>目标方法运行时</li></ol><h4 id="项目结构"><a class="header-anchor" href="#项目结构"></a>项目结构</h4><p><img src="https://i.loli.net/2021/07/11/uUxsh1JqQzaSXAW.png" alt="项目结构"></p><h4 id="启动时加载示例"><a class="header-anchor" href="#启动时加载示例"></a>启动时加载示例</h4><ul><li>AgentExampleDemo</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentExampleDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> instrumentation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"premain start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AgentTarget</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentTarget</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始打印...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>build.gradle</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  //重新定义MANIFEST.MF  jar <span class="token punctuation">&#123;</span>    manifest <span class="token punctuation">&#123;</span>        attributes <span class="token string">'Premain-Class'</span><span class="token builtin class-name">:</span> <span class="token string">'com.agmtopy.source.agent.AgentExampleDemo'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>javaagent启动参数</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-javaagent:build/libs/jvmsource-1.0-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/11/kH6wQJD5my7bxuX.png" alt="Idea设置"></p><ul><li>运行结果</li></ul><p><a href="https://imgtu.com/i/R7rfyV"><img src="https://z3.ax1x.com/2021/07/07/R7rfyV.png" alt="结果"></a></p><blockquote><p>这是第一种使用agent的方式,在目标代码运行前使用,java agent代码与目标方法进行组合的方式进行执行</p></blockquote><h3 id="运行时加载示例"><a class="header-anchor" href="#运行时加载示例"></a>运行时加载示例</h3><p>目标方法远行时加载要使用到javassist这个工具帮助我们修改class,注意javassist有两个项目,要使用<b>org.javassist</b>😂才可以</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">implementation &quot;org.javassist:javassist:3.28.0-GA&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>修改AgentTarget</li></ol><p>保持jvm运行,以便通过Attach的方式进行替换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentTarget</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始打印...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在AgentExampleDemo中增加agentmain方法</li></ol><ul><li>AgentExampleDemo</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * attach:方式运行 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"agentmain start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 显示执行时间</span>    inst<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShowExecTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重写载入新的字节码</span>        inst<span class="token punctuation">.</span><span class="token function">retransformClasses</span><span class="token punctuation">(</span><span class="token class-name">AgentTarget</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnmodifiableClassException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>增加ShowExecTime来修改字节码</li></ol><ul><li>ShowExecTime</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 自定义ClassFileTransformer*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShowExecTime</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> classBeingRedefined<span class="token punctuation">,</span> <span class="token class-name">ProtectionDomain</span> protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalClassFormatException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//只针对目标包下进行耗时统计</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>className<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"com/agmtopy/source/agent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在加载类："</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ClassPool</span> classPool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            classPool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoaderClassPath</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CtClass</span> cl <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>classfileBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 所有方法，统计耗时</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CtMethod</span> method <span class="token operator">:</span> cl<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始修改:"</span> <span class="token operator">+</span> method <span class="token operator">+</span><span class="token string">" 方法"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//需要通过`addLocalVariable`来声明局部变量</span>                method<span class="token punctuation">.</span><span class="token function">addLocalVariable</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>longType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//插入 开始语句</span>                method<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"start = java.lang.System.currentTimeMillis();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getLongName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//创建并插入 打印语句 System.out.println("方法：test， 执行时间：" + (System.currentTimeMillis() - start));</span>                <span class="token class-name">String</span> statement <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"java.lang.System.out.println(\"方法：%s， 执行时间：\" + (java.lang.System.currentTimeMillis() - start));"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>                method<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformed <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> transformed<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>transform()方法是通过javassist来修改字节码,在方法执行前后插入局部变量，然后打印方法执行耗时</p><ol start="4"><li>运行jar进行替换字节码替换</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 修改指定运行中的代码 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 传入目标 JVM pid</span>    <span class="token class-name">VirtualMachine</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token string">"6068"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vm<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span><span class="token string">"D:\\project\\jvmsource\\build\\libs\\jvmsource-1.0-SNAPSHOT.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>修改MANIFEST.MF<br>需要将<b>Agent-Class</b>写入MANIFEST.MF文件</li></ol><ul><li>gradle</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">jar &#123;    manifest &#123;        attributes &#39;Can-Redefine-Classes&#39;: true        attributes &#39;Can-Retransform-Classes&#39;: true        attributes &#39;Agent-Class&#39;: &#39;com.agmtopy.source.agent.AgentExampleDemo&#39;        attributes &#39;Premain-Class&#39;: &#39;com.agmtopy.source.agent.AgentExampleDemo&#39;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>执行字节码替换</li></ol><p>6.1 先将项目构建成为jar包<br>6.2 运行AgentTarget<br>不需要使用-javaagent的方式进行启动<br><img src="https://i.loli.net/2021/07/11/d3kZXA769yheB8L.png" alt="AgentTarget结果"><br>6.3 执行字节码替换</p><ul><li>运行结果<br><img src="https://i.loli.net/2021/07/11/bksIl8USHRMc72d.png" alt="运行结果"></li></ul><h2 id="源码分析"><a class="header-anchor" href="#源码分析"></a>源码分析</h2><p>java agent的原理根据加载时机还是可以分为两类入口，一类是启动时将agent class挂载到目标JVM上，另外一类入口是运行时动态加载，采用的是JVM attach技术</p><h3 id="启动时加载原理分析"><a class="header-anchor" href="#启动时加载原理分析"></a>启动时加载原理分析</h3><h4 id="分析目标方法调用链"><a class="header-anchor" href="#分析目标方法调用链"></a>分析目标方法调用链</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentExampleDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> instrumentation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"premain start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//打印调用栈</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" ClassName: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" Method Name : "</span> <span class="token operator">+</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/07/f4o2qQryOKwpWPL.png" alt="调用栈"></p><p>通过调用栈可以分析出是<B>InstrumentationImpl</B>调用<B>premain()</B>方法的,下面开始分析InstrumentationImpl</p><h4 id="InstrumentationImpl"><a class="header-anchor" href="#InstrumentationImpl"></a>InstrumentationImpl</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstrumentationImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Instrumentation</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><B>InstrumentationImpl</B>实现<B>Instrumentation</B>,<B>Instrumentation</B>接口是JVM定义对字节码操作的接口，我们按照调用链的顺序倒叙进行分析（执行、触发）</p><ol><li>permain执行过程分析</li></ol><p>由于<B>InstrumentationImpl.loadClassAndCallPremain()</B>方法已经最顶层的java代码入口，通过方法名称查找可以在<B>JPLISAgent.h</B>文件中查询到该方法名称被定义成为一个常量</p><ul><li>JPLISAgent.h</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define JPLIS_INSTRUMENTIMPL_PREMAININVOKER_METHODNAME      &quot;loadClassAndCallPremain&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该常量被<B>JPLISAgent.c</B>的<B>createInstrumentationImpl</B>方法所使用</p><ul><li>JPLISAgent.c</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">jboolean createInstrumentationImpl(JNIEnv *jnienv,JPLISAgent *agent)&#123;    &#x2F;&#x2F;省略....    &#x2F;* Now look up the method ID for the pre-main caller (we will need this more than once) *&#x2F;    if (!errorOutstanding)    &#123;        &#x2F;&#x2F;①获取到调用permain方法MethodId        premainCallerMethodID &#x3D; (*jnienv)-&gt;GetMethodID(jnienv,                                                       implClass,                                                       JPLIS_INSTRUMENTIMPL_PREMAININVOKER_METHODNAME,                                                       JPLIS_INSTRUMENTIMPL_PREMAININVOKER_METHODSIGNATURE);    &#125;    if (!errorOutstanding)    &#123;        agent-&gt;mInstrumentationImpl &#x3D; resultImpl;        &#x2F;&#x2F;②指针赋值        agent-&gt;mPremainCaller &#x3D; premainCallerMethodID;        agent-&gt;mAgentmainCaller &#x3D; agentmainCallerMethodID;        agent-&gt;mTransform &#x3D; transformMethodID;    &#125;        &#x2F;&#x2F;省略....    return !errorOutstanding;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段方法主要是做两件事，第一是获取到调用permain方法MethodId；第二件事是将这个MethodId传递出去,分析mPremainCaller的使用可以得到该值在’processJavaStart’中使用</p><p><img src="https://i.loli.net/2021/07/07/WbT3LyNCQilShcv.png" alt="mPremainCaller"></p><ul><li>processJavaStart</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">result &#x3D; startJavaAgent(agent, jnienv,                        agent-&gt;mAgentClassName,                         agent-&gt;mOptionsString,                        agent-&gt;mPremainCaller);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>processJavaStart通过前面获取到的MethodId启动javaAgent，下面我们分析<B>statrJavaAgent</B></p><ul><li>statrJavaAgent</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//...</span>success <span class="token operator">=</span> <span class="token function">invokeJavaAgentMainMethod</span><span class="token punctuation">(</span>jnienv<span class="token punctuation">,</span>                                    agent<span class="token operator">-></span>mInstrumentationImpl<span class="token punctuation">,</span>                                    agentMainMethod<span class="token punctuation">,</span>                                    classNameObject<span class="token punctuation">,</span>                                    optionsStringObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</B>invokeJavaAgentMainMethod</B>传入对象、方法ID、实参，执行定义的premain方法</p><p>通过上面的分析知道了permai执行的过程，继续看一下permain方法是如何触发的</p><ol start="2"><li>permain触发过程分析</li></ol><p><B>processJavaStart</B>方法是执行permain的入口，它在<B>JPLISAgent.h</B>中进行定义的,在源代码中全局搜索：<B> JPLISAgent *</B>可以找到JPLISAgent是在&lt;InvocationAdapter.c&gt;中重新进行过赋值</p><ul><li>InvocationAdapter.c</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">void JNICALL eventHandlerVMInit(jvmtiEnv *jvmtienv,                    JNIEnv *jnienv,                    jthread thread)  &#123;      JPLISAgent *agent &#x3D; environment-&gt;mAgent;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><B>eventHandlerVMInit</B>方法在<B>JPLISAgent.c</B>的<B>initializeJPLISAgent</B>方法中被设置为回调方法</p><ul><li>initializeJPLISAgent</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;关键执行逻辑if (jvmtierror &#x3D;&#x3D; JVMTI_ERROR_NONE)&#123;    jvmtiEventCallbacks callbacks;    memset(&amp;callbacks, 0, sizeof(callbacks));    &#x2F;&#x2F;设置JVM回调    callbacks.VMInit &#x3D; &amp;eventHandlerVMInit;    jvmtierror &#x3D; (*jvmtienv)-&gt;SetEventCallbacks(jvmtienv,                                                &amp;callbacks,                                                sizeof(callbacks));    check_phase_ret_blob(jvmtierror, JPLIS_INIT_ERROR_FAILURE);    jplis_assert(jvmtierror &#x3D;&#x3D; JVMTI_ERROR_NONE);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这里可以看到在初始化JPLISAgent时候就设置了JVM初始化完成后会回调InvocationAdapter来执行<B>permain</B>方法</p><ol start="3"><li>JPLISAgent的初始化</li></ol><p>回溯<B>initializeJPLISAgent</B>方法可以找到分别在<B>InvocationAdapter.c</B>的<B>DEF_Agent_OnLoad</B>、<B>DEF_Agent_OnAttach</B>上被调用。这两种方式也正是前面讲到的agent的两种增强方式的入口。</p><p>在JVM启动时最开始加载的是libinstrument动态链接库，然后在动态链接库里面找到JVMTI的入口方法：Agent_OnLoad和Agent_OnAttach。InvocationAdapter.c的定义</p><ul><li>InvocationAdapter.c</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;**  This will be called once for every -javaagent on the command line.*  Each call to Agent_OnLoad will create its own agent and agent data.**  The argument tail string provided to Agent_OnLoad will be of form*  &lt;jarfile&gt;[&#x3D;&lt;options&gt;]. The tail string is split into the jarfile and*  options components. The jarfile manifest is parsed and the value of the*  Premain-Class attribute will become the agent&#39;s premain class. The jar*  file is then added to the system class path, and if the Boot-Class-Path*  attribute is present then all relative URLs in the value are processed*  to create boot class path segments to append to the boot class path.*&#x2F;JNIEXPORT jint JNICALLDEF_Agent_OnLoad(JavaVM *vm, char *tail, void *reserved)&#x2F;**  This will be called once each time a tool attaches to the VM and loads*  the JPLIS library.*&#x2F;JNIEXPORT jint JNICALLDEF_Agent_OnAttach(JavaVM *vm, char *args, void *reserved)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>整体逻辑<br>整体的执行逻辑就是：</li></ol><ul><li>JPLISAgent声明JVM启动时候初始化JPLISAgent</li><li>JPLISAgent初始化时设置InvocationAdapter的回调方法</li><li>JVM初始化完成后执行回调方法</li><li>InvocationAdapter的回调方法执行permain方法</li></ul><h3 id="运行时加载原理分析"><a class="header-anchor" href="#运行时加载原理分析"></a>运行时加载原理分析</h3><ol><li>分析字节码<br>使用<B>HSDB</B>查看AgentTarget未进行字节码替换前的数据</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jhsdb hsdb --pid <span class="token number">21656</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>常量池</li></ul><p><img src="https://i.loli.net/2021/07/11/phklzJKYTs7IG16.jpg" alt="替换前的常量池"></p><p><img src="https://i.loli.net/2021/07/11/tkaOxIQ62fbs84K.png" alt="替换后的常量池"><br>明显可以看到常量池中增加了22条指令，这22条指令就是新加入的字节码所要使用到的常量</p><ul><li>方法区</li></ul><p><img src="https://i.loli.net/2021/07/11/3DvWBpyuHQ7I2cM.jpg" alt="替换前的方法区"></p><p><img src="https://i.loli.net/2021/07/11/e9TObiVwDPH7Whv.jpg" alt="替换后的方法区"></p><ol start="2"><li>重新加载字节码原理<br>@TODO</li></ol><blockquote><p>通过字节码对比可以明显的看出在使用<B>Instrumentation.addTransformer();</B>后确实将字节码进行了修改,其实修改字节码还是有两个时机:</p></blockquote><ul><li>一个是在启动编译时,会在jvm启动完毕后在执行permain方法来修改字节码</li><li>一个就是在运行期间动态的修改字节码</li></ul><h3 id="整体执行逻辑"><a class="header-anchor" href="#整体执行逻辑"></a>整体执行逻辑</h3><p><img src="https://i.loli.net/2021/07/11/sCey6D7USV9LRXo.jpg" alt="整体执行逻辑"></p><h2 id="开发工具"><a class="header-anchor" href="#开发工具"></a>开发工具</h2><ul><li><p>ASM</p></li><li><p>Javassist</p></li><li><p>Byte Buddy</p></li></ul><h3 id="功能对比"><a class="header-anchor" href="#功能对比"></a>功能对比</h3><table><thead><tr><th>-</th><th>ASM</th><th>Javassist</th><th>Byte Buddy</th></tr></thead><tbody><tr><td>学习成本</td><td>高</td><td>低</td><td>低</td></tr><tr><td>使用方法</td><td>使用字节码方式进行插入,需要了解class类结构和JVM指令集</td><td>提供高级抽象接口和低级字节码接口</td><td>同Javassist,并且提供声明式接口</td></tr><tr><td>性能</td><td>极快</td><td>一般</td><td>快</td></tr></tbody></table><p>详细的对比可参考byteBuddy官方资料:<a href="https://bytebuddy.net/#/tutorial">https://bytebuddy.net/#/tutorial</a></p><h3 id="Byte-Buddy"><a class="header-anchor" href="#Byte-Buddy"></a>Byte Buddy</h3><h4 id="示例"><a class="header-anchor" href="#示例"></a>示例</h4><ul><li>gradle</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;&#x2F;目前最新版本为1.11.6implementation &quot;net.bytebuddy:byte-buddy:LATEST&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>AgentExampleForByteBuddy</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentExampleForByteBuddy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Advice.OnMethodEnter</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Advice.Origin</span> <span class="token class-name">Executable</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte buddy before : "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Advice.OnMethodExit</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Advice.Origin</span> <span class="token class-name">Executable</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte buddy after : "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> arguments<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">AgentBuilder<span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">AgentBuilder<span class="token punctuation">.</span>RedefinitionStrategy</span><span class="token punctuation">.</span>RETRANSFORMATION<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">AgentBuilder<span class="token punctuation">.</span>InstallationListener<span class="token punctuation">.</span>StreamWriting</span><span class="token punctuation">.</span><span class="token function">toSystemError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">nameContains</span><span class="token punctuation">(</span><span class="token string">"AgentTarget"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> td<span class="token punctuation">,</span> cl<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">-></span> builder<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Advice</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">AgentExampleForByteBuddy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">MethodDescription</span><span class="token operator">::</span><span class="token function">isConstructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">installOn</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AgentTarget</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentTarget</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始打印...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AgentTarget</span> agentTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AgentTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agentTarget<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span> <span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里演示的是一个重写加载类的示例:</p><ol><li>通过</B>@Advice.OnMethodEnter</B>和<B>@Advice.OnMethodExit</B>定义执行方法前后插入的字节码</li><li>通过<B>AgentBuilder</B>指定要增强的类和类型</li><li><B>AgentBuilder.with</B>可以添加监听，方便输出调试</li></ol><h3 id="Byte-Byddy常见问题"><a class="header-anchor" href="#Byte-Byddy常见问题"></a>Byte Byddy常见问题</h3><ul><li>依赖冲突</li></ul><p>处理方案：</p><ol><li><p>构建工具排除</p></li><li><p>使用自定义classLoader加载agent所使用的类<br>通过指定agent类的加载器,让</B>BootstrapClassLoader</B>去加载</p></li></ol><ul><li>Byte-Buddy提供的API</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassInjector<span class="token punctuation">.</span>UsingInstrumentation</span>         <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">FileJar</span><span class="token punctuation">,</span> <span class="token class-name">ClassInjector<span class="token punctuation">.</span>UsingInstrumentation<span class="token punctuation">.</span>Target</span><span class="token punctuation">.</span>BOOTSTRAP<span class="token punctuation">,</span> instrumentation<span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">injectRaw</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>instrumentation<span class="token punctuation">,</span> <span class="token class-name">ClassFileLocator                 <span class="token punctuation">.</span>ForClassLoader</span><span class="token punctuation">.</span><span class="token function">ofSystemLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token string">"com.agmtopy.source.agent.AgentExampleForByteBuddy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>java agent中传参</li></ul><p>处理方案:</p><ol><li>ThreadLocal</li><li>增加临时的成员变量</li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://asm.ow2.io/">https://asm.ow2.io/</a><br><a href="https://www.javassist.org/">https://www.javassist.org/</a><br><a href="https://bytebuddy.net/#/">https://bytebuddy.net/#/</a><br><a href="https://blog.csdn.net/wanxiaoderen/article/details/107079741">https://blog.csdn.net/wanxiaoderen/article/details/107079741</a><br><a href="https://www.cnblogs.com/old-cha/p/13264114.html">https://www.cnblogs.com/old-cha/p/13264114.html</a><br><a href="https://www.cnblogs.com/chiangchou/p/javassist.html#_label9">https://www.cnblogs.com/chiangchou/p/javassist.html#_label9</a><br><a href="https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html">https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html</a><br><a href="https://github.com/gzzchh/de-ag">https://github.com/gzzchh/de-ag</a><br><a href="https://gitee.com/mazhimazh/bytecode-examples">https://gitee.com/mazhimazh/bytecode-examples</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;如何编写JavaAgent&lt;/h1&gt;
&lt;p&gt;这篇文章是根据MegaEase的袁伟老师的分享而来,地址是&lt;a href=&quot;https://www.youtube.com/watch?v=ujhqct2POLU&quot;&gt;How To Write a JavaAgent&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="jvm" scheme="https://agmtopy.gitee.io/categories/jvm/"/>
    
    
    <category term="jvm" scheme="https://agmtopy.gitee.io/tags/jvm/"/>
    
    <category term="agent" scheme="https://agmtopy.gitee.io/tags/agent/"/>
    
  </entry>
  
  <entry>
    <title>通过WSL2编译JDK源码</title>
    <link href="https://agmtopy.gitee.io/2021/06/19/1.%E6%9D%82%E8%AE%B0/%E9%80%9A%E8%BF%87WSL2%E7%BC%96%E8%AF%91JDK%E6%BA%90%E7%A0%81/"/>
    <id>https://agmtopy.gitee.io/2021/06/19/1.%E6%9D%82%E8%AE%B0/%E9%80%9A%E8%BF%87WSL2%E7%BC%96%E8%AF%91JDK%E6%BA%90%E7%A0%81/</id>
    <published>2021-06-19T11:39:54.000Z</published>
    <updated>2021-06-19T16:44:54.486Z</updated>
    
    <content type="html"><![CDATA[<h1>通过WSL2编译JDK源码</h1><p>WSL的全称是’Windows Subsystem for Linux’,通过在系统层面对Linux内核进行支持,WSL1只是部分支持Linux内核而WSL2支持完整的Linux内核。不但可以通过WSL运行Linux内核，甚至可以将Windows Docker指定通过WSL2来进行远行</p><h2 id="WSL1-WSL2"><a class="header-anchor" href="#WSL1-WSL2"></a>WSL1 -&gt; WSL2</h2><ul><li><p>安装Linux发行版<br>WSL1只需要开启Linux子系统并下载linux发行版即可,linux发行版默认是只能通过Windows Store进行下载，也可以通过下载安装包(msi)进行安装,手动选择安装包地址如下(<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">https://docs.microsoft.com/zh-cn/windows/wsl/install-manual</a>)</p></li><li><p>切换WSL2</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl --set-default-version <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动WSL</li></ul><ol><li>应用程序直接启动安装Linux发行版</li><li>‘wsl -l -v’ 检查WSL版本,VERSION -&gt; 2即可<br><a href="https://imgtu.com/i/RPsbr9"><img src="https://z3.ax1x.com/2021/06/19/RPsbr9.png" alt="WSL2"></a></li></ol><h2 id="编译JDK"><a class="header-anchor" href="#编译JDK"></a>编译JDK</h2><p>严谨的说法是编译OpenJDK</p><h3 id="下载JDK源代码"><a class="header-anchor" href="#下载JDK源代码"></a>下载JDK源代码</h3><p>推荐直接下载,下面是JDK11的源代码地址,直接选择zip file进行下载,也可以选择不同的版本<br><a href="https://jdk.java.net/java-se-ri/11">https://jdk.java.net/java-se-ri/11</a></p><h3 id="准备JDK编译环境"><a class="header-anchor" href="#准备JDK编译环境"></a>准备JDK编译环境</h3><h4 id="安装必要程序"><a class="header-anchor" href="#安装必要程序"></a>安装必要程序</h4><ul><li>推荐先先切换软件源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">sed</span> -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list<span class="token function">sudo</span> <span class="token function">apt</span> update -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装必要软件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y <span class="token function">curl</span> <span class="token function">ssh</span> <span class="token function">zip</span> <span class="token function">unzip</span> ant <span class="token function">git</span> build-essential ccache cpio g++ gcc gdb libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev libcups2-dev libfreetype6-dev libasound2-dev libelf-dev ccache libfontconfig1-dev autoconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装BootStrap-JDK"><a class="header-anchor" href="#安装BootStrap-JDK"></a>安装BootStrap JDK</h4><p>BootStrap JDK的作用是编译JDK源代码中的java代码,默认要比编译的JDK小一个版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-10-jdkjava -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="解压JDK源代码"><a class="header-anchor" href="#解压JDK源代码"></a>解压JDK源代码</h4><p>由于我比较喜欢使用VS code,VS code中已经集成了连接WSL的插件，因此只需要将JDK源代码直接拖拽到Linux的目录下即可。也可以通过WSL进行复制<br>得到JDK源代码后就可以进行解压</p><h4 id="编译JDK源代码"><a class="header-anchor" href="#编译JDK源代码"></a>编译JDK源代码</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 准备配置(警告不作为异常抛出)</span><span class="token function">bash</span> ./configure --disable-warnings-as-errors<span class="token function">make</span> all<span class="token comment"># 编译失败时推荐先进行clean,在重新进行编译</span><span class="token function">make</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异常处理"><a class="header-anchor" href="#异常处理"></a>异常处理</h4><ol><li>在构建低版本的JDK时可能出现OS版本不支持<br>修改./hotspot/make/linux/Makefile</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 5% 内核版本</span>SUPPORTED_OS_VERSION <span class="token operator">=</span> <span class="token number">2.4</span>% <span class="token number">2.5</span>% <span class="token number">2.6</span>% <span class="token number">2.7</span>% <span class="token number">3</span>% <span class="token number">4</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;通过WSL2编译JDK源码&lt;/h1&gt;
&lt;p&gt;WSL的全称是’Windows Subsystem for Linux’,通过在系统层面对Linux内核进行支持,WSL1只是部分支持Linux内核而WSL2支持完整的Linux内核。不但可以通过WSL运行Linux内核，甚至可</summary>
      
    
    
    
    <category term="杂记" scheme="https://agmtopy.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="WSL" scheme="https://agmtopy.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ中NameSrv的详细设计分析</title>
    <link href="https://agmtopy.gitee.io/2021/06/11/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/98.RocketMQ%E4%B8%ADNameSrv%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/"/>
    <id>https://agmtopy.gitee.io/2021/06/11/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/98.RocketMQ%E4%B8%ADNameSrv%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/</id>
    <published>2021-06-11T14:57:56.000Z</published>
    <updated>2021-09-09T15:17:40.849Z</updated>
    
    <content type="html"><![CDATA[<h1>RocketMQ中NameSrv的详细设计分析</h1><h2 id="设计目标"><a class="header-anchor" href="#设计目标"></a>设计目标</h2><p>NameSrv是RoctetMQ项目下的一个模块，作为RockerMQ中的轻型注册中心,只负责与Topic有关的功能。<br>使用NameSrv来替代ZK等注册中心主要是有两个好处:</p><ol><li>减少整体复杂性<br>一个分布式系统强依赖另外一个分布式系统，增加了整个系统的复杂性(整体代码复杂性、运维的复杂性);<br>使用内置的轻量级注册中心,就可以消除原来与ZK等第三方注册中心的各种协议适配;<br>Namesrv中只需要开发与Topic有关的业务场景;<br>系统维护时也不用在考虑第三方系统的处理机制;</li><li>扩展能力<br>RocketMQ从设计初就考虑过在嵌入式设备上进行部署的能力,因此采用Namesrv的设计能最大限度的掌握系统</li></ol><p>目前Kafka在这方面做的更好，在V2.8之后不但去掉了ZK，并且采用broker集群中通过选举的方式选出leader节点来管理Topic、broker、consumer</p><h2 id="基础功能"><a class="header-anchor" href="#基础功能"></a>基础功能</h2><ul><li><p>整体架构<br><img src="https://github.com/apache/rocketmq/raw/master/docs/cn/image/rocketmq_architecture_3.png" alt="整体架构"><br>Namesrv集群是无状态的设计,每个组件(Broker、Producer、Consumer)都会向每一个Namesrv进行请求,因此Namesrv是选择了可用性</p></li><li><p>功能解析</p></li></ul><ol><li>Topic路由管理</li><li>Remoting远程服务</li><li>定时任务</li><li>KV管理模块</li></ol><h2 id="源码分析"><a class="header-anchor" href="#源码分析"></a>源码分析</h2><h3 id="Namesrv时序图"><a class="header-anchor" href="#Namesrv时序图"></a>Namesrv时序图</h3><p><a href="https://imgtu.com/i/2jkklQ"><img src="https://z3.ax1x.com/2021/06/16/2jkklQ.png" alt="Namesrv执行流程"></a></p><h3 id="NamesrvStartup"><a class="header-anchor" href="#NamesrvStartup"></a>NamesrvStartup</h3><h4 id="main"><a class="header-anchor" href="#main"></a>main()</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 主函数入口 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">main0</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 具体执行逻辑:避免在main函数中添加过多的逻辑 */</span><span class="token keyword">fun</span> <span class="token function">main0</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> controller <span class="token operator">=</span> <span class="token function">createNamesrvController</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token function">start</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span>        <span class="token keyword">val</span> tip <span class="token operator">=</span>            <span class="token string">"The Name Server boot success. serializeType="</span> <span class="token operator">+</span> RemotingCommand<span class="token punctuation">.</span><span class="token function">getSerializeTypeConfigInThisServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        log<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 初始化NamesrvController */</span><span class="token keyword">fun</span> <span class="token function">createNamesrvController</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> NamesrvController <span class="token punctuation">&#123;</span>  <span class="token comment">//去除TLS和apache.commons的版本</span>  <span class="token keyword">return</span> <span class="token function">NamesrvController</span><span class="token punctuation">(</span><span class="token function">NamesrvConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NettyServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="start"><a class="header-anchor" href="#start"></a>start()</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/**  * 启动NamesrvController  */</span><span class="token keyword">fun</span> <span class="token function">start</span><span class="token punctuation">(</span>controller<span class="token operator">:</span> NamesrvController<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>controller <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"NamesrvController is null"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//NamesrvController执行初始化,如果失败时退出进程</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>controller<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        controller<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    controller<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NamesrvStartup启动时候主要做了以下几个步骤：</p><ol><li>创建NamesrvController</li><li>处理TLS和加载Namesrv配置文件</li><li>启动NamesrvController</li><li>关闭NamesrvController</li></ol><ul><li>NamesrvController<br>NamesrvController主要逻辑很为两个部分初始化和执行</li></ul><ol><li>初始化</li></ol><ul><li>初始化那些东西</li></ul><ol><li><p>配置</p></li><li><p>服务</p></li><li><p>线程池</p></li><li><p>自省</p></li><li><p>加载配置文件</p></li></ol><h2 id="扩展思考"><a class="header-anchor" href="#扩展思考"></a>扩展思考</h2><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="https://rocketmq.apache.org/">rocketmq</a><br><a href="https://github.com/apache/rocketmq">rocketmq-github</a><br><a href="https://www.confluent.io/blog/kafka-without-zookeeper-a-sneak-peek/">Apache Kafka Made Simple: A First Glimpse of a Kafka Without ZooKeeper</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;RocketMQ中NameSrv的详细设计分析&lt;/h1&gt;
&lt;h2 id=&quot;设计目标&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#设计目标&quot;&gt;&lt;/a&gt;设计目标&lt;/h2&gt;
&lt;p&gt;NameSrv是RoctetMQ项目下的一个模块，作为RockerMQ中的轻</summary>
      
    
    
    
    <category term="消息队列" scheme="https://agmtopy.gitee.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RocketMQ" scheme="https://agmtopy.gitee.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>关于消息队列的一些历史</title>
    <link href="https://agmtopy.gitee.io/2021/05/08/1.%E6%9D%82%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2/"/>
    <id>https://agmtopy.gitee.io/2021/05/08/1.%E6%9D%82%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2/</id>
    <published>2021-05-08T14:03:28.000Z</published>
    <updated>2021-05-09T08:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1>关于消息队列的一些历史</h1><p>这是一篇关于消息队列的历史文章，有关消息队列的前世今生的一些信息。</p><h2 id="起源"><a class="header-anchor" href="#起源"></a>起源</h2><p>软件领域的消息队列最早是由Vivek Ranadive参考硬件中的系统总线提出来的,这老哥是一个印度裔,现在还是国王队的老板。<br>硬件领域中的系统总线主要分为数据总线、地址总线、控制总线这几个部分，用来连接不同的设备传输数据使用。<br><a href="https://imgtu.com/i/gJ4Q61"><img src="https://z3.ax1x.com/2021/05/09/gJ4Q61.png" alt="系统总线"></a><br>硬件上的系统总线着重在于通过线连接不同设备之间的交互，而消息队列是软件领域的连接不同系统之间交互的方式有应用层协议，现代的消息队列主要着重点是在于队列上。</p><h2 id="上古时期"><a class="header-anchor" href="#上古时期"></a>上古时期</h2><ul><li><p>1985<br>Vivek Ranadive根据系统总线设计出来的第一个消息系统叫The Information Bus(TIB)，TIB但是主要是在电信和金融领域进行使用。</p></li><li><p>1993<br>IBM MQ是由蓝色巨人IBM与1993年推出的消息队列产品，目前还保持更新现在迭代到了V9版本</p></li><li><p>1997<br>MS MQ是由微软推出的消息队列产品,不由感慨一句微软是真吊，为了.net硬是整了一个全家桶。</p></li></ul><p>这一时期由于各家的MQ产品都是为了旗下其他产品进行服务，为了形成壁垒，各家的MQ产品并未形成一个统一的规范，导致不同公司下的产品并不能使用其他公司的MQ。</p><h2 id="中古时期"><a class="header-anchor" href="#中古时期"></a>中古时期</h2><p>由于早期的MQ产品各自为政的场景下，这一时期主要统一了消息队列的协议，这些协议一直影响到了现在，主要诞生了以下几种协议以及接入规范：</p><ul><li><p>JMS<br>JMS是一套接入MQ中间件产品的接口规范，java为了黏合各家的消息队列试图通过类似于JDBC的方案在java端通过统一的协议，在根据不同产品的驱动去连接MQ。<br>各个厂商根据这套接口规范自行选择客户端进行实现，实现了这个接口规范的客户端可以在java应用程序内自由切换，类似于适配器模式</p></li><li><p>AMQP<br>AMQP是实现消息队列的一种协议，在协议层规定了消息队列应该有的逻辑规范。AMQP与具体的MQ(例如RabbitMQ、ActiveMQ)的关系类似与jvm规范和JVM实现(HotSpot)一样</p></li><li><p>MQTT<br>为嵌入式设备设计的一套消息队列协议</p></li><li><p>STOMP<br>Stomp协议，英文全名Streaming Text Orientated Message Protocol，中文名称为 ‘流文本定向消息协议’。是一种以纯文本为载体的协议（以文本为载体的意思是它的消息格式规范中没有类似XMPP协议那样的xml格式要求，你可以将它看作‘半结构化数据’）<br>双向消息通信协议还有很多，除了AMQP以外其他的大多都是即时消息协议。</p></li><li><p>ActiveMQ<br>在这一时期还有根据AMQP还诞生了ActiveMQ这一开源产品，ActiveMQ是第一个广泛使用到的开源MQ产品</p></li><li><p>RabbitMQ<br>RabbitMQ是2006年诞生的，现在和spring框架同属于vmware。由Erlang开发的。</p></li></ul><h2 id="现代时期"><a class="header-anchor" href="#现代时期"></a>现代时期</h2><p>由于ActiveMQ和RabbitMQ发展了多年，背负着沉重的历史包袱支持这非常全的MQ功能，在现代的MQ使用场景中这些消息队列不符合当下数据爆炸，小型机组成分布式系统的场景了。这时候出现了针对某个细分领域的消息队列框架Kafka、RocketMQ、Pulsar</p><ul><li><p>Kafka<br>Kafka是Linkedin为解决ActiveMQ性能问题而开发的分布式消息队列，目前已经成为大数据领域实际的消息传递组件</p></li><li><p>RocketMQ<br>RocketMQ是阿里开源的消息队列中间件，在设计上参考了kafka,通过java语言进行开发</p></li><li><p>Pulsar<br>Pulsar是雅虎开源的，天然支持多组成并且是计算和存储分离式的实现</p></li></ul><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>消息队列的诞生是从金融场景出发，发展到现在最开始的那几种消息队列在功能上已经变得非常臃肿。现代的消息队列根据某一方面的着重点开始进行发展。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><p><a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;关于消息队列的一些历史&lt;/h1&gt;
&lt;p&gt;这是一篇关于消息队列的历史文章，有关消息队列的前世今生的一些信息。&lt;/p&gt;
&lt;h2 id=&quot;起源&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;
&lt;p&gt;软件领域的消息队列最早是由Vi</summary>
      
    
    
    
    <category term="杂记" scheme="https://agmtopy.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="消息队列" scheme="https://agmtopy.gitee.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-可复用面向对象软件设计的基础-行为模式</title>
    <link href="https://agmtopy.gitee.io/2021/04/29/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/"/>
    <id>https://agmtopy.gitee.io/2021/04/29/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-29T15:12:03.000Z</published>
    <updated>2021-05-08T13:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1>设计模式-可复用面向对象软件设计的基础-行为模式</h1><p>行为模式是通过将多个类通过继承\组合的形式形成对方法的处理,主要有以下几种</p><ol><li>责任链模式</li><li>命令模式</li><li>解释器模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>模板模式</li><li>访问者模式</li></ol><h2 id="责任链模式"><a class="header-anchor" href="#责任链模式"></a>责任链模式</h2><h3 id="意图"><a class="header-anchor" href="#意图"></a>意图</h3><blockquote><p>责任链模式是使得多个对象都有机会处理请求,从而避免请求的发送者和接收者之间的耦合关系,这些对象的处理过程逻辑上形成链状结构,请求沿着这条链依次被不同的对象进行处理。标准的定义是直到有一个对象处理请求为止，我自己理解应该是依次进行处理，而不是有一个处理即止，因为如果只有一个处理，那么责任链模式与策略模式类似。责任链模式是通过将请求需要依次处理的场景从显的客户端一个一个调用的过程，升级成了将请求传入和由责任链客户端去串联整个调用过程，并且这样更容易扩展步骤。</p></blockquote><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><h3 id="结构"><a class="header-anchor" href="#结构"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/2021-chain-of-responsibility.svg" alt="责任链模式"></p><h3 id="实例"><a class="header-anchor" href="#实例"></a>实例</h3><ul><li>AbstractLogger.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractLogger</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> INFO <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DEBUG <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ERROR <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>    <span class="token comment">//责任链中的下一个元素</span>   <span class="token keyword">protected</span> <span class="token class-name">AbstractLogger</span> nextLogger<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span> nextLogger<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nextLogger <span class="token operator">=</span> nextLogger<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">&lt;=</span> level<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token function">write</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nextLogger <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         nextLogger<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ChainPatternDemo.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainPatternDemo</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AbstractLogger</span> <span class="token function">getChainOfLoggers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">AbstractLogger</span> errorLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AbstractLogger</span> fileLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AbstractLogger</span> consoleLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>       errorLogger<span class="token punctuation">.</span><span class="token function">setNextLogger</span><span class="token punctuation">(</span>fileLogger<span class="token punctuation">)</span><span class="token punctuation">;</span>      fileLogger<span class="token punctuation">.</span><span class="token function">setNextLogger</span><span class="token punctuation">(</span>consoleLogger<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> errorLogger<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">AbstractLogger</span> loggerChain <span class="token operator">=</span> <span class="token function">getChainOfLoggers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       loggerChain<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"This is an information."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       loggerChain<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span>          <span class="token string">"This is a debug level information."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       loggerChain<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>          <span class="token string">"This is an error information."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ErrorLogger、FileLogger、ConsoleLogger都是AbstractLogger.java的子类，在客户端中，通过提供setNextHandler的方法，客户端可以根据业务场景自由组合链的顺序</p><h2 id="命令模式"><a class="header-anchor" href="#命令模式"></a>命令模式</h2><h3 id="意图-v2"><a class="header-anchor" href="#意图-v2"></a>意图</h3><p>将请求封装成为一个对象，从而使得你可以用不同的请求对客户进行参数化</p><h3 id="动机"><a class="header-anchor" href="#动机"></a>动机</h3><p>命令模式主要是将请求和对请求执行的动作责任分离,让两者都可以独立进行演化。适合请求内容是类似于信号量的场景，接受者可以根据这个请求内容进行不同的处理</p><h3 id="结构-v2"><a class="header-anchor" href="#结构-v2"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/commanduml.jpg" alt="命令模式"></p><h3 id="实例-v2"><a class="header-anchor" href="#实例-v2"></a>实例</h3><ul><li>Command</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 执行方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Command.java 定义的抽象命令类，所有具体命令的接口</p><ul><li>PlayCommand.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//具体的执行类</span>    <span class="token keyword">private</span> <span class="token class-name">AudioPlayer</span> myAudio<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">PlayCommand</span><span class="token punctuation">(</span><span class="token class-name">AudioPlayer</span> audioPlayer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        myAudio <span class="token operator">=</span> audioPlayer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 执行方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        myAudio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PlayCommand是具体的命令执行类，内部具有一个execute方法,该方法会执行该命令定义的动作</p><ul><li>Keypad.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Keypad</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> playCommand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPlayCommand</span><span class="token punctuation">(</span><span class="token class-name">Command</span> playCommand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playCommand <span class="token operator">=</span> playCommand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">//执行播放方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        playCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keyPad作为请求类，再次对命令进行一次封装，便于客户端进行调用，这里可以不用再次封装，自己通过客户端进行调用</p><ul><li>client.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Julia</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//创建接收者对象</span>        <span class="token class-name">AudioPlayer</span> audioPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudioPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建命令对象</span>        <span class="token class-name">Command</span> playCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayCommand</span><span class="token punctuation">(</span>audioPlayer<span class="token punctuation">)</span>         <span class="token comment">//创建请求者对象</span>        <span class="token class-name">Keypad</span> keypad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keypad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keypad<span class="token punctuation">.</span><span class="token function">setPlayCommand</span><span class="token punctuation">(</span>playCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//执行具体的类</span>        keypad<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端通过调用请求类==Keypad==的指定方法，keyPad会调用具体的命令封装类进行执行。其实命令模式只是将请求和对应的动作进行分离，便于复杂请求场景的扩展</p><h2 id="解释器模式"><a class="header-anchor" href="#解释器模式"></a>解释器模式</h2><h3 id="意图-v3"><a class="header-anchor" href="#意图-v3"></a>意图</h3><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p><h3 id="动机-v2"><a class="header-anchor" href="#动机-v2"></a>动机</h3><p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><h3 id="结构-v3"><a class="header-anchor" href="#结构-v3"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg" alt="解释器模式"></p><h2 id="迭代器模式"><a class="header-anchor" href="#迭代器模式"></a>迭代器模式</h2><h3 id="意图-v4"><a class="header-anchor" href="#意图-v4"></a>意图</h3><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露聚合对象内部表示的模式</p><h3 id="别名"><a class="header-anchor" href="#别名"></a>别名</h3><p>游标(Cursor)</p><h3 id="动机-v3"><a class="header-anchor" href="#动机-v3"></a>动机</h3><p>迭代器模式是为了将内部元素和访问/遍历动作分离开，通过增加一个迭代器，通过迭代器来访问内部元素。</p><h3 id="结构-v4"><a class="header-anchor" href="#结构-v4"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/iterator_pattern_uml_diagram.jpg" alt="迭代器模式"></p><h2 id="中介者模式"><a class="header-anchor" href="#中介者模式"></a>中介者模式</h2><h3 id="意图-v5"><a class="header-anchor" href="#意图-v5"></a>意图</h3><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立的改变它们之间的交互</p><h3 id="动机-v4"><a class="header-anchor" href="#动机-v4"></a>动机</h3><p>由于面向对象鼓励按照行为进行类的划分，因此系统中会存在大量的类。如果不同的类之间都要相互引用来完成一个行为的话不符合面向对象的特性，因此需要有一个中介来将服务聚合起来，相当于将细小的行为进行一次聚合形成较大的行为，这样不用关注细小的行为对象。</p><h3 id="结构-v5"><a class="header-anchor" href="#结构-v5"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/mediator_pattern_uml_diagram.jpg" alt="中介者模式"></p><p>中介者模式在功能上类似于门面模式，但是门面模式着重于对子系统类的封装，中介者模式着重是对行为的封装和调和各个子行为从而形成一个大的行为，因此门面模式是结构型而中介者模式是行为型。</p><h2 id="备忘录模式"><a class="header-anchor" href="#备忘录模式"></a>备忘录模式</h2><h3 id="意图-v6"><a class="header-anchor" href="#意图-v6"></a>意图</h3><p>在不破坏对象封装性的前提下，捕获一个对象的内部状态，并将该状态保存在对象之外。在需要时，可以根据这个数据进行恢复。类似于游戏中的存档点设置。</p><h3 id="别名-v2"><a class="header-anchor" href="#别名-v2"></a>别名</h3><p>token</p><h3 id="动机-v5"><a class="header-anchor" href="#动机-v5"></a>动机</h3><p>备忘录模式针对于那些需要进行暂存的数据或对象，在不破坏封装性的前提下。</p><h3 id="结构-v6"><a class="header-anchor" href="#结构-v6"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/memento_pattern_uml_diagram.jpg" alt="备忘录模式"></p><p>CareTaker.java 负责保存每个阶段的对象状态</p><h2 id="观察者模式"><a class="header-anchor" href="#观察者模式"></a>观察者模式</h2><h3 id="意图-v7"><a class="header-anchor" href="#意图-v7"></a>意图</h3><p>定义对象之间的一种一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都会得到通知</p><h3 id="别名-v3"><a class="header-anchor" href="#别名-v3"></a>别名</h3><p>依赖(Dependents),发布-订阅(Publish-Subscribe)</p><h3 id="动机-v6"><a class="header-anchor" href="#动机-v6"></a>动机</h3><p>在一个系统中一个对象的改变会导致引起相关对象的改变，如果要保持这样的一致性会导致对象间强依赖。观察者模式就是通过发布-订阅模式将通知的职责从动作类中强制依赖转换为通知的模式</p><h3 id="结构-v7"><a class="header-anchor" href="#结构-v7"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg" alt="观察者模式"></p><p>Subject作为被观察者中维护一个所有观察者的引用，Observer作为被观察者维护一个Subject的引用，将自己组成到被观察者中<br>可参考<br><a href="../../../../../2020/05/06/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/#more">观察者模式</a></p><h3 id="实例-v3"><a class="header-anchor" href="#实例-v3"></a>实例</h3><p>spring中的ApplicationListener和ApplicationEvent、ApplicationEventPublisherAware分别作为被观察者、观察者和客户端</p><h2 id="状态模式"><a class="header-anchor" href="#状态模式"></a>状态模式</h2><h3 id="意图-v8"><a class="header-anchor" href="#意图-v8"></a>意图</h3><p>允许一个对象在其内部状态发生改变时改变它的行为。从表象上来看就是对象可以根据内部状态执行不同的业务逻辑。</p><h3 id="动机-v7"><a class="header-anchor" href="#动机-v7"></a>动机</h3><p>一个对象的行为取决于内部状态进行驱动时，状态模式可以将状态和行为分离，减少分支的条件语句。</p><h3 id="结构-v8"><a class="header-anchor" href="#结构-v8"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/state_pattern_uml_diagram.png" alt="状态模式"></p><p>可以看到doAction()方法中才会执行具体的行为，不同的状态具有不同的行为，通过context维护状态，当状态发生改变时，对应的行为也随之发生改变</p><h2 id="策略模式"><a class="header-anchor" href="#策略模式"></a>策略模式</h2><h3 id="意图-v9"><a class="header-anchor" href="#意图-v9"></a>意图</h3><p>策略模式是将不同的算法单独定义起来，通过不同的场景选择不同的算法。将客户端中的条件分支去掉，并且支持扩展。</p><h3 id="结构-v9"><a class="header-anchor" href="#结构-v9"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg" alt="策略模式"></p><p>Context中的strategy类是具体执行的算法，这里有两种设计方案，第一种就是UML图中的写法，将Contetxx作为每次行动的容器，每次执行前都先进行赋值。第二种是Context持有一个Strategy的List根据添加选择算法、</p><p>策略模式在实际工作中大量使用到，因为消除了条件判断减少了分支。通过增加类的方式来减少分支，结构上便于扩展了</p><h2 id="模板模式"><a class="header-anchor" href="#模板模式"></a>模板模式</h2><h3 id="意图-v10"><a class="header-anchor" href="#意图-v10"></a>意图</h3><p>定义一个方法的骨架，通过继承的方式让子类可以改变特点行为，使得不用重新定义算法的顺序就能改变行为。</p><h3 id="动机-v8"><a class="header-anchor" href="#动机-v8"></a>动机</h3><p>模板方法的出现主要是为了解决重复定义的算法执行顺序并且具体执行有差异的场景</p><h3 id="结构-v10"><a class="header-anchor" href="#结构-v10"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="模板模式"></p><p>模板模式与策略模式的区别在于模板模式是通过继承的方式来改变行为，策略模式是通过改变委托对象的方式来改变行为；策略模式针对的场景是相同类在处理不同的业务场景时候算法的选择问题，模板模式针对的是相同的类在处理相同的业务场景下算法细微的差异结构上。</p><h2 id="访问者模式"><a class="header-anchor" href="#访问者模式"></a>访问者模式</h2><h3 id="意图-v11"><a class="header-anchor" href="#意图-v11"></a>意图</h3><p>将数据和数据操作分离</p><h3 id="动机-v9"><a class="header-anchor" href="#动机-v9"></a>动机</h3><p>对一个对象需要进行多次操作时，为了避免这些操作将对象污染，可以通过访问者模式将数据和操作进行隔离。实现不同的访问者访问不同的数据。</p><h3 id="结构-v11"><a class="header-anchor" href="#结构-v11"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/visitor_pattern_uml_diagram.jpg" alt="访问者模式"></p><p>访问者模式的核心是在于数据对象会针对不同的访问者定义出不同的行为，由于访问者知道被访问的数据对象中的数据结构，因此访问者可以根据不同的对象定义出不同的行为</p><p>访问者的好处在于将数据对象的操作延迟到的访问者那一步中去了，通过定义不同的访问者可以执行不同的动作。</p><h2 id="设计模式思维导图"><a class="header-anchor" href="#设计模式思维导图"></a>设计模式思维导图</h2><p><a href="https://imgtu.com/i/gJVn2Q"><img src="https://z3.ax1x.com/2021/05/08/gJVn2Q.png" alt="设计模式思维导图"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;设计模式-可复用面向对象软件设计的基础-行为模式&lt;/h1&gt;
&lt;p&gt;行为模式是通过将多个类通过继承\组合的形式形成对方法的处理,主要有以下几种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;责任链模式&lt;/li&gt;
&lt;li&gt;命令模式&lt;/li&gt;
&lt;li&gt;解释器模式&lt;/li&gt;
&lt;li&gt;迭代器模式&lt;/l</summary>
      
    
    
    
    <category term="设计模式" scheme="https://agmtopy.gitee.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://agmtopy.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-可复用面向对象软件设计的基础-结构型模式</title>
    <link href="https://agmtopy.gitee.io/2021/04/24/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://agmtopy.gitee.io/2021/04/24/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-24T15:33:53.000Z</published>
    <updated>2021-04-29T15:11:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1>设计模式-可复用面向对象软件设计的基础-结构型模式</h1><h2 id="结构型模式"><a class="header-anchor" href="#结构型模式"></a>结构型模式</h2><blockquote><p>结构型模式涉及到的是如何组织类和对象之间的引用关系,以便获得更大的组织结构和更好的可扩展性。结构性模式往往采用继承和组合两种手段来实现，关注的重点在于对象之间相互组合引用的关系上。主要有以下几种具体的模式：</p></blockquote><ol><li>适配器模式</li><li>桥接模式</li><li>组合模式</li><li>装饰模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ol><h2 id="适配器模式"><a class="header-anchor" href="#适配器模式"></a>适配器模式</h2><h3 id="意图"><a class="header-anchor" href="#意图"></a>意图</h3><blockquote><p>将一个类的接口转换成客户端所期望能使用的另外一个接口。Adapter模式使原本由于接口不兼容不能在一起使用的类能够通过一个中间适配类从而能一起工作了</p></blockquote><h3 id="别名"><a class="header-anchor" href="#别名"></a>别名</h3><p>Wrapper</p><h3 id="结构"><a class="header-anchor" href="#结构"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/20210223-adapter.png" alt="适配器模式"><br>可以看到原本AudioPlayer不能直接引用AdvanceMediaPlayer，但是通过MediaAdapter实现AudioPlayer同样的接口后，在MediaAdapter中引用AdvanceMediaPlayer实现去执行具体的方法，从而迂回实现AdvanceMediaPlayer的调用</p><h2 id="桥接模式"><a class="header-anchor" href="#桥接模式"></a>桥接模式</h2><h3 id="意图-v2"><a class="header-anchor" href="#意图-v2"></a>意图</h3><blockquote><p>将抽象部分和它的实现部分分离，从而使得两者都可以独立的变化。出现桥接模式的原因在因为继承接口-实现方法这种模式下接口定义好的方法子类必须按照定义进行实现，缺乏灵活性(PS:继承方式是一种强约束的关系，适用于强约束的场合)</p></blockquote><h3 id="别名-v2"><a class="header-anchor" href="#别名-v2"></a>别名</h3><p>Hadnle/Body</p><h3 id="结构-v2"><a class="header-anchor" href="#结构-v2"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2018/06/1528771072-8457-5780d2384acdbb60ec07fc3c71a1.png" alt="桥接模式"></p><p>Abstraction和Implementor都是抽象类，由于Abstraction内部持有Implementor抽象类，从而使得这两个抽象类都可以独立的发展，桥接模式的核心应该是将业务上不同的抽象部分单独分离开，独立演化，关注的应该是业务上抽象的功能分离和在抽象对象类的组合。通过分离和组合更好的描述一个类</p><h2 id="组合模式"><a class="header-anchor" href="#组合模式"></a>组合模式</h2><blockquote><p>将对象组合成树形结构以表示&quot;部分-整体&quot;的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。适用于希望忽略组合对象和单个对象的不同，用户将统一的使用组合结构中的所有对象。</p></blockquote><h3 id="结构-v3"><a class="header-anchor" href="#结构-v3"></a>结构</h3><p><a href="https://imgtu.com/i/cztr0P"><img src="https://z3.ax1x.com/2021/04/25/cztr0P.png" alt="cztr0P.png"></a><br>提供Component接口(抽象构件)，该接口有两个实现分别是容器构件(Composlte)、叶子构件(Leaf)。客户端通过直接使用Component接口，来忽略具体是单个对象还是组合对象提供的服务。composlte对象实现了Componet所定义的管理叶子节点的方法Add()、Remove()、GetChild()</p><p>组合模式在实现上有两种方法：1.透明组合模式、2.安全组合模式。<br>透明组合模式的特点是叶子节点和容器构件都要实现相同的接口，但是叶子节点和抽象构件节点其实都相互冗余了部分不属于自己的方法。<br>安全组合模式指的是在抽象构件中不会声明任何有关容器构件的方法，而是在容器构件中去声明并实现该方法</p><h3 id="实例"><a class="header-anchor" href="#实例"></a>实例</h3><h4 id="java-awt-Container"><a class="header-anchor" href="#java-awt-Container"></a>java.awt.Container</h4><ul><li>Container.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">></span></span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Container类内部管理一个<b>Component</b>的集合引用，这里采用的是安全的组合模式因此管理集合中的元素的方法是在Container中实现的</p><h2 id="装饰模式"><a class="header-anchor" href="#装饰模式"></a>装饰模式</h2><blockquote><p>动态的为目标对象添加一些额外的职责，装饰模式(Decorator)在功能上与继承类似都是增强目标方法，但是装饰模式在结构上是向上的，而继承在结构上是向下的。装饰模式更加的灵活，没有继承那种强依赖的关系。</p></blockquote><h3 id="别名-v3"><a class="header-anchor" href="#别名-v3"></a>别名</h3><p>包装器-Wrapper</p><h3 id="结构-v4"><a class="header-anchor" href="#结构-v4"></a>结构</h3><p><a href="https://imgtu.com/i/gpGYfe"><img src="https://z3.ax1x.com/2021/04/26/gpGYfe.jpg" alt="装饰器模式"></a></p><p>Component是顶层接口，分别别目标对象和装饰器对象实现，装饰器对象通过内部持有目标对象的一个引用，客户端在调用目标类的时候，实际上是通过调用装饰类的提供出来的方法。装饰器在持有目标类的引用后就可以在执行方法前后都进行自定义增强处理，从而实现对目标类的增强</p><p>装饰器的优点在于：</p><ol><li>比静态继承灵活且无强依赖性</li><li>避免类继承结构过高</li></ol><p>这个缺点不甚理解：</p><blockquote><p>装饰类和目标类是不一样的，装饰类对于其他对象来说是透明的</p></blockquote><ol start="4"><li>过多的类(个人认为不是缺点，类按照职责划分本来就会产生更多的小类，而不是一个大而全的类)</li></ol><h2 id="外观模式"><a class="header-anchor" href="#外观模式"></a>外观模式</h2><blockquote><p>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，使得子系统中的一组接口都实现该接口，对外提供一个相同的接口。</p></blockquote><h3 id="动机"><a class="header-anchor" href="#动机"></a>动机</h3><p>复杂的子系统有多个类，每个类暴露出一些公共方法这些方法相互调用并对外提供一个服务，这个时候外部客户端并不关心子系统的内部调用，就可以通过Facade的模式将子系统暴露出去的接口整理成独立的接口，如下图所示：<br><a href="https://imgtu.com/i/gCcIqx"><img src="https://z3.ax1x.com/2021/04/27/gCcIqx.png" alt="门面模式"></a></p><ul><li><p>Facade<br>将请求发送给子系统对象</p></li><li><p>Subsystem class<br>实现子系统功能<br>处理有Facade指派的任务</p></li></ul><h3 id="实例-v2"><a class="header-anchor" href="#实例-v2"></a>实例</h3><ul><li><p>JdbcUtil.java<br>JdbcUtil将有关jdbc的操作封装成为一个方法，对外提供服务</p></li><li><p>RequestFacade.java<br>Tomcat的RequestFacade.java</p></li></ul><h2 id="享元模式"><a class="header-anchor" href="#享元模式"></a>享元模式</h2><blockquote><p>运用共享技术有效的支持大量细粒度的对象，通俗的来将就是缓存具体对象，在使用时返回该对象。与单例模式类似，区别在于单例模式要保证全局唯一。享元模式不用保证全局唯一，并且可以继续创建对象。享元模式会通过内部状态和外部状态两个标识来保证对象行为的内部一致性和外部差异性</p></blockquote><h3 id="结构-v5"><a class="header-anchor" href="#结构-v5"></a>结构</h3><p><a href="https://imgtu.com/i/gC5iBd"><img src="https://z3.ax1x.com/2021/04/28/gC5iBd.png" alt="享元模式"></a></p><h3 id="实例-v3"><a class="header-anchor" href="#实例-v3"></a>实例</h3><ul><li>String常量池</li><li>线程池</li></ul><h2 id="代理模式"><a class="header-anchor" href="#代理模式"></a>代理模式</h2><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问</p></blockquote><h3 id="别名-v4"><a class="header-anchor" href="#别名-v4"></a>别名</h3><p>Surrogate</p><h3 id="动机-v2"><a class="header-anchor" href="#动机-v2"></a>动机</h3><p>代理模式为对象提供了一个可自定义的访问对象，可以实现<b>远程代理</b>、<b>虚代理</b>、<b>保护代理</b>、<b>智能指引</b>等功能<br>虚代理:指的是也就是动态代理，将初始化延迟到运行时<br>保护代理/虚代理:都是对代理对象的增强</p><h3 id="结构-v6"><a class="header-anchor" href="#结构-v6"></a>结构</h3><p><a href="https://z3.ax1x.com/2021/04/28/gC5ujg.png">![代理模式]</a>](<a href="https://imgtu.com/i/gC5ujg">https://imgtu.com/i/gC5ujg</a>)</p><p>代理模式侧重于对目标对象的访问控制上，装饰模式侧重于对目标对象功能增强上。代理模式主要是对不可见的对象进行访问的代理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;设计模式-可复用面向对象软件设计的基础-结构型模式&lt;/h1&gt;
&lt;h2 id=&quot;结构型模式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#结构型模式&quot;&gt;&lt;/a&gt;结构型模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;结构型模式涉及到的是如何组织类和对象之间</summary>
      
    
    
    
    <category term="设计模式" scheme="https://agmtopy.gitee.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://agmtopy.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-可复用面向对象软件设计的基础-对象创建型模式</title>
    <link href="https://agmtopy.gitee.io/2021/04/17/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://agmtopy.gitee.io/2021/04/17/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E7%A1%80-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-17T07:17:24.000Z</published>
    <updated>2021-04-24T15:28:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1>设计模式-可复用面向对象软件设计的基础-对象创建型模式</h1><h2 id="对象创建型模式"><a class="header-anchor" href="#对象创建型模式"></a>对象创建型模式</h2><blockquote><p>对象创建型模式抽象了对象的实例化过程.帮助一个系统独立于如何创建、组合和表示它的那些对象。一个类型创建模式使用继承改变被实例化的类，而一个对象创建型模式将实例化委托给另外一个对象</p></blockquote><p>创建型模式的主要特点是该模式聚焦于对象的创建上，关注于对象创建的过程。因为同一个类不同的实例化过程会对该类所表现出来的行为产生影响。从而在创建时，通过不同的设计模式将该过程抽象出来适应不同的场景</p><p>创建型模式主要有以下5种类型：</p><ol><li>抽象工厂模式</li><li>构造器模式</li><li>工厂模式</li><li>原型模式</li><li>单例模式</li></ol><h2 id="抽象工厂模式"><a class="header-anchor" href="#抽象工厂模式"></a>抽象工厂模式</h2><h3 id="意图"><a class="header-anchor" href="#意图"></a>意图</h3><blockquote><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</p></blockquote><h3 id="别名"><a class="header-anchor" href="#别名"></a>别名</h3><p>Kit</p><h3 id="动机"><a class="header-anchor" href="#动机"></a>动机</h3><p>为解决对象工厂的创建问题。当一个业务场景需要多个工厂实例来创建对象时，如何创建这些工厂就可以使用抽象工厂模式来进行。这个模式操作的对象是是工厂对象，而不是具体工厂对象产生的实例对象。这样设计的好处是对外部来说只需要依赖AbstractFactory和AbstractProduct就可以了，不用关系具体BeanFactory和ProductFactory是怎么样被创建和依赖的。对AbstractFactory内部实现了Factory和Product的聚合。坏处在于增加一个Producty时会同时修改Abstract和创建新的具体的BeanFactory。</p><h3 id="结构"><a class="header-anchor" href="#结构"></a>结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg" alt="抽象工厂模式"></p><h3 id="实例"><a class="header-anchor" href="#实例"></a>实例</h3><h4 id="简单实现"><a class="header-anchor" href="#简单实现"></a>简单实现</h4><ul><li>AbstractFactory.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>AbstractFactory抽象类定义获取对象的方法</p><ul><li>ObjectFactory1</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectFactory1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Shape</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> objectType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>objectType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"object1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>objectType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"object2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ObjectFactory1作为工厂类继承抽象工厂类，并实现具体的抽象方法生产对象</p><ul><li>Client</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1. 生成工厂类</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractFactory</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> classType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2. 通过工厂类生成产品</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">AbstractFactory</span> factory <span class="token operator">=</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"classType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"objectType"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在客户端中主要有两步，第一个是获取具体的工厂类。第二个是根据工厂类获取对应的产品。从上面的代码中我们可以看到工厂的生成和产品的生成都需要按照不同的类型来选择生成的具体实现。抽象工厂模式管理的是工厂类。</p><h4 id="Spring中的抽象工厂模式"><a class="header-anchor" href="#Spring中的抽象工厂模式"></a>Spring中的抽象工厂模式</h4><p><strong>AbstractBeanFactory__主要有三个实现类__XmlBeanFactory(已过时)</strong>、<strong>AbstractAutowireCapableBeanFactory</strong>、<strong>DefaultListableBeanFactory</strong><br>其中主要使用的是作为自动装配的工厂类AbstractAutowireCapableBeanFactory</p><h2 id="build模式"><a class="header-anchor" href="#build模式"></a>build模式</h2><h3 id="意图-v2"><a class="header-anchor" href="#意图-v2"></a>意图</h3><blockquote><p>将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同含义的对象。构造者模式要求构造对象足够复杂并且能够按照部分参数进行处理，构造者模式将内部对象初始化的细节封装起来，外部对象之间调用即可</p></blockquote><h3 id="结构-v2"><a class="header-anchor" href="#结构-v2"></a>结构</h3><p><a href="https://imgtu.com/i/cqsLl9"><img src="https://z3.ax1x.com/2021/04/22/cqsLl9.png" alt="构造者模式"></a></p><h3 id="实例-v2"><a class="header-anchor" href="#实例-v2"></a>实例</h3><ul><li>lombok中的@Builder</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserParam</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//DELOMBOK之后的代码</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserParam</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>        <span class="token class-name">UserParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserParamBuilder</span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserParamBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserParamBuilder</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>            <span class="token class-name">UserParamBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">UserParamBuilder</span> <span class="token function">userName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">UserParamBuilder</span> <span class="token function">password</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">UserParam</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserParam</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"UserParam.UserParamBuilder(userName="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">+</span> <span class="token string">", password="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到lombok的@Builder注解只是在内部设置了一个静态方法和静态类来生成build方式，将__Direct__的职责交给类的使用者去处理了。</p><h2 id="工厂模式"><a class="header-anchor" href="#工厂模式"></a>工厂模式</h2><h3 id="意图-v3"><a class="header-anchor" href="#意图-v3"></a>意图</h3><blockquote><p>定义一个创建对象的接口，让子类决定实例化具体的类对象。Factort Method使得类的实例化延迟到了子类使用的时候。</p></blockquote><h3 id="别名-v2"><a class="header-anchor" href="#别名-v2"></a>别名</h3><p>虚构造器(Virtual Constructor)</p><h3 id="结构-v3"><a class="header-anchor" href="#结构-v3"></a>结构</h3><p><a href="https://imgtu.com/i/cOCXVJ"><img src="https://z3.ax1x.com/2021/04/22/cOCXVJ.jpg" alt="工厂模式"></a></p><p>在图中可以看到产品必须抽象出一个接口，然后在通过工厂定义创建产品的方法。通过集成工厂接口实现不同的产品的初始化过程。</p><h3 id="实例-v3"><a class="header-anchor" href="#实例-v3"></a>实例</h3><h4 id="spring工厂模式"><a class="header-anchor" href="#spring工厂模式"></a>spring工厂模式</h4><ul><li>FactoryBean.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取具体的类</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token comment">//获取类的类型</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//是否是单例</span><span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型T是抽象的产品的接口,在FactoryBean的实现类上可以根据构造器或者在调用getObject()方法之前调用初始化方法来对生成的对象进行自定义的参数配置,这样做的好处是可以不改变调用端的逻辑从而增加一个产品子类</p><p>在具体的实现上,工厂模式有两种方式,1. 工厂类作为抽象类,提供抽象方法,由实现该类的子类具体的去做初始化产品的操作;2.工厂类不做为抽象类,并且提供默认的产品创建</p><h2 id="原型模式"><a class="header-anchor" href="#原型模式"></a>原型模式</h2><h3 id="意图-v4"><a class="header-anchor" href="#意图-v4"></a>意图</h3><blockquote><p>用原型实例指定创建对象的种类,并且通过拷贝这些原型创建新的对象</p></blockquote><h3 id="结构-v4"><a class="header-anchor" href="#结构-v4"></a>结构</h3><p><a href="https://imgtu.com/i/cOmRSJ"><img src="https://z3.ax1x.com/2021/04/23/cOmRSJ.png" alt="原型模式"></a></p><p>原型模式是通过拷贝一个现有对象生成一个新的对象,需要主要的是原型模式是深拷贝而不是浅拷贝</p><h2 id="单例模式"><a class="header-anchor" href="#单例模式"></a>单例模式</h2><h3 id="意图-v5"><a class="header-anchor" href="#意图-v5"></a>意图</h3><blockquote><p>保证一个全局只有一个类,并且提供一个访问它的全局访问点</p></blockquote><h3 id="结构-v5"><a class="header-anchor" href="#结构-v5"></a>结构</h3><p><a href="https://www.runoob.com/wp-content/uploads/2014/08/62576915-36E0-4B67-B078-704699CA980A.jpg"><img src="https://z3.ax1x.com/2021/04/23/cOmRSJ.png" alt="单例模式"></a></p><h3 id="实例-v4"><a class="header-anchor" href="#实例-v4"></a>实例</h3><p>Spring中的单例模式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;设计模式-可复用面向对象软件设计的基础-对象创建型模式&lt;/h1&gt;
&lt;h2 id=&quot;对象创建型模式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#对象创建型模式&quot;&gt;&lt;/a&gt;对象创建型模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对象创建型模式抽象了对象</summary>
      
    
    
    
    <category term="设计模式" scheme="https://agmtopy.gitee.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://agmtopy.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
