<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>agmtopy博客</title>
  
  <subtitle>agmtopy</subtitle>
  <link href="https://agmtopy.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://agmtopy.gitee.io/"/>
  <updated>2021-03-31T16:48:00.543Z</updated>
  <id>https://agmtopy.gitee.io/</id>
  
  <author>
    <name>agmtopy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL总结</title>
    <link href="https://agmtopy.gitee.io/2021/03/30/6.mysql/MySQL%E6%80%BB%E7%BB%93/"/>
    <id>https://agmtopy.gitee.io/2021/03/30/6.mysql/MySQL%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-30T14:27:04.000Z</published>
    <updated>2021-03-31T16:48:00.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过以上几篇文章分别介绍了MySQL的文件系统/索引/锁/事务等功能点,这篇文章将对这些知识点进行汇总,描述出MySQL大概的架构</p></blockquote><h2 id="文件数据"><a href="#文件数据" class="headerlink" title="文件数据"></a>文件数据</h2><p> MySQL在文件数据上可以划分为<strong>MySQL系统数据</strong>/<strong>存储引擎数据</strong></p><ul><li>文件数据<ul><li>系统文件</li><li>参数文件<br>参数文件指的是系统运行时的参数,主要分为’静态参数’和’动态参数’</li><li>日志文件</li><li>系统错误日志文件</li><li>二进制(binlog)<br>binlog目前有三种记录格式分别是STATEMENT/ROW/MIXED;RC和STATEMENT格式不兼容,因为binlog的是在事务进行提交时写入</li><li>慢查询日志</li><li>查询日志</li><li>套接字文件<br>套接字文件是UNIX下使用套接字链接方式打开的socket文件</li><li>pid文件</li><li>表结构文件<br>定义表结构的文件,每个表都有一个frm的表结构文件</li></ul></li><li>InnoDB存储引擎文件<ul><li>表空间文件<br>实际存储数据的文件,名称为ibdata1的文件作为共享表空间文件,MySQL也支持为每个表单独设置表空间文件,后缀名为.ibd</li><li>redolog<br>redoLog又称为重做日志,文件名称为ib_logfile0/ib_logfile1</li></ul></li></ul><p><a href="https://imgtu.com/i/cESwqK"><img src="https://z3.ax1x.com/2021/04/01/cESwqK.png" alt="cESwqK.png"></a></p><h2 id="索引系统"><a href="#索引系统" class="headerlink" title="索引系统"></a>索引系统</h2><p>MySQL的索引系统主要是由于B+ Tree索引作为底层数据结构,也有采用Hash自适应索引场景.</p><ul><li>索引<ul><li>分类<ul><li>B+Tree索引<br>B+ TREE索引作为MySQL底层数据结构的好处是在于B+TREE平衡且层级不高并且叶子节点可以作为聚集索引</li><li>全文索引<br>MySQL的全文索引也是采用倒排算法,通过关键字来进行文档映射,现实工作中未涉及到,因此未详细研究</li><li>Hash索引<br>InnoDB只支持自适应的Hash索引,不能显示的去创建并且要满足Hash索引自动创建的条件(等值查询/命中范围/查询频率)</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;通过以上几篇文章分别介绍了MySQL的文件系统/索引/锁/事务等功能点,这篇文章将对这些知识点进行汇总,描述出MySQL大概的架构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;文件数据&quot;&gt;&lt;a href=&quot;#文件数据&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="数据库" scheme="https://agmtopy.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://agmtopy.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务</title>
    <link href="https://agmtopy.gitee.io/2021/03/27/6.mysql/MySQL%E4%BA%8B%E5%8A%A1/"/>
    <id>https://agmtopy.gitee.io/2021/03/27/6.mysql/MySQL%E4%BA%8B%E5%8A%A1/</id>
    <published>2021-03-27T07:09:33.000Z</published>
    <updated>2021-03-30T14:24:27.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务的定义"><a href="#事务的定义" class="headerlink" title="事务的定义"></a>事务的定义</h2><p>事务是数据库与文件系统最重要的差异之一,数据库通过事务保证了数据的ACID特性,分别是原子性/一致性/隔离性/持久性</p><h2 id="事务的分类"><a href="#事务的分类" class="headerlink" title="事务的分类"></a>事务的分类</h2><p>事务可以划分为:<br>1.扁平事务以及带有保存点的扁平事务<br>2.链事务<br>3.嵌套事务<br>4.分布式事务</p><h2 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h2><p>InnoDB通过日志系统来实现事务,redo log可以保证事务的原子性/一致性/持久性,undo log可以保证事务的原子性和持久性</p><h3 id="redo-log的作用"><a href="#redo-log的作用" class="headerlink" title="redo log的作用"></a>redo log的作用</h3><p>redo log是重做日志,通过每次事务提交前先修改该事务要修改的页,在提交过程中如果中断,通过redo log就可以继续提交事务</p><h3 id="undo-log的作用"><a href="#undo-log的作用" class="headerlink" title="undo log的作用"></a>undo log的作用</h3><p>undo log是回滚日志,通过记录每个事务开始时的数据,在回滚发生中断时,可以根据undo log 继续进行事务回滚</p><h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><p>redo log由两部分组成’redo log buffer’和’redo log file’,在进行事务connit之前都会将事务的所有日志写入日志文件中进行持久化<br>InnoDB提供一个参数’innodb_flush_log_at_trx_commit’来控制redo log的刷盘策略,0:由master thread进行控制 1:每次提交后进行同步刷盘 2:每次提交后只是将数据提交给文件系统,不进行主动刷盘操作</p><h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>undo log是回滚日志,是逻辑日志并不是redo log的物理日志,只是在逻辑上保证了数据回滚到原始状态.例如用户执行一个insert操作,在undo log里面就需要一个delete操作</p><h2 id="MVVC"><a href="#MVVC" class="headerlink" title="MVVC"></a>MVVC</h2><p>多版本控制,InnoDB会在行记录上默认增加两个隐藏列来作为MVVC实现的基础,分别是DB_TRX_ID-最新一次事务提交版本号/DB_ROLL_PTR-删除事务的版本号<br>数据行和undo log组成了不同版本之间的数据链,通过对比版本号和undo log日志将所需要的数据还原出来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事务的定义&quot;&gt;&lt;a href=&quot;#事务的定义&quot; class=&quot;headerlink&quot; title=&quot;事务的定义&quot;&gt;&lt;/a&gt;事务的定义&lt;/h2&gt;&lt;p&gt;事务是数据库与文件系统最重要的差异之一,数据库通过事务保证了数据的ACID特性,分别是原子性/一致性/隔离性/持久性</summary>
      
    
    
    
    <category term="数据库" scheme="https://agmtopy.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://agmtopy.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引与锁</title>
    <link href="https://agmtopy.gitee.io/2021/03/21/6.mysql/MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%94%81/"/>
    <id>https://agmtopy.gitee.io/2021/03/21/6.mysql/MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%94%81/</id>
    <published>2021-03-21T06:12:10.000Z</published>
    <updated>2021-03-30T14:24:08.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>InnoDB存储引擎支持以下几种索引结构:</p><ol><li>B+树索引</li><li>全文索引</li><li>哈希索引</li></ol><h3 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h3><p>结构为’B+树’的索引有聚集索引/辅助索引<br>聚集索引是以主键来构造B+树,在叶子节点中存放行记录,也就是叶子节点称为数据页.<br>辅助索引是以索引key来构造B+树,叶子节点记录的是主键,因此在进行查找是会进行一次读取聚集索引的操作</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>全文索引指的是将存储与数据库中的全部数据中的任意内容信息查询出来的技术.<br>全文索引主要是用倒排索引的技术来进行实现,倒排索引需要用到一个索引辅助表,对全文中的值进行分词和索引定位</p><h3 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h3><p>哈希索引指的是用哈希算法来存储索引的结构,InnoDB的哈希索引不能由用户自定义,而是由客户进行多次查询和命中某种条件后会将B+树索引进行升级转换成哈希索引,这种算法有点类似JVM中对热点代码的JIT技术,提前将热点数据拿出来</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><blockquote><p>锁是数据库系统区别于文件系统的一个关键特性.锁机制用于管理对共享资源的并发访问.InnoDB存储引擎会在行级别上对表数据上锁.</p></blockquote><h3 id="锁类型"><a href="#锁类型" class="headerlink" title="锁类型"></a>锁类型</h3><p>InnoDB存储引擎实现了两种标准的行级锁</p><ul><li>共享锁(S Lock),允许事务读一行数据</li><li>排他锁(X Lock),允许事务删除或更新一行数据</li></ul><p>InnoDB存储引擎支持多粒度锁定,这种锁定允许事务在行级上的锁和表级上的锁同时存在.<br>为了支持在不同粒度上进行加锁操作,InnoDB存储引擎支持意向锁,意向锁可以分为’意向共享锁’/‘意向排他锁’<br>意向共享锁:事务想要获得一张表中的某几行的共享锁<br>意向排他锁:事务想要获得一张表中的某几行的排他锁</p><h3 id="一致性非锁定读"><a href="#一致性非锁定读" class="headerlink" title="一致性非锁定读"></a>一致性非锁定读</h3><p>‘一致性非锁定读’指的是InnoDB通过行的多版本控制系统,在读取时不必等待X锁的释放.<br>RC隔离级别下,一致性非锁定读一定是读取最新的一份快照数据<br>RR隔离级别下,一致性非锁定读一定是读取事务开始时的一份快照数据</p><h3 id="一致性锁定读"><a href="#一致性锁定读" class="headerlink" title="一致性锁定读"></a>一致性锁定读</h3><p>InnoDB通过两种操作显式的支持一致性锁定读,第一种是</p><ul><li>SELECT * FOR UPDATE 加X锁</li><li>SELECT * LOCK IN SHARE MODE 加S锁</li></ul><h3 id="自增计数"><a href="#自增计数" class="headerlink" title="自增计数"></a>自增计数</h3><p>InnoDB的自增计数是通过表上的一个自增长计数器来进行的,当插入SQL执行完毕后该自增计数器就完成自增操作并提交</p><h3 id="锁算法"><a href="#锁算法" class="headerlink" title="锁算法"></a>锁算法</h3><ol><li>Record Lock:行锁</li><li>Gap Lock:间隙锁</li><li>Next-Key Lock:行锁+间隙锁</li></ol><ul><li>Next-Key Lock是默认InnoDB默认采用的锁定算法,但是当查询时使用到了聚集索引时会降级成’Record Lock’锁.<br>这里有一个小疑问,InnoDB对于Insert的操作会检查插入记录的下一条记录是否被锁定,如果锁定则不允许操作 </li></ul><p>Next-Key Loc只在RR隔离模式下使用,主要是为了解决RR模式下的幻读问题(这是又有一个疑问了既然RR模式读取的是数据的快照,按理说这个时候应该没有新插入数据的快照,为什么要这样设计喃)</p><ul><li><p>阻塞<br>阻塞指的是不同锁之间的兼容关系,在某些时刻需要等待另外一个事务中的锁释放.在默认情况下InnoDB的存储引擎在大部分情况下都不会对异常进行回滚.</p></li><li><p>死锁<br>死锁指的是两个以上的事务在执行过程中相互等待.解决死锁最简单的方法是超时机制.MySQL检测超时机制是通过’等待图’的机制来进行死锁检测.</p></li><li><p>等待图检测机制<br>通过保存锁信息和事务等待链表形成一张图结构,检测图中是否存在回路,如果存在回路证明发生了死锁.</p></li><li><p>死锁回滚<br>对于死锁异常,InnoDB会选择回滚UNDO量最小的事务进行回滚</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;p&gt;InnoDB存储引擎支持以下几种索引结构:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;B+树索引&lt;/li&gt;
&lt;li&gt;全文索引&lt;/li&gt;
&lt;li&gt;哈希索引&lt;/</summary>
      
    
    
    
    <category term="数据库" scheme="https://agmtopy.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://agmtopy.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL技术疑问</title>
    <link href="https://agmtopy.gitee.io/2021/03/20/6.mysql/MySQL%E6%8A%80%E6%9C%AF%E7%96%91%E9%97%AE/"/>
    <id>https://agmtopy.gitee.io/2021/03/20/6.mysql/MySQL%E6%8A%80%E6%9C%AF%E7%96%91%E9%97%AE/</id>
    <published>2021-03-20T10:12:31.000Z</published>
    <updated>2021-03-30T14:24:39.582Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录&lt;&lt;MySQL技术内幕-InnoDB存储引擎&gt;&gt;阅读中存在的疑问点</p></blockquote><ul><li>P77 日志文件<blockquote><p>如果使用RC隔离级别会出现类似数据丢失更新的现象,从而出现主从数据库上的数据不一致</p></blockquote></li></ul><p>bin_log的记录格式为’STATENEBT’是,会出现这样的情况为什么喃?</p><p>原因:</p><blockquote><ol><li>bin_log的记录顺序是commit的顺序,而不是执行顺序</li><li>RC中SQL的执行是立即执行的<br>这样如果bin_log记录格式如果是sql,就会出现丢失数据的场景</li></ol></blockquote><hr><ul><li><p>P268 锁</p><blockquote><p>InnoDB对于Insert的操作会检查插入记录的下一条记录是否被锁定,如果锁定则不允许操作</p></blockquote></li><li><p>P269 解决幻读</p><blockquote><p>在RR模式下通过Next-Key Locking机制来解决幻读,既然MVVC是读取快照,为什么还需要Next-Key Locking机制来解决幻读问题</p></blockquote></li></ul><p>InnoDB实际上是把读取拆分成两种类型</p><ul><li>快照读<br>通过读取undo log,并且对比版本号得到事务开始时的数据,这种主要是select 操作,对数据加s锁</li><li>当前读<br>当前读指的是通过Next-Key Locking 机制将对数据的读取操作序列化,解决幻读问题</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.zhihu.com/question/334408495">知乎MVCC的解答</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记录&amp;lt;&amp;lt;MySQL技术内幕-InnoDB存储引擎&amp;gt;&amp;gt;阅读中存在的疑问点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;P77 日志文件&lt;blockquote&gt;
&lt;p&gt;如果使用RC隔离级别会出现类似数据丢失更新的现象,</summary>
      
    
    
    
    <category term="数据库" scheme="https://agmtopy.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://agmtopy.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL文件和表结构</title>
    <link href="https://agmtopy.gitee.io/2021/03/20/6.mysql/MySQL%E6%96%87%E4%BB%B6%E5%92%8C%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://agmtopy.gitee.io/2021/03/20/6.mysql/MySQL%E6%96%87%E4%BB%B6%E5%92%8C%E8%A1%A8%E7%BB%93%E6%9E%84/</id>
    <published>2021-03-20T03:21:19.000Z</published>
    <updated>2021-03-30T14:23:44.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL文件体系"><a href="#MySQL文件体系" class="headerlink" title="MySQL文件体系"></a>MySQL文件体系</h2><p>MySql文件体系主要分为:</p><ol><li>参数文件<br>参数文件的定义是作为存储MySql初始化参数的作用,负责记录各种参数</li><li>日志文件:<br>这里的日志文件主要是系统操作日志,主要有错误日志文件,二进制日志文件,慢查询日志文件等</li><li>socket文件:<br>UNIX域套接字所需文件</li><li>pid文件<br>MySql实例进程的ID文件</li><li>MySQL表结构文件<br>用来存放MySQL表结构定义文件</li><li>存储引擎文件<br>存储引擎文件存放了真正的记录和索引数据</li></ol><p>主要关心的是日志文件和存储引擎文件</p><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>日志文件主要有错误日志,二进制日志,慢查询日志,查询日志文件<br>二进制日志就是bin_log文件,会记录所有对MySql数据库执行更新的操作,就算最后数据未发生改变;<br>当使用支持事务的存储引擎时,所有未提交的二进制日志会被记录到一个缓存中(当超过缓存大小时会记录到临时文件中),等待该事务提交时直接将缓存刷新到bin_log中<br>bin_log的记录格式有三种(记录执行SQL,记录更新数据,混合模式),在’记录执行SQL’的模式下主从复制不能使用RC模式</p><h3 id="存储引擎文件"><a href="#存储引擎文件" class="headerlink" title="存储引擎文件"></a>存储引擎文件</h3><p>存储引擎文件主要有’表空间文件’,重做日志文件(redo log)</p><h4 id="表空间文件"><a href="#表空间文件" class="headerlink" title="表空间文件"></a>表空间文件</h4><p>表空间文件指的是实际存储数据的文件,分为两种类型默认的表空间,这种表空间是共享数据存储的模式,另外一种是独自的表空间,为每一张表单独生产独立的表空间文件存放数据/索引/插入缓冲BITMAP,但是该表其余的数据还是放到默认的表空间中</p><h4 id="重做日志文件"><a href="#重做日志文件" class="headerlink" title="重做日志文件"></a>重做日志文件</h4><p>重做日志文件是innoDB用来保证数据完整性的关键,默认采用一个重做日志组下面有两个镜像重做日志文件的架构.<br>redo_log是在sql执行过程中不断的进行写入和复制,这里和bin_log有所差异,bin_log是在事务提交后进行的写入.<br>redo_log的记录对象是对每个页的更改的物理记录,redo_log记录的是向前的更新记录.</p><h2 id="MySQL表结构"><a href="#MySQL表结构" class="headerlink" title="MySQL表结构"></a>MySQL表结构</h2><p>MySQL的文件结构是如何数据如何在物理上的结构,MySQL对于数据在逻辑上的结构可以划分为索引组织表,InnoDO的存储结构,行记录结构,页记录结构以及视图等</p><h3 id="数据存储的方式"><a href="#数据存储的方式" class="headerlink" title="数据存储的方式"></a>数据存储的方式</h3><p>数据存储格式可以分为’堆表’/‘索引组织表’</p><ul><li>堆表指的是数据的存放是无序的,是根据空闲磁盘空间来决定存放位置;</li><li>索引组织表指的是在存放数据时是按照主键索引来进行存放的.InnoDB的B+树索引结构就是一种索引组织表的形式.</li></ul><h3 id="InnoDB逻辑存储结构"><a href="#InnoDB逻辑存储结构" class="headerlink" title="InnoDB逻辑存储结构"></a>InnoDB逻辑存储结构</h3><p>InnoDB的逻辑存储结构划分为4级,分别是表空间-段空间-区空间-页空间,页空间上存储的就是一行一行的数据了</p><h3 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h3><p>表空间是InnoDB逻辑存储上最上层的操作单位,一个表空间存储了所属该表的全部数据(data,index)</p><h3 id="段空间"><a href="#段空间" class="headerlink" title="段空间"></a>段空间</h3><p>对表空间内的数据按照类型进行划分,又可以划分为数据段/索引段/回滚段等,这些不同的类型数据,被称为段空间</p><p>——逻辑-物理分割层——</p><h3 id="区空间"><a href="#区空间" class="headerlink" title="区空间"></a>区空间</h3><p>区空间是由连续的磁盘空间组成,默认区空间大小为1MB,为了保证区空间的连续性还会一次向磁盘申请多个区空间.区空间实际存储了段空间内的数据.</p><h3 id="页空间"><a href="#页空间" class="headerlink" title="页空间"></a>页空间</h3><p>页空间是InnoDB最小的磁盘管理单位,在InnoDB中每个页的大小为16KB,因此一个区可以存储64个页.页按照类型可以划分为</p><ol><li>数据页</li><li>undo页</li><li>系统页</li><li>事务数据页</li><li>插入缓冲页(BitMap/Free List)</li><li>二进制大对象页</li></ol><h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><p>InnoDB中的数据是按照行来进行存储的,行数据的记录格式按照类型可以分为两类.Compact和Redundant两种类型.</p><ul><li><p>Redundant<br>Redundant类型是为了兼容之前版本而设计的</p></li><li><p>Compact<br>Compact格式是MySQL5.0中引入的,目的是高效的存储数据.</p></li><li><p>数据结构</p></li></ul><table><thead><tr><th>变长字段长度列表</th><th>NULL标志位</th><th>记录头信息</th><th>列数据…</th><th>事务ID</th><th>回滚指针</th></tr></thead></table><p>特别要注意’事务ID’和’回滚指针’这两项与隔离级别和事务回滚有关;<br>NULL,在行的数据结构中都不占用任何存储空间,因为在行的数据结构中有NULL标志位来处理NULL</p><ul><li>Varchar类型长度<br>Varchar类型在MySQL中的定义是最大能存储65535个字节,并且是该行所有的Varchar类型长度之和.由于一个页的大小为16KB,因此在Varchar的类型长度实际上是超过一页的大小,这样就会导致一页上不能存储一行数据.这里InnoDB采用了溢出页的方式来进行处理,page上只保留数据头信息,而溢出页上存储溢出的信息(溢出指的是数据大小溢出InnoDB设定的额定大小,而不是page页的大小)</li></ul><h2 id="InnoDB数据页结构"><a href="#InnoDB数据页结构" class="headerlink" title="InnoDB数据页结构"></a>InnoDB数据页结构</h2><p>InnoDB的数据页结构指的是页空间中数据页的结构,主要由数据系统信息和用户记录信息组成</p><ul><li>数据系统结构<br>数据系统结构主要是由文件头/页头/Infimun-Supremum Records/页目录等组成,标记了该块区域的系统信息</li><li>Infimun-Supremum Records指的是一个小于数据主键的区间起始值和终止值.这两个值会在B+树中进行存储</li><li>页目录指的是指的是标记用户数据的相对位置的结构<blockquote><p>在进行数据查找时,会先从B+树中查询到数据对应的页,将页加载到内存中后,根据页目录来对用户数据进行二分查找(重点)</p></blockquote></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://my.oschina.net/xinxingegeya/blog/474895">MySQL聚簇索引&amp;聚集索引&amp;索引组织表</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MySQL文件体系&quot;&gt;&lt;a href=&quot;#MySQL文件体系&quot; class=&quot;headerlink&quot; title=&quot;MySQL文件体系&quot;&gt;&lt;/a&gt;MySQL文件体系&lt;/h2&gt;&lt;p&gt;MySql文件体系主要分为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数文件&lt;br&gt;参数文件的定</summary>
      
    
    
    
    <category term="数据库" scheme="https://agmtopy.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://agmtopy.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL体系结构与存储引擎</title>
    <link href="https://agmtopy.gitee.io/2021/03/15/6.mysql/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    <id>https://agmtopy.gitee.io/2021/03/15/6.mysql/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</id>
    <published>2021-03-15T13:54:51.000Z</published>
    <updated>2021-03-30T14:24:02.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要介绍MySql的整体体系结构和存储引擎</p></blockquote><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>概念上’数据库’是文件的集合,是依照某种数据模型组织起来并存放与存储器中的数据;’数据库实列’是程序是一个用户进程,是用户对’数据库’操作的软件.<br>MySql主要由以下几部分组成</p><ol><li>连接池组件</li><li>管理服务和工具组件</li><li>SQL接口组件</li><li>查询分析器组件</li><li>优化器组件</li><li>缓冲组件</li><li>插件式存储引擎(存储引擎是基于表的 ,而不是基于数据库的)</li><li>物理文件</li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><ul><li><p>概述<br>存储引擎是与MySql物理文件进行交互的一种插件,存储引擎的底部是物理存储层,包括二进制日志文件,数据文件,错误文件,慢查询日志,undo/redo日志等</p></li><li><p>一次select的过程<br>下图是一次select的过程,从图中得知存储引擎位于是物理文件和程序数据之间<br><a href="https://imgtu.com/i/6r8Q7q"><img src="https://s3.ax1x.com/2021/03/15/6r8Q7q.png" alt="6r8Q7q.png"></a></p></li><li><p>InnoDB的体系架构</p></li></ul><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-architecture.html"><img src="https://dev.mysql.com/doc/refman/8.0/en/images/innodb-architecture.png" alt="InnoDB架构"></a></p><ol><li>实列层<br>实列层主要包括’线程’和’内存’两个部分<br>a. 后台线程主要有</li></ol><ul><li>Master Thread<br>主线程主要负责将缓冲池中的数据异步刷新到磁盘中,保证数据的一致性</li><li>I/O Thread<br>I/O Thread 主要是负责AIO(Async IO)请求的回调</li><li>Purge Thread<br>Purge Thread的作用是事物在被提交后undolog就可能不在被使用了,因此需要Purge Thread线程来回收并分配的undo页</li><li>Page Cleaner Thread<br>Page Cleaner Thread的作用是回收分配脏页</li></ul><p>小结:Master Thread和I/O Thread一个负责异步刷新数据一个负责AIO的回调,Purge Thread和Page Cleaner Thread一个负责回收分配undolog一个负责回收分配脏页</p><p>b. 内存</p><ul><li>缓冲池<br>InnoDB存储引擎是基于磁盘存储,其中的数据是按照页的方式进行管理.由于CPU和磁盘速度中的差异因此用缓冲池技术来提高数据库的整体性能<br>缓冲池是一块内存区域,在数据库进行读取页操作时,会首先将从内存中的数据放到缓冲池中,在下一次读取相同页时,会直接读取缓冲池中的页数据.<br>对于数据库中的页的修改,首先会修改缓冲池中的页,然后以一定的频率刷新到磁盘,这种机制被称为CheckPoint<br>缓冲池中的数据页类型分为:</li></ul><ol><li>索引页</li><li>数据页</li><li>undo页</li><li>插入缓冲</li><li>自适应哈希索引</li><li>InnoDB存储的锁信息</li><li>数据字典</li></ol><ul><li><p>LRU list,Freen lst,Flush list<br>数据库中的缓冲池是通过LRU算法来进行管理,但是InnoDB中的LRU算法是经过优化的,将新数据放到列表3/8处</p></li><li><p>重做日志缓冲<br>重做日志首先会放到缓冲区,然后按照一定的频率刷新到日志文件上,有三种情况会刷新重做日志:1.Master Thread每一秒都会将日志缓冲刷新到日志文件,2.每个事务提交时都会将重做日志刷新到文件,3.当重做日志缓冲池剩余空间小于1/2时,会将日志刷新到文件上</p></li><li><p>额外的内存池<br>额外的内存池作为缓冲池的备用,但缓冲池不够的时候,就会从额外的内存池中申请</p></li><li><p>Checkpoint技术<br>Mysql中数据的持久性是通过Write Ahead Log策略来保证,也就是先写日志文件,在修改数据文件.当宕机导致数据丢失时,会通过重做日志来进行数据恢复.<br>如果重做日志太大会导致数据恢复的很慢,因此mysql使用CheckPoint的技术来保证,CheckPoint是将缓冲池中的内存页刷新到磁盘的动作</p></li></ul><h2 id="Master-Thread"><a href="#Master-Thread" class="headerlink" title="Master Thread"></a>Master Thread</h2><p>Master Thread具有最高级别的线程优先级,内部有多个循环组成:主循环,后台循环,刷新循环,暂停循环.<br>Master Thread主要分为1s执行一次的操作:</p><ol><li>日志缓冲刷新到磁盘,即使这个事务还没提交</li><li>合并插入缓冲</li><li>最多刷新100个InnoDB的缓冲池中的脏页到磁盘</li><li>如果当前没有用户活动,就切换到backgroud loop<br>10s执行一次的操作:</li><li>刷新100个脏页到磁盘</li><li>合并至多5个插入缓冲</li><li>将日志缓冲刷新到磁盘</li><li>删除无用的Undo页</li><li>刷新100个或者10个脏页</li></ol><h2 id="InnoDB特点"><a href="#InnoDB特点" class="headerlink" title="InnoDB特点"></a>InnoDB特点</h2><ol><li>插入缓冲(Insert Buffer)</li><li>两次写(Double Write)</li><li>自适应哈希索引(Adaptive Hash Index)</li><li>异步IO(Async IO)</li><li>刷新邻接页(Flush Neighbor Page)</li></ol><h2 id="插入缓冲"><a href="#插入缓冲" class="headerlink" title="插入缓冲"></a>插入缓冲</h2><ol><li>Insert Buffer<br>Insert Buffer是在插入数据时将辅助索引先放到Insert Buffer中,然后在按照一定的频率将Insert Buffer中的数据和辅助索引页的子节点进行合并,这样能够提高非聚集索引的插入性能</li><li>Change Buffer<br>Change Buffer作为Insert Buffer的升级,会将所有对非聚集索引的操作进行缓冲</li><li>Insert Buffer的内部结构<br>Insert Buffer的数据结构是B+树,在Mysql4.1之前每张表都有一颗B+树;在现在的版本中全局只有一颗B+树,负责对所有表的辅助索引进行Insert Buffer,默认为ibdata1<br>Insert Buffer的非叶子节点是由space(待插入记录表的表空间id),offer(偏移量)构成;叶子节点是由space,offer,metadata(操作辅助索引的元数据-顺序,标识,类型)</li><li>merge Insert Buffer的过程<br>在三种情况下,MySql会将Insert Buffer刷新到辅助索引文件中,并且虽然Insert Buffer是有序的,但是在刷新时,是随机选取Insert Buffer中的一个页进行刷新,做这个的目的是为了保证公平性而舍弃顺序性.以下的三种情况会进行Inser Buffer的刷新</li><li>辅助索引页被读取到缓冲池中</li><li>Insert Buffer BitMap记录Insert Buffer可用空间不足时</li><li>Master Thread线程对Insert Buffer的刷新</li></ol><h2 id="两次写"><a href="#两次写" class="headerlink" title="两次写"></a>两次写</h2><p>两次写指的是当在直接写入某页时发生宕机,会有丢失数据的风险.通过向将脏页的数据转移到内存中的doublewrite buffer中,在将doublewrite中的数据同步写到共享表空间的物理磁盘文件上,第二次才将doublewrite buffer中的文件刷新到数据文件(.ibd)中,这样可以尽量保证数据文件的完整性</p><h2 id="自适应哈希索引"><a href="#自适应哈希索引" class="headerlink" title="自适应哈希索引"></a>自适应哈希索引</h2><p>自适应哈希索引指的是连续对热点数据的多次查询后会根据B+树索引生成对应的哈希索引,加快查询性能</p><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><p>异步IO可以提高操作磁盘的效率,</p><h2 id="刷新邻接页"><a href="#刷新邻接页" class="headerlink" title="刷新邻接页"></a>刷新邻接页</h2><p>刷新邻接页指的是对脏页所在区的页进行检测,发现是脏页一并进行刷新.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;主要介绍MySql的整体体系结构和存储引擎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;体系结构&quot;&gt;&lt;a href=&quot;#体系结构&quot; class=&quot;headerlink&quot; title=&quot;体系结构&quot;&gt;&lt;/a&gt;体系结构&lt;/h2&gt;&lt;p&gt;概念上’数据</summary>
      
    
    
    
    <category term="数据库" scheme="https://agmtopy.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://agmtopy.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络基础知识(一)</title>
    <link href="https://agmtopy.gitee.io/2021/03/08/16.%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/1.HTTP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://agmtopy.gitee.io/2021/03/08/16.%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/1.HTTP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-03-08T13:06:46.000Z</published>
    <updated>2021-03-27T16:13:16.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h2><ol><li>广域网 WAN(Wide Area Network),作用范围在几十至几千公里</li><li>城域网 MAN(Metropolitan Area Network),作用范围在五至五十公里</li><li>局域网 LAN(Local Area Network),作用范围在一功能左右</li><li>个人局域网 PAN(Personal Area Network),通常作用范围为10米左右,通过无线连接起来的个人局域网又称为WPAN</li></ol><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><ol><li>速率:指的是连接在计算机网络上的主机在数字信道上传送数据的速率.通俗来讲就是单位时间内能发送的数据量</li><li>带宽:指的是网络的通信线路所能传送数据的能力.通俗来讲就是网络线路承载数据的宽度</li><li>吞吐量:指的是单位时间内通过某个网络的数据量</li><li>时延:指的是数据通过网络从一端传送到另外一端的时间(总时延=发送时延+传播时延+处理时延+排队时延)</li><li>时延带宽积:指的是传播时延*贷款表示以比特为单位的链路长度</li><li>往返时间RTT:指的是从发送端发送数据开始到发送端接受到接受端的响应为止</li><li>利用率:指的是信道利用率和网络利用率</li></ol><h2 id="计算机网络协议划分"><a href="#计算机网络协议划分" class="headerlink" title="计算机网络协议划分"></a>计算机网络协议划分</h2><ol><li><p>OSI七层协议</p><ol start="7"><li>应用层</li><li>表示层</li><li>会话层</li><li>运输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ol></li><li><p>TCP/IP四层协议</p><ol start="4"><li>应用层(TELNET,FTP,SMTP)</li><li>运输层(TCP/UDP)</li><li>网际层(IP)</li><li>网络接口层<br>由于TCP/IP协议中的网络接口层是对通信链路的一个抽象因此并无具体实现,因此又折中出了一个五层协议的架构</li></ol></li><li><p>五层协议</p><ol start="5"><li>应用层</li><li>运输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ol></li></ol><h2 id="TCP和UDP的异同"><a href="#TCP和UDP的异同" class="headerlink" title="TCP和UDP的异同"></a>TCP和UDP的异同</h2><p>TCP和UDP都是运输层协议,TCP在设计是可靠的(因此有三次握手)</p><h2 id="TCP-IP协议族的沙漏模型"><a href="#TCP-IP协议族的沙漏模型" class="headerlink" title="TCP/IP协议族的沙漏模型"></a>TCP/IP协议族的沙漏模型</h2><p>应用层 :  HTTP   SMTP    DNS  RTP   H.323  SIP<br>           \     /       \    /     \      /<br>运输层 :     TCP            UDP        SCTP<br>              \             |          /<br>网际层 :                    IP<br>               /            |            <br>网络接口层:  接口1          接口2         接口3</p><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><ol><li>单向通信<br>信号只能沿着一个方向移动</li><li>双向交替通信(半双工通信)<br>单位时间内信号只能沿着一个方向移动</li><li>双向同时通信<br>单位时间内信号可向不同的方向移动</li></ol><h2 id="网际层协议-IP"><a href="#网际层协议-IP" class="headerlink" title="网际层协议-IP"></a>网际层协议-IP</h2><p>HTTP是什么?<br>HTTP是一种超文本传输协议(Hypertext Transfer Protocol),主要是由于</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h2 id=&quot;计算机网络的类别&quot;&gt;&lt;a href=&quot;#计算机网络的类别&quot; class=&quot;headerlink&quot; title=&quot;计</summary>
      
    
    
    
    
    <category term="网络协议" scheme="https://agmtopy.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>延迟队列的实现思路</title>
    <link href="https://agmtopy.gitee.io/2021/01/20/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/12.%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>https://agmtopy.gitee.io/2021/01/20/7.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9F%A5%E8%AF%86/12.%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</id>
    <published>2021-01-20T14:04:32.000Z</published>
    <updated>2021-03-27T16:13:16.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="延迟队列的实现思路"><a href="#延迟队列的实现思路" class="headerlink" title="延迟队列的实现思路"></a>延迟队列的实现思路</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>延迟队列指的是元素按照延迟时间进行排序形成并且到时后能自动弹出的有序队列,底层数据结构既可以是数组也可以是链表</p></blockquote><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>按照倒计时触发的业务场景,例如电商网站中的订单未支付自动取消,竞拍,日历待办提醒的场景,以及用定时任务扫表触发的业务场景</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>如果让你来设计延时队列,你需要怎么样来设计?<br>先来个基础1.0的设计:要实现延时队列需要两个角色,第一个是存储信息的队列,第二个角色是’计时器’负责监视队列中的消息时候到期</p><p>图示2</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.队列的角色</span>    <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelayedTask</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DelayedTask</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayedTask</span><span class="token punctuation">(</span><span class="token number">1_0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_1:"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DelayedTask</span> task5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayedTask</span><span class="token punctuation">(</span><span class="token number">1_5L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_2:"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task1<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.计时器的角色</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DelayedTask</span> task <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span><span class="token function">getRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>源码解析<blockquote><p>DelayQueue底层采用的是PriorityQueue,一种提供优先级的队列,poll()方法如下:</p></blockquote></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//PriorityQueue是线程不安全的,因此需要用lock</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span> first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的延时队列可以解决单个进程下的延迟队列场景,但是无法解决多个应用下的场景,那么如何在实现分布式的延迟队列喃?<br>先从问题分析,我们想要实现的是分布式的延迟队列,并且知道延迟队列是由定时器和队列构成,定时器由客户端实现,那么问题就变成了我们要实现一个分布式的具有优先级的队列结构,聪明的你一定就想到了这不是redis中的zset嘛?对,下面我们来看一下基于redis实现延迟队列的1.0版本</p><h3 id="基于Redis的延迟队列"><a href="#基于Redis的延迟队列" class="headerlink" title="基于Redis的延迟队列"></a>基于Redis的延迟队列</h3><blockquote><p>zset定义:排序集合，类似于集合，但每个字符串元素都与一个称为得分的浮点值相关联。 元素总是按它们的分数排序，因此与Sets不同，可以检索一系列元素</p></blockquote><ul><li>zset<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RedissonClient</span> redisClient <span class="token operator">=</span> <span class="token function">getRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RScoredSortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> zset <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token function">getScoredSortedSet</span><span class="token punctuation">(</span><span class="token string">"redisDelayQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token number">20L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token number">15L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> zset<span class="token punctuation">.</span><span class="token function">valueRange</span><span class="token punctuation">(</span><span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedissonClient</span> <span class="token function">getRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RedissonClient</span> client <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> client<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getTimeLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>RedissonDelayedTask<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RedissonClient</span> redisClient <span class="token operator">=</span> <span class="token function">getRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> blockingFairQueue <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token function">getBlockingQueue</span><span class="token punctuation">(</span><span class="token string">"RedissonDelayed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RDelayedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> delayedQueue <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token function">getDelayedQueue</span><span class="token punctuation">(</span>blockingFairQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    delayedQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    delayedQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    delayedQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingFairQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>Redisson也实现了延迟队列(RedissonDelayedQueue),,底层数据结构使用的是zset,list,发布/订阅,并且也不是想我们现在这样通过while和方式来监听变化的,感兴趣的童鞋可以看一下Redisson实现时使用的Lua脚本</p><blockquote><p>目前Redisson基于reids的延迟队列在功能上很完善了作为延迟队列来说已经是满足的了,但是作为一个延时消息队列来说还缺少重试机制,ACK,因此下面介绍两种基于MQ实现延迟队列的方式</p></blockquote><h3 id="基于RabbitMQ的延迟队列"><a href="#基于RabbitMQ的延迟队列" class="headerlink" title="基于RabbitMQ的延迟队列"></a>基于RabbitMQ的延迟队列</h3><h4 id="基于TTL的实现方式"><a href="#基于TTL的实现方式" class="headerlink" title="基于TTL的实现方式"></a>基于TTL的实现方式</h4><blockquote><p>基于生存时间(TTL)和死信队列(DLX)特性实现的延迟队列;TTL指的是每条消息都有一个生存时间,超过过期时间后消息就会进入一个特殊队列,这个队列就是死信队列(DLX),DLX可以将消息重新投递到指定的队列中,consumer只需要订阅这个队列就可以实现延迟消费的功能</p></blockquote><ul><li>Provider</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>consumer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="基于插件的实现方式"><a href="#基于插件的实现方式" class="headerlink" title="基于插件的实现方式"></a>基于插件的实现方式</h4><h3 id="基于RocketMQ的延迟队列"><a href="#基于RocketMQ的延迟队列" class="headerlink" title="基于RocketMQ的延迟队列"></a>基于RocketMQ的延迟队列</h3><h2 id="限制和扩展"><a href="#限制和扩展" class="headerlink" title="限制和扩展"></a>限制和扩展</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/343811173">Redisson 延时队列原理详解</a><br><a href="https://blog.csdn.net/u010059975/article/details/104537570">kafka延迟消息原因</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;延迟队列的实现思路&quot;&gt;&lt;a href=&quot;#延迟队列的实现思路&quot; class=&quot;headerlink&quot; title=&quot;延迟队列的实现思路&quot;&gt;&lt;/a&gt;延迟队列的实现思路&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="消息队列" scheme="https://agmtopy.gitee.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RocketMQ" scheme="https://agmtopy.gitee.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>日常笔记</title>
    <link href="https://agmtopy.gitee.io/2020/12/27/1.%E6%9D%82%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    <id>https://agmtopy.gitee.io/2020/12/27/1.%E6%9D%82%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-27T13:45:26.000Z</published>
    <updated>2021-03-27T16:13:16.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日常笔记"><a href="#日常笔记" class="headerlink" title="日常笔记"></a>日常笔记</h1><blockquote><p>用于记录常用的命令，灵感，待办之类的</p></blockquote><h2 id="docker-command"><a href="#docker-command" class="headerlink" title="docker command"></a>docker command</h2><ol><li>mysql 启动命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">3306</span>:3306 --name mysql_1 -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -d mysql:5.7.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>mongo 启动命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -itd --name mongo -p <span class="token number">27017</span>:27017 mongo --auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>设置账户</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> //创建用户并授权 db.createUser<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>user: <span class="token string">"axonUser"</span>, pwd: <span class="token string">"123456"</span>, roles <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>role: <span class="token string">"readWrite"</span>, db: <span class="token string">"interviewTest"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //更新用户权限db.grantRolesToUser<span class="token punctuation">(</span><span class="token string">"axonUser"</span>,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>role:<span class="token string">"readWrite"</span>, db:<span class="token string">"axon"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.RabbitMQ 启动命令</p><ul><li>windows cmd</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name rabbitmq -p <span class="token number">5672</span>:5672 -p <span class="token number">15672</span>:15672 -v E:<span class="token punctuation">\</span>dockerfile<span class="token punctuation">\</span>RabbitMQ:/var/lib/rabbitmq --hostname myRabbit -e <span class="token assign-left variable">RABBITMQ_DEFAULT_VHOST</span><span class="token operator">=</span>my_vhost  -e <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>admin -e <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span>admin rabbitmq:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>启动RabbitMQ admin命令</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">docker exec <span class="token operator">-</span>it rabbitmq rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;日常笔记&quot;&gt;&lt;a href=&quot;#日常笔记&quot; class=&quot;headerlink&quot; title=&quot;日常笔记&quot;&gt;&lt;/a&gt;日常笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用于记录常用的命令，灵感，待办之类的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dock</summary>
      
    
    
    
    <category term="杂记" scheme="https://agmtopy.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="guava" scheme="https://agmtopy.gitee.io/tags/guava/"/>
    
  </entry>
  
  <entry>
    <title>《Java异步编程实战》笔记</title>
    <link href="https://agmtopy.gitee.io/2020/12/12/1.%E6%9D%82%E8%AE%B0/java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://agmtopy.gitee.io/2020/12/12/1.%E6%9D%82%E8%AE%B0/java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-12T08:45:36.000Z</published>
    <updated>2021-03-27T16:13:16.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Java异步编程实战》笔记"><a href="#《Java异步编程实战》笔记" class="headerlink" title="《Java异步编程实战》笔记"></a>《Java异步编程实战》笔记</h1><h2 id="第一章-认识异步编程"><a href="#第一章-认识异步编程" class="headerlink" title="第一章 认识异步编程"></a>第一章 认识异步编程</h2><p>基础概念和场景介绍。略…</p><h2 id="第二章-显示使用线程和线程池实现异步编程"><a href="#第二章-显示使用线程和线程池实现异步编程" class="headerlink" title="第二章 显示使用线程和线程池实现异步编程"></a>第二章 显示使用线程和线程池实现异步编程</h2><p>线程和线程池的使用做了个简介，重点讲了一下线程池的实现原理</p><ul><li>线程池的实现原理<b>ThreadPoolExecutor</b></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Thread</span> wt <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Runnable</span> task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>       w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// allow interrupts</span>       <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//如果当前还有任务</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 判断线程池状态</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">Throwable</span> thrown <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                       <span class="token comment">//执行任务</span>                       task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                       <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                   task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                   w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                   w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意两个地方:1.Thread会被包装成worker对象用<b>HashSet</b>保存;2.Task是用<b>BlockingQueue</b>来进行保存</p></blockquote><h2 id="第三章-基于JDK中的Futrue实现异步编程"><a href="#第三章-基于JDK中的Futrue实现异步编程" class="headerlink" title="第三章 基于JDK中的Futrue实现异步编程"></a>第三章 基于JDK中的Futrue实现异步编程</h2><h3 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h3><ul><li>run()</li><li>get()</li><li>cancel()<blockquote><p>注意一下FutureTask的state是用volatile进行修饰，结果outcome是用state的内存屏障技术来保证可见性的</p></blockquote></li></ul><h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><ul><li>runAsync()</li><li>supplyAsync()</li><li>thenRun()</li><li>thenAccept()</li><li>thenApply()</li><li>whenComplete()</li><li>thenCompose()</li><li>thenCombine()</li><li>allOf()</li><li>anyOf()</li><li>completeExeceptionally() 异常处理</li></ul><blockquote><p>CompletableFuture默认是用ForkJoinPool,这里需要注意下</p></blockquote><h2 id="Spring框架中的异步执行"><a href="#Spring框架中的异步执行" class="headerlink" title="Spring框架中的异步执行"></a>Spring框架中的异步执行</h2><h3 id="TaskExecutor"><a href="#TaskExecutor" class="headerlink" title="TaskExecutor"></a>TaskExecutor</h3><p>略…</p><h3 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h3><p>@EnableAsync是通过AsyncConfigurationSelector进行加载，</p><h2 id="基于反应式编程实现异步编程"><a href="#基于反应式编程实现异步编程" class="headerlink" title="基于反应式编程实现异步编程"></a>基于反应式编程实现异步编程</h2><blockquote><p>反应式编程是一种涉及数据流和变化传播的异步编程范式。这意味着可以通过所采用的编程语言轻松的表达静态或动态数据流。</p></blockquote><p>反应式编程主要是强调对数据的处理过程是主动的，是以数据为核心参与对象的过程。传统的编程模型下是以业务流程为核心，通过业务流程将数据串联起来。</p><h3 id="Reactive-Streams规范"><a href="#Reactive-Streams规范" class="headerlink" title="Reactive Streams规范"></a>Reactive Streams规范</h3><blockquote><p> Reactive Streams规范是提供一个使用非阻塞回压功能对异步流进行处理的标准，也就是定义反应式编程的规范</p></blockquote><h3 id="基于RxJava实现异步编程"><a href="#基于RxJava实现异步编程" class="headerlink" title="基于RxJava实现异步编程"></a>基于RxJava实现异步编程</h3><p>==RxJava==是Reactive Extensions的java语言实现，具体的使用方法可参考官网</p><h3 id="基于Reactor实现异步编程"><a href="#基于Reactor实现异步编程" class="headerlink" title="基于Reactor实现异步编程"></a>基于Reactor实现异步编程</h3><p>==Reactor==是另外一个Java语言下的是Reactive实现，目前在webFlux中作为反应式框架进行使用</p><p>这里有一个软件发展的趋势就是传统的编程模型是基于cpu多核技术发展的还不是很好的时候提出来的，已经不太适用于现代多核cpu架构。因此基于现代cpu多核架构和传统软件架构面对的问题，提出了反应式编程模型。这种编程方式也许不是很便于人类理解，但是确拥有更高的资源利用率。如果未来出现一个像spring对于java那样对于反应式编程的框架，反应式编程理念应该会得到更好的发展。</p><h2 id="Web-Servlet的异步非阻塞处理"><a href="#Web-Servlet的异步非阻塞处理" class="headerlink" title="Web Servlet的异步非阻塞处理"></a>Web Servlet的异步非阻塞处理</h2><p>在Servlet3.0中提供了异步处理能力，让请求线程和处理线程不在是1：1的关系了,这里就可以更好的利用服务器的性能。<br>这里有一个问题什么Servlet 3才提出的异步处理能力喃？<br>这是因为servlet是基http1.1的方案，http1.1开始支持http可以保持长连接的形式，hhtp1.1方案是1999年开始<br>在Servlet3.1中提供了非阻塞I/O的处理方式:Web容器中的非阻塞请求处理有助于增加Web容器可同时处理请求的数量，允许我们在ServletInputStream上通过函数setReadListener注册一个监听器，该监听器在发现内核中有数据时才会进行回调处理函数。</p><h3 id="spring-MVC的异步处理能力"><a href="#spring-MVC的异步处理能力" class="headerlink" title="spring MVC的异步处理能力"></a>spring MVC的异步处理能力</h3><blockquote><p>Spring MVC是围绕前端控制器模式设计，由中央处理器Servlet DispatcheaServlet作为请求处理进行路由分派，实际请求处理工作由可配置处理类进行执行。在Spring MVC中通过调用request.startAsync()将ServletRequest设置为异步模式，这样可以让Servlet在推出的同时，让响应保持打开状态。</p></blockquote><h2 id="Spring-web-Flux"><a href="#Spring-web-Flux" class="headerlink" title="Spring web Flux"></a>Spring web Flux</h2><p>webFlux与spring mvc的对比<br><img src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/spring-mvc-and-webflux-venn.png" alt="webFlux vs spring mvc"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.infoworld.com/article/2077995/java-concurrency-asynchronous-processing-support-in-servlet-3-0.html?page=1">infoworld关于servlet 3.0的介绍</a><br><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html">spring官网关于webFlux的文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《Java异步编程实战》笔记&quot;&gt;&lt;a href=&quot;#《Java异步编程实战》笔记&quot; class=&quot;headerlink&quot; title=&quot;《Java异步编程实战》笔记&quot;&gt;&lt;/a&gt;《Java异步编程实战》笔记&lt;/h1&gt;&lt;h2 id=&quot;第一章-认识异步编程&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="java并发" scheme="https://agmtopy.gitee.io/categories/java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="笔记" scheme="https://agmtopy.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础概念入门(二)</title>
    <link href="https://agmtopy.gitee.io/2020/11/29/1.%E6%9D%82%E8%AE%B0/Docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8(%E4%BA%8C)/"/>
    <id>https://agmtopy.gitee.io/2020/11/29/1.%E6%9D%82%E8%AE%B0/Docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8(%E4%BA%8C)/</id>
    <published>2020-11-29T13:32:37.000Z</published>
    <updated>2020-11-30T15:52:16.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h2><blockquote><p>Dockerfile文件是用来构建镜像的文本文件，文本文件中包含了一系列构建镜像所需的指令和说明</p></blockquote><h2 id="java基础环境"><a href="#java基础环境" class="headerlink" title="java基础环境"></a>java基础环境</h2><ul><li>Dockerfile</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基础镜像版本</span>FROM java:latest<span class="token comment"># 设置工作目录</span>WORKDIR /app<span class="token comment"># 复制初始文件到工作目录中</span>COPY <span class="token builtin class-name">.</span> /app<span class="token comment"># 设置Java环境变量</span>ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/binENV <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/jreENV <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="token variable">$&#123;JRE_HOME&#125;</span>/lib<span class="token comment"># 编译</span>RUN <span class="token punctuation">[</span><span class="token string">"/usr/lib/jvm/java-8-openjdk-amd64/bin/javac"</span>,<span class="token string">"Docker_java.java"</span><span class="token punctuation">]</span><span class="token comment"># 运行</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"/usr/lib/jvm/java-8-openjdk-amd64/bin/java"</span>, <span class="token string">"Docker_java"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dockerfile文件需要在当前工作目录下编写，Docker_java.java文件也需要在当前工作目录下</p><ul><li><p>Docker_java.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Docker_java</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Docker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>build命令和启动命令</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -rm 表示构建完成后删除中间镜像</span><span class="token comment"># -f  表示指定Dockerfile文件,默认为当前目录下的Dockerfile文件 </span><span class="token comment"># -t  表示对镜像打tag</span>docker build --rm -f <span class="token string">"Dockerfile"</span> -t docker_java:0.0.1<span class="token comment">#运行命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>docker run docker_java:0.0.1</code></pre><pre class="line-numbers language-none"><code class="language-none">## mysql环境&gt; 构建一个账号名称为test,密码为test并且自定义初始化sqlmysql容器- Dockerfile&#96;&#96;&#96;bash#基础版本FROM mysql:5.7.22#环境变量ENV TZ&#x3D;Asia&#x2F;Shanghai \    MYSQL_DATABASE&#x3D;test \    MYSQL_USER&#x3D;test \    MYSQL_PASSWORD&#x3D;test \    MYSQL_ROOT_PASSWORD&#x3D;test#将sql目录下的文件全部拷贝到目标文件夹下COPY sql&#x2F;. &#x2F;docker-entrypoint-initdb.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>init.sql</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>test<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>test<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>table_a<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>table_a<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sync_pk<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>hos_code<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>study_iuid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>study_content<span class="token punctuation">`</span> <span class="token keyword">mediumtext</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token punctuation">,</span><span class="token punctuation">`</span>study_state<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>remark<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sync_pk<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_unicode_ci <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build --rm -f <span class="token string">"Dockerfile"</span> -t mysqlc:0.0.1 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>运行命令<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#与mysql启动一致</span>docker run -itd --name mysql_local mysqlc:0.0.1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Dockerfile文件&quot;&gt;&lt;a href=&quot;#Dockerfile文件&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile文件&quot;&gt;&lt;/a&gt;Dockerfile文件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Dockerfile文件是用来构建</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何优化复杂流程分析和建模思考</title>
    <link href="https://agmtopy.gitee.io/2020/11/08/1.%E6%9D%82%E8%AE%B0/%E5%9F%BA%E4%BA%8E%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%92%8C%E5%BB%BA%E6%A8%A1%E6%80%9D%E8%80%83/"/>
    <id>https://agmtopy.gitee.io/2020/11/08/1.%E6%9D%82%E8%AE%B0/%E5%9F%BA%E4%BA%8E%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%92%8C%E5%BB%BA%E6%A8%A1%E6%80%9D%E8%80%83/</id>
    <published>2020-11-07T17:02:10.000Z</published>
    <updated>2020-11-30T15:52:16.931Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>架构的核心挑战是如何处理当下或未来可能出现的快速增长的软件复杂性，因此越是大型系统在架构设计上越是要简单。</p></blockquote><h2 id="软件的复杂度为什么会增加？"><a href="#软件的复杂度为什么会增加？" class="headerlink" title="软件的复杂度为什么会增加？"></a>软件的复杂度为什么会增加？</h2><p>先阐述观点在实际开发中软件的复杂性是随着时间愈发陡峭的，复杂度的提升近似于y=x^2的曲线。主要是基于以下几个情况得出的结论：</p><ol><li><B>软件的复杂程度是逐渐迭代出来的</B><br>拿我之前的项目举例，最开始业务需求可能只是围绕商品的一个业务，根据这个业务设计流程，后来慢慢的迭代过程中逐渐把商品相关的属性完善从而又能支撑起开展其他的业务流程。随着业务流程的膨胀和交汇，软件的复杂度会不断的增加。</li><li><B>代码迭代过程中的理解和维护</B><br>软件对应的实体即为代码，在相同的架构下不同的理解会有不同的代码实现。由于大型项目往往是多人进行协作开发，需要统一大家的理解。通俗的说法就是多个人写出来的代码就像一个人写出来的一样，要完成这样的合作往往是很困难的。这里在补充阐述一下，并不是反对有着强烈个人代码风格的方式，主要还是想表达的是同一团队在面对同一项目时对软件的架构、技术、业务理解应该是尽量要<B>趋同<B>的。</li></ol><blockquote><p>业务架构师最重要的工作不是设计软件结构，而是应该通过API、团队设计准则、细节的关注把控来控制软件复杂度的增长。</p></blockquote><h2 id="如何定义软件复杂的维度？"><a href="#如何定义软件复杂的维度？" class="headerlink" title="如何定义软件复杂的维度？"></a>如何定义软件复杂的维度？</h2><p>软件的复杂度可以定义为让人理解和维护修改的困难程度，因此我们可以将软件的复杂程度拆分为两个部分</p><ol><li>软件的认知成本：理解软件的接口、设计和实现上的成本，简单说就是看懂代码的时间成本和脑力成本</li><li>软件的协同成本：修改维护软件时，所需要付出的成本<br>举个例子来说，软件的扩展性不好就是协同成本过高，会导致新增功能时需要进行大量修改，并且修改后还会进一步的增加认知负担</li></ol><h3 id="认知负担"><a href="#认知负担" class="headerlink" title="认知负担"></a>认知负担</h3><ol><li>定义新的概念带来的认知负担，这种负担与所定义的概念与现实模型的关联度相关</li><li>逻辑符合思维习惯的程度</li></ol><ul><li>逻辑是否符合思维习惯的程度，这个因人而异，最好在实际的开发过程中有统一的规范，例如强烈建议使用卫语句、使用Optional等</li><li>模型失配：模型的失配指的是定义的模型与现实世界的业务模型存在较大差异所带来的</li></ul><ol start="3"><li>接口设计不当</li></ol><ul><li><p>需要调用者使用初始化才能正常工作的接口。将初始化的职责放到了调用方，但是调用方在面对复杂的初始化参数时，就需要去了解每个参数所代表的动作和意义，承担了本来属于接口实现所承担的职责。这里可以使用工厂模式来进行处理，在接口工厂类中根据接口提供的场景进行处理</p></li><li><p>一个接口中不同的方法提供了相同的功能</p></li></ul><ol start="4"><li><p>违反开闭原则，一个简单的修改需要在多处中进行更新<br>在业务开发中，往往会为了进度或者害怕新的改动会改变已有代码的逻辑因此去copy-past大量类似的逻辑和功能，这样会导致一个简单的修改需要更多的精力在多处中进行去更新，代码的复杂度也会提高</p></li><li><p>命名 尽量要做到通过的命名就知道变量、方法、类、模块等要<B>做什么</B>，重点在于做什么上面而不是是什么上面。</p></li></ol><h3 id="协同成本"><a href="#协同成本" class="headerlink" title="协同成本"></a>协同成本</h3><blockquote><p>协同成本是新增、修改功能所付出的时间成本和脑力成本。</p></blockquote><ol><li><p>在微服务架构下，模块/服务的切分是和团队对齐的，即”组织架构决定系统架构”,组织架构最佳的划分是按照系统架构来进行的，当组织划分不好时，往往会导致重复的工作。</p></li><li><p>服务间相互依赖，服务间相互依赖主要有两种种形式组和、继承。继承会呈现出更强制的关系，因此也会有更大的协同复杂性。</p></li><li><p>可测试性带来的协同成本。这里指的是由于单元测试不完善需要更完善的集成测试来保证软件的正确性。</p></li><li><p>文档  降低协同成本的一个好方法就是完善文档，包括业务文档、设计文档、接口文档等，但是这部分工作并不会直接产生效益，因此积极性都不是很高。</p></li></ol><h2 id="如何应对软件不断增长的复杂度？"><a href="#如何应对软件不断增长的复杂度？" class="headerlink" title="如何应对软件不断增长的复杂度？"></a>如何应对软件不断增长的复杂度？</h2><p> 每一次无意识的代码的改动都会产生依赖/耦合从而增加系统的复杂性，软件的复杂程度恶化到一定程度后就会导致系统不可避免的失败。因此需要我们对复杂度增加采用零容忍的态度。</p><ul><li><p>软件的复杂度带来的影响往往是滞后的，在看到影响时也许已经过去了很久</p></li><li><p>在进行代码review时，每一个额外的复杂度设计在整个系统的角度下都显得微不足道，但是千里之堤以蝼蚁之溃。</p></li><li><p>破窗效应Broken window：一个建筑，当有了一个破窗而不及时修补，这个建筑就会被侵入住认为是无人居住的、风雨更容易进来，更多的窗户被人有意打破，很快整个建筑会加速破败。这就是破窗效应，在软件的质量控制上这个效应非常恰当,所以有问题尽快修补。</p><p>零容忍，并不是不让复杂度增长：我们都知道这是不可能的。我们需要的是尽力控制。因为进度而临时打破窗户也能接受，但是要尽快补上。</p><h2 id="基于复杂业务如何分析？"><a href="#基于复杂业务如何分析？" class="headerlink" title="基于复杂业务如何分析？"></a>基于复杂业务如何分析？</h2></li></ul><h3 id="业务的差异性"><a href="#业务的差异性" class="headerlink" title="业务的差异性"></a>业务的差异性</h3><p> if/else是由于业务上不同的场景会有不同的业务逻辑，这样的差异性可以很方便的用if/else实现，但是不符合开闭原则，在扩展时代码会堆砌的越来越庞大。</p><p> 如何消除if/else？</p><ul><li><p>多态扩展:利用面向对象的多态特性，实现代码的复用和扩展</p></li><li><p>代码分离:对不同的场景用不同的代码流程来实现业务和代码的隔离</p></li><li><p>多态扩展<br>多态扩展有继承和组合两种方式。继承的话不要使用重载特性，重载特性不是继承父类的方法。组合类似于策略模式，也就是把需要扩展的部分进行抽象、封装成需要被组合的对象。用多态的特性来移除业务的差异性，这样也更符合实体之间的关系。</p></li><li><p>代码分离<br>代码分离，代码的冗余和复用性不好，但是同样会达到业务代码彼此独立的状态</p></li></ul><h3 id="多维分析"><a href="#多维分析" class="headerlink" title="多维分析"></a>多维分析</h3><p>根据我们的分析在面对业务的差异时，我们可以用多态扩展和代码分离来实现，但是什么时候来用多态扩展？什么时候用代码分离楠?对于这个问题我们可以采用<B>矩阵分析法</B></p><p>我们可以用一个矩阵，纵轴代表业务场景、横轴代表步骤，里面的内容代表每一个动作，这样我们就可以得到这样的一个表格</p><table><thead><tr><th>-</th><th>step0</th><th>step1</th><th>step2</th></tr></thead><tbody><tr><td>business0</td><td>1.action0<br>2.action1</td><td>1.action1</td><td>1.action1<br>2.action2</td></tr><tr><td>business1</td><td>同上</td><td>同上</td><td>1.action1</td></tr><tr><td>business2</td><td>无</td><td>无</td><td>1.action1</td></tr></tbody></table><p>通过这样一个矩阵我们就可以分析出business0和business1适用于多态扩展，而business2更加适用于代码分离来进行实现。</p><p>这样的矩阵在OOP里被称为分析矩阵，主要是用来分析业务涉及要素过多、信息量太大的场景。</p><h3 id="流程分解"><a href="#流程分解" class="headerlink" title="流程分解"></a>流程分解</h3><p>流程分解是对业务过程进行详细的分解，然后在使用<B>结构化</B>的方法聚合成一个个step，在将step组合成业务，最后形成一个类似于金字塔形状自上而下的流程认知。</p><h3 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h3><p>领域模型指的是模型对象避免使用贫血模式，而应该使用充血模式，让模型具有业务逻辑，从而在复用模型的时候就能复用业务逻辑。充血的模型也更符合现实模型中对象的定义。</p><h2 id="分析矩阵"><a href="#分析矩阵" class="headerlink" title="分析矩阵"></a>分析矩阵</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>分析矩阵的定义来源于《设计模式解析》第16章,作者通过以下几个方法步骤完成对系统中变化的分析，从而设计出合适的模式</p><blockquote><p>1.找到某种特定情况下最重要的特性，并用矩阵将他们关联起来<br>2.继续处理其他情况，并且按需扩展矩阵<br>3.用新的概念扩展分析矩阵<br>4.在行维度发现规则<br>5.在列维度发现特定情况<br>6.从分析中确定模式<br>7.得到高层设计</p></blockquote><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>最开始需求很简单：只处理美国和加拿大的订单。系统必须进行处理的特性清单如下：</p><ul><li>为美国和加拿大构建一个销售订单系统</li><li>根据所在国家计算运费</li><li>运费还应该以所在国家的货币进行支付</li><li>在美国，税额需按当地计算</li><li>使用美国邮政规则验证地址</li><li>在加拿大使用联邦快递发货时，需要同时缴纳联邦政府销售税和地方销售税</li><li>加拿大邮寄包裹有违禁品邮寄限制</li><li>美国的订单号继承于加拿大订单号规则，又有所改变</li></ul><p>从使用场景我们可以得知，需求分为两种：美国、加拿大，因此我们可以根据需求场景分析得出这样的矩阵</p><table><thead><tr><th>情况</th><th>过程</th></tr></thead><tbody><tr><td>美国</td><td>1.使用美元计费<br>2.使用美国邮政规则校验地址<br>3.按照当地计算税额<br>4.美制加拿大规则订单号规则</td></tr><tr><td>加拿大</td><td>1.使用美元计费<br>2.使用美国邮政规则校验地址<br>3.按照加拿大规定计算销售税4. 违禁品邮寄限制5.加拿大规则订单号规则</td></tr></tbody></table><p>通过这样一个具有详细功能的矩阵，我们可以直接提炼出按照步骤进行分解的矩阵</p><table><thead><tr><th>步骤</th><th>美国</th><th>加拿大</th></tr></thead><tbody><tr><td>货币单位</td><td>美元</td><td>加元</td></tr><tr><td>校验规则</td><td>美国邮政规则</td><td>加拿大邮政规则</td></tr><tr><td>计算税额</td><td>美国税额政策</td><td>加拿大税额政策</td></tr><tr><td>邮寄限制</td><td>未知</td><td>加拿大邮寄限制</td></tr><tr><td>订单号规则</td><td>美制加拿大规则</td><td>加拿大规则</td></tr></tbody></table><p>通过这个矩阵我们发现美国的邮寄限制未知，这样我们可以询问业务专家得到答案。通过这样的矩阵我们还可以分析出</p><table><thead><tr><th>步骤</th><th>美国</th><th>加拿大</th></tr></thead><tbody><tr><td>货币单位</td><td>多态扩展</td><td>多态扩展</td></tr><tr><td>校验规则</td><td>代码分离</td><td>代码分离</td></tr><tr><td>计算税额</td><td>代码分离</td><td>代码分离</td></tr><tr><td>邮寄限制</td><td>代码分离</td><td>代码分离</td></tr><tr><td>订单号规则</td><td>多态扩展</td><td>多态扩展</td></tr></tbody></table><blockquote><p>参考文档</p></blockquote><ul><li><a href="https://developer.aliyun.com/article/770886">警惕软件复杂度困局</a></li><li><a href="https://mp.weixin.qq.com/s/u7geoZNpLtfr_crkXVHjAg">面对复杂业务，if-else coder 如何升级</a></li><li><a href="https://developer.aliyun.com/article/712581">如何写复杂业务代码？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;架构的核心挑战是如何处理当下或未来可能出现的快速增长的软件复杂性，因此越是大型系统在架构设计上越是要简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;软件的复杂度为什么会增加？&quot;&gt;&lt;a href=&quot;#软件的复杂度为什么会增加？&quot; clas</summary>
      
    
    
    
    <category term="杂记" scheme="https://agmtopy.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="领域建模" scheme="https://agmtopy.gitee.io/tags/%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo SPI的加载机制</title>
    <link href="https://agmtopy.gitee.io/2020/10/29/8.duboo%E7%AC%94%E8%AE%B0/1.%20Dubbo%20SPI%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>https://agmtopy.gitee.io/2020/10/29/8.duboo%E7%AC%94%E8%AE%B0/1.%20Dubbo%20SPI%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</id>
    <published>2020-10-29T14:58:51.000Z</published>
    <updated>2020-11-30T15:52:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dubbo-SPI的加载机制"><a href="#Dubbo-SPI的加载机制" class="headerlink" title="Dubbo SPI的加载机制"></a>Dubbo SPI的加载机制</h1><p>SPI全称为Service Provider Interface，是一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类。</p><h2 id="SPI示例"><a href="#SPI示例" class="headerlink" title="SPI示例"></a>SPI示例</h2><h3 id="Java-SPI示例"><a href="#Java-SPI示例" class="headerlink" title="Java SPI示例"></a>Java SPI示例</h3><ul><li><p>Robot</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Robot</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>RobotImpl</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bumblebee</span> <span class="token keyword">implements</span> <span class="token class-name">Robot</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, I am Bumblebee."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptimusPrime</span> <span class="token keyword">implements</span> <span class="token class-name">Robot</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, I am Optimus Prime."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>MATA/service</li></ul><pre class="line-numbers language-none"><code class="language-none">com.agmtopy.testcontainers.completableFuture.impl.Bumblebeecom.agmtopy.testcontainers.completableFuture.impl.OptimusPrime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>JavaSpiTest</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Robot</span><span class="token punctuation">></span></span> robots <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Robot</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    robots<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Robot</span><span class="token operator">::</span><span class="token function">sayHello</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dubbo-SPI示例"><a href="#Dubbo-SPI示例" class="headerlink" title="Dubbo SPI示例"></a>Dubbo SPI示例</h3><ul><li><p>Robot</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SPI</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Robot</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>MATA/dubbo</p></li></ul><pre class="line-numbers language-none"><code class="language-none">optimusPrime &#x3D; com.agmtopy.testcontainers.completableFuture.impl.Bumblebeebumblebee &#x3D; com.agmtopy.testcontainers.completableFuture.impl.OptimusPrime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dubbo-SPI的加载机制&quot;&gt;&lt;a href=&quot;#Dubbo-SPI的加载机制&quot; class=&quot;headerlink&quot; title=&quot;Dubbo SPI的加载机制&quot;&gt;&lt;/a&gt;Dubbo SPI的加载机制&lt;/h1&gt;&lt;p&gt;SPI全称为Service Provider</summary>
      
    
    
    
    <category term="dubbo" scheme="https://agmtopy.gitee.io/categories/dubbo/"/>
    
    
    <category term="dubbo" scheme="https://agmtopy.gitee.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>《如何高效学习》碎碎念</title>
    <link href="https://agmtopy.gitee.io/2020/10/19/1.%E6%9D%82%E8%AE%B0/%E3%80%8A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E3%80%8B%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>https://agmtopy.gitee.io/2020/10/19/1.%E6%9D%82%E8%AE%B0/%E3%80%8A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E3%80%8B%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2020-10-19T14:34:36.000Z</published>
    <updated>2020-11-30T15:52:16.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《如何高效学习》碎碎念"><a href="#《如何高效学习》碎碎念" class="headerlink" title="《如何高效学习》碎碎念"></a>《如何高效学习》碎碎念</h1><p>学习的步骤拆分为</p><ol><li>获取知识</li><li>理解知识</li><li>扩展知识</li><li>纠错</li><li>应用</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《如何高效学习》碎碎念&quot;&gt;&lt;a href=&quot;#《如何高效学习》碎碎念&quot; class=&quot;headerlink&quot; title=&quot;《如何高效学习》碎碎念&quot;&gt;&lt;/a&gt;《如何高效学习》碎碎念&lt;/h1&gt;&lt;p&gt;学习的步骤拆分为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取知识&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://agmtopy.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="如何高效学习" scheme="https://agmtopy.gitee.io/tags/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>通过实例理解CompletableFuture并发框架</title>
    <link href="https://agmtopy.gitee.io/2020/10/19/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/15.%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E7%90%86%E8%A7%A3CompletableFuture%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    <id>https://agmtopy.gitee.io/2020/10/19/2.%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86/15.%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E7%90%86%E8%A7%A3CompletableFuture%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6/</id>
    <published>2020-10-19T14:20:11.000Z</published>
    <updated>2020-11-30T15:52:16.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过实例理解CompletableFuture并发框架"><a href="#通过实例理解CompletableFuture并发框架" class="headerlink" title="通过实例理解CompletableFuture并发框架"></a>通过实例理解CompletableFuture并发框架</h1><p><b>CompletableFuture</b>实现<strong>Future</strong>、<strong>CompletionStage</strong>;<strong>CompletionStage</strong>的定义是作为一个用于异步执行中的处理阶段，适用于lambda表达式计算过程中。<strong>Future</strong>定义是作为异步返回值容器。下面通过一系列实列先来熟悉CompletableFuture能够完成的功能。</p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><ol><li>初始化一个完成的CompletableFuture</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 初始化一个完成的CompletableFuture */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> completableFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"完成结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//是否完成</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"completableFuture已经完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//getNow()返回</span>    <span class="token class-name">String</span> returnMsg <span class="token operator">=</span> completableFuture<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"完成结果"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>returnMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"completableFuture.getNow()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建一个简单的异步stage</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建一个简单的异步stage */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//是否是守护线程</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"是否是守护线程:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> done <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future.isDone() = "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>对完成的CompletableFuture继续同步进行处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 对完成的CompletableFuture继续同步进行处理 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//thenApply如果没有指定执行线程池那么就会在当前线程中执行</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> message <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程为"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回结果为"</span> <span class="token operator">+</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对完成的CompletableFuture继续异步进行处理(有返回结果)</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 对完成的CompletableFuture继续异步进行处理 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//thenApplyAsync默认使用ForkJoinPool.commonPool()线程池</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> message <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程为"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回结果为"</span> <span class="token operator">+</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>异步消费结果(无返回值)</li></ol><ul><li>thenAccept(Consumer&lt;? super T&gt; action)、thenAcceptAsync(Consumer&lt;? super T&gt; action,Executor executor)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 异步消费结果(无返回值) */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>item <span class="token operator">-></span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>计算时出现异常</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 取消&amp;异常处理 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> i1 <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//join()不会显示抛出异常</span>    future<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//get()方法会抛出异常</span>    future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//cancel()方法会取消计算</span>    future<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>BiConsumer同时处理两个stage结果</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * BiConsumer支持对两个Stage的结果进行操作 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">completableFutureExample6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> original <span class="token operator">=</span> <span class="token string">"message"</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">//BiConsumer</span>                    <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-></span> result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="Future接口介绍"><a href="#Future接口介绍" class="headerlink" title="Future接口介绍"></a>Future接口介绍</h3><blockquote><p>JDK5新增了Future接口，用于描述一个异步计算的结果。但是对于结果的获取却是很不方便，只能通过阻塞或者轮询的方式得到任务的结果。</p></blockquote><h3 id="CompletableFuture类介绍"><a href="#CompletableFuture类介绍" class="headerlink" title="CompletableFuture类介绍"></a>CompletableFuture类介绍</h3><blockquote><p>CompletableFuture提供了非常强大的 Future 的扩展功能，可以帮助我们简化异步编程的复杂性，并且提供了函数式编程的能力，可以通过回调的方式处理计算结果，也提供了转换和组合 CompletableFuture 的方法。</p></blockquote><blockquote><p>对于阻塞或者轮询方式，依然可以通过 CompletableFuture 类的 CompletionStage和Future接口方式支持。CompletableFuture 类声明了 CompletionStage 接口，CompletionStage 接口实际上提供了同步或异步运行计算的舞台，所以我们可以通过实现多个 CompletionStage 命令，并且将这些命令串联在一起的方式实现多个命令之间的触发。</p></blockquote><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.ibm.com/zh/articles/j-cf-of-jdk8/">通过实例理解 JDK8 的 CompletableFuture</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过实例理解CompletableFuture并发框架&quot;&gt;&lt;a href=&quot;#通过实例理解CompletableFuture并发框架&quot; class=&quot;headerlink&quot; title=&quot;通过实例理解CompletableFuture并发框架&quot;&gt;&lt;/a&gt;通过实例理</summary>
      
    
    
    
    <category term="java并发" scheme="https://agmtopy.gitee.io/categories/java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="CompletableFuture" scheme="https://agmtopy.gitee.io/tags/CompletableFuture/"/>
    
  </entry>
  
  <entry>
    <title>mockito使用小结</title>
    <link href="https://agmtopy.gitee.io/2020/10/13/1.%E6%9D%82%E8%AE%B0/mockito%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://agmtopy.gitee.io/2020/10/13/1.%E6%9D%82%E8%AE%B0/mockito%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</id>
    <published>2020-10-13T14:02:22.000Z</published>
    <updated>2020-11-30T15:52:16.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mockito使用小结"><a href="#mockito使用小结" class="headerlink" title="mockito使用小结"></a>mockito使用小结</h1><p>mock框架是测试中必不可少的，它的主要作用是模拟一些在应用中不容易构造或者比较复杂的对象，从而把测试与测试边界以外的对象隔离开。目前市面上流行的mock框架主要有Mockito、JMock、EasyMock、JMock。这几种框架的对比如下</p><h2 id="Mockito使用示例"><a href="#Mockito使用示例" class="headerlink" title="Mockito使用示例"></a>Mockito使用示例</h2><ul><li>模拟对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">mockMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//模拟一个MockTestInterface的实例</span>    <span class="token class-name">MockTestInterface</span> mock <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">MockTestInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//未指定方法返回值因此打印null</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模拟方法的返回值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">mockMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//模拟一个MockTestInterface的实例</span>    <span class="token class-name">MockTestInterface</span> mock <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">MockTestInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.mock方式不会执行指定方法</span>    <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">doReturn</span><span class="token punctuation">(</span><span class="token string">"mock method"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"mock method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.stub方式会执行指定方法</span>    <span class="token class-name">MockTestInterface</span> mock1 <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token class-name">MockTestInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mock1<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"mock method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>mock1<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"mock method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模拟方法抛出异常</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">mockMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//模拟一个MockTestInterface的实例</span>    <span class="token class-name">MockTestInterface</span> mock <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">MockTestInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"mock NPE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> mock<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"mock NPE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps:Mock与Stub的区别<br>Mock主要是对不可信赖的代码进行”模拟行为”，Stub主要是将不可信赖的代码片段用”简化”的代码片段进行替代</p><p><a href="https://segmentfault.com/a/1190000010385247">https://segmentfault.com/a/1190000010385247</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mockito使用小结&quot;&gt;&lt;a href=&quot;#mockito使用小结&quot; class=&quot;headerlink&quot; title=&quot;mockito使用小结&quot;&gt;&lt;/a&gt;mockito使用小结&lt;/h1&gt;&lt;p&gt;mock框架是测试中必不可少的，它的主要作用是模拟一些在应用中不容易</summary>
      
    
    
    
    <category term="mockito" scheme="https://agmtopy.gitee.io/categories/mockito/"/>
    
    
    <category term="mockito" scheme="https://agmtopy.gitee.io/tags/mockito/"/>
    
  </entry>
  
  <entry>
    <title>重构--改善既有代码的设计笔记</title>
    <link href="https://agmtopy.gitee.io/2020/09/22/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <id>https://agmtopy.gitee.io/2020/09/22/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-22T15:56:02.000Z</published>
    <updated>2020-11-30T15:52:16.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重构–改善既有代码的设计笔记"><a href="#重构–改善既有代码的设计笔记" class="headerlink" title="重构–改善既有代码的设计笔记"></a>重构–改善既有代码的设计笔记</h1><ul><li><p>重构是在不改变软件可观察的行为的前提下改善其内部结构</p></li><li><p>坚持持续不断的重构行为来整理代码</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重构–改善既有代码的设计笔记&quot;&gt;&lt;a href=&quot;#重构–改善既有代码的设计笔记&quot; class=&quot;headerlink&quot; title=&quot;重构–改善既有代码的设计笔记&quot;&gt;&lt;/a&gt;重构–改善既有代码的设计笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;重构是在不改变软件可观察的</summary>
      
    
    
    
    <category term="设计模式" scheme="https://agmtopy.gitee.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://agmtopy.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="重构" scheme="https://agmtopy.gitee.io/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础概念入门(一)</title>
    <link href="https://agmtopy.gitee.io/2020/09/15/1.%E6%9D%82%E8%AE%B0/Docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
    <id>https://agmtopy.gitee.io/2020/09/15/1.%E6%9D%82%E8%AE%B0/Docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8(%E4%B8%80)/</id>
    <published>2020-09-15T14:44:43.000Z</published>
    <updated>2020-11-30T15:52:16.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker实战"><a href="#Docker实战" class="headerlink" title="Docker实战"></a>Docker实战</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li>容器使用</li></ul><table><thead><tr><th>功能</th><th>命令</th><th>参数</th></tr></thead><tbody><tr><td>获取镜像</td><td>docker pull imageName</td><td></td></tr><tr><td>启动镜像(create&amp;start)</td><td>docker run imageName</td><td>-i:交互式 -t:终端 -d:后台运行 -p portId:portId:指定端口</td></tr><tr><td>查看所有镜像</td><td>docker ps -a</td><td></td></tr><tr><td>启动已存在的镜像</td><td>docker start imageId/imageName</td><td></td></tr><tr><td>停止容器</td><td>docker stop imageId</td><td></td></tr><tr><td>重启容器</td><td>docker restart imageId</td><td></td></tr><tr><td>进入容器</td><td>docker attach</td><td>exec imageId</td></tr><tr><td>删除容器</td><td>docker rm -f imageId</td><td></td></tr><tr><td>删除不在使用的镜像</td><td>docker image prune</td><td>-a:全部</td></tr></tbody></table><h4 id="Dockerfile书写原则"><a href="#Dockerfile书写原则" class="headerlink" title="Dockerfile书写原则"></a>Dockerfile书写原则</h4><blockquote><p>Dockerfile是构建docker镜像的一种方式，推荐作为生产环境构建镜像的方式。</p></blockquote><ol><li>单一原则<br>容器的本质是进程，一个容器代表一个进程。因此不同功能的应用应该拆分为不同的容器，每个容器负责单一的业务进程。</li><li>提供注释信息</li><li>保持容器最小化</li><li>合理选择基础镜像<br>容器的核心是应用，因此只要基础镜像能够满足应用的运行环境即可。</li><li>使用.dockerignore文件<br>.dockerignore文件允许我们在构建时忽略一些不需要参与构建的文件，从而提高构建效率。</li><li>尽量使用构建缓存</li></ol><ul><li>每一条Dockerfile指令都会提交一个镜像层，下一条指令都是基于上一条指令进行构建。如果构建时发现构建的镜像层的父镜像层已经存在，且下一条指令使用了相同的指令即命中缓存。</li></ul><ol start="7"><li><p>正确设置时区<br>从Docker Hub拉取的官方操作系统镜像大多数都是UTC时间，如果在容器中需要使用东八区时间，需要进行修改</p></li><li><p>使用国内软件源加快镜像构建速度</p></li><li><p>最小化镜像层数</p></li></ol><h4 id="Dockerfile编写建议"><a href="#Dockerfile编写建议" class="headerlink" title="Dockerfile编写建议"></a>Dockerfile编写建议</h4><ol><li><p>RUN指令在构建时将会生成一个镜像层并且执行RUN指令后面的内容</p></li><li><p>CMD和ENTRYPOINT都是容器运行的命令入口；区别在于ENTRYPOINT指令启动容器时，需要用–entrypoint参数才能覆盖Dockerfile中的ENTRYPONT指令；CMD设置的命令则可以被docker run后面的参数直接覆盖</p></li><li><p>CMD/ENTRYPOINT的使用有两种格式；1.json数组格式的exec模式 2.command param格式的shell模式。这两种格式的区别在于启动容器后1号进程的区别。exec模式启动的进程即为容器的1号进程，而shell模式启动的进程不是容器的1号进程。</p></li><li><p>add和copy的区别。add是将外部资源加载到容器中这样会扩大容器体积，copy是将本地文件向容器中拷贝，可以更好的利用构建缓存，有效减小镜像体积。</p></li></ol><ul><li>反面例子<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ADD http://pyropus.ca/software/memtester/old-versions/memtester-4.3.0.tar.gz /tmp/RUN <span class="token function">tar</span> -xvf /tmp/memtester-4.3.0.tar.gz -C /tmpRUN <span class="token function">make</span> -C /tmp/memtester-4.3.0 <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -C /tmp/memtester-4.3.0 <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>替代例子</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RUN <span class="token function">wget</span> -O /tmp/memtester-4.3.0.tar.gz http://pyropus.ca/software/memtester/old-versions/memtester-4.3.0.tar.gz <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> -xvf /tmp/memtester-4.3.0.tar.gz -C /tmp <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -C /tmp/memtester-4.3.0 <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -C /tmp/memtester-4.3.0 <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h4><blockquote><p>Docker是使用Linux的Namespace技术实现各种资源隔离；Namespace是Linux内核的一项功能，该功能对内核资源进行分区，使一组进程只能看到一组资源，而另一组进程看到另外一组资源。</p></blockquote><ul><li>Linux提供的Namespace类型</li></ul><table><thead><tr><th>Namespace名称</th><th>作用</th><th>内核版本</th></tr></thead><tbody><tr><td>Mount(mnt)</td><td>隔离挂载点</td><td>2.4.19</td></tr><tr><td>Process ID(pid)</td><td>隔离进程ID</td><td>2.6.24</td></tr><tr><td>Network(net)</td><td>隔离网络设备，端口号等</td><td>2.6.29</td></tr><tr><td>Interprocess Communication (ipc)</td><td>隔离 System V IPC 和 POSIX message queues</td><td>2.6.19</td></tr><tr><td>UTS Namespace(uts)</td><td>隔离主机名和域名</td><td>2.6.19</td></tr><tr><td>User Namespace (user)</td><td>隔离用户和用户组</td><td>3.8</td></tr><tr><td>Control group (cgroup) Namespace</td><td>隔离 Cgroups 根目录</td><td>4.6</td></tr><tr><td>Time Namespace</td><td>隔离系统时间</td><td>5.6</td></tr></tbody></table><ul><li>Namespace功能</li></ul><ol><li><p>Mount Namespace</p><blockquote><p>Mount Namespace是Linux内核实现的第一个Namespace,可以用来隔离不同的进程或进程组看到的挂载点。通俗地说，就是可以实现在不同的进程中看到不同的挂载目录。</p></blockquote></li><li><p>PID Namespace</p><blockquote><p>PID Namespace的作用是用来隔离进程。在不同的 PID Namespace 中，进程可以拥有相同的 PID 号，利用 PID Namespace 可以实现每个容器的主进程为 1 号进程，而容器内的进程在主机上却拥有不同的PID。</p></blockquote></li><li><p>UTS Namespace</p><blockquote><p>UTS Namespace 主要是用来隔离主机名的，它允许每个 UTS Namespace 拥有一个独立的主机名。</p></blockquote></li><li><p>IPC Namespace</p><blockquote><p>IPC Namespace 主要是用来隔离进程间通信的。例如 PID Namespace 和 IPC Namespace 一起使用可以实现同一 IPC Namespace 内的进程彼此可以通信，不同 IPC Namespace 的进程却不能通信。</p></blockquote></li><li><p>User Namespace</p><blockquote><p>User Namespace 主要是用来隔离用户和用户组的。一个比较典型的应用场景就是在主机上以非 root 用户运行的进程可以在一个单独的 User Namespace 中映射成 root 用户。使用 User Namespace 可以实现进程在容器内拥有 root 权限，而在主机上却只是普通用户。</p></blockquote></li><li><p>Net Namespace</p><blockquote><p>Net Namespace是用来隔离网络设备、IP地址和端口等信息的</p></blockquote></li></ol><ul><li>小结<blockquote><p>当Docker新建一个容器时,会创建这6种Namespace，来进行资源隔离。Namespace是Linux内核提供的特性，该特性可以实现在同一个主机上对<strong>进程ID__、__主机名__、用户ID、__文件名__、__网络和进程间通信等资源的隔离</strong></p></blockquote></li></ul><h4 id="cgrops"><a href="#cgrops" class="headerlink" title="cgrops"></a>cgrops</h4><blockquote><p>cgrops是linux内核提供限制进程或进程组使用资源(如CPU、内存、磁盘IO)的功能</p></blockquote><ul><li>cgrops功能</li></ul><ol><li>资源限制<blockquote><p>限制资源的使用量，例如我们可以通过限制某个业务的内存上限，从而保护主机其他业务的安全运行。</p></blockquote></li><li>优先级控制<blockquote><p>不同的组可以有不同的资源（ CPU 、磁盘 IO 等）使用优先级</p></blockquote></li><li>审计<blockquote><p>计算控制组的资源使用情况</p></blockquote></li><li>控制<blockquote><p>控制进程的挂起或恢复</p></blockquote></li></ol><blockquote><p>Docker 创建容器时，Docker 会根据启动容器的参数，在对应的 cgroups 子系统下创建以__容器ID__为名称的目录, 然后根据容器启动时设置的资源限制参数, 修改对应的 cgroups 子系统资源限制文件, 从而达到资源限制的效果。</p></blockquote><h4 id="Docker组件的构成"><a href="#Docker组件的构成" class="headerlink" title="Docker组件的构成"></a>Docker组件的构成</h4><p>Docker整体架构采用C/S架构，主要由客户端/服务端两大部分组成。客户端负责发送指令，服务端负责执行指令。</p><ul><li>Docker组件</li></ul><ol><li><p>docker</p><blockquote><p>docker是Docker客户端的一个完整实现，docker 组件向服务端发送请求后，服务端根据请求执行具体的动作并将结果返回给 docker，docker 解析服务端的返回结果，并将结果通过命令行标准输出展示给用户。</p></blockquote></li><li><p>dockerd</p><blockquote><p>dockerd 是 Docker 服务端的后台常驻进程，用来接收客户端发送的请求，执行具体的处理任务，处理完成后将结果返回给客户端</p></blockquote></li><li><p>docker-init</p><blockquote><p>docker-init是作为1号进程管理容器内的子进程</p></blockquote></li><li><p>docker-proxy</p><blockquote><p>docker-proxy主要是用来做端口映射。当我们使用 docker run 命令启动容器时，如果使用了 -p 参数，docker-proxy 组件就会把容器内相应的端口映射到主机上来，底层是依赖于 iptables 实现的。</p></blockquote></li><li><p>containerd</p><blockquote><p>containerd负责容器生命周期的管理、镜像的管理、dockerd的请求、管理存储、网络等相关资源。是容器标准化后的产物</p></blockquote></li><li><p>containerd-shim</p><blockquote><p>作为containerd和真正的容器进程的中间层</p></blockquote></li><li><p>runc</p><blockquote><p>runc 是一个标准的 OCI 容器运行时的实现，它是一个命令行工具，可以直接用来创建和运行容器。</p></blockquote></li></ol><h3 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h3><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker实战&quot;&gt;&lt;a href=&quot;#Docker实战&quot; class=&quot;headerlink&quot; title=&quot;Docker实战&quot;&gt;&lt;/a&gt;Docker实战&lt;/h2&gt;&lt;h3 id=&quot;基础命令&quot;&gt;&lt;a href=&quot;#基础命令&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Docker" scheme="https://agmtopy.gitee.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://agmtopy.gitee.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>ShardingSphere入门简介</title>
    <link href="https://agmtopy.gitee.io/2020/09/03/11.orm%E6%A1%86%E6%9E%B6/24.ShardingSpherez%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://agmtopy.gitee.io/2020/09/03/11.orm%E6%A1%86%E6%9E%B6/24.ShardingSpherez%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</id>
    <published>2020-09-02T16:06:06.000Z</published>
    <updated>2020-11-30T15:52:16.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ShardingSphere入门简介"><a href="#ShardingSphere入门简介" class="headerlink" title="ShardingSphere入门简介"></a>ShardingSphere入门简介</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><blockquote><p>ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。<a href="%5BShardingSphere%E5%AE%98%E7%BD%91%5D(https://shardingsphere.apache.org/)">^1</a></p></blockquote><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>数据分片拆分方式</p><ul><li><p>垂直拆分<br>  <b>垂直拆分</b>指的是专库专用，将不同业务的表拆分到对应的库中。微服务架构下已基本实现了垂直拆分。</p></li><li><p>水平拆分<br>  <b>水平拆分</b>指的是逻辑上相同的数据通过根据某种规则将数据分散存储到指定的数据节点中。</p></li></ul><p>产品组成</p><ul><li><p><b>Sharding-JDBC</b><br>  Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p></li><li><p><b>Sharding-Proxy</b><br>  Sharding-Proxy定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。</p></li><li><p><b>Sharding-Sidecar</b><br>  Sharding-Sidecar定位为Kubernetes的云原生数据库代理，以Sidecar的形式代理所有对数据库的访问，是想作为DB层面的数据网格。(规划中)</p></li></ul><h4 id="专有名词"><a href="#专有名词" class="headerlink" title="专有名词"></a>专有名词</h4><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>逻辑表</td><td>水平拆分的数据库（表）的相同逻辑和数据结构表的总称</td></tr><tr><td>真实表</td><td>在分片的数据库中真实存在的物理表</td></tr><tr><td>数据节点</td><td>数据分片的最小单位,由数据源名称和数据表组成(shema.tableName)</td></tr><tr><td>绑定表</td><td>绑定表是shardingSphere中特有的概念，指的是分片规则一致的主表和子表。如果指定互为绑定表，在进行联表查询时将不会出现笛卡尔积</td></tr><tr><td>广播表</td><td>广播表类似于mycat中的全局表,适用于作为字典</td></tr><tr><td>精确分片算法</td><td>用于处理使用单一键作为分片键的=与IN进行分片的场景</td></tr><tr><td>范围分片算法</td><td>用于处理使用单一键作为分片键的BETWEEN AND、&gt;、&lt;、&gt;=、&lt;=进行分片的场景</td></tr><tr><td>复合分片算法</td><td>用于处理使用多键作为分片键进行分片的场景</td></tr><tr><td>Hint分片算法</td><td>用于处理使用Hint行分片的场景(使用外部规则进行分片)</td></tr></tbody></table><h4 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h4><ul><li><p><b>数据分片</b></p><ol><li>分库 &amp; 分表</li><li>读写分离</li><li>分片策略定制化</li><li>无中心化分布式主键</li></ol></li><li><p><b>分布式事务</b></p><ol><li>标准化事务接口</li><li>XA强一致事务</li><li>柔性事务</li></ol></li><li><p><b>数据库治理</b></p><ol><li>配置动态化</li><li>编排 &amp; 治理</li><li>数据脱敏</li><li>可视化链路追踪</li></ol></li></ul><h3 id="sharding-jdbc"><a href="#sharding-jdbc" class="headerlink" title="sharding-jdbc"></a>sharding-jdbc</h3><h4 id="功能列表-1"><a href="#功能列表-1" class="headerlink" title="功能列表"></a>功能列表</h4><pre><code>1. 数据分片2. 读写分离3. 强制路由4. 数据脱敏</code></pre><h4 id="数据分片配置"><a href="#数据分片配置" class="headerlink" title="数据分片配置"></a>数据分片配置</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8080  tomcat:    uri-encoding: utf-8spring:  application:    name: shardingsphere-example  jpa:    properties:      hibernate:        enable_lazy_load_no_trans: true  shardingsphere:    datasource:      names: ds0,ds1      ds0:        type: com.zaxxer.hikari.HikariDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        jdbcUrl: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ds0?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT        username: root        password: 111111      ds1:        type: com.zaxxer.hikari.HikariDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        jdbcUrl: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ds1?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT        username: root        password: 111111      sharding:        default-database-strategy: # 分库规则          inline:            sharding-column: vender_id            algorithm-expression: ds$&#123;vender_id % 2&#125;        tables:          t_user:  #t_user表            key-generator-column-name: id  #主键            actual-data-nodes: ds$&#123;0..1&#125;.t_user$&#123;0..1&#125;    #真实数据节点            databaseStrategy: # 分库策略              inline:                sharding-column: vender_id # 分库键                algorithm-expression: ds$&#123;vender_id % 2&#125;            tableStrategy: #分表策略              inline: #行表达式                shardingColumn: vender_id                algorithmExpression: t_user$&#123;vender_id % 2&#125;    sharding: #读写分离配置      master-slave-rules:        ms_ds0:          masterDataSourceName: ds0 # 主库          slaveDataSourceNames:            - ds0_slave0 #从库            - ds0_slave1          loadBalanceAlgorithmType: ROUND_ROBIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jdbc不支持的操作"><a href="#jdbc不支持的操作" class="headerlink" title="jdbc不支持的操作"></a>jdbc不支持的操作</h4><ol><li>不支持存储过程，函数，游标的操作</li><li>不支持联表删除<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> TABLE_XXX1<span class="token punctuation">,</span> TABLE_xxx2 <span class="token keyword">FROM</span> TABLE_XXX1 <span class="token keyword">JOIN</span> TABLE_XXX2<span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> TABLE_XXX1<span class="token punctuation">,</span> TABLE_xxx2 <span class="token keyword">USING</span> TABLE_XXX1 <span class="token keyword">JOIN</span> TABLE_XXX2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>不建议使用子查询(4.x版本对子查询的优化不太好)</li></ol><h3 id="sharding-proxy"><a href="#sharding-proxy" class="headerlink" title="sharding-proxy"></a>sharding-proxy</h3><h4 id="功能列表-2"><a href="#功能列表-2" class="headerlink" title="功能列表"></a>功能列表</h4><pre><code>1. sharding-jdbc提供的功能2. 权限控制3. DB高可用管理</code></pre><h4 id="数据分片配置-1"><a href="#数据分片配置-1" class="headerlink" title="数据分片配置"></a>数据分片配置</h4><ul><li><p>server.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">authentication</span><span class="token punctuation">:</span><span class="token key atrule">users</span><span class="token punctuation">:</span><span class="token key atrule">root</span><span class="token punctuation">:</span>     <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">111111</span><span class="token key atrule">sharding</span><span class="token punctuation">:</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> sharding     <span class="token key atrule">authorizedSchemas</span><span class="token punctuation">:</span> sharding_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>config-sharding.yaml</p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> sharding_db<span class="token key atrule">dataSources</span><span class="token punctuation">:</span><span class="token key atrule">ds0</span><span class="token punctuation">:</span><span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/ds0<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span><span class="token key atrule">username</span><span class="token punctuation">:</span> root<span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">111111</span><span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span><span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span><span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span><span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token key atrule">ds1</span><span class="token punctuation">:</span><span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/ds1<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span><span class="token key atrule">username</span><span class="token punctuation">:</span> root<span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">111111</span><span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span><span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span><span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span><span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token key atrule">shardingRule</span><span class="token punctuation">:</span><span class="token key atrule">tables</span><span class="token punctuation">:</span><span class="token key atrule">t_order</span><span class="token punctuation">:</span>    <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds$<span class="token punctuation">&#123;</span>0..1<span class="token punctuation">&#125;</span>.t_user    <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>    <span class="token key atrule">inline</span><span class="token punctuation">:</span>        <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> vender_id        <span class="token key atrule">algorithmExpression</span><span class="token punctuation">:</span> ds$<span class="token punctuation">&#123;</span>vender_id % 2<span class="token punctuation">&#125;</span>    <span class="token key atrule">keyGenerator</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> SNOWFLAKE    <span class="token key atrule">column</span><span class="token punctuation">:</span> order_id<span class="token key atrule">defaultDatabaseStrategy</span><span class="token punctuation">:</span><span class="token key atrule">inline</span><span class="token punctuation">:</span>    <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> id    <span class="token key atrule">algorithmExpression</span><span class="token punctuation">:</span> ds$<span class="token punctuation">&#123;</span>id % 2<span class="token punctuation">&#125;</span><span class="token key atrule">defaultTableStrategy</span><span class="token punctuation">:</span>none<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>在部署sharding-proxy时需要将mysql driver在lib下</li><li>不建议使用子查询(4.x版本对子查询的优化不太好)</li><li>配置文件请以官网为准(5.x版本与4.x版本改动较大)</li></ol><h3 id="client与proxy对比"><a href="#client与proxy对比" class="headerlink" title="client与proxy对比"></a>client与proxy对比</h3><h4 id="功能对比"><a href="#功能对比" class="headerlink" title="功能对比"></a>功能对比</h4><table><thead><tr><th>/</th><th>Sharding-JDBC</th><th>Sharding-Proxy</th></tr></thead><tbody><tr><td>数据库连接</td><td>任意</td><td>MySql</td></tr><tr><td>连接消耗数</td><td>高</td><td>低</td></tr><tr><td>异构语言</td><td>仅java</td><td>任意</td></tr><tr><td>性能</td><td>损耗低</td><td>损耗略高</td></tr><tr><td>无中心化</td><td>是</td><td>否</td></tr><tr><td>静态入口</td><td>无</td><td>有</td></tr></tbody></table><h4 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h4><p>Sharding-JDBC与Sharding-Proxy保持相同的数据库、数据库连接配置、后端应用下进行测试</p><ul><li><p>单表插入<br><img src="https://s1.ax1x.com/2020/09/10/wY071U.png" alt="wY071U.png"></p></li><li><p>单表查询<br><img src="https://s1.ax1x.com/2020/09/10/wY0f7n.png" alt="wY0f7n.png"></p></li><li><p>结论<br>从耗时上比较单表插入的性能从高到低依次是Sharding-JDBC、JDBC、Sharding-Proxy<br>从耗时上比较单表查询的性能从高到低依次是Sharding-JDBC、JDBC、Sharding-Proxy</p></li></ul><h3 id="扩展部分"><a href="#扩展部分" class="headerlink" title="扩展部分"></a>扩展部分</h3><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><ul><li>Sharding-JDBC的数据分片的执行过程</li></ul><p><img src="https://s1.ax1x.com/2020/09/06/wmlLC9.png" alt="wmlLC9.png"></p><p>ShardingRouter.<strong>route()**方法作为路由的核心，主要是返回路由对象</strong>SQLRouteResult**,SQLRouteResult保存路由信息<br><img src="https://s1.ax1x.com/2020/05/19/Y4Fupq.png" alt="Y4Fupq.png"></p><p><strong>RouteResult</strong>对象会被返回到<strong>ShardingPreparedStatement</strong>中，这个类继承于<strong>java.sql.Statement</strong>,Statement是定义数据库进行交互并返回结果的接口</p><ul><li>ShardingPreparedStatement扩展的方法<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ShardingPreparedStatement</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractShardingPreparedStatementAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//分片连接</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ShardingConnection</span> connection<span class="token punctuation">;</span>        <span class="token comment">//执行sql</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">;</span>        <span class="token comment">//分片引擎</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PreparedQueryShardingEngine</span> shardingEngine<span class="token punctuation">;</span>        <span class="token comment">//执行器</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PreparedStatementExecutor</span> preparedStatementExecutor<span class="token punctuation">;</span>        <span class="token comment">//批处理执行器</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BatchPreparedStatementExecutor</span> batchPreparedStatementExecutor<span class="token punctuation">;</span>        <span class="token comment">//sql路由器</span>    <span class="token keyword">private</span> <span class="token class-name">SQLRouteResult</span> sqlRouteResult<span class="token punctuation">;</span>        <span class="token comment">//结果集</span>    <span class="token keyword">private</span> <span class="token class-name">ResultSet</span> currentResultSet<span class="token punctuation">;</span>    <span class="token comment">//实现executeQuery、executeUpdate、execute、getGeneratedKeys等方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="execute-方法进行具体的执行过程"><a href="#execute-方法进行具体的执行过程" class="headerlink" title="execute()方法进行具体的执行过程"></a>execute()方法进行具体的执行过程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//清除环境</span>        <span class="token function">clearPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//进行分片环境设置</span>        <span class="token function">shard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化预处理执行器</span>        <span class="token function">initPreparedStatementExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行</span>        <span class="token keyword">return</span> preparedStatementExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>initPreparedStatementExecutor()方法初始化预处理执行<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initPreparedStatementExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化执行器</span>    preparedStatementExecutor<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>sqlRouteResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置语句参数</span>    <span class="token function">setParametersForStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">replayMethodForStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>**preparedStatementExecutor.execute()**方法是具体执行的方法</p><p><img src="https://s1.ax1x.com/2020/05/20/Y7XsIA.png" alt="Y7XsIA.png"></p><p>1处将待执行sql封装成为回调对象，2处**executeCallback(executeCallback)**执行回调对象</p><ul><li>executeCallback在回调中执行sql</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Boolean</span> <span class="token function">executeSQL</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ConnectionMode</span> connectionMode<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>executeCallback()<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> sqlExecuteTemplate<span class="token punctuation">.</span><span class="token function">executeGroup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> executeGroups<span class="token punctuation">,</span> executeCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">refreshMetaDataIfNeeded</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getRuntimeContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sqlStatementContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>通过<strong>sqlExecuteTemplate.executeGroup</strong>执行方法，会将执行动作传递到执行引擎<strong>ShardingExecuteEngine</strong>的<strong>groupExecute</strong>方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token function">groupExecute</span><span class="token punctuation">(</span>    <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroups<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> firstCallback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> callback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> serial<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputGroups<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> serial <span class="token operator">?</span> <span class="token function">serialExecute</span><span class="token punctuation">(</span>inputGroups<span class="token punctuation">,</span> firstCallback<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">parallelExecute</span><span class="token punctuation">(</span>inputGroups<span class="token punctuation">,</span> firstCallback<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里<strong>同步执行方法</strong>和<strong>异步执行方法</strong>，并且将第一个任务交给当前线程进行处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token function">parallelExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroups<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> firstCallback<span class="token punctuation">,</span>                                       <span class="token keyword">final</span> <span class="token class-name">ShardingGroupExecuteCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> callback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShardingExecuteGroup</span><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span><span class="token punctuation">></span></span> inputGroupsIterator <span class="token operator">=</span> inputGroups<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ShardingExecuteGroup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span></span> firstInputs <span class="token operator">=</span> inputGroupsIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListenableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> restResultFutures <span class="token operator">=</span> <span class="token function">asyncGroupExecute</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>inputGroupsIterator<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果firstCallback有值就让当前线程进行执行，如果没值就返回线程池执行结果</span>    <span class="token keyword">return</span> <span class="token function">getGroupResults</span><span class="token punctuation">(</span><span class="token function">syncGroupExecute</span><span class="token punctuation">(</span>firstInputs<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token operator">==</span> firstCallback <span class="token operator">?</span> callback <span class="token operator">:</span> firstCallback<span class="token punctuation">)</span><span class="token punctuation">,</span> restResultFutures<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码很细心，不但使用到了当前线程来执行第一个任务，并且线程池也使用的是Guava提供的可回调的线程池<strong>ListeningExecutorService</strong>,可参考<a href="/2020/05/20/1.%E6%9D%82%E8%AE%B0/Guava%E7%9A%84%E4%BD%BF%E7%94%A8/#more">Guava的使用</a></p><p>在执行sql时候又会回到当初创建回调函数的地方进行执行回调方法。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ShardingSphere入门简介&quot;&gt;&lt;a href=&quot;#ShardingSphere入门简介&quot; class=&quot;headerlink&quot; title=&quot;ShardingSphere入门简介&quot;&gt;&lt;/a&gt;ShardingSphere入门简介&lt;/h2&gt;&lt;h3 id=&quot;概</summary>
      
    
    
    
    <category term="ShardingSphere" scheme="https://agmtopy.gitee.io/categories/ShardingSphere/"/>
    
    
    <category term="ShardingSphere" scheme="https://agmtopy.gitee.io/tags/ShardingSphere/"/>
    
  </entry>
  
  <entry>
    <title>日常碎碎念</title>
    <link href="https://agmtopy.gitee.io/2020/08/23/1.%E6%9D%82%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>https://agmtopy.gitee.io/2020/08/23/1.%E6%9D%82%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2020-08-23T14:28:20.000Z</published>
    <updated>2021-03-27T16:13:16.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><ol><li>TimerTask</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">RefreshTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reflesh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">reflesh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 拉去权限数据</span>    <span class="token comment">// 更新缓存数据</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>TimerTask在执行时，如果抛出异常不进行捕获就直接终止，建议使用ScheduledThreadPoolExecutor来替代</p></blockquote><ol start="2"><li>mycat全局表插入的时抛出索引重复<br>现象是mycat在插入时，抛出了索引重复但是再次查询时，确有数据<br>原因是因为mycat在查询时候只会随机查询一个分库中的数据，由于不同分库的主键序列不一样，导致每次插入时，id不一样，随后又通过id来进行删除，这样只会删除一个表的数据，导致数据未被删除的库再次插入时抛出索引重复。</li></ol><ul><li>mycat全局表随机选择库</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAliveRandomDataNode</span><span class="token punctuation">(</span><span class="token class-name">TableConfig</span> tc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> randomDns <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>tc<span class="token punctuation">.</span><span class="token function">getDataNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MycatConfig</span> mycatConfig <span class="token operator">=</span> <span class="token class-name">MycatServer</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mycatConfig <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将dataNodes随机排列</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>randomDns<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//省略...满足条件选取第一个dataNode</span><span class="token punctuation">&#125;</span><span class="token comment">// all fail return default</span><span class="token keyword">return</span> tc<span class="token punctuation">.</span><span class="token function">getRandomDataNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对重复数据的不同处理在1.6.x上对于重复数据是直接抛出异常，最新的版本则是返回修改值</li></ul><ol start="3"><li>查询端口占用情况<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 端口占用情况</span><span class="token function">netstat</span> -nap <span class="token operator">|</span><span class="token function">grep</span> <span class="token number">2181</span><span class="token comment"># 端口连接数</span><span class="token function">netstat</span> -na <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">2181</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;TimerTask&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;line-numbers language-java&quot;</summary>
      
    
    
    
    <category term="杂记" scheme="https://agmtopy.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="碎碎念" scheme="https://agmtopy.gitee.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
